<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.momo.mapper.SaleMapper">
    <select id="isDuplicatedTel" parameterType="com.momo.common.vo.SaleVO">
        select IF(count(*) > 0, true, false)
        from tb_sale
        where shop_id=#{shopId} and
              cust_tel=#{custTel} and
              MONTH(actv_dt) = MONTH(#{actvDt}) and
              YEAR(actv_dt) = YEAR(#{actvDt})
    </select>



    <select id="getSaleAll" parameterType="com.momo.common.vo.SaleSearchVO">
        with tb as (
            select s.*,
                (
                    select device_nm
                    from tb_device
                    where device_id=s.device_id
                    ) as device_nm,
                (
                    select ac.name
                    from tb_account ac
                    where ac.id = s.seller_id
                ) as seller_nm
            from tb_sale s
            where shop_id=(
                select ac2.curr_shop_id
                from tb_account ac2
                where ac2.id = #{userId}
                )
            )

        select *
        from tb
        where
        <if test="keyword != null and !keyword.equals('')">
            (
                cust_nm like '%${keyword}%' or
                cust_tel like '%${keyword}%' or
                cust_cd like '%${keyword}%'
            ) and
        </if>
        <if test="keydate != null">
            (
                actv_dt like '%${keydate}%'
            ) and
        </if>
        ${filters}
        1=1
        <if test="order != null and !order.equals('')">
            order by ${order} ${asc}
        </if>
<!--        <if test="limit != null and !limit.equals('')">-->
<!--            limit ${limit} ${offset}-->
<!--        </if>-->
    </select>

    <select id="getSaleTotalCount">
        select count(sale_id)
        from tb_sale
        where shop_id=(
            select curr_shop_id
            from tb_account
            where id=#{userId}
            )
    </select>

<!--    get sale-->
    <select id="getSaleOne">
        select s.*,
               (
                   select device_nm
                   from tb_device
                   where device_id=s.device_id
               ) as device_nm,
               (
                   select ac.name
                   from tb_account ac
                   where ac.id = s.seller_id
               ) as seller_nm,
                (
                select cp.ct_plan_nm
                from tb_ct_plan cp
                where cp.ct_plan_id=s.ct_actv_plan
               ) as ct_actv_plan_nm,
               (
                   select cp.ct_plan_nm
                   from tb_ct_plan cp
                   where cp.ct_plan_id=s.ct_dec_plan
               ) as ct_dec_plan_nm
        from tb_sale s
        where shop_id=(
            select ac2.curr_shop_id
            from tb_account ac2
            where ac2.id = #{userId}
        ) and sale_id=#{saleId}
    </select>

<!--    get sale category-->
    <select id="getSaleAsUsedDevice">
        SET @curr_shop_id := (
            SELECT curr_shop_id
            from tb_account
            WHERE id=#{userId}
            );

        WITH tb as (
            SELECT sl.sale_id,
                   sud.ud_id,
                    sud.ud_st,
                   sl.actv_dt,
                   sl.cust_nm,
                   sl.cust_tel,
                   sl.cust_cd,
                    sud.ud_nm,
                   sud.ud_cms,
                   sl.total_cms,
                   (
                       SELECT name
                       from tb_account
                       where id=#{userId}
                       ) as seller_nm
            from tb_sale_used_device sud
            left outer join tb_sale sl on sud.sale_id=sl.sale_id
            WHERE sud.shop_id=@curr_shop_id
        )

        SELECT *
        from tb
        WHERE
        <if test="completed != null and completed == true">
            ud_st = 2 and
        </if>
        <if test="keyword != null and !keyword.equals('')">
            (
                cust_nm like '%${keyword}%' or
                cust_tel like '%${keyword}%' or
                device_nm like '%${keyword}%'
            ) and
        </if>
        1=1
        <if test="order != null and !order.equals('')">
            order by ${order} ${asc}
        </if>
    </select>

    <select id="getSaleAsCard">
        SET @curr_shop_id := (
            SELECT curr_shop_id
            from tb_account
            WHERE id=#{userId}
        );

        WITH tb as (
            SELECT sl.sale_id,
                   sc.card_id,
                   sc.card_st,
                   sl.actv_dt,
                   sl.cust_nm,
                   sl.cust_tel,
                   sl.cust_cd,
                   sc.card_nm,
                   sc.card_tp,
                   (
                       SELECT name
                       from tb_account
                       where id=#{userId}
                   ) as seller_nm
            from tb_sale_card sc
                     left outer join tb_sale sl on sc.sale_id=sl.sale_id
            WHERE sc.shop_id=@curr_shop_id
        )

        SELECT *
        from tb
        WHERE
        <if test="completed != null and completed == true">
            card_st = 2 and
        </if>
        <if test="keyword != null and !keyword.equals('')">
            (
            cust_nm like '%${keyword}%' or
            cust_tel like '%${keyword}%' or
            cust_cd like '%${keyword}%' or
            seller_nm like '%${keyword}%'
            ) and
        </if>
        1=1
        <if test="order != null and !order.equals('')">
            order by ${order} ${asc}
        </if>
    </select>

    <select id="getSaleAsComb">
        SET @curr_shop_id := (
            SELECT curr_shop_id
            from tb_account
            WHERE id=#{userId}
        );

        WITH tb as (
            SELECT sl.sale_id,
                   sl.comb_st,
                   sl.actv_dt,
                   sl.cust_nm,
                   sl.cust_tel,
                   sl.cust_cd,
                   sl.comb_tp,
                   sl.comb_memo,
                   (
                       SELECT name
                       from tb_account
                       where id=#{userId}
                   ) as seller_nm
            from tb_sale sl
            WHERE sl.shop_id=@curr_shop_id and
                  sl.comb_tp is not null
        )

        SELECT *
        from tb
        WHERE
        <if test="completed != null and completed == true">
            comb_st = 1 and
        </if>
        <if test="keyword != null and !keyword.equals('')">
                (
                    cust_nm like '%${keyword}%' or
                    cust_tel like '%${keyword}%' or
                    cust_cd like '%${keyword}%' or
                    seller_nm like '%${keyword}%' or
                    comb_memo like '%${keyword}%' or
                    comb_tp like '%${keyword}%'
                ) and
            </if>
            1=1
            <if test="order != null and !order.equals('')">
                order by ${order} ${asc}
            </if>
    </select>

    <select id="getSaleAsSupport">
        SET @curr_shop_id := (
            SELECT curr_shop_id
            from tb_account
            WHERE id=#{userId}
        );

        WITH tb as (
            SELECT sl.sale_id,
                   ss.sup_id,
                   ss.sup_st,
                   sl.actv_dt,
                   sl.cust_nm,
                   sl.cust_tel,
                   sl.cust_cd,
                   ss.sup_div,
                   ss.sup_amount,
                   (
                       SELECT name
                       from tb_account
                       where id=#{userId}
                   ) as seller_nm
            from tb_sale_support ss
                     left outer join tb_sale sl on ss.sale_id=sl.sale_id
            WHERE ss.shop_id=@curr_shop_id
        )

        SELECT *
        from tb
        WHERE
        <if test="completed != null and completed == true">
            sup_st = 1 and
        </if>
        <if test="keyword != null and !keyword.equals('')">
            (
            cust_nm like '%${keyword}%' or
            cust_tel like '%${keyword}%' or
            cust_cd like '%${keyword}%' or
            seller_nm like '%${keyword}%'
            ) and
        </if>
        1=1
        <if test="order != null and !order.equals('')">
            order by ${order} ${asc}
        </if>
    </select>

    <select id="getSaleAsPromise">
        SET @curr_shop_id := (
        SELECT curr_shop_id
        from tb_account
        WHERE id=#{userId}
        );

        WITH tb as (
                SELECT distinct sl.sale_id,
                        sl.cust_nm,
                        sl.cust_tel,
                        sl.cust_cd,
                        sl.actv_dt
                from tb_promise pm
                left outer join tb_sale sl on pm.sale_id=sl.sale_id
                WHERE pm.shop_id=@curr_shop_id
        )

        SELECT *
        from tb
        WHERE
<!--        <if test="completed != null and completed == true">-->
<!--            card_st = 2 and-->
<!--        </if>-->
        <if test="keyword != null and !keyword.equals('')">
            (
                (
                select IFNULL(count(*),0)
                from tb_promise apm
                where apm.shop_id=@curr_shop_id and
                apm.sale_id=tb.sale_id and
                apm.content like '%${keyword}%'
                ) > 0 or
                cust_nm like '%${keyword}%' or
                cust_tel like '%${keyword}%'
            )
          and
        </if>
        1=1
        <if test="order != null and !order.equals('')">
            order by ${order} ${asc}
        </if>
    </select>

<!--    promise-->
    <update id="changePromiseState">
        UPDATE tb_promise
        SET checked=#{checked}
        WHERE shop_id=(
            SELECT curr_shop_id
            from tb_account
            WHERE id=#{userId}
            ) and
            sale_id=#{saleId} and
            pm_id=#{pmId}
    </update>


    <!--    진행현황 관리-->
    <update id="changeUsedDeviceState">
        UPDATE tb_sale_used_device
        SET ud_st=#{state}
        WHERE shop_id=(
            SELECT  curr_shop_id
            FROM tb_account
            WHERE id=#{userId}
        ) and
            sale_id=#{saleId} and
            ud_id=#{udId}
    </update>

    <update id="changeCardState">
        UPDATE tb_sale_card
        SET card_st=#{state}
        WHERE shop_id=(
            SELECT  curr_shop_id
            FROM tb_account
            WHERE id=#{userId}
        ) and
            sale_id=#{saleId} and
            card_id=#{cardId}
    </update>

    <update id="changeCombState">
        UPDATE tb_sale
        SET comb_st=#{state}
        WHERE shop_id=(
            SELECT  curr_shop_id
            FROM tb_account
            WHERE id=#{userId}
        ) and
            sale_id=#{saleId}
    </update>

    <update id="changeSupportState">
        UPDATE tb_sale_support
        SET sup_st=#{state}
        WHERE shop_id=(
            SELECT  curr_shop_id
            FROM tb_account
            WHERE id=#{userId}
        ) and
            sale_id=#{saleId} and
            sup_id=#{supId}
    </update>


<!--    update-->

    <update id="updateSale" parameterType="com.momo.common.vo.SaleVO">
        UPDATE tb_sale
        SET actv_dt = #{actvDt},
            provider = #{provider},
            seller_id = #{sellerId},
            cust_nm = #{custNm},
            cust_gd = #{custGd},
            cust_tel = #{custTel},
            cust_cd = #{custCd},
            ct_actv_div = #{ctActvDiv},
            device_id = #{deviceId},
            ct_actv_plan = #{ctActvPlan},
            ct_dec_plan = #{ctDecPlan},
            ct_actv_tp = #{ctActvTp},
            device_stor = #{deviceStor},
            ct_istm = #{ctIstm},
            ct_cms = #{ctCms},
            wt_actv_tp = #{wtActvTp},
            wt_cms = #{wtCms},
            internet_plan = #{internetPlan},
            tv_plan = #{tvPlan},
            sd_id = #{sdId},
            exsvc_id = #{exsvcId},
            comb_tp = #{combTp},
            comb_memo = #{combMemo},
            family = #{family},
            friend = #{friend},
            sale_memo=#{saleMemo},
            estimate=#{estimate},
            docs=#{docs}
        where sale_id=#{saleId}
    </update>

    <delete id="deleteSale">
        delete from tb_sale
        where sale_id=#{saleId}
        and shop_id=(
            select curr_shop_id
            from tb_account
            where id=#{userId}
            )
    </delete>

    <insert id="insertSale" parameterType="com.momo.common.vo.SaleVO">
        set @shop_id := (
            select curr_shop_id
            from tb_account
            where id= #{userId}
            );

        SET @next_sale_id := (
            select IFNULL(max(sale_id)+1,1)
            from tb_sale
            );

        INSERT INTO tb_sale
        (shop_id, sale_id, cust_nm, cust_tel, cust_cd, cust_gd, provider, actv_dt,
         device_id, device_stor, ct_istm, ct_actv_div, ct_actv_tp, ct_actv_plan, ct_dec_plan,
         ct_cms, sd_id, comb_tp, comb_memo,
         wt_actv_tp, wt_cms, internet_plan, tv_plan, exsvc_id, family,
         friend, seller_id, estimate, docs, sale_memo, total_cms)
        VALUES (@shop_id,@next_sale_id, #{custNm},#{custTel},#{custCd},#{custGd},
                #{provider},#{actvDt},#{deviceId},#{deviceStor},#{ctIstm},#{ctActvDiv},#{ctActvTp},#{ctActvPlan},
                #{ctDecPlan},#{ctCms},#{sdId},#{combTp},
                #{combMemo},#{wtActvTp},#{wtCms},#{internetPlan},#{tvPlan},
                #{exsvcId},#{family},#{friend},#{sellerId},#{estimate},#{docs},#{saleMemo},#{totalCms})
    </insert>

<!--    고객약속, 추가, 지원, 카드, 중고폰  -->

    <select id="getMaxSaleId">
        SELECT IFNULL(max(sale_id),0)
        from tb_sale
        WHERE shop_id=(
            select curr_shop_id
            from tb_account
            where id=#{userId}
            )
    </select>

<!--    get-->
    <select id="getSalePromiseDetail">
        SELECT pm_id,
               checked,
               content
        from tb_promise
        where sale_id=#{saleId} and
            shop_id = (
                select curr_shop_id
                from tb_account
                where id=#{userId}
            )
    </select>

    <select id="getSaleSupportDetail">
        SELECT sup_div,
               sup_amount
        from tb_sale_support
        where sale_id=#{saleId} and
              shop_id = (
                  select curr_shop_id
                  from tb_account
                  where id=#{userId}
                  )
    </select>

    <select id="getSaleAddDetail">
        SELECT add_div,
               add_amount
        from tb_sale_add
        where sale_id=#{saleId} and
            shop_id = (
                select curr_shop_id
                from tb_account
                where id=#{userId}
            )
    </select>

    <select id="getSaleCardDetail">
        SELECT card_tp,
               card_nm
        from tb_sale_card
        where sale_id=#{saleId} and
            shop_id = (
                select curr_shop_id
                from tb_account
                where id=#{userId}
            )
    </select>

    <select id="getSaleUsedDeviceDetail">
        SELECT ud_nm,
               ud_stor
        from tb_sale_used_device
        where sale_id=#{saleId} and
            shop_id = (
                select curr_shop_id
                from tb_account
                where id=#{userId}
            )
    </select>


<!--    insert-->
    <insert id="insertSalePromise" parameterType="com.momo.common.vo.SalePromiseVO">
        set @curr_shop_id := (
            select curr_shop_id
            from tb_account
            where id=#{userId}
        );

        INSERT INTO tb_promise
            (shop_id, sale_id, pm_id, checked, content)
        VALUES
        <foreach collection="list" index="index" item="item" open="(" close=")" separator="), (">
            (
            select curr_shop_id
            from tb_account
            where id=#{userId}
            ),#{saleId},#{index}+1,#{item.checked},#{item.content}
        </foreach>
    </insert>

    <insert id="insertSaleSupport" parameterType="com.momo.common.vo.SaleSupportVO">
        set @curr_shop_id := (
            select curr_shop_id
            from tb_account
            where id=#{userId}
        );


        INSERT INTO tb_sale_support
        (shop_id, sale_id, sup_id, sup_div, sup_amount)
        VALUES
        <foreach collection="list" index="index" item="item" open="(" close=")" separator="), (">
            (
            select curr_shop_id
            from tb_account
            where id=#{userId}
            ),#{saleId},#{index}+1,#{item.supDiv},#{item.supAmount}
        </foreach>
    </insert>

    <insert id="insertSaleAdd" parameterType="com.momo.common.vo.SaleAddVO">
        set @curr_shop_id := (
            select curr_shop_id
            from tb_account
            where id=#{userId}
        );

        INSERT INTO tb_sale_add
            (shop_id, sale_id, add_id, add_div, add_amount)
        VALUES
        <foreach collection="list" index="index" item="item" open="(" close=")" separator="), (">
            (
            select curr_shop_id
            from tb_account
            where id=#{userId}
            ),#{saleId},#{index}+1,#{item.addDiv},#{item.addAmount}
        </foreach>
    </insert>

    <insert id="insertSaleCard" parameterType="com.momo.common.vo.SaleCardVO">
        set @curr_shop_id := (
            select curr_shop_id
            from tb_account
            where id=#{userId}
        );

        INSERT INTO tb_sale_card
            (shop_id, sale_id, card_id, card_nm, card_tp)
        VALUES
        <foreach collection="list" index="index" item="item" open="(" close=")" separator="), (">
            (
            select curr_shop_id
            from tb_account
            where id=#{userId}
            ),#{saleId},#{index}+1,#{item.cardNm},#{item.cardTp}
        </foreach>
    </insert>

    <insert id="insertSaleUsedDevice" parameterType="com.momo.common.vo.SaleUsedDeviceVO">
        set @curr_shop_id := (
            select curr_shop_id
            from tb_account
            where id=#{userId}
        );

        INSERT INTO tb_sale_used_device
            (shop_id, sale_id, ud_id, ud_nm, ud_stor)
        VALUES
        <foreach collection="list" index="index" item="item" open="(" close=")" separator="), (">
            (
            select curr_shop_id
            from tb_account
            where id=#{userId}
            ),#{saleId},#{index}+1,#{item.udNm},#{item.udStor}
        </foreach>
    </insert>

<!--    update-->
    <update id="updateSaleAsPromise">
        UPDATE tb_promise
        SET checked=#{checked},
            content=#{content}
        WHERE shop_id = (
            select curr_shop_id
            from tb_account
            where id=#{userId}
        ) and
            sale_id=#{saleId} and
            pm_id=#{pmId}
    </update>

    <update id="updateSaleSupport">
        UPDATE tb_sale_support
        SET sup_div=#{div},
            sup_amount=#{amount}
        WHERE shop_id = (
                            select curr_shop_id
                            from tb_account
                            where id=#{userId}
                        ) and
              sale_id=#{saleId} and
              sup_id=#{supId}
    </update>

    <update id="updateSaleAdd">
        UPDATE tb_sale_add
        SET add_div=#{div},
            add_amount=#{amount}
        WHERE shop_id = (
            select curr_shop_id
            from tb_account
            where id=#{userId}
        ) and
            sale_id=#{saleId} and
            add_id=#{addId}
    </update>

    <update id="updateSaleCard">
        UPDATE tb_sale_card
        SET card_nm=#{cardNm},
            card_tp=#{cardTp}
        WHERE shop_id = (
            select curr_shop_id
            from tb_account
            where id=#{userId}
        ) and
            sale_id=#{saleId} and
            card_id=#{cardId}
    </update>

    <update id="updateSaleUsedDevice">
        UPDATE tb_sale_used_device
        SET ud_nm=#{udNm},
            ud_stor=#{udStor}
        WHERE shop_id = (
            select curr_shop_id
            from tb_account
            where id=#{userId}
        ) and
            sale_id=#{saleId} and
            ud_id=#{udId}
    </update>

<!--    count-->
    <select id="getSaleTotalPromiseCount">
        SELECT count(*)
        from tb_promise
        where shop_id = (
            select curr_shop_id
            from tb_account
            where id=#{userId}
            )
        group by sale_id
    </select>

    <select id="getSaleTotalSupportCount">
        SELECT count(*)
        from tb_sale_support
        where shop_id = (
            select curr_shop_id
            from tb_account
            where id=#{userId}
        )
    </select>

<!--    <select id="getSaleAddCount">-->
<!--        SELECT count(*)-->
<!--        from tb_sale_add-->
<!--        where shop_id = (-->
<!--            select curr_shop_id-->
<!--            from tb_account-->
<!--            where id=#{userId}-->
<!--        ) and-->
<!--            sale_id=#{saleId}-->
<!--    </select>-->

    <select id="getSaleTotalCardCount">
        SELECT count(*)
        from tb_sale_card
        where shop_id = (
            select curr_shop_id
            from tb_account
            where id=#{userId}
        )
    </select>

    <select id="getSaleTotalCombCount">
        SELECT count(*)
        from tb_sale
        where shop_id = (
            select curr_shop_id
            from tb_account
            where id=#{userId}
        ) and
            comb_tp is not null
    </select>

    <select id="getSaleTotalUsedDeviceCount">
        SELECT count(*)
        from tb_sale_used_device
        where shop_id = (
            select curr_shop_id
            from tb_account
            where id=#{userId}
        )
    </select>

<!--    delete-->
    <delete id="deleteSalePromise">
        DELETE FROM tb_promise
        WHERE shop_id=(
            select curr_shop_id
            from tb_account
            where id=#{userId}
            ) and
            sale_id=#{saleId} and
            pm_id=#{pmId}
    </delete>

    <delete id="deleteSaleSupport">
        DELETE FROM tb_sale_support
        WHERE shop_id=(
            select curr_shop_id
            from tb_account
            where id=#{userId}
        ) and
            sale_id=#{saleId} and
            sup_id=#{supId}
    </delete>

    <delete id="deleteSaleAdd">
        DELETE FROM tb_sale_add
        WHERE shop_id=(
            select curr_shop_id
            from tb_account
            where id=#{userId}
        ) and
            sale_id=#{saleId} and
            add_id=#{addId}
    </delete>

    <delete id="deleteSaleCard">
        DELETE FROM tb_sale_card
        WHERE shop_id=(
            select curr_shop_id
            from tb_account
            where id=#{userId}
        ) and
            sale_id=#{saleId} and
            card_id=#{cardId}
    </delete>

    <delete id="deleteSaleUsedDevice">
        DELETE FROM tb_sale_used_device
        WHERE shop_id=(
            select curr_shop_id
            from tb_account
            where id=#{userId}
        ) and
            sale_id=#{saleId} and
            ud_id=#{udId}
    </delete>

<!--    delete all-->
    <delete id="deleteAllSalePromise">
        DELETE FROM tb_promise
        WHERE shop_id=(
            select curr_shop_id
            from tb_account
            where id=#{userId}
        ) and
            sale_id=#{saleId}
    </delete>

    <delete id="deleteAllSaleSupport">
        DELETE FROM tb_sale_support
        WHERE shop_id=(
            select curr_shop_id
            from tb_account
            where id=#{userId}
        ) and
            sale_id=#{saleId}
    </delete>

    <delete id="deleteAllSaleAdd">
        DELETE FROM tb_sale_add
        WHERE shop_id=(
            select curr_shop_id
            from tb_account
            where id=#{userId}
        ) and
            sale_id=#{saleId}
    </delete>

    <delete id="deleteAllSaleCard">
        DELETE FROM tb_sale_card
        WHERE shop_id=(
            select curr_shop_id
            from tb_account
            where id=#{userId}
        ) and
            sale_id=#{saleId}
    </delete>

    <delete id="deleteAllSaleUsedDevice">
        DELETE FROM tb_sale_used_device
        WHERE shop_id=(
            select curr_shop_id
            from tb_account
            where id=#{userId}
        ) and
            sale_id=#{saleId}
    </delete>

<!--    메인 페이지 (Dashboard)-->
<!--    각 항목별 요약 (판매 금액/개수, 전월대비 증가/감소량 퍼센트 )-->
    <select id="getSummary">
        SET @curr_shop_id :=(
            SELECT curr_shop_id
            FROM tb_account
            WHERE id=#{userId}
            );


        with prevMonth as (
            SELECT *
            FROM tb_sale
            WHERE shop_id=@curr_shop_id and
                actv_dt like '${prevDate}%'
        ), currMonth as (
            SELECT *
            FROM tb_sale
            WHERE shop_id=@curr_shop_id and
                actv_dt like '${currDate}%'
        ) , tb as (
            SELECT
                (
                    SELECT IFNULL(count(*), 0)
                    FROM prevMonth
                    WHERE device_id != 0
                    ) as prev,
                (
                    SELECT IFNULL(count(*), 0)
                    FROM currMonth
                    WHERE device_id != 0
                ) as curr
            from dual
            UNION ALL
            SELECT
                (
                    SELECT IFNULL(count(*), 0)
                    FROM prevMonth
                    WHERE internet_plan != 0
                ) as prev,
                (
                    SELECT IFNULL(count(*), 0)
                    FROM currMonth
                    WHERE internet_plan != 0
                ) as curr
            from dual
            UNION ALL
            SELECT
                (
                    SELECT IFNULL(count(*), 0)
                    FROM prevMonth
                    WHERE tv_plan != 0
                ) as prev,
                (
                    SELECT IFNULL(count(*), 0)
                    FROM currMonth
                    WHERE tv_plan != 0
                ) as curr
            from dual
            UNION ALL
            SELECT
                (
                    SELECT SUM(total_cms)
                    FROM prevMonth
                ) as prev,
                (
                    SELECT SUM(total_cms)
                    FROM currMonth
                ) as curr
            from dual
            UNION ALL
            SELECT
                (
                    SELECT AVG(total_cms)
                    FROM prevMonth
                ) as prev,
                (
                    SELECT AVG(total_cms)
                    FROM currMonth
                ) as curr
            from dual
        )

        SELECT FLOOR(curr) as value,
               (
                   CASE
                       WHEN curr = 0 THEN 0
                       WHEN prev = 0 THEN 100
                       WHEN prev != 0 THEN TRUNCATE(((curr/prev)-1)*100, 1)
                   END
                   ) as pct
        FROM tb
    </select>

<!--    // 판매일보 대비 항목(카드/세컨/부가서비스) 비율 (항목 개수)-->
    <select id="getSaleRatio">
        SET @curr_shop_id :=  (
            SELECT curr_shop_id
            FROM tb_account
            WHERE id=#{userId}
        );

        SET @total_sale_count := (
            SELECT count(*)
            FROM tb_sale
            WHERE shop_id=@curr_shop_id and
                actv_dt like '${date}%'
        );

        with tb as (
            SELECT count(*) as curr
            FROM tb_sale_card sc
                     LEFT OUTER JOIN tb_sale sl on sl.sale_id=sc.sale_id
            WHERE sc.shop_id=@curr_shop_id and
                actv_dt like '${date}%'
            UNION ALL
            SELECT count(*) as curr
            FROM tb_sale
            WHERE shop_id=(
                SELECT curr_shop_id
                FROM tb_account
                WHERE id=#{userId}
            ) and
                actv_dt like '${date}%' and
                sd_id != 0
            UNION ALL
            SELECT count(*) as curr
            FROM tb_sale
            WHERE shop_id=(
                SELECT curr_shop_id
                FROM tb_account
                WHERE id=#{userId}
            ) and
                actv_dt like '${date}%' and
                exsvc_id != 0
        )

        SELECT
            curr as value,
            @total_sale_count as total,
            (
                CASE
                    WHEN @total_sale_count = 0 THEN 100
                    WHEN @total_sale_count != 0 THEN TRUNCATE(((curr/@total_sale_count))*100, 1)
                    END
                ) as pct
        FROM tb
    </select>

<!--    각 항목별 진행 현황 (완료 개수, 총 개수)-->
    <select id="getWorkInProcess">
        SET @curr_shop_id :=  (
            SELECT curr_shop_id
            FROM tb_account
            WHERE id=#{userId}
        );

        with table_ud as (
            SELECT ud_st
            FROM tb_sale_used_device sud
            LEFT OUTER JOIN tb_sale sl on sl.sale_id=sud.sale_id
            WHERE sud.shop_id=@curr_shop_id and
                actv_dt like '${date}%'
        ), table_card as (
            SELECT card_st
            FROM tb_sale_card sc
            LEFT OUTER JOIN tb_sale sl on sl.sale_id=sc.sale_id
            WHERE sc.shop_id=@curr_shop_id and
                actv_dt like '${date}%'
        ), table_comb as (
            SELECT comb_st
            FROM tb_sale
            WHERE shop_id=@curr_shop_id and
                actv_dt like '%${date}%'
        ), table_sup as (
            SELECT sup_st
            FROM tb_sale_support sc LEFT OUTER JOIN tb_sale sl on sl.sale_id=sc.sale_id
            WHERE sc.shop_id=@curr_shop_id and
                actv_dt like '%${date}%'
        ), table_pm as (
            SELECT checked
            FROM tb_promise sc
                LEFT OUTER JOIN tb_sale sl on sl.sale_id=sc.sale_id
            WHERE sc.shop_id=@curr_shop_id and
                actv_dt like '%${date}%'
        ), rst as (
            SELECT
                (
                    SELECT count(*)
                    FROM table_ud
                    WHERE ud_st=2
                ) as value,
                (
                    SELECT count(*)
                    FROM table_ud
                ) as total
            UNION ALL
            SELECT
                (
                    SELECT count(*)
                    FROM table_card
                    WHERE card_st=2
                ) as value,
                (
                    SELECT count(*)
                    FROM table_card
                ) as total
            UNION ALL
            SELECT
                (
                    SELECT count(*)
                    FROM table_comb
                    WHERE comb_st=1
                ) as value,
                (
                    SELECT count(*)
                    FROM table_comb
                ) as total
            UNION ALL
            SELECT
                (
                    SELECT count(*)
                    FROM table_sup
                    WHERE sup_st=1
                ) as value,
                (
                    SELECT count(*)
                    FROM table_sup
                ) as total
            UNION ALL
            SELECT
                (
                    SELECT count(*)
                    FROM table_pm
                    WHERE checked=1
                ) as value,
                (
                    SELECT count(*)
                    FROM table_pm
                ) as total
        )

        SELECT value,
               total,
               (
                   CASE
                       WHEN total = 0 and value !=0 THEN 100
                       WHEN total = 0 and value =0 THEN 0
                       WHEN total != 0 THEN TRUNCATE(((rst.value/total))*100, 1)
                       END
                   ) as pct
        FROM rst
    </select>

<!--    // 각 항목별 전월 대비 증가/감소량-->
    <select id="getCtChangeAmount">
        SET @curr_shop_id := (
            SELECT curr_shop_id
            FROM tb_account
            WHERE id=#{userId}
            );

        with tb as (
            SELECT
                (
                    SELECT count(*)
                    FROM tb_sale
                    WHERE shop_id=@curr_shop_id and
                          device_id != 0 and
                          actv_dt BETWEEN #{prevFromYmd} AND #{prevToYmd}
                    ) as prev,
                (
                    SELECT count(*)
                    FROM tb_sale
                    WHERE shop_id=@curr_shop_id and
                        device_id != 0 and
                        actv_dt BETWEEN #{currFromYmd} AND #{currToYmd}
                ) as curr
            FROM DUAL
        )

        SELECT tb.curr - tb.prev
        FROM tb
    </select>

    <select id="getInternetChangeAmount">
        SET @curr_shop_id := (
            SELECT curr_shop_id
            FROM tb_account
            WHERE id=#{userId}
        );

        with tb as (
            SELECT
                (
                    SELECT count(*)
                    FROM tb_sale
                    WHERE shop_id=@curr_shop_id and
                        internet_plan != 0 and
                        actv_dt BETWEEN #{prevFromYmd} AND #{prevToYmd}
                ) as prev,
                (
                    SELECT count(*)
                    FROM tb_sale
                    WHERE shop_id=@curr_shop_id and
                        internet_plan != 0 and
                        actv_dt BETWEEN #{currFromYmd} AND #{currToYmd}
                ) as curr
            FROM DUAL
        )

        SELECT tb.curr - tb.prev
        FROM tb
    </select>

    <select id="getTvChangeAmount">
        SET @curr_shop_id := (
            SELECT curr_shop_id
            FROM tb_account
            WHERE id=#{userId}
        );

        with tb as (
            SELECT
                (
                    SELECT count(*)
                    FROM tb_sale
                    WHERE shop_id=@curr_shop_id and
                        tv_plan != 0 and
                        actv_dt BETWEEN #{prevFromYmd} AND #{prevToYmd}
                ) as prev,
                (
                    SELECT count(*)
                    FROM tb_sale
                    WHERE shop_id=@curr_shop_id and
                        tv_plan != 0 and
                        actv_dt BETWEEN #{currFromYmd} AND #{currToYmd}
                ) as curr
            FROM DUAL
        )

        SELECT tb.curr - tb.prev
        FROM tb
    </select>

    <select id="getTotalCmsChangeAmount">
        SET @curr_shop_id := (
            SELECT curr_shop_id
            FROM tb_account
            WHERE id=#{userId}
        );

        with tb as (
            SELECT
                (
                    SELECT SUM(total_cms)
                    FROM tb_sale
                    WHERE shop_id=@curr_shop_id and
                        actv_dt BETWEEN #{prevFromYmd} AND #{prevToYmd}
                ) as prev,
                (
                    SELECT SUM(total_cms)
                    FROM tb_sale
                    WHERE shop_id=@curr_shop_id and
                        actv_dt BETWEEN #{currFromYmd} AND #{currToYmd}
                ) as curr
            FROM DUAL
        )

        SELECT tb.curr - tb.prev
        FROM tb
    </select>

    <select id="getAvgCmsChangeAmount">
        SET @curr_shop_id := (
            SELECT curr_shop_id
            FROM tb_account
            WHERE id=#{userId}
        );

        with tb as (
            SELECT
                (
                    SELECT AVG(total_cms)
                    FROM tb_sale
                    WHERE shop_id=@curr_shop_id and
                        actv_dt BETWEEN #{prevFromYmd} AND #{prevToYmd}
                ) as prev,
                (
                    SELECT AVG(total_cms)
                    FROM tb_sale
                    WHERE shop_id=@curr_shop_id and
                        actv_dt BETWEEN #{currFromYmd} AND #{currToYmd}
                ) as curr
            FROM DUAL
        )

        SELECT FLOOR(tb.curr - tb.prev)
        FROM tb
    </select>


<!--    그래프 페이지-->
<!--    그래프 요약-->
    <select id="getGraphSummary">
        <![CDATA[
        SET @curr_shop_id := (
            SELECT curr_shop_id
            FROM tb_account
            WHERE id=#{userId}
        );

#         월별 날짜 구하기
        with recursive month_range as (
            select #{fromYmd} as d
            union all
            select date_add(d, interval 1 month) as d
            from month_range
            where date_add(d, interval 1 month) < #{toYmd}
        ), months as(
            select month(d) as m
            from month_range
        ), filtered_sale as ( # 판매일보 초벌
            select month(actv_dt) as actv_month,
                   device_id,
                   internet_plan,
                   tv_plan,
                   total_cms,
                   wt_cms,
                   sale_id,
                   sd_id
            from tb_sale
            where shop_id=@curr_shop_id and
                seller_id=#{userId} and
                actv_dt between #{fromYmd} and date_add(#{toYmd}, interval 1 month)
        ), ct_graph as ( # 무선 그래프 데이터
            SELECT m,
                   count(device_id) as cnt
            FROM months
                     LEFT OUTER JOIN filtered_sale on actv_month = m and
                                                      device_id!=0
            group by m
        ), internet_graph as ( # 인터넷 그래프 데이터
            SELECT m,
                   count(internet_plan) as cnt
            FROM months
                     LEFT OUTER JOIN filtered_sale on actv_month = m  and
                                                      internet_plan !=0
            group by m
        ), tv_graph as ( # TV 그래프 데이터
            SELECT m,
                   count(tv_plan) as cnt
            FROM months
                     LEFT OUTER JOIN filtered_sale on actv_month = m  and
                                                      tv_plan !=0
            group by m
        ), tc_graph as ( # 총 이익 그래프 데이터
            SELECT m,
                   IFNULL(sum(total_cms), 0) as cnt
            FROM months
                     LEFT OUTER JOIN filtered_sale on actv_month = m
            group by m
        ), margin_table as (
            select *
            from filtered_sale
        ), margin_graph as ( # 개인 평균 마진 그래프 데이터
            SELECT m,
                   IFNULL(avg(total_cms), 0) as cnt
            FROM months
                     LEFT OUTER JOIN filtered_sale on actv_month = m
            group by m
        ), ud_graph as ( # 중고 개통 그래프 데이터
            SELECT m,
                   count(ud_id) as cnt
            FROM months
                     LEFT OUTER JOIN filtered_sale on actv_month = m
                     LEFT OUTER JOIN tb_sale_used_device sud on sud.sale_id=filtered_sale.sale_id
            group by m
        ), sec_graph as ( # 세컨 그래프 데이터
            SELECT m,
                   count(sd_id) as cnt
            FROM months
                     LEFT OUTER JOIN filtered_sale on actv_month = m and
                                                      sd_id != 0
            group by m
        ), diff_ct as (
            select
                (
                    select cnt
                    from ct_graph
                    limit 4, 1
                ) as prv,
                (
                    select cnt
                    from ct_graph
                    limit 5,1
                ) as curr
            from dual
        ), diff_internet as (
            select
                (
                    select cnt
                    from internet_graph
                    limit 4,1
                ) as prv,
                (
                    select cnt
                    from internet_graph
                    limit 5,1
                ) as curr
            from dual
        ), diff_tv as (
            select
                (
                    select cnt
                    from tv_graph
                    limit 4,1
                ) as prv,
                (
                    select cnt
                    from tv_graph
                    limit 5,1
                ) as curr
            from dual
        ), diff_tc as (
            select
                (
                    select cnt
                    from tc_graph
                    limit 4,1
                ) as prv,
                (
                    select cnt
                    from tc_graph
                    limit 5,1
                ) as curr
            from dual
        ) , diff_margin as (
            select
                (
                    select cnt
                    from margin_graph
                    limit 4,1
                ) as prv,
                (
                    select cnt
                    from margin_graph
                    limit 5,1
                ) as curr
            from dual
        ), diff_ud as (
            select
                (
                    select cnt
                    from ud_graph
                    limit 4,1
                ) as prv,
                (
                    select cnt
                    from ud_graph
                    limit 5,1
                ) as curr
            from dual
        ) , diff_sec as (
            select
                (
                    select cnt
                    from sec_graph
                    limit 4,1
                ) as prv,
                (
                    select cnt
                    from sec_graph
                    limit 5,1
                ) as curr
            from dual
        ), final as (
            select
                curr,
                prv,
                (
                    select json_arrayagg(cnt)
                    from ct_graph
                ) as list
            from diff_ct
            union all
            select
                curr,
                prv,
                (
                    select json_arrayagg(cnt)
                    from internet_graph
                ) as list
            from diff_internet
            union all
            select
                curr,
                prv,
                (
                    select json_arrayagg(cnt)
                    from tv_graph
                ) as list
            from diff_tv
            union all
            select
                curr,
                prv,
                (
                    select json_arrayagg(cnt)
                    from tc_graph
                ) as list
            from diff_tc
            union all
            select
                curr,
                prv,
                (
                    select json_arrayagg(cnt)
                    from margin_graph
                ) as list
            from diff_margin
            union all
            select
                curr,
                prv,
                (
                    select json_arrayagg(cnt)
                    from ud_graph
                ) as list
            from diff_ud
            union all
            select
                curr,
                prv,
                (
                    select json_arrayagg(cnt)
                    from sec_graph
                ) as list
            from diff_sec
        )

        select FLOOR(curr) as value,
               (
                   CASE
                       WHEN curr = 0 and prv = 0 THEN 0
                       WHEN prv != 0 and curr = 0 THEN -100
                       WHEN prv = 0 and curr != 0 THEN 100
                       WHEN curr != 0 and prv != 0 THEN TRUNCATE(((curr/prv)-1)*100, 1)
                       END
                   ) as per,
               list
        from final
        ]]>
    </select>

    <select id="getCtGraphByDateType">
    <![CDATA[
        SET @curr_shop_id := (
            SELECT curr_shop_id
            FROM tb_account
            WHERE id=#{userId}
        );


        with recursive org_date_table as (
            select (
                       case
                           when #{dateType} = 'h' then '2000-01-01'
                           when #{dateType} != 'h' then #{fromYmd}
                           end
                       ) as it
            union all
            select (
                       case #{dateType}
                           when 'h' then date_add(it, interval 1 day)
                           when 'd' then date_add(it, interval 1 day)
                           when 'w' then date_add(it, interval 1 week)
                           when 'm' then date_add(it, interval 1 month)
                           end
                       ) as it
            from org_date_table
            where it < (
                case
                    when #{dateType} = 'h' then '2000-01-24'
                    when #{dateType} != 'h' then #{toYmd}
                    end
                )
        ), date_table as (
            select
                year(it) as _year,
                (
                    case #{dateType}
                        when 'h' then day(it)
                        when 'd' then it
                        when 'w' then week(it)
                        when 'm' then month(it)
                        end
                    ) as dt
            from org_date_table
        ),  date_sale as (
            select year(actv_dt) _year,
                   month(actv_dt) as m,
                   week(actv_dt) as w,
                   actv_dt as d,
                   hour(regi_dt) as h,
                   tb_sale.*
            from tb_sale
            where shop_id=@curr_shop_id and
                actv_dt between #{fromYmd} and (
                    case
                        when #{dateType} = 'h' then #{fromYmd}
                        when #{dateType} != 'h' then #{toYmd}
                        end
                    )
        ), final as (
            select count(device_id) as cnt
            from date_table dd
                     left outer join date_sale ds on dd._year=ds._year and
                                                     ${dateType} = dt
            group by dd._year, dd.dt
        )

        select
            (
                select json_arrayagg(cnt)
                from final
            ) as value,
            (
                select json_arrayagg(date_format(it, '%Y.%m.%d'))
                from org_date_table
            ) as date

        ]]>
    </select>

    <select id="getInternetGraphByDateType">
    <![CDATA[
        SET @curr_shop_id := (
            SELECT curr_shop_id
            FROM tb_account
            WHERE id=#{userId}
        );


        with recursive org_date_table as (
            select (
                       case
                           when #{dateType} = 'h' then '2000-01-01'
                           when #{dateType} != 'h' then #{fromYmd}
                           end
                       ) as it
            union all
            select (
                       case #{dateType}
                           when 'h' then date_add(it, interval 1 day)
                           when 'd' then date_add(it, interval 1 day)
                           when 'w' then date_add(it, interval 1 week)
                           when 'm' then date_add(it, interval 1 month)
                           end
                       ) as it
            from org_date_table
            where it < (
                case
                    when #{dateType} = 'h' then '2000-01-24'
                    when #{dateType} != 'h' then #{toYmd}
                    end
                )
        ), date_table as (
            select
                year(it) as _year,
                (
                    case #{dateType}
                        when 'h' then day(it)
                        when 'd' then it
                        when 'w' then week(it)
                        when 'm' then month(it)
                        end
                    ) as dt
            from org_date_table
        ),  date_sale as (
            select year(actv_dt) _year,
                   month(actv_dt) as m,
                   week(actv_dt) as w,
                   actv_dt as d,
                   hour(regi_dt) as h,
                   tb_sale.*
            from tb_sale
            where shop_id=@curr_shop_id and
                actv_dt between #{fromYmd} and (
                    case
                        when #{dateType} = 'h' then #{fromYmd}
                        when #{dateType} != 'h' then #{toYmd}
                        end
                    )
        ), final as (
            select count(internet_plan) as cnt
            from date_table dd
                     left outer join date_sale ds on dd._year=ds._year and
                                                     ${dateType} = dt
            group by dd._year, dd.dt
        )

        select
            (
                select json_arrayagg(cnt)
                from final
            ) as value,
            (
                select json_arrayagg(date_format(it, '%Y.%m.%d'))
                from org_date_table
            ) as date

        ]]>
    </select>

    <select id="getTvGraphByDateType">
    <![CDATA[
        SET @curr_shop_id := (
            SELECT curr_shop_id
            FROM tb_account
            WHERE id=#{userId}
        );


        with recursive org_date_table as (
            select (
                       case
                           when #{dateType} = 'h' then '2000-01-01'
                           when #{dateType} != 'h' then #{fromYmd}
                           end
                       ) as it
            union all
            select (
                       case #{dateType}
                           when 'h' then date_add(it, interval 1 day)
                           when 'd' then date_add(it, interval 1 day)
                           when 'w' then date_add(it, interval 1 week)
                           when 'm' then date_add(it, interval 1 month)
                           end
                       ) as it
            from org_date_table
            where it < (
                case
                    when #{dateType} = 'h' then '2000-01-24'
                    when #{dateType} != 'h' then #{toYmd}
                    end
                )
        ), date_table as (
            select
                year(it) as _year,
                (
                    case #{dateType}
                        when 'h' then day(it)
                        when 'd' then it
                        when 'w' then week(it)
                        when 'm' then month(it)
                        end
                    ) as dt
            from org_date_table
        ),  date_sale as (
            select year(actv_dt) _year,
                   month(actv_dt) as m,
                   week(actv_dt) as w,
                   actv_dt as d,
                   hour(regi_dt) as h,
                   tb_sale.*
            from tb_sale
            where shop_id=@curr_shop_id and
                actv_dt between #{fromYmd} and (
                    case
                        when #{dateType} = 'h' then #{fromYmd}
                        when #{dateType} != 'h' then #{toYmd}
                        end
                    )
        ), final as (
            select count(tv_plan) as cnt
            from date_table dd
                     left outer join date_sale ds on dd._year=ds._year and
                                                     ${dateType} = dt
            group by dd._year, dd.dt
        )

        select
            (
                select json_arrayagg(cnt)
                from final
            ) as value,
            (
                select json_arrayagg(date_format(it, '%Y.%m.%d'))
                from org_date_table
            ) as date

        ]]>
    </select>

    <select id="getMarginGraphByDateType">
    <![CDATA[
        SET @curr_shop_id := (
            SELECT curr_shop_id
            FROM tb_account
            WHERE id=#{userId}
        );


        with recursive org_date_table as (
            select (
                       case
                           when #{dateType} = 'h' then '2000-01-01'
                           when #{dateType} != 'h' then #{fromYmd}
                           end
                       ) as it
            union all
            select (
                       case #{dateType}
                           when 'h' then date_add(it, interval 1 day)
                           when 'd' then date_add(it, interval 1 day)
                           when 'w' then date_add(it, interval 1 week)
                           when 'm' then date_add(it, interval 1 month)
                           end
                       ) as it
            from org_date_table
            where it < (
                case
                    when #{dateType} = 'h' then '2000-01-24'
                    when #{dateType} != 'h' then #{toYmd}
                    end
                )
        ), date_table as (
            select
                year(it) as _year,
                (
                    case #{dateType}
                        when 'h' then day(it)
                        when 'd' then it
                        when 'w' then week(it)
                        when 'm' then month(it)
                        end
                    ) as dt
            from org_date_table
        ),  date_sale as (
            select year(actv_dt) _year,
                   month(actv_dt) as m,
                   week(actv_dt) as w,
                   actv_dt as d,
                   hour(regi_dt) as h,
                   tb_sale.*
            from tb_sale
            where shop_id=@curr_shop_id and
                actv_dt between #{fromYmd} and (
                    case
                        when #{dateType} = 'h' then #{fromYmd}
                        when #{dateType} != 'h' then #{toYmd}
                        end
                    )
        ), final as (
            select IFNULL(sum(total_cms),0) as cnt
            from date_table dd
                     left outer join date_sale ds on dd._year=ds._year and
                                                    device_id is not null and
                                                     device_id != 0 and
                                                     ${dateType} = dt
            group by dd._year, dd.dt
        )

        select
            (
                select json_arrayagg(cnt)
                from final
            ) as value,
            (
                select json_arrayagg(date_format(it, '%Y.%m.%d'))
                from org_date_table
            ) as date

        ]]>
    </select>

    <select id="getAvgMarginGraphByDateType">
    <![CDATA[
        SET @curr_shop_id := (
            SELECT curr_shop_id
            FROM tb_account
            WHERE id=#{userId}
        );


        with recursive org_date_table as (
            select (
                       case
                           when #{dateType} = 'h' then '2000-01-01'
                           when #{dateType} != 'h' then #{fromYmd}
                           end
                       ) as it
            union all
            select (
                       case #{dateType}
                           when 'h' then date_add(it, interval 1 day)
                           when 'd' then date_add(it, interval 1 day)
                           when 'w' then date_add(it, interval 1 week)
                           when 'm' then date_add(it, interval 1 month)
                           end
                       ) as it
            from org_date_table
            where it < (
                case
                    when #{dateType} = 'h' then '2000-01-24'
                    when #{dateType} != 'h' then #{toYmd}
                    end
                )
        ), date_table as (
            select
                year(it) as _year,
                (
                    case #{dateType}
                        when 'h' then day(it)
                        when 'd' then it
                        when 'w' then week(it)
                        when 'm' then month(it)
                        end
                    ) as dt
            from org_date_table
        ),  date_sale as (
            select year(actv_dt) _year,
                   month(actv_dt) as m,
                   week(actv_dt) as w,
                   actv_dt as d,
                   hour(regi_dt) as h,
                   tb_sale.*
            from tb_sale
            where shop_id=@curr_shop_id and
                actv_dt between #{fromYmd} and (
                    case
                        when #{dateType} = 'h' then #{fromYmd}
                        when #{dateType} != 'h' then #{toYmd}
                        end
                    )
        ), final as (
            select FLOOR(IFNULL(avg(total_cms),0)) as cnt
            from date_table dd
                     left outer join date_sale ds on dd._year=ds._year and
                                                     device_id is not null and
                                                     device_id != 0 and
                                                     ${dateType} = dt
            group by dd._year, dd.dt
        )

        select
            (
                select json_arrayagg(cnt)
                from final
            ) as value,
            (
                select json_arrayagg(date_format(it, '%Y.%m.%d'))
                from org_date_table
            ) as date

        ]]>
    </select>

    <select id="getDeviceStat">
        <![CDATA[
        SET @curr_shop_id := (
            SELECT curr_shop_id
            FROM tb_account
            WHERE id=#{userId}
        );

        SET @org_month := (
            SELECT MONTH(#{fromYmd})
            );

        with recursive date_range as (
            select #{fromYmd} as d
            union all
            select date_add(d, interval 1 day) as d
            from date_range
            where MONTH(d) != @org_month
        )

        SELECT (
                SELECT device_nm
                FROM tb_device
                WHERE tb_device.device_id=sl.device_id
                   ) as device_nm,
                TRUNCATE((IFNULL(count(device_id),0) / IFNULL(count(*), 1)), 1) as per
        FROM date_range
                 LEFT OUTER JOIN tb_sale sl on sl.actv_dt=d and
                                               shop_id=@curr_shop_id and
                                               device_id != 0
        group by device_id
        ]]>
    </select>

    <select id="getAvgMarginBySelectType">
        <![CDATA[

        SET @curr_shop_id := (
            SELECT curr_shop_id
            FROM tb_account
            WHERE id=#{userId}
        );

        with sale as (
            select cust_gd as gender,
                   provider,
                   ct_actv_tp as actv_tp,
                   ct_istm as istm,
                   (
                       case
                           when length(cust_cd) = 6 then floor((year(curdate()) - concat((
                                         case
                                             when substring(cust_cd, 1,2) > '44' then '19'
                                             when substring(cust_cd, 1,2) <= '44' then '20'
                                             end
                                         ),substring(cust_cd,1,2))) / 10)
                           when length(cust_cd) != 6 then null
                           end
                       ) as generation,
                total_cms
            from tb_sale
            where shop_id=@curr_shop_id and
                actv_dt between #{fromYmd} and #{toYmd}
        )

        select IFNULL(avg(total_cms), 0) as amount
        from sale
        where ${selectType} is not null
        group by ${selectType}
        order by ${selectType}
        ]]>
    </select>
</mapper>