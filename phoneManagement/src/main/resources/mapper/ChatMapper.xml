<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.momo.mapper.ChatMapper">
    <!--    Chatroom Info-->
    <insert id="insertChatRoom" parameterType="com.momo.vo.ChatVO">
        insert into tb_chatroom_info
                    (room_id, room_nm)
        values      (#{roomId}, #{roomNm})
    </insert>

    <update id="updateChatRoom" parameterType="com.momo.vo.ChatVO">
        update
        tb_chatroom_info
        set
        <if test='roomNm != null and !roomNm.equals("")'>
            room_nm=#{roomNm},
        </if>
        <if test='roomImg != null and !roomImg.equals("")'>
            room_img=#{roomImg},
        </if>
        <if test='roomHc != null and !roomHc.equals("")'>
            room_hc=#{roomHc},
        </if>
        room_id=#{roomId}
        where
        room_id=#{roomId}
    </update>

    <select id="selectChatRoom" parameterType="com.momo.vo.ChatVO"  >
        select
        ci.*,
        cm.master,
        cm.alarm_st,
        cm.note_fold
        from
        tb_chatroom_member cm
        left outer join tb_chatroom_info ci on cm.room_id=ci.room_id
        where
        <if test='userId != null and !userId.equals("")'>
            cm.user_id=#{userId} and
        </if>
        <if test='roomId != null'>
            cm.room_id=#{roomId} and
        </if>
        1=1
        <if test='order != null and !order.equals("")'>
            order by
            ${order} ${asc}
        </if>
        <if test='limit != null and offset != null'>
            limit ${offset} ${limit}
        </if>

    </select>

    <select id="getMaxChatRoomId">
        select max(room_id)
        from tb_chatroom_info
            for
        update
    </select>

    <select id="getChatRoomHeadCount">
        select  room_hc
        from    tb_chatroom_info
        where   room_id = #{roomId}
    </select>

    <!--    Chatroom Member-->
    <insert id="insertChatRoomMember" parameterType="com.momo.vo.ChatVO">
        insert into     tb_chatroom_member
                        (room_id, user_id, master, last_read)
        VALUES          (#{roomId}, #{userId}, #{master}, (
                                                    select  IFNULL(max(chat_id), 0)
                                                    from    tb_chat_log
                                                    where   room_id = #{roomId}));

        update  tb_chatroom_info
        set     room_hc = (
                    select  count(*)
                    from    tb_chatroom_member
                    where   tb_chatroom_member.room_id = #{roomId}
                )
        where   room_id = #{roomId}
    </insert>

    <select id="selectChatRoomMember" parameterType="com.momo.vo.ChatVO">
        with tb as (
            select  cm.user_id as user_id,
                    cm.room_id,
                    ac.name as user_nm,
                    ac.role,
                    ac.pfp
            from    tb_chatroom_member cm
            left outer join tb_account ac on ac.id = cm.user_id
        )

        select  *
        from    tb
        where
        <if test='roomId != null'>
            room_id = #{roomId} and
        </if>
        <if test='userId != null and !userId.equals("")'>
            user_id = #{userId} and
        </if>
<!--        <if test='userNm != null and !userNm.equals("")'>-->
<!--            user_nm = #{userNm} and-->
<!--        </if>-->
        1=1
        <if test='order != null and !order.equals("")'>
            order by
            ${order} ${asc}
        </if>
        <if test='limit != null and offset != null'>
            limit ${offset} ${limit}
        </if>
    </select>

    <select id="readChatRoom" parameterType="com.momo.vo.ChatVO">
        set @last_read := (
                select  last_read
                from    tb_chatroom_member
                where   room_id = #{roomId} and user_id = #{userId}
            );

        update  tb_chatroom_member
        set     last_read = (
                    select  IFNULL(max(chat_id), 0)
                    from    tb_chat_log
                    where   tb_chat_log.room_id = #{roomId}
                )
        where   room_id = #{roomId} and
                user_id = #{userId};

        select  chat_id,
                curr_hc - (
                    select  count(*)
                    from    tb_chatroom_member cm
                    where   cm.room_id = #{roomId} and
                            last_read >= chat_id
                ) as non_read
        from    tb_chat_log
        where   room_id = #{roomId} and
                chat_id > @last_read
    </select>

    <select id="getLastRead" parameterType="com.momo.vo.ChatVO">
        select last_read
        from tb_chatroom_member
        where room_id = #{roomId}
          and user_id = #{userId}
    </select>

    <select id="isEqualsToLastRead" parameterType="com.momo.vo.ChatVO">
        select EQUALS(last_read, (select max(chat_id)
                                  from tb_chat_log
                                  where tb_chat_log.room_id = #{roomId}))
        from tb_chatroom_member
        where room_id = #{roomId}
          and user_id = #{userId}
    </select>

    <!--    Chatroom Note-->

    <!--    Chat Log-->
    <select id="insertChat" parameterType="com.momo.vo.ChatVO">
        set @last_chat_id := (
                select  IFNULL(max(chat_id), 0)
                from    tb_chat_log
                where   room_id = #{roomId}
        );

        insert into     tb_chat_log
                        (room_id, chat_id, user_id, server_send, content, file, ref, curr_hc)
        values          (#{roomId}, @last_chat_id + 1, #{userId}, #{serverSend}, #{content}, #{file}, #{ref},
                         (
                             select count(*)
                             from   tb_chatroom_member
                             where  tb_chatroom_member.room_id = #{roomId}
                             ));

        update  tb_chatroom_member
        set     last_read = @last_chat_id + 1
        where   room_id = #{roomId} and
                user_id = #{userId};

        select  cl.room_id,
                cl.chat_id,
                cl.user_id,
                ac.name as user_nm,
                cl.server_send,
                cl.content,
                cl.file,
                cl.ref,
                cl.curr_hc - 1 as non_read,
                cl.send_dt
        from    tb_chat_log cl
        left outer join tb_account ac on cl.user_id=ac.id
        where   cl.room_id = #{roomId} and
                cl.chat_id = @last_chat_id + 1;
    </select>

    <select id="getMaxChatId">
        select  IFNULL(max(chat_id), 0)
        from    tb_chat_log
        where   room_id = #{roomId}
    </select>

    <select id="selectChatLog" parameterType="com.momo.vo.ChatVO">
        with tb as (
            select  *
            from    tb_chat_deleted
            where   user_id = #{userId} or
                    to_all = true
        )

        select  cl.room_id,
                cl.chat_id,
                cl.user_id,
                ac.name as user_nm,
                cl.server_send,
                IF(cd.user_id is not null, '삭제된 메세지입니다',cl.content) as content,
                IF(cd.user_id is not null, true, false) as deleted,
                cl.file,
                cl.ref,
                ce.emo_bits,
                cl.curr_hc - (
                    select  count(*)
                    from    tb_chatroom_member
                    where   tb_chatroom_member.room_id = #{roomId} and
                            last_read >= cl.chat_id and
                            cl.send_dt > tb_chatroom_member.join_dt
                ) as non_read,
        cl.send_dt
        from
        tb_chat_log cl
        left outer join tb_chat_emo ce on (cl.room_id=ce.room_id and cl.chat_id=ce.chat_id)
        left outer join tb cd on (cl.room_id=cd.room_id and cl.chat_id=cd.chat_id)
        left outer join tb_account ac on cl.user_id=ac.id
        where
            cl.room_id=#{roomId} and
        <if test='chatId != null'>
            cl.chat_id=#{chatId} and
        </if>
        send_dt >= (
        select
        join_dt
        from
        tb_chatroom_member
        where
        tb_chatroom_member.room_id=#{roomId} and
        tb_chatroom_member.user_id=#{userId}
        )
        <if test='order != null and !order.equals("")'>
            order by
            ${order} ${asc}
        </if>
        <if test='limit != null and offset != null'>
            limit ${offset} ${limit}
        </if>
    </select>

    <select id="selectChatLogFromLastRead" parameterType="com.momo.vo.ChatVO">
        with tb as (
            select
            *
            from
            tb_chat_deleted
            where
            user_id=#{userId} or
            to_all=true
        )

        select
            cl.room_id,
            cl.chat_id,
            cl.user_id,
            ac.name as user_nm,
            cl.server_send,
            IF(cd.user_id is not null, '삭제된 메세지입니다',cl.content) as content,
            IF(cd.user_id is not null, true, false) as deleted,
            cl.file,
            cl.ref,
            ce.emo_bits,
            cl.curr_hc - (
                select  count(*)
                from    tb_chatroom_member
                where   tb_chatroom_member.room_id = #{roomId} and
                        last_read >= cl.chat_id
            ) as non_read,
            cl.send_dt
        from
            tb_chat_log cl
            left outer join tb_chat_emo ce on (cl.room_id=ce.room_id and cl.chat_id=ce.chat_id)
            left outer join tb cd on (cl.room_id=cd.room_id and cl.chat_id=cd.chat_id)
            left outer join tb_account ac on cl.user_id=ac.id
        where
            cl.room_id=#{roomId} and
        <if test='chatId != null'>
            cl.chat_id=#{chatId} and
        </if>
        cd.chat_id > (
            select
            last_read
            from
            tb_chatroom_member
            where
            tb_chatroom_member.room_id=#{roomId} and
            tb_chatroom_member.user_id=#{userId}
        )
        <if test='order != null and !order.equals("")'>
            order by
            ${order} ${asc}
        </if>
        <if test='limit != null and offset != null'>
            limit ${offset} ${limit}
        </if>
    </select>

    <select id="getLastChatLog">
        with tb as (
            select  *
            from    tb_chat_deleted
            where   user_id = #{userId} or
                to_all = true
        )

        select  cl.chat_id,
                cl.user_id,
                IF(cd.user_id is not null, '삭제된 메세지입니다',cl.content) as content,
                send_dt
        from    tb_chat_log cl
        left outer join tb cd on (cl.room_id=cd.room_id and cl.chat_id=cd.chat_id)
        where   cl.room_id = #{roomId} and
                cl.chat_id = (
                    select *
                    from (
                        select  max(chat_id)
                        from    tb_chat_log
                        where   room_id = #{roomId} and
                                tb_chat_log.server_send = false
                     ) as chat
                    for update
                )
    </select>

    <select id="getStackedChatCount" parameterType="com.momo.vo.ChatVO">
        SELECT 	count(*)
        FROM	tb_chat_log tcl
        WHERE 	room_id = #{roomId} AND
            server_send = FALSE AND
                tcl.chat_id > (
                SELECT 	last_read
                FROM	tb_chatroom_member tcm
                WHERE 	room_id = #{roomId} AND
                        user_id = #{userId}
            )
    </select>
    <!--    Chat Emo-->

    <!--    Chat Deleted-->

</mapper>