<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.momo.mapper.ChatMapper">
    <!--    Chatroom Info-->
    <insert id="insertChatRoom" parameterType="com.momo.vo.ChatVO">
        insert into tb_chatroom_info
                    (room_id, room_nm)
        values      (#{roomId}, #{roomNm})
    </insert>

    <update id="updateChatRoom" parameterType="com.momo.vo.ChatVO">
        update
        tb_chatroom_info
        set
        <if test='roomNm != null and !roomNm.equals("")'>
            room_nm=#{roomNm},
        </if>
        <if test='roomImg != null and !roomImg.equals("")'>
            room_img=#{roomImg},
        </if>
        <if test='roomHc != null and !roomHc.equals("")'>
            room_hc=#{roomHc},
        </if>
        room_id=#{roomId}
        where
        room_id=#{roomId}
    </update>

    <select id="selectChatRoom" parameterType="com.momo.vo.ChatVO"  >
        select  distinct ci.*,
                cl.content as last_content,
                cl.send_dt as last_send_dt,
                (
                    SELECT 	count(*)
                    FROM	tb_chat_log tcl
                    WHERE 	room_id = cm.room_id AND
                            server_send = FALSE AND
                            tcl.chat_id > cm.last_read
                ) as stacked_chat,
                cm.master,
                cm.alarm_st,
                cm.note_fold
        from    tb_chatroom_member cm
        left outer join tb_chatroom_info ci on cm.room_id=ci.room_id
        left outer join tb_chat_log cl on cl.room_id = cm.room_id and
                                          cl.chat_id = (
                                            select  max(chat_id)
                                            from    tb_chat_log
                                            where   tb_chat_log.room_id = cm.room_id and
                                                    tb_chat_log.server_send = false
                                        )
        where
        <if test='userId != null and !userId.equals("")'>
            cm.user_id=#{userId} and
        </if>
        <if test='roomId != null'>
            cm.room_id=#{roomId} and
        </if>
        1=1
        order by last_send_dt desc, regi_dt desc
        <if test='limit != null and offset != null'>
            limit ${offset} ${limit}
        </if>

    </select>

    <select id="getMaxChatRoomId">
        select max(room_id)
        from tb_chatroom_info
            for
        update
    </select>

    <select id="getChatRoomHeadCount">
        select  room_hc
        from    tb_chatroom_info
        where   room_id = #{roomId}
    </select>

    <!--    Chatroom Member-->
    <insert id="insertChatRoomMember" parameterType="com.momo.vo.ChatVO">
        insert into     tb_chatroom_member
                        (room_id, user_id, master, last_read)
        VALUES          (#{roomId}, #{userId}, #{master}, (
                                                    select  IFNULL(max(chat_id), 0)
                                                    from    tb_chat_log
                                                    where   room_id = #{roomId}));

        update  tb_chatroom_info
        set     room_hc = (
                    select  count(*)
                    from    tb_chatroom_member
                    where   tb_chatroom_member.room_id = #{roomId}
                )
        where   room_id = #{roomId}
    </insert>

    <select id="selectChatRoomMember" parameterType="com.momo.vo.ChatVO">
        with tb as (
            select  cm.user_id as user_id,
                    cm.room_id,
                    ac.name as user_nm,
                    ac.role,
                    ac.pfp
            from    tb_chatroom_member cm
            left outer join tb_account ac on ac.id = cm.user_id
        )

        select  *
        from    tb
        where
        <if test='roomId != null'>
            room_id = #{roomId} and
        </if>
        <if test='userId != null and !userId.equals("")'>
            user_id = #{userId} and
        </if>
<!--        <if test='userNm != null and !userNm.equals("")'>-->
<!--            user_nm = #{userNm} and-->
<!--        </if>-->
        1=1
        <if test='order != null and !order.equals("")'>
            order by
            ${order} ${asc}
        </if>
        <if test='limit != null and offset != null'>
            limit ${offset} ${limit}
        </if>
    </select>

    <select id="readChatRoom" parameterType="com.momo.vo.ChatVO">
        set @last_read := (
                select  last_read
                from    tb_chatroom_member
                where   room_id = #{roomId} and user_id = #{userId}
            );

        update  tb_chatroom_member
        set     last_read = (
                    select  IFNULL(max(chat_id), 0)
                    from    tb_chat_log
                    where   tb_chat_log.room_id = #{roomId}
                )
        where   room_id = #{roomId} and
                user_id = #{userId};

        select  chat_id,
                curr_hc - (
                    select  count(*)
                    from    tb_chatroom_member cm
                    where   cm.room_id = #{roomId} and
                            last_read >= chat_id
                ) as non_read
        from    tb_chat_log
        where   room_id = #{roomId} and
                chat_id > @last_read
    </select>

    <select id="getLastRead" parameterType="com.momo.vo.ChatVO">
        select last_read
        from tb_chatroom_member
        where room_id = #{roomId}
          and user_id = #{userId}
    </select>

    <select id="isEqualsToLastRead" parameterType="com.momo.vo.ChatVO">
        select EQUALS(last_read, (select max(chat_id)
                                  from tb_chat_log
                                  where tb_chat_log.room_id = #{roomId}))
        from tb_chatroom_member
        where room_id = #{roomId}
          and user_id = #{userId}
    </select>

    <!--    Chatroom Note-->
    <select id="insertNote" parameterType="com.momo.vo.ChatVO">
        set @last_note_id := (
            select  IFNULL(max(note_id), 0)
            from    tb_chatroom_note
            where   room_id = #{roomId}
        );

        INSERT INTO tb_chatroom_note
                    (room_id, note_id, chat_id, user_id, content, file)
        VALUES      (#{roomId},@last_note_id + 1,#{chatId},#{userId},#{content},#{file});

        select  *,
                (
                    select  name
                    from    tb_account
                    where   id = #{userId}
                    ) as user_nm
        from    tb_chatroom_note
        where   room_id = #{roomId} and
                note_id = @last_note_id + 1
    </select>

    <select id="selectNote" parameterType="com.momo.vo.ChatVO">
        set @last_note_id := (
            select  IFNULL(max(note_id), 0)
            from    tb_chatroom_note
            where   room_id = #{roomId}
        );

        select  *,
                (
                    select  name
                    from    tb_account
                    where   id = #{userId}
                ) as user_nm
        from    tb_chatroom_note
        where   room_id = #{roomId} and
                note_id = @last_note_id
    </select>
    <!--    Chat Log-->
    <select id="insertChat" parameterType="com.momo.vo.ChatVO">
        set @last_chat_id := (
                select  IFNULL(max(chat_id), 0)
                from    tb_chat_log
                where   room_id = #{roomId}
        );

        insert into     tb_chat_log
                        (room_id, chat_id, user_id, server_send, content, file, reply, curr_hc)
        values          (#{roomId}, @last_chat_id + 1, #{userId}, #{serverSend}, #{content}, #{file}, #{reply},
                         (
                             select count(*)
                             from   tb_chatroom_member
                             where  tb_chatroom_member.room_id = #{roomId}
                             ));

        update  tb_chatroom_member
        set     last_read = @last_chat_id + 1
        where   room_id = #{roomId} and
                user_id = #{userId};

        <include refid="chatLog"></include>
        where   cl.room_id = #{roomId} and
                cl.chat_id = @last_chat_id + 1;
    </select>

    <select id="getMaxChatId">
        select  IFNULL(max(chat_id), 0)
        from    tb_chat_log
        where   room_id = #{roomId}
    </select>

    <sql id="chatLog">
        select  cl.room_id,
                cl.chat_id,
                cl.user_id,
                ac.name as user_nm,
                cl.server_send,
                IF(cl.deleted, '삭제된 메세지입니다',cl.content) as content,
                IF(cl.deleted, '', cl.file) as file,
                IF(cl.deleted, 0, reply) as reply,
                concat_ws(',',
                IFNULL(emo.emo1,0),
                IFNULL(emo.emo2,0),
                IFNULL(emo.emo3,0),
                IFNULL(emo.emo4,0),
                IFNULL(emo.emo5,0),
                IFNULL(emo.emo6,0)
                ) as emo_list,
                cl.curr_hc - (
                select  count(*)
                from    tb_chatroom_member
                where   tb_chatroom_member.room_id = #{roomId} and
                last_read >= cl.chat_id and
                cl.send_dt > tb_chatroom_member.join_dt
                ) as non_read,
                cl.send_dt
                cl.deleted
        from
            tb_chat_log cl
                left outer join tb_account ac on cl.user_id=ac.id
                left outer join (
                    <include refid="chatEmo"/>
                ) as emo on cl.chat_id = emo.chat_id and cl.room_id = emo.room_id
    </sql>

    <select id="selectChatLog" parameterType="com.momo.vo.ChatVO">
        <include refid="chatLog"></include>
        where
            cl.room_id=#{roomId} and
        <if test='chatId != null'>
            cl.chat_id=#{chatId} and
        </if>
        send_dt >= (
        select
        join_dt
        from
        tb_chatroom_member
        where
        tb_chatroom_member.room_id=#{roomId} and
        tb_chatroom_member.user_id=#{userId}
        )
        <if test='order != null and !order.equals("")'>
            order by
            ${order} ${asc}
        </if>
        <if test='limit != null and offset != null'>
            limit ${offset} ${limit}
        </if>
    </select>

    <select id="selectChatLogFromLastRead" parameterType="com.momo.vo.ChatVO">
        <include refid="chatLog"></include>
        where
            cl.room_id=#{roomId} and
        <if test='chatId != null'>
            cl.chat_id=#{chatId} and
        </if>
        cd.chat_id > (
            select
            last_read
            from
            tb_chatroom_member
            where
            tb_chatroom_member.room_id=#{roomId} and
            tb_chatroom_member.user_id=#{userId}
        )
        <if test='order != null and !order.equals("")'>
            order by
            ${order} ${asc}
        </if>
        <if test='limit != null and offset != null'>
            limit ${offset} ${limit}
        </if>
    </select>

    <select id="getLastChatLog">
        with tb as (
            select  *
            from    tb_chat_deleted
            where   user_id = #{userId} or
                to_all = true
        )

        select  cl.chat_id,
                cl.user_id,
                IF(cd.user_id is not null, '삭제된 메세지입니다',cl.content) as content,
                send_dt
        from    tb_chat_log cl
        left outer join tb cd on (cl.room_id=cd.room_id and cl.chat_id=cd.chat_id)
        where   cl.room_id = #{roomId} and
                cl.chat_id = (
                    select *
                    from (
                        select  max(chat_id)
                        from    tb_chat_log
                        where   room_id = #{roomId} and
                                tb_chat_log.server_send = false
                     ) as chat
                    for update
                )
    </select>

    <select id="getStackedChatCount" parameterType="com.momo.vo.ChatVO">
        SELECT 	count(*)
        FROM	tb_chat_log tcl
        WHERE 	room_id = #{roomId} AND
            server_send = FALSE AND
                tcl.chat_id > (
                SELECT 	last_read
                FROM	tb_chatroom_member tcm
                WHERE 	room_id = #{roomId} AND
                        user_id = #{userId}
            )
    </select>
    <!--    Chat Emo-->
    <sql id="chatEmo">
        SELECT  room_id,
                chat_id,
                sum(emo1) as emo1,
                sum(emo2) as emo2,
                sum(emo3) as emo3,
                sum(emo4) as emo4,
                sum(emo5) as emo5,
                sum(emo6) as emo6
        FROM 	tb_chat_emo ce
        group by room_id, chat_id

    </sql>
    <select id="insertChatEmo" parameterType="com.momo.vo.ChatVO">
        INSERT INTO 	tb_chat_emo
                        (room_id, chat_id, user_id, ${emo})
        VALUES		    (#{roomId}, #{chatId}, #{userId}, TRUE)
        ON DUPLICATE KEY UPDATE ${emo} = !${emo};

        SELECT  emo.chat_id,
                emo.room_id,
                concat_ws(',',emo.emo1,emo.emo2,emo.emo3,emo.emo4,emo.emo5,emo.emo6) as emo_list
        from    (
                <include refid="chatEmo"></include>
                ) as emo
        WHERE 	room_id = #{roomId} AND
                chat_id = #{chatId}
    </select>

    <!--    Chat Deleted-->
    <insert id="deleteChat" parameterType="com.momo.vo.ChatVO">
        update  tb_chat_log
        set     deleted = true
        where   room_id = #{roomId} and
                chat_id = #{chatId}
    </insert>
    
    <select id="canDelete" parameterType="com.momo.vo.ChatVO">
        select  IF(TIMESTAMPDIFF(MINUTE, now(), send_dt) > #{deleteLimit}, false, true)
        from    tb_chat_log
        where   room_id = #{roomId} and
                chat_id = #{chatId}
    </select>

<!--    Chat Quit-->
    <delete id="quitChatRoom" parameterType="com.momo.vo.ChatVO">
        delete from tb_chatroom_member
        where       room_id = #{roomId} and
                    user_id = #{userId}
    </delete>

</mapper>