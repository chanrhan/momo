<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.momo.mapper.ChatMapper">
    <!--    ChatRoom Info-->
    <select id="createChatRoom" parameterType="com.momo.common.vo.ChatVO" resultType="java.lang.Integer">
        SET @last_room_id := (SELECT IFNULL(MAX(room_id), 0)
                              FROM tb_chatroom_info);

        INSERT INTO tb_chatroom_info
            (room_id, room_nm)
        VALUES (@last_room_id + 1, #{roomNm});

        INSERT INTO tb_chatroom_user
            (room_id, user_id, master, last_read)
        VALUES (@last_room_id + 1, #{userId}, TRUE, (SELECT IFNULL(MAX(chat_id), 0)
                                                     FROM tb_chat_log
                                                     WHERE room_id = #{roomId}));

        SELECT @last_room_id + 1;
    </select>

    <update id="updateChatRoom" parameterType="com.momo.common.vo.ChatVO">
        update
        tb_chatroom_info
        set
        <if test='roomNm != null and !roomNm.equals("")'>
            room_nm=#{roomNm},
        </if>
        <if test='roomImg != null and !roomImg.equals("")'>
            room_img=#{roomImg},
        </if>
        <if test='roomHc != null and !roomHc.equals("")'>
            room_hc=#{roomHc},
        </if>
        room_id=#{roomId}
        where
        room_id=#{roomId}
    </update>

    <select id="getChatRoom">
        select distinct ci.*,
        cl.content as last_content,
        cl.send_dt as last_send_dt,
        (
        SELECT count(*)
        FROM tb_chat_log tcl
        WHERE room_id = cm.room_id AND
        server_send = FALSE AND
        tcl.chat_id > cm.last_read
        ) as stacked_chat,
        cm.master,
        cm.alarm_st,
        cm.note_fold
        from tb_chatroom_user cm
        left outer join tb_chatroom_info ci on cm.room_id=ci.room_id
        left outer join tb_chat_log cl on cl.room_id = cm.room_id and
        cl.chat_id = (
        select max(chat_id)
        from tb_chat_log
        where tb_chat_log.room_id = cm.room_id and
        tb_chat_log.server_send = false
        )
        where
        cm.user_id=#{userId} and
        <if test='roomNm != null and !roomNm.equals("")'>
            ci.room_nm=#{roomNm} and
        </if>
        1=1
        order by last_send_dt desc, regi_dt desc
        <!--        <if test='limit != null and offset != null'>-->
        <!--            limit ${offset} ${limit}-->
        <!--        </if>-->

    </select>

    <select id="getChatRoomDetail">
        select *
        from tb_chatroom_info
        where room_id = #{roomId}
    </select>

    <select id="getMaxChatRoomId" resultType="java.lang.Integer">
        SELECT MAX(room_id)
        FROM tb_chatroom_info
            FOR
        UPDATE
    </select>

    <select id="getChatRoomHeadCount" resultType="java.lang.Integer">
        SELECT room_hc
        FROM tb_chatroom_info
        WHERE room_id = #{roomId}
    </select>

    <!--    ChatRoom User-->
    <insert id="insertChatRoomUser" parameterType="com.momo.common.vo.ChatVO">
        INSERT INTO tb_chatroom_user
            (room_id, user_id, master, last_read)
        VALUES (#{roomId}, #{userId}, #{master}, (SELECT IFNULL(MAX(chat_id), 0)
                                                  FROM tb_chat_log
                                                  WHERE room_id = #{roomId}));

        UPDATE tb_chatroom_info
        SET room_hc = (SELECT COUNT(*)
                       FROM tb_chatroom_user
                       WHERE tb_chatroom_user.room_id = #{roomId})
        WHERE room_id = #{roomId}
    </insert>

    <select id="getChatRoomUser">
        with tb as (
        select cm.user_id as user_id,
        cm.room_id,
        ac.name as user_nm,
        ac.role,
        ac.pfp
        from tb_chatroom_user cm
        left outer join tb_account ac on ac.id = cm.user_id
        )

        select *
        from tb
        where room_id = #{roomId}
        <!--        <if test='order != null and !order.equals("")'>-->
        <!--            order by-->
        <!--            ${order} ${asc}-->
        <!--        </if>-->
        <!--        <if test='limit != null and offset != null'>-->
        <!--            limit ${offset} ${limit}-->
        <!--        </if>-->
    </select>

    <select id="readChatRoom">
        SET @last_read := (SELECT last_read
                           FROM tb_chatroom_user
                           WHERE room_id = #{roomId}
                             AND user_id = #{userId});

        UPDATE tb_chatroom_user
        SET last_read = (SELECT IFNULL(MAX(chat_id), 0)
                         FROM tb_chat_log
                         WHERE tb_chat_log.room_id = #{roomId})
        WHERE room_id = #{roomId}
          AND user_id = #{userId};

        SELECT chat_id,
               curr_hc - (SELECT COUNT(*)
                          FROM tb_chatroom_user cm
                          WHERE cm.room_id = #{roomId}
                            AND last_read >= chat_id) AS non_read
        FROM tb_chat_log
        WHERE room_id = #{roomId}
          AND chat_id > @last_read
    </select>

    <select id="getLastRead" parameterType="com.momo.common.vo.ChatVO" resultType="java.lang.Integer">
        SELECT last_read
        FROM tb_chatroom_user
        WHERE room_id = #{roomId}
          AND user_id = #{userId}
    </select>

    <select id="isEqualsToLastRead" parameterType="com.momo.common.vo.ChatVO" resultType="java.lang.Boolean">
        SELECT EQUALS(last_read, (SELECT MAX(chat_id)
                                  FROM tb_chat_log
                                  WHERE tb_chat_log.room_id = #{roomId}))
        FROM tb_chatroom_user
        WHERE room_id = #{roomId}
          AND user_id = #{userId}
    </select>

    <!--    Chatroom Note-->
    <select id="insertAnnouncement" parameterType="com.momo.common.vo.ChatVO" resultType="java.util.Map">
        SET @last_ann_id := (SELECT IFNULL(MAX(ann_id), 0)
                              FROM tb_chatroom_announcement
                              WHERE room_id = #{roomId});

        INSERT INTO tb_chatroom_announcement
            (room_id, ann_id, chat_id, user_id, content, file)
        VALUES (#{roomId}, @last_ann_id + 1, #{chatId}, #{userId}, #{content}, #{file});

        SELECT *,
               (SELECT name
                FROM tb_account
                WHERE id = #{userId}) AS user_nm
        FROM tb_chatroom_announcement
        WHERE room_id = #{roomId}
          AND ann_id = @last_ann_id + 1
    </select>

    <select id="getAnnouncement">
        SET @last_note_id := (SELECT IFNULL(MAX(ann_id), 0)
                              FROM tb_chatroom_announcement
                              WHERE room_id = #{roomId});

        SELECT *,
               (SELECT name
                FROM tb_account
                WHERE id = user_id) AS user_nm
        FROM tb_chatroom_announcement
        WHERE room_id = #{roomId}
          AND ann_id = @last_note_id
    </select>
    <!--    Chat Log-->
    <select id="insertChat" parameterType="com.momo.common.vo.ChatVO" resultType="java.util.Map">
        set @last_chat_id := (
        select IFNULL(max(chat_id), 0)
        from tb_chat_log
        where room_id = #{roomId}
        );

        insert into tb_chat_log
        (room_id, chat_id, user_id, server_send, content, file, reply, curr_hc)
        values (#{roomId}, @last_chat_id + 1, #{userId}, #{serverSend}, #{content}, #{file}, #{reply},
        (
        select count(*)
        from tb_chatroom_user
        where tb_chatroom_user.room_id = #{roomId}
        ));

        update tb_chatroom_user
        set last_read = @last_chat_id + 1
        where room_id = #{roomId} and
        user_id = #{userId};

        <include refid="chatLog"/>
        where cl.room_id = #{roomId} and
        cl.chat_id = @last_chat_id + 1;
    </select>

    <select id="getMaxChatId" resultType="java.lang.Integer">
        SELECT IFNULL(MAX(chat_id), 0)
        FROM tb_chat_log
        WHERE room_id = #{roomId}
    </select>

    <sql id="chatLog">
        select cl.room_id,
        cl.chat_id,
        cl.user_id,
        ac.name as user_nm,
        cl.server_send,
        IF(cl.deleted, '삭제된 메세지입니다',cl.content) as content,
        IF(cl.deleted, '', cl.file) as file,
        IF(cl.deleted, 0, reply) as reply,
        emo.emo_list,
        cl.curr_hc - (
        select count(*)
        from tb_chatroom_user
        where tb_chatroom_user.room_id = #{roomId} and
        last_read >= cl.chat_id and
        cl.send_dt > tb_chatroom_user.join_dt
        ) as non_read,
        cl.send_dt,
        cl.deleted
        from
        tb_chat_log cl
        left outer join tb_account ac on cl.user_id=ac.id
        left outer join (
        <include refid="chatEmo"/>
        ) as emo on cl.chat_id = emo.chat_id and cl.room_id = emo.room_id
    </sql>

    <select id="getChatLog">
        <include refid="chatLog"/>
        where
        cl.room_id=#{roomId} and
        send_dt >= (
        select
        join_dt
        from
        tb_chatroom_user
        where
        tb_chatroom_user.room_id=#{roomId} and
        tb_chatroom_user.user_id=#{userId}
        ) and
        <if test="keyword != null and !keyword.equals('')">
            (
                cl.content like '%${keyword}%' or
                cl.user_nm like '%${keyword}%'
            ) and
        </if>
        1=1
    </select>

    <select id="fetchChatLogFromLastRead" parameterType="com.momo.common.vo.ChatVO" resultType="java.util.Map">
        <include refid="chatLog"/>
        where
        cl.room_id=#{roomId} and
        <if test='chatId != null'>
            cl.chat_id=#{chatId} and
        </if>
        cd.chat_id > (
        select
        last_read
        from
        tb_chatroom_user
        where
        tb_chatroom_user.room_id=#{roomId} and
        tb_chatroom_user.user_id=#{userId}
        )
        <if test='order != null and !order.equals("")'>
            order by
            ${order} ${asc}
        </if>
        <if test='limit != null and offset != null'>
            limit ${offset} ${limit}
        </if>
    </select>

    <select id="fetchLastChatLog" resultType="java.util.Map">
        WITH tb AS (SELECT *
                    FROM tb_chat_deleted
                    WHERE user_id = #{userId}
                       OR to_all = TRUE)

        SELECT cl.chat_id,
               cl.user_id,
               IF(cd.user_id IS NOT NULL, '삭제된 메세지입니다', cl.content) AS content,
               send_dt
        FROM tb_chat_log cl
                 LEFT OUTER JOIN tb cd ON (cl.room_id = cd.room_id AND cl.chat_id = cd.chat_id)
        WHERE cl.room_id = #{roomId}
          AND cl.chat_id = (SELECT *
                            FROM (SELECT MAX(chat_id)
                                  FROM tb_chat_log
                                  WHERE room_id = #{roomId}
                                    AND tb_chat_log.server_send = FALSE) AS chat
                                FOR
                            UPDATE)
    </select>

    <select id="getStackedChatCount" parameterType="com.momo.common.vo.ChatVO" resultType="java.lang.Integer">
        SELECT COUNT(*)
        FROM tb_chat_log tcl
        WHERE room_id = #{roomId}
          AND server_send = FALSE
          AND tcl.chat_id > (SELECT last_read
                             FROM tb_chatroom_user tcm
                             WHERE room_id = #{roomId}
                               AND user_id = #{userId})
    </select>
    <!--    Chat Emo-->
    <sql id="chatEmo">
        SELECT room_id,
               chat_id,
               CONCAT_WS(',', SUM(emo1),
                         SUM(emo2),
                         SUM(emo3),
                         SUM(emo4),
                         SUM(emo5),
                         SUM(emo6)) AS emo_list
        FROM tb_chat_emo ce
        GROUP BY room_id, chat_id

    </sql>

    <select id="insertChatEmo" parameterType="com.momo.common.vo.ChatVO" resultType="java.util.Map">
        INSERT INTO tb_chat_emo
        (room_id, chat_id, user_id, ${emo})
        VALUES (#{roomId}, #{chatId}, #{userId}, TRUE)
        ON DUPLICATE KEY UPDATE ${emo} = !${emo};

        SELECT emo.chat_id,
        emo.room_id,
        emo.emo_list
        from (
        <include refid="chatEmo"/>
        ) as emo
        WHERE room_id = #{roomId} AND
        chat_id = #{chatId}
    </select>

    <!--    Chat Deleted-->
    <insert id="deleteChat">
        UPDATE tb_chat_log
        SET deleted = TRUE
        WHERE room_id = #{roomId}
          AND chat_id = #{chatId}
    </insert>

    <select id="canDelete">
        SELECT IF(TIMESTAMPDIFF(MINUTE, NOW(), send_dt) > #{deleteLimit}, FALSE, TRUE)
        FROM tb_chat_log
        WHERE room_id = #{roomId}
          AND chat_id = #{chatId}
    </select>

    <!--    Chat Quit-->
    <delete id="quitChatRoom" parameterType="com.momo.common.vo.ChatVO">
        DELETE
        FROM tb_chatroom_user
        WHERE room_id = #{roomId}
          AND user_id = #{userId}
    </delete>

</mapper>