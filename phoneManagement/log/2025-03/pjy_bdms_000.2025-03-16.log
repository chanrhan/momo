2025-03-16 22:26:41.838 INFO  [background-preinit] [o.h.validator.internal.util.Version] - HV000001: Hibernate Validator 8.0.1.Final
2025-03-16 22:26:41.869 INFO  [restartedMain] [com.momo.PhoneManagementApplication] - Starting PhoneManagementApplication using Java 17.0.12 with PID 46648 (/Users/chan/momo/phoneManagement/target/classes started by chan in /Users/chan/momo/phoneManagement)
2025-03-16 22:26:41.870 INFO  [restartedMain] [com.momo.PhoneManagementApplication] - The following 1 profile is active: "dev"
2025-03-16 22:26:41.998 INFO  [restartedMain] [o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor] - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2025-03-16 22:26:41.998 INFO  [restartedMain] [o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor] - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2025-03-16 22:26:42.821 INFO  [restartedMain] [o.s.b.w.embedded.tomcat.TomcatWebServer] - Tomcat initialized with port 11040 (http)
2025-03-16 22:26:42.828 INFO  [restartedMain] [o.apache.coyote.http11.Http11NioProtocol] - Initializing ProtocolHandler ["http-nio-11040"]
2025-03-16 22:26:42.829 INFO  [restartedMain] [o.apache.catalina.core.StandardService] - Starting service [Tomcat]
2025-03-16 22:26:42.829 INFO  [restartedMain] [org.apache.catalina.core.StandardEngine] - Starting Servlet engine: [Apache Tomcat/10.1.17]
2025-03-16 22:26:42.856 INFO  [restartedMain] [o.a.c.c.C.[Tomcat].[localhost].[/]] - Initializing Spring embedded WebApplicationContext
2025-03-16 22:26:42.856 INFO  [restartedMain] [o.s.b.w.s.c.ServletWebServerApplicationContext] - Root WebApplicationContext: initialization completed in 858 ms
2025-03-16 22:26:43.350 INFO  [restartedMain] [org.quartz.impl.StdSchedulerFactory] - Using default implementation for ThreadExecutor
2025-03-16 22:26:43.356 INFO  [restartedMain] [org.quartz.core.SchedulerSignalerImpl] - Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2025-03-16 22:26:43.357 INFO  [restartedMain] [org.quartz.core.QuartzScheduler] - Quartz Scheduler v.2.3.2 created.
2025-03-16 22:26:43.357 INFO  [restartedMain] [org.quartz.simpl.RAMJobStore] - RAMJobStore initialized.
2025-03-16 22:26:43.357 INFO  [restartedMain] [org.quartz.core.QuartzScheduler] - Scheduler meta-data: Quartz Scheduler (v2.3.2) 'quartzScheduler' with instanceId 'NON_CLUSTERED'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 10 threads.
  Using job-store 'org.quartz.simpl.RAMJobStore' - which does not support persistence. and is not clustered.

2025-03-16 22:26:43.357 INFO  [restartedMain] [org.quartz.impl.StdSchedulerFactory] - Quartz scheduler 'quartzScheduler' initialized from an externally provided properties instance.
2025-03-16 22:26:43.357 INFO  [restartedMain] [org.quartz.impl.StdSchedulerFactory] - Quartz scheduler version: 2.3.2
2025-03-16 22:26:43.357 INFO  [restartedMain] [org.quartz.core.QuartzScheduler] - JobFactory set to: org.springframework.scheduling.quartz.SpringBeanJobFactory@874ba09
2025-03-16 22:26:43.384 INFO  [restartedMain] [o.s.b.f.a.AutowiredAnnotationBeanPostProcessor] - Autowired annotation is not supported on static fields: public static int com.momo.job.DormantUserJob.DORMANT_CYCLE_DATE
2025-03-16 22:26:43.496 INFO  [restartedMain] [o.s.b.a.w.s.WelcomePageHandlerMapping] - Adding welcome page: class path resource [public/index.html]
2025-03-16 22:26:43.775 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Will secure any request with [org.springframework.security.web.session.DisableEncodeUrlFilter@4f605a23, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@67c494b, org.springframework.security.web.context.SecurityContextHolderFilter@1a047b06, org.springframework.security.web.header.HeaderWriterFilter@717542f1, org.springframework.web.filter.CorsFilter@50095266, org.springframework.security.web.authentication.logout.LogoutFilter@c06c779, com.momo.filter.JwtAuthorizationFilter@519fd9c6, org.springframework.security.web.session.ConcurrentSessionFilter@28f95852, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@6887553c, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@6284666c, org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationFilter@595a53d0, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@1c632094, org.springframework.security.web.session.SessionManagementFilter@6daf0dd2, org.springframework.security.web.access.ExceptionTranslationFilter@18f90e76, org.springframework.security.web.access.intercept.FilterSecurityInterceptor@7f323a6a]
2025-03-16 22:26:43.883 WARN  [restartedMain] [o.s.b.a.t.ThymeleafAutoConfiguration$DefaultTemplateResolverConfiguration] - Cannot find template location: classpath:/templates/ (please add some templates, check your Thymeleaf configuration, or set spring.thymeleaf.check-template-location=false)
2025-03-16 22:26:43.954 INFO  [restartedMain] [o.s.b.d.a.OptionalLiveReloadServer] - LiveReload server is running on port 35729
2025-03-16 22:26:43.971 INFO  [restartedMain] [o.apache.coyote.http11.Http11NioProtocol] - Starting ProtocolHandler ["http-nio-11040"]
2025-03-16 22:26:43.980 INFO  [restartedMain] [o.s.b.w.embedded.tomcat.TomcatWebServer] - Tomcat started on port 11040 (http) with context path ''
2025-03-16 22:26:43.981 INFO  [restartedMain] [o.s.m.s.b.SimpleBrokerMessageHandler] - Starting...
2025-03-16 22:26:43.981 INFO  [restartedMain] [o.s.m.s.b.SimpleBrokerMessageHandler] - BrokerAvailabilityEvent[available=true, SimpleBrokerMessageHandler [org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry@4eb94e9f]]
2025-03-16 22:26:43.981 INFO  [restartedMain] [o.s.m.s.b.SimpleBrokerMessageHandler] - Started.
2025-03-16 22:26:43.981 INFO  [restartedMain] [o.s.s.quartz.SchedulerFactoryBean] - Starting Quartz Scheduler now
2025-03-16 22:26:43.981 INFO  [restartedMain] [org.quartz.core.QuartzScheduler] - Scheduler quartzScheduler_$_NON_CLUSTERED started.
2025-03-16 22:26:43.988 INFO  [restartedMain] [com.momo.PhoneManagementApplication] - Started PhoneManagementApplication in 2.627 seconds (process running for 3.179)
2025-03-16 22:26:49.335 INFO  [http-nio-11040-exec-1] [o.a.c.c.C.[Tomcat].[localhost].[/]] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-03-16 22:26:49.336 INFO  [http-nio-11040-exec-1] [o.s.web.servlet.DispatcherServlet] - Initializing Servlet 'dispatcherServlet'
2025-03-16 22:26:49.337 INFO  [http-nio-11040-exec-1] [o.s.web.servlet.DispatcherServlet] - Completed initialization in 1 ms
2025-03-16 22:26:49.354 INFO  [http-nio-11040-exec-1] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/user/info
2025-03-16 22:26:49.354 INFO  [http-nio-11040-exec-1] [com.momo.filter.JwtAuthorizationFilter] - access token: null
2025-03-16 22:26:49.354 INFO  [http-nio-11040-exec-1] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/user/info
2025-03-16 22:26:49.354 INFO  [http-nio-11040-exec-1] [com.momo.filter.JwtAuthorizationFilter] - 유효한 JWT 토큰이 없습니다
2025-03-16 22:26:49.377 INFO  [http-nio-11040-exec-1] [c.momo.common.util.SecurityContextUtil] - principal: anonymousUser
2025-03-16 22:26:50.588 ERROR [http-nio-11040-exec-1] [o.a.c.c.C.[.[.[/].[dispatcherServlet]] - Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed: org.mybatis.spring.MyBatisSystemException] with root cause
com.mysql.cj.exceptions.UnableToConnectException: Public Key Retrieval is not allowed
	at java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
	at java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.base/java.lang.reflect.Constructor.newInstanceWithCaller(Constructor.java:500)
	at java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:481)
	at com.mysql.cj.exceptions.ExceptionFactory.createException(ExceptionFactory.java:62)
	at com.mysql.cj.exceptions.ExceptionFactory.createException(ExceptionFactory.java:86)
	at com.mysql.cj.protocol.a.authentication.CachingSha2PasswordPlugin.nextAuthenticationStep(CachingSha2PasswordPlugin.java:130)
	at com.mysql.cj.protocol.a.authentication.CachingSha2PasswordPlugin.nextAuthenticationStep(CachingSha2PasswordPlugin.java:49)
	at com.mysql.cj.protocol.a.NativeAuthenticationProvider.proceedHandshakeWithPluggableAuthentication(NativeAuthenticationProvider.java:443)
	at com.mysql.cj.protocol.a.NativeAuthenticationProvider.connect(NativeAuthenticationProvider.java:213)
	at com.mysql.cj.protocol.a.NativeProtocol.connect(NativeProtocol.java:1430)
	at com.mysql.cj.NativeSession.connect(NativeSession.java:134)
	at com.mysql.cj.jdbc.ConnectionImpl.connectOneTryOnly(ConnectionImpl.java:939)
	at com.mysql.cj.jdbc.ConnectionImpl.createNewIO(ConnectionImpl.java:809)
	at com.mysql.cj.jdbc.ConnectionImpl.<init>(ConnectionImpl.java:440)
	at com.mysql.cj.jdbc.ConnectionImpl.getInstance(ConnectionImpl.java:239)
	at com.mysql.cj.jdbc.NonRegisteringDriver.connect(NonRegisteringDriver.java:188)
	at net.sf.log4jdbc.sql.jdbcapi.DriverSpy.connect(DriverSpy.java:401)
	at com.zaxxer.hikari.util.DriverDataSource.getConnection(DriverDataSource.java:138)
	at com.zaxxer.hikari.pool.PoolBase.newConnection(PoolBase.java:359)
	at com.zaxxer.hikari.pool.PoolBase.newPoolEntry(PoolBase.java:201)
	at com.zaxxer.hikari.pool.HikariPool.createPoolEntry(HikariPool.java:470)
	at com.zaxxer.hikari.pool.HikariPool.checkFailFast(HikariPool.java:561)
	at com.zaxxer.hikari.pool.HikariPool.<init>(HikariPool.java:100)
	at com.zaxxer.hikari.HikariDataSource.getConnection(HikariDataSource.java:112)
	at org.springframework.jdbc.datasource.DataSourceUtils.fetchConnection(DataSourceUtils.java:160)
	at org.springframework.jdbc.datasource.DataSourceUtils.doGetConnection(DataSourceUtils.java:118)
	at org.springframework.jdbc.datasource.DataSourceUtils.getConnection(DataSourceUtils.java:81)
	at org.mybatis.spring.transaction.SpringManagedTransaction.openConnection(SpringManagedTransaction.java:80)
	at org.mybatis.spring.transaction.SpringManagedTransaction.getConnection(SpringManagedTransaction.java:67)
	at org.apache.ibatis.executor.BaseExecutor.getConnection(BaseExecutor.java:348)
	at org.apache.ibatis.executor.SimpleExecutor.prepareStatement(SimpleExecutor.java:89)
	at org.apache.ibatis.executor.SimpleExecutor.doQuery(SimpleExecutor.java:64)
	at org.apache.ibatis.executor.BaseExecutor.queryFromDatabase(BaseExecutor.java:336)
	at org.apache.ibatis.executor.BaseExecutor.query(BaseExecutor.java:158)
	at org.apache.ibatis.executor.CachingExecutor.query(CachingExecutor.java:110)
	at org.apache.ibatis.executor.CachingExecutor.query(CachingExecutor.java:90)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:154)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:147)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:142)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectOne(DefaultSqlSession.java:75)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:425)
	at jdk.proxy2/jdk.proxy2.$Proxy81.selectOne(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.selectOne(SqlSessionTemplate.java:160)
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:87)
	at org.apache.ibatis.binding.MapperProxy$PlainMethodInvoker.invoke(MapperProxy.java:141)
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:86)
	at jdk.proxy3/jdk.proxy3.$Proxy83.getUserInfo(Unknown Source)
	at com.momo.service.UserService.getUserInfo(UserService.java:155)
	at com.momo.api.UserController.getUserInfo(UserController.java:43)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:352)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:713)
	at com.momo.api.UserController$$SpringCGLIB$$0.getUserInfo(<generated>)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:262)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:190)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:917)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:829)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.servlet.resource.ResourceUrlEncodingFilter.doFilter(ResourceUrlEncodingFilter.java:66)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:117)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:83)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationFilter.doFilter(RememberMeAuthenticationFilter.java:145)
	at org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationFilter.doFilter(RememberMeAuthenticationFilter.java:101)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.ConcurrentSessionFilter.doFilter(ConcurrentSessionFilter.java:151)
	at org.springframework.security.web.session.ConcurrentSessionFilter.doFilter(ConcurrentSessionFilter.java:129)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at com.momo.filter.JwtAuthorizationFilter.doFilterInternal(JwtAuthorizationFilter.java:47)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:195)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:225)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:340)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:840)
2025-03-16 22:26:54.379 INFO  [http-nio-11040-exec-2] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/user/info
2025-03-16 22:26:54.379 INFO  [http-nio-11040-exec-2] [com.momo.filter.JwtAuthorizationFilter] - access token: null
2025-03-16 22:26:54.379 INFO  [http-nio-11040-exec-2] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/user/info
2025-03-16 22:26:54.379 INFO  [http-nio-11040-exec-2] [com.momo.filter.JwtAuthorizationFilter] - 유효한 JWT 토큰이 없습니다
2025-03-16 22:26:54.380 INFO  [http-nio-11040-exec-2] [c.momo.common.util.SecurityContextUtil] - principal: anonymousUser
2025-03-16 22:26:55.398 ERROR [http-nio-11040-exec-2] [o.a.c.c.C.[.[.[/].[dispatcherServlet]] - Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed: org.mybatis.spring.MyBatisSystemException] with root cause
com.mysql.cj.exceptions.UnableToConnectException: Public Key Retrieval is not allowed
	at java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
	at java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.base/java.lang.reflect.Constructor.newInstanceWithCaller(Constructor.java:500)
	at java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:481)
	at com.mysql.cj.exceptions.ExceptionFactory.createException(ExceptionFactory.java:62)
	at com.mysql.cj.exceptions.ExceptionFactory.createException(ExceptionFactory.java:86)
	at com.mysql.cj.protocol.a.authentication.CachingSha2PasswordPlugin.nextAuthenticationStep(CachingSha2PasswordPlugin.java:130)
	at com.mysql.cj.protocol.a.authentication.CachingSha2PasswordPlugin.nextAuthenticationStep(CachingSha2PasswordPlugin.java:49)
	at com.mysql.cj.protocol.a.NativeAuthenticationProvider.proceedHandshakeWithPluggableAuthentication(NativeAuthenticationProvider.java:443)
	at com.mysql.cj.protocol.a.NativeAuthenticationProvider.connect(NativeAuthenticationProvider.java:213)
	at com.mysql.cj.protocol.a.NativeProtocol.connect(NativeProtocol.java:1430)
	at com.mysql.cj.NativeSession.connect(NativeSession.java:134)
	at com.mysql.cj.jdbc.ConnectionImpl.connectOneTryOnly(ConnectionImpl.java:939)
	at com.mysql.cj.jdbc.ConnectionImpl.createNewIO(ConnectionImpl.java:809)
	at com.mysql.cj.jdbc.ConnectionImpl.<init>(ConnectionImpl.java:440)
	at com.mysql.cj.jdbc.ConnectionImpl.getInstance(ConnectionImpl.java:239)
	at com.mysql.cj.jdbc.NonRegisteringDriver.connect(NonRegisteringDriver.java:188)
	at net.sf.log4jdbc.sql.jdbcapi.DriverSpy.connect(DriverSpy.java:401)
	at com.zaxxer.hikari.util.DriverDataSource.getConnection(DriverDataSource.java:138)
	at com.zaxxer.hikari.pool.PoolBase.newConnection(PoolBase.java:359)
	at com.zaxxer.hikari.pool.PoolBase.newPoolEntry(PoolBase.java:201)
	at com.zaxxer.hikari.pool.HikariPool.createPoolEntry(HikariPool.java:470)
	at com.zaxxer.hikari.pool.HikariPool.checkFailFast(HikariPool.java:561)
	at com.zaxxer.hikari.pool.HikariPool.<init>(HikariPool.java:100)
	at com.zaxxer.hikari.HikariDataSource.getConnection(HikariDataSource.java:112)
	at org.springframework.jdbc.datasource.DataSourceUtils.fetchConnection(DataSourceUtils.java:160)
	at org.springframework.jdbc.datasource.DataSourceUtils.doGetConnection(DataSourceUtils.java:118)
	at org.springframework.jdbc.datasource.DataSourceUtils.getConnection(DataSourceUtils.java:81)
	at org.mybatis.spring.transaction.SpringManagedTransaction.openConnection(SpringManagedTransaction.java:80)
	at org.mybatis.spring.transaction.SpringManagedTransaction.getConnection(SpringManagedTransaction.java:67)
	at org.apache.ibatis.executor.BaseExecutor.getConnection(BaseExecutor.java:348)
	at org.apache.ibatis.executor.SimpleExecutor.prepareStatement(SimpleExecutor.java:89)
	at org.apache.ibatis.executor.SimpleExecutor.doQuery(SimpleExecutor.java:64)
	at org.apache.ibatis.executor.BaseExecutor.queryFromDatabase(BaseExecutor.java:336)
	at org.apache.ibatis.executor.BaseExecutor.query(BaseExecutor.java:158)
	at org.apache.ibatis.executor.CachingExecutor.query(CachingExecutor.java:110)
	at org.apache.ibatis.executor.CachingExecutor.query(CachingExecutor.java:90)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:154)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:147)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:142)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectOne(DefaultSqlSession.java:75)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:425)
	at jdk.proxy2/jdk.proxy2.$Proxy81.selectOne(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.selectOne(SqlSessionTemplate.java:160)
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:87)
	at org.apache.ibatis.binding.MapperProxy$PlainMethodInvoker.invoke(MapperProxy.java:141)
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:86)
	at jdk.proxy3/jdk.proxy3.$Proxy83.getUserInfo(Unknown Source)
	at com.momo.service.UserService.getUserInfo(UserService.java:155)
	at com.momo.api.UserController.getUserInfo(UserController.java:43)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:352)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:713)
	at com.momo.api.UserController$$SpringCGLIB$$0.getUserInfo(<generated>)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:262)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:190)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:917)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:829)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.servlet.resource.ResourceUrlEncodingFilter.doFilter(ResourceUrlEncodingFilter.java:66)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:117)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:83)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationFilter.doFilter(RememberMeAuthenticationFilter.java:145)
	at org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationFilter.doFilter(RememberMeAuthenticationFilter.java:101)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.ConcurrentSessionFilter.doFilter(ConcurrentSessionFilter.java:151)
	at org.springframework.security.web.session.ConcurrentSessionFilter.doFilter(ConcurrentSessionFilter.java:129)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at com.momo.filter.JwtAuthorizationFilter.doFilterInternal(JwtAuthorizationFilter.java:47)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:195)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:225)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:340)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:840)
2025-03-16 22:27:02.077 INFO  [http-nio-11040-exec-3] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/public/login
2025-03-16 22:27:02.078 INFO  [http-nio-11040-exec-3] [com.momo.filter.JwtAuthorizationFilter] - access token: null
2025-03-16 22:27:02.078 INFO  [http-nio-11040-exec-3] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/public/login
2025-03-16 22:27:02.078 INFO  [http-nio-11040-exec-3] [com.momo.filter.JwtAuthorizationFilter] - 유효한 JWT 토큰이 없습니다
2025-03-16 22:27:03.176 ERROR [http-nio-11040-exec-3] [o.a.c.c.C.[.[.[/].[dispatcherServlet]] - Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed: org.mybatis.spring.MyBatisSystemException] with root cause
com.mysql.cj.exceptions.UnableToConnectException: Public Key Retrieval is not allowed
	at java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
	at java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.base/java.lang.reflect.Constructor.newInstanceWithCaller(Constructor.java:500)
	at java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:481)
	at com.mysql.cj.exceptions.ExceptionFactory.createException(ExceptionFactory.java:62)
	at com.mysql.cj.exceptions.ExceptionFactory.createException(ExceptionFactory.java:86)
	at com.mysql.cj.protocol.a.authentication.CachingSha2PasswordPlugin.nextAuthenticationStep(CachingSha2PasswordPlugin.java:130)
	at com.mysql.cj.protocol.a.authentication.CachingSha2PasswordPlugin.nextAuthenticationStep(CachingSha2PasswordPlugin.java:49)
	at com.mysql.cj.protocol.a.NativeAuthenticationProvider.proceedHandshakeWithPluggableAuthentication(NativeAuthenticationProvider.java:443)
	at com.mysql.cj.protocol.a.NativeAuthenticationProvider.connect(NativeAuthenticationProvider.java:213)
	at com.mysql.cj.protocol.a.NativeProtocol.connect(NativeProtocol.java:1430)
	at com.mysql.cj.NativeSession.connect(NativeSession.java:134)
	at com.mysql.cj.jdbc.ConnectionImpl.connectOneTryOnly(ConnectionImpl.java:939)
	at com.mysql.cj.jdbc.ConnectionImpl.createNewIO(ConnectionImpl.java:809)
	at com.mysql.cj.jdbc.ConnectionImpl.<init>(ConnectionImpl.java:440)
	at com.mysql.cj.jdbc.ConnectionImpl.getInstance(ConnectionImpl.java:239)
	at com.mysql.cj.jdbc.NonRegisteringDriver.connect(NonRegisteringDriver.java:188)
	at net.sf.log4jdbc.sql.jdbcapi.DriverSpy.connect(DriverSpy.java:401)
	at com.zaxxer.hikari.util.DriverDataSource.getConnection(DriverDataSource.java:138)
	at com.zaxxer.hikari.pool.PoolBase.newConnection(PoolBase.java:359)
	at com.zaxxer.hikari.pool.PoolBase.newPoolEntry(PoolBase.java:201)
	at com.zaxxer.hikari.pool.HikariPool.createPoolEntry(HikariPool.java:470)
	at com.zaxxer.hikari.pool.HikariPool.checkFailFast(HikariPool.java:561)
	at com.zaxxer.hikari.pool.HikariPool.<init>(HikariPool.java:100)
	at com.zaxxer.hikari.HikariDataSource.getConnection(HikariDataSource.java:112)
	at org.springframework.jdbc.datasource.DataSourceUtils.fetchConnection(DataSourceUtils.java:160)
	at org.springframework.jdbc.datasource.DataSourceUtils.doGetConnection(DataSourceUtils.java:118)
	at org.springframework.jdbc.datasource.DataSourceUtils.getConnection(DataSourceUtils.java:81)
	at org.mybatis.spring.transaction.SpringManagedTransaction.openConnection(SpringManagedTransaction.java:80)
	at org.mybatis.spring.transaction.SpringManagedTransaction.getConnection(SpringManagedTransaction.java:67)
	at org.apache.ibatis.executor.BaseExecutor.getConnection(BaseExecutor.java:348)
	at org.apache.ibatis.executor.SimpleExecutor.prepareStatement(SimpleExecutor.java:89)
	at org.apache.ibatis.executor.SimpleExecutor.doQuery(SimpleExecutor.java:64)
	at org.apache.ibatis.executor.BaseExecutor.queryFromDatabase(BaseExecutor.java:336)
	at org.apache.ibatis.executor.BaseExecutor.query(BaseExecutor.java:158)
	at org.apache.ibatis.executor.CachingExecutor.query(CachingExecutor.java:110)
	at org.apache.ibatis.executor.CachingExecutor.query(CachingExecutor.java:90)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:154)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:147)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:142)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectOne(DefaultSqlSession.java:75)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:425)
	at jdk.proxy2/jdk.proxy2.$Proxy81.selectOne(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.selectOne(SqlSessionTemplate.java:160)
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:87)
	at org.apache.ibatis.binding.MapperProxy$PlainMethodInvoker.invoke(MapperProxy.java:141)
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:86)
	at jdk.proxy3/jdk.proxy3.$Proxy83.getUserAsAuthorization(Unknown Source)
	at com.momo.service.UserService.getUserAsAuthorization(UserService.java:159)
	at com.momo.service.UserService.loadUserByUsername(UserService.java:241)
	at com.momo.service.UserService.authenticate(UserService.java:283)
	at com.momo.service.UserService.login(UserService.java:231)
	at com.momo.api.PublicController.login(PublicController.java:43)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:352)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:713)
	at com.momo.api.PublicController$$SpringCGLIB$$0.login(<generated>)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:262)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:190)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:917)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:829)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:914)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:590)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.servlet.resource.ResourceUrlEncodingFilter.doFilter(ResourceUrlEncodingFilter.java:66)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:117)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:83)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationFilter.doFilter(RememberMeAuthenticationFilter.java:145)
	at org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationFilter.doFilter(RememberMeAuthenticationFilter.java:101)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.ConcurrentSessionFilter.doFilter(ConcurrentSessionFilter.java:151)
	at org.springframework.security.web.session.ConcurrentSessionFilter.doFilter(ConcurrentSessionFilter.java:129)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at com.momo.filter.JwtAuthorizationFilter.doFilterInternal(JwtAuthorizationFilter.java:47)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:195)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:225)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:340)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:840)
2025-03-16 22:27:03.185 WARN  [http-nio-11040-exec-3] [o.s.w.s.m.s.DefaultHandlerExceptionResolver] - Resolved [org.springframework.web.HttpRequestMethodNotSupportedException: Request method 'POST' is not supported]
2025-03-16 22:27:09.306 INFO  [http-nio-11040-exec-4] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/user/info
2025-03-16 22:27:09.306 INFO  [http-nio-11040-exec-4] [com.momo.filter.JwtAuthorizationFilter] - access token: null
2025-03-16 22:27:09.306 INFO  [http-nio-11040-exec-4] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/user/info
2025-03-16 22:27:09.306 INFO  [http-nio-11040-exec-4] [com.momo.filter.JwtAuthorizationFilter] - 유효한 JWT 토큰이 없습니다
2025-03-16 22:27:09.307 INFO  [http-nio-11040-exec-4] [c.momo.common.util.SecurityContextUtil] - principal: anonymousUser
2025-03-16 22:27:09.367 DEBUG [http-nio-11040-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT ac.id,
               ac.name,
               ac.tel,
               ac.nickname,
               ac.pfp,
               ac.curr_shop_id,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where sf.shop_id = ac.curr_shop_id and
                         sf.staff_id = ac.id
                   ) as role,
               sh.shop_nm,
               sh.shop_addr,
               sh.provider,
               (
                   IFNULL((
                       select sf2.approval_st
                       from tb_staff sf2
                       where sf2.shop_id=ac.curr_shop_id and
                           sf2.staff_id=ac.id
                       ), -1)
                ) as approval_st,
                ac.corp_nm,
                ac.br_no
        FROM tb_account ac
        LEFT OUTER JOIN tb_shop sh on sh.shop_id=ac.curr_shop_id
        WHERE id = ''
 {executed in 18 msec}
2025-03-16 22:27:09.377 INFO  [http-nio-11040-exec-4] [com.momo.api.UserController] - User: null
2025-03-16 22:27:09.916 INFO  [http-nio-11040-exec-5] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/public/login
2025-03-16 22:27:09.917 INFO  [http-nio-11040-exec-5] [com.momo.filter.JwtAuthorizationFilter] - access token: null
2025-03-16 22:27:09.917 INFO  [http-nio-11040-exec-5] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/public/login
2025-03-16 22:27:09.917 INFO  [http-nio-11040-exec-5] [com.momo.filter.JwtAuthorizationFilter] - 유효한 JWT 토큰이 없습니다
2025-03-16 22:27:09.925 DEBUG [http-nio-11040-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 5 msec}
2025-03-16 22:27:09.933 DEBUG [http-nio-11040-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT (
            select IFNULL(sf.approval_st, false)
            from tb_staff sf
            where sf.staff_id = id and
                  sf.shop_id = curr_shop_id
                   ) as approval_st
        FROM tb_account
        where id='km1104rs'
 {executed in 2 msec}
2025-03-16 22:27:10.080 DEBUG [http-nio-11040-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. UPDATE
            tb_account
        SET last_login_dt=NOW(),
            user_st=0
        WHERE id = 'km1104rs'
 {executed in 10 msec}
2025-03-16 22:27:10.102 INFO  [http-nio-11040-exec-5] [com.momo.service.JwtService] - save refresh token: JwtVO(grantType=Bearer, username=km1104rs, accessToken=eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0MjEzMTYzMCwiZXhwIjoxNzQyMTMyMjMwLCJhdXRob3JpdGllcyI6IlJPTEVfU1RGLEFQUFJPVkUifQ.L9KFns1-FKN2NMfm_f6ARsv3oyfzwVHvYyPMfzmm85o, refreshToken=eyJhbGciOiJIUzI1NiJ9.eyJleHAiOjE3NDIxMzUyMzB9.3LEQSrj9zRVmaW8HV-VqQ4i65o2gyilwnyYKDDdEcFk, expireTime=3600000, revoked=false, expired=false)
2025-03-16 22:27:10.108 DEBUG [http-nio-11040-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT  *
        FROM    tb_refresh_token
        WHERE   user_id='km1104rs'
 {executed in 5 msec}
2025-03-16 22:27:10.110 DEBUG [http-nio-11040-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. UPDATE  tb_refresh_token
        SET     refresh_token='eyJhbGciOiJIUzI1NiJ9.eyJleHAiOjE3NDIxMzUyMzB9.3LEQSrj9zRVmaW8HV-VqQ4i65o2gyilwnyYKDDdEcFk'
        WHERE   user_id='km1104rs'
 {executed in 1 msec}
2025-03-16 22:27:10.113 DEBUG [http-nio-11040-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT curr_shop_id
        FROM tb_account
        WHERE id='km1104rs'
 {executed in 1 msec}
2025-03-16 22:27:10.136 INFO  [http-nio-11040-exec-6] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/user/info
2025-03-16 22:27:10.136 INFO  [http-nio-11040-exec-6] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0MjEzMTYzMCwiZXhwIjoxNzQyMTMyMjMwLCJhdXRob3JpdGllcyI6IlJPTEVfU1RGLEFQUFJPVkUifQ.L9KFns1-FKN2NMfm_f6ARsv3oyfzwVHvYyPMfzmm85o
2025-03-16 22:27:10.136 INFO  [http-nio-11040-exec-6] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/user/info
2025-03-16 22:27:10.165 INFO  [http-nio-11040-exec-6] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-03-16 22:27:10.180 INFO  [http-nio-11040-exec-8] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/notif/read/all
2025-03-16 22:27:10.181 INFO  [http-nio-11040-exec-7] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/notif/all
2025-03-16 22:27:10.181 INFO  [http-nio-11040-exec-8] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0MjEzMTYzMCwiZXhwIjoxNzQyMTMyMjMwLCJhdXRob3JpdGllcyI6IlJPTEVfU1RGLEFQUFJPVkUifQ.L9KFns1-FKN2NMfm_f6ARsv3oyfzwVHvYyPMfzmm85o
2025-03-16 22:27:10.181 INFO  [http-nio-11040-exec-7] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0MjEzMTYzMCwiZXhwIjoxNzQyMTMyMjMwLCJhdXRob3JpdGllcyI6IlJPTEVfU1RGLEFQUFJPVkUifQ.L9KFns1-FKN2NMfm_f6ARsv3oyfzwVHvYyPMfzmm85o
2025-03-16 22:27:10.181 INFO  [http-nio-11040-exec-8] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/notif/read/all
2025-03-16 22:27:10.181 INFO  [http-nio-11040-exec-7] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/notif/all
2025-03-16 22:27:10.183 INFO  [http-nio-11040-exec-8] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-03-16 22:27:10.184 INFO  [http-nio-11040-exec-7] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-03-16 22:27:10.185 DEBUG [http-nio-11040-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 5 msec}
2025-03-16 22:27:10.193 INFO  [http-nio-11040-exec-9] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/notif/count/unread
2025-03-16 22:27:10.193 INFO  [http-nio-11040-exec-9] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0MjEzMTYzMCwiZXhwIjoxNzQyMTMyMjMwLCJhdXRob3JpdGllcyI6IlJPTEVfU1RGLEFQUFJPVkUifQ.L9KFns1-FKN2NMfm_f6ARsv3oyfzwVHvYyPMfzmm85o
2025-03-16 22:27:10.193 INFO  [http-nio-11040-exec-9] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/notif/count/unread
2025-03-16 22:27:10.195 INFO  [http-nio-11040-exec-9] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-03-16 22:27:10.199 DEBUG [http-nio-11040-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
2. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 12 msec}
2025-03-16 22:27:10.199 DEBUG [http-nio-11040-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
3. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 13 msec}
2025-03-16 22:27:10.199 DEBUG [http-nio-11040-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
4. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 3 msec}
2025-03-16 22:27:10.200 DEBUG [http-nio-11040-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT (
            select IFNULL(sf.approval_st, false)
            from tb_staff sf
            where sf.staff_id = id and
                  sf.shop_id = curr_shop_id
                   ) as approval_st
        FROM tb_account
        where id='km1104rs'
 {executed in 15 msec}
2025-03-16 22:27:10.200 INFO  [http-nio-11040-exec-6] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-03-16 22:27:10.200 DEBUG [http-nio-11040-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
3. SELECT (
            select IFNULL(sf.approval_st, false)
            from tb_staff sf
            where sf.staff_id = id and
                  sf.shop_id = curr_shop_id
                   ) as approval_st
        FROM tb_account
        where id='km1104rs'
 {executed in 1 msec}
2025-03-16 22:27:10.200 DEBUG [http-nio-11040-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
2. SELECT (
            select IFNULL(sf.approval_st, false)
            from tb_staff sf
            where sf.staff_id = id and
                  sf.shop_id = curr_shop_id
                   ) as approval_st
        FROM tb_account
        where id='km1104rs'
 {executed in 1 msec}
2025-03-16 22:27:10.200 INFO  [http-nio-11040-exec-7] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-03-16 22:27:10.201 INFO  [http-nio-11040-exec-8] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-03-16 22:27:10.201 DEBUG [http-nio-11040-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
4. SELECT (
            select IFNULL(sf.approval_st, false)
            from tb_staff sf
            where sf.staff_id = id and
                  sf.shop_id = curr_shop_id
                   ) as approval_st
        FROM tb_account
        where id='km1104rs'
 {executed in 1 msec}
2025-03-16 22:27:10.201 INFO  [http-nio-11040-exec-9] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-03-16 22:27:10.202 INFO  [http-nio-11040-exec-9] [c.momo.common.util.SecurityContextUtil] - principal: UserDetailsImpl(username=km1104rs, password=$2a$10$uXShhwl6ULOkbJe477uDWOfdiUUcu6lOSF/Dhj9xP3U1nUn/gXkc6, authorities=[ROLE_STF, APPROVE])
2025-03-16 22:27:10.202 INFO  [http-nio-11040-exec-7] [c.momo.common.util.SecurityContextUtil] - principal: UserDetailsImpl(username=km1104rs, password=$2a$10$uXShhwl6ULOkbJe477uDWOfdiUUcu6lOSF/Dhj9xP3U1nUn/gXkc6, authorities=[ROLE_STF, APPROVE])
2025-03-16 22:27:10.202 INFO  [http-nio-11040-exec-8] [c.momo.common.util.SecurityContextUtil] - principal: UserDetailsImpl(username=km1104rs, password=$2a$10$uXShhwl6ULOkbJe477uDWOfdiUUcu6lOSF/Dhj9xP3U1nUn/gXkc6, authorities=[ROLE_STF, APPROVE])
2025-03-16 22:27:10.202 INFO  [http-nio-11040-exec-6] [c.momo.common.util.SecurityContextUtil] - principal: UserDetailsImpl(username=km1104rs, password=$2a$10$uXShhwl6ULOkbJe477uDWOfdiUUcu6lOSF/Dhj9xP3U1nUn/gXkc6, authorities=[ROLE_STF, APPROVE])
2025-03-16 22:27:10.205 DEBUG [http-nio-11040-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT ac.id,
               ac.name,
               ac.tel,
               ac.nickname,
               ac.pfp,
               ac.curr_shop_id,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where sf.shop_id = ac.curr_shop_id and
                         sf.staff_id = ac.id
                   ) as role,
               sh.shop_nm,
               sh.shop_addr,
               sh.provider,
               (
                   IFNULL((
                       select sf2.approval_st
                       from tb_staff sf2
                       where sf2.shop_id=ac.curr_shop_id and
                           sf2.staff_id=ac.id
                       ), -1)
                ) as approval_st,
                ac.corp_nm,
                ac.br_no
        FROM tb_account ac
        LEFT OUTER JOIN tb_shop sh on sh.shop_id=ac.curr_shop_id
        WHERE id = 'km1104rs'
 {executed in 2 msec}
2025-03-16 22:27:10.205 DEBUG [http-nio-11040-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
3. SELECT content,
               notif_id,
               read_st,
               notif_tp as type,
               IF(date(send_dt) = current_date,true,false) as today,
            (
               TIMESTAMPDIFF(MINUTE, send_dt, current_timestamp)
            ) as ago
        FROM tb_notification
        WHERE receiver_id='km1104rs'
        ORDER BY send_dt DESC
 {executed in 2 msec}
2025-03-16 22:27:10.205 DEBUG [http-nio-11040-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
2. UPDATE tb_notification
        SET read_st = TRUE
        WHERE receiver_id = 'km1104rs'
          AND read_st = FALSE
 {executed in 2 msec}
2025-03-16 22:27:10.205 INFO  [http-nio-11040-exec-6] [com.momo.api.UserController] - User: {role=1, approval_st=1, shop_addr=충청남도 천안시 병천면 충절로 1600 한국기술교육대학교 다산정보관 102, br_no=5218702490, provider=2, name=박희찬, nickname=대표, corp_nm=123, tel=010-4524-0636, id=km1104rs, pfp=1921fc01-e573-4243-9365-6b905389f4fc.png, curr_shop_id=2, shop_nm=한기대점 }
2025-03-16 22:27:10.206 DEBUG [http-nio-11040-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
4. SELECT count(*)
        FROM tb_notification
        WHERE receiver_id = 'km1104rs'
          AND read_st = FALSE
 {executed in 3 msec}
2025-03-16 22:27:10.215 INFO  [http-nio-11040-exec-10] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/user/info
2025-03-16 22:27:10.215 INFO  [http-nio-11040-exec-1] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/notif/count/unread
2025-03-16 22:27:10.215 INFO  [http-nio-11040-exec-10] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0MjEzMTYzMCwiZXhwIjoxNzQyMTMyMjMwLCJhdXRob3JpdGllcyI6IlJPTEVfU1RGLEFQUFJPVkUifQ.L9KFns1-FKN2NMfm_f6ARsv3oyfzwVHvYyPMfzmm85o
2025-03-16 22:27:10.215 INFO  [http-nio-11040-exec-1] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0MjEzMTYzMCwiZXhwIjoxNzQyMTMyMjMwLCJhdXRob3JpdGllcyI6IlJPTEVfU1RGLEFQUFJPVkUifQ.L9KFns1-FKN2NMfm_f6ARsv3oyfzwVHvYyPMfzmm85o
2025-03-16 22:27:10.215 INFO  [http-nio-11040-exec-10] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/user/info
2025-03-16 22:27:10.215 INFO  [http-nio-11040-exec-1] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/notif/count/unread
2025-03-16 22:27:10.217 INFO  [http-nio-11040-exec-1] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-03-16 22:27:10.217 INFO  [http-nio-11040-exec-10] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-03-16 22:27:10.218 DEBUG [http-nio-11040-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
2. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 1 msec}
2025-03-16 22:27:10.218 DEBUG [http-nio-11040-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 1 msec}
2025-03-16 22:27:10.219 DEBUG [http-nio-11040-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
2. SELECT (
            select IFNULL(sf.approval_st, false)
            from tb_staff sf
            where sf.staff_id = id and
                  sf.shop_id = curr_shop_id
                   ) as approval_st
        FROM tb_account
        where id='km1104rs'
 {executed in 0 msec}
2025-03-16 22:27:10.219 DEBUG [http-nio-11040-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT (
            select IFNULL(sf.approval_st, false)
            from tb_staff sf
            where sf.staff_id = id and
                  sf.shop_id = curr_shop_id
                   ) as approval_st
        FROM tb_account
        where id='km1104rs'
 {executed in 0 msec}
2025-03-16 22:27:10.220 INFO  [http-nio-11040-exec-1] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-03-16 22:27:10.220 INFO  [http-nio-11040-exec-10] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-03-16 22:27:10.221 INFO  [http-nio-11040-exec-1] [c.momo.common.util.SecurityContextUtil] - principal: UserDetailsImpl(username=km1104rs, password=$2a$10$uXShhwl6ULOkbJe477uDWOfdiUUcu6lOSF/Dhj9xP3U1nUn/gXkc6, authorities=[ROLE_STF, APPROVE])
2025-03-16 22:27:10.221 INFO  [http-nio-11040-exec-10] [c.momo.common.util.SecurityContextUtil] - principal: UserDetailsImpl(username=km1104rs, password=$2a$10$uXShhwl6ULOkbJe477uDWOfdiUUcu6lOSF/Dhj9xP3U1nUn/gXkc6, authorities=[ROLE_STF, APPROVE])
2025-03-16 22:27:10.222 DEBUG [http-nio-11040-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT ac.id,
               ac.name,
               ac.tel,
               ac.nickname,
               ac.pfp,
               ac.curr_shop_id,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where sf.shop_id = ac.curr_shop_id and
                         sf.staff_id = ac.id
                   ) as role,
               sh.shop_nm,
               sh.shop_addr,
               sh.provider,
               (
                   IFNULL((
                       select sf2.approval_st
                       from tb_staff sf2
                       where sf2.shop_id=ac.curr_shop_id and
                           sf2.staff_id=ac.id
                       ), -1)
                ) as approval_st,
                ac.corp_nm,
                ac.br_no
        FROM tb_account ac
        LEFT OUTER JOIN tb_shop sh on sh.shop_id=ac.curr_shop_id
        WHERE id = 'km1104rs'
 {executed in 1 msec}
2025-03-16 22:27:10.222 DEBUG [http-nio-11040-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
2. SELECT count(*)
        FROM tb_notification
        WHERE receiver_id = 'km1104rs'
          AND read_st = FALSE
 {executed in 1 msec}
2025-03-16 22:27:10.222 INFO  [http-nio-11040-exec-10] [com.momo.api.UserController] - User: {role=1, approval_st=1, shop_addr=충청남도 천안시 병천면 충절로 1600 한국기술교육대학교 다산정보관 102, br_no=5218702490, provider=2, name=박희찬, nickname=대표, corp_nm=123, tel=010-4524-0636, id=km1104rs, pfp=1921fc01-e573-4243-9365-6b905389f4fc.png, curr_shop_id=2, shop_nm=한기대점 }
2025-03-16 22:27:10.237 INFO  [http-nio-11040-exec-2] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/notif/count/unread
2025-03-16 22:27:10.237 INFO  [http-nio-11040-exec-2] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0MjEzMTYzMCwiZXhwIjoxNzQyMTMyMjMwLCJhdXRob3JpdGllcyI6IlJPTEVfU1RGLEFQUFJPVkUifQ.L9KFns1-FKN2NMfm_f6ARsv3oyfzwVHvYyPMfzmm85o
2025-03-16 22:27:10.237 INFO  [http-nio-11040-exec-2] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/notif/count/unread
2025-03-16 22:27:10.239 INFO  [http-nio-11040-exec-2] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-03-16 22:27:10.241 DEBUG [http-nio-11040-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 1 msec}
2025-03-16 22:27:10.242 DEBUG [http-nio-11040-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT (
            select IFNULL(sf.approval_st, false)
            from tb_staff sf
            where sf.staff_id = id and
                  sf.shop_id = curr_shop_id
                   ) as approval_st
        FROM tb_account
        where id='km1104rs'
 {executed in 1 msec}
2025-03-16 22:27:10.242 INFO  [http-nio-11040-exec-2] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-03-16 22:27:10.243 INFO  [http-nio-11040-exec-2] [c.momo.common.util.SecurityContextUtil] - principal: UserDetailsImpl(username=km1104rs, password=$2a$10$uXShhwl6ULOkbJe477uDWOfdiUUcu6lOSF/Dhj9xP3U1nUn/gXkc6, authorities=[ROLE_STF, APPROVE])
2025-03-16 22:27:10.245 DEBUG [http-nio-11040-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT count(*)
        FROM tb_notification
        WHERE receiver_id = 'km1104rs'
          AND read_st = FALSE
 {executed in 2 msec}
2025-03-16 22:27:10.247 INFO  [http-nio-11040-exec-3] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/sale/graph/ct/d
2025-03-16 22:27:10.247 INFO  [http-nio-11040-exec-3] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0MjEzMTYzMCwiZXhwIjoxNzQyMTMyMjMwLCJhdXRob3JpdGllcyI6IlJPTEVfU1RGLEFQUFJPVkUifQ.L9KFns1-FKN2NMfm_f6ARsv3oyfzwVHvYyPMfzmm85o
2025-03-16 22:27:10.247 INFO  [http-nio-11040-exec-3] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/sale/graph/ct/d
2025-03-16 22:27:10.249 INFO  [http-nio-11040-exec-3] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-03-16 22:27:10.250 DEBUG [http-nio-11040-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 1 msec}
2025-03-16 22:27:10.251 DEBUG [http-nio-11040-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT (
            select IFNULL(sf.approval_st, false)
            from tb_staff sf
            where sf.staff_id = id and
                  sf.shop_id = curr_shop_id
                   ) as approval_st
        FROM tb_account
        where id='km1104rs'
 {executed in 0 msec}
2025-03-16 22:27:10.251 INFO  [http-nio-11040-exec-3] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-03-16 22:27:10.255 INFO  [http-nio-11040-exec-4] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/sale/change/ct
2025-03-16 22:27:10.256 INFO  [http-nio-11040-exec-4] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0MjEzMTYzMCwiZXhwIjoxNzQyMTMyMjMwLCJhdXRob3JpdGllcyI6IlJPTEVfU1RGLEFQUFJPVkUifQ.L9KFns1-FKN2NMfm_f6ARsv3oyfzwVHvYyPMfzmm85o
2025-03-16 22:27:10.256 INFO  [http-nio-11040-exec-4] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/sale/change/ct
2025-03-16 22:27:10.256 INFO  [http-nio-11040-exec-3] [com.momo.service.CommonService] - Session('curr_shop_id') is not found. Try to find on Database...
2025-03-16 22:27:10.256 INFO  [http-nio-11040-exec-3] [c.momo.common.util.SecurityContextUtil] - principal: UserDetailsImpl(username=km1104rs, password=$2a$10$uXShhwl6ULOkbJe477uDWOfdiUUcu6lOSF/Dhj9xP3U1nUn/gXkc6, authorities=[ROLE_STF, APPROVE])
2025-03-16 22:27:10.257 INFO  [http-nio-11040-exec-4] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-03-16 22:27:10.258 DEBUG [http-nio-11040-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT curr_shop_id
        FROM tb_account
        WHERE id='km1104rs'
 {executed in 1 msec}
2025-03-16 22:27:10.259 DEBUG [http-nio-11040-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
2. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 0 msec}
2025-03-16 22:27:10.260 DEBUG [http-nio-11040-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
2. SELECT (
            select IFNULL(sf.approval_st, false)
            from tb_staff sf
            where sf.staff_id = id and
                  sf.shop_id = curr_shop_id
                   ) as approval_st
        FROM tb_account
        where id='km1104rs'
 {executed in 1 msec}
2025-03-16 22:27:10.260 INFO  [http-nio-11040-exec-4] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-03-16 22:27:10.265 INFO  [http-nio-11040-exec-5] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/pimg
2025-03-16 22:27:10.265 INFO  [http-nio-11040-exec-5] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0MjEzMTYzMCwiZXhwIjoxNzQyMTMyMjMwLCJhdXRob3JpdGllcyI6IlJPTEVfU1RGLEFQUFJPVkUifQ.L9KFns1-FKN2NMfm_f6ARsv3oyfzwVHvYyPMfzmm85o
2025-03-16 22:27:10.265 INFO  [http-nio-11040-exec-5] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/pimg
2025-03-16 22:27:10.267 INFO  [http-nio-11040-exec-5] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-03-16 22:27:10.267 DEBUG [http-nio-11040-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
2. with tb as (
            SELECT
                (
                    SELECT count(*)
                    FROM tb_sale
                    WHERE shop_id=2 and
                          device_id != 0 and
                          actv_dt BETWEEN '2025-02-01' AND '2025-02-16'
                    ) as prev,
                (
                    SELECT count(*)
                    FROM tb_sale
                    WHERE shop_id=2 and
                        device_id != 0 and
                        actv_dt BETWEEN '2025-03-01' AND '2025-03-16'
                ) as curr
            FROM DUAL
        )

        SELECT tb.curr - tb.prev
        FROM tb
 {executed in 5 msec}
2025-03-16 22:27:10.268 DEBUG [http-nio-11040-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 1 msec}
2025-03-16 22:27:10.269 DEBUG [http-nio-11040-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT (
            select IFNULL(sf.approval_st, false)
            from tb_staff sf
            where sf.staff_id = id and
                  sf.shop_id = curr_shop_id
                   ) as approval_st
        FROM tb_account
        where id='km1104rs'
 {executed in 1 msec}
2025-03-16 22:27:10.270 INFO  [http-nio-11040-exec-5] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-03-16 22:27:10.275 DEBUG [http-nio-11040-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. select pimg_id as id,
               pimg_text as text,
               pimg_path as file
        from tb_post_img
        where shop_id=2
 {executed in 4 msec}
2025-03-16 22:27:10.275 INFO  [http-nio-11040-exec-8] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/todo
2025-03-16 22:27:10.275 INFO  [http-nio-11040-exec-8] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0MjEzMTYzMCwiZXhwIjoxNzQyMTMyMjMwLCJhdXRob3JpdGllcyI6IlJPTEVfU1RGLEFQUFJPVkUifQ.L9KFns1-FKN2NMfm_f6ARsv3oyfzwVHvYyPMfzmm85o
2025-03-16 22:27:10.275 INFO  [http-nio-11040-exec-8] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/todo
2025-03-16 22:27:10.277 INFO  [http-nio-11040-exec-8] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-03-16 22:27:10.278 DEBUG [http-nio-11040-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 0 msec}
2025-03-16 22:27:10.279 DEBUG [http-nio-11040-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT (
            select IFNULL(sf.approval_st, false)
            from tb_staff sf
            where sf.staff_id = id and
                  sf.shop_id = curr_shop_id
                   ) as approval_st
        FROM tb_account
        where id='km1104rs'
 {executed in 0 msec}
2025-03-16 22:27:10.280 INFO  [http-nio-11040-exec-8] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-03-16 22:27:10.280 DEBUG [http-nio-11040-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
2. set @limit_cond := (
               case 'd'
                   when 'h' then '2000-01-24'
                   when 'd' then '2025-03-16'
                   when 'w' then '2025-03-16'
                   when 'm' then date_sub('2025-03-16', interval 1 month)
               end
        );

        with recursive org_date_table as (
            select (
                       case
                           when 'd' = 'h' then '2000-01-01'
                           when 'd' != 'h' then '2024-12-16'
                           end
                       ) as it
            union all
            select (
                       case 'd'
                           when 'h' then date_add(it, interval 1 day)
                           when 'd' then date_add(it, interval 1 day)
                           when 'w' then date_add(it, interval 1 week)
                           when 'm' then date_add(it, interval 1 month)
                           end
                       ) as it
            from org_date_table
            where it < @limit_cond
        ), date_table as (
            select
                year(it) as _year,
                (
                    case 'd'
                        when 'h' then day(it)
                        when 'd' then it
                        when 'w' then week(it)
                        when 'm' then month(it)
                        end
                    ) as dt
            from org_date_table
        ),  date_sale as (
            select year(actv_dt) _year,
                   month(actv_dt) as m,
                   week(actv_dt) as w,
                   actv_dt as d,
                   hour(regi_dt) as h,
                   tb_sale.*
            from tb_sale
            where shop_id=2 and

                actv_dt between '2024-12-16' and (
                    case
                        when 'd' = 'h' then '2024-12-16'
                        when 'd' != 'h' then '2025-03-16'
                        end
                    )
        ), final as (
            select count(device_id) as cnt
            from date_table dd
                     left outer join date_sale ds on dd._year=ds._year and
                                                     d = dt
            group by dd._year, dd.dt
        )

        select
            (
                select json_arrayagg(cnt)
                from final
            ) as value,
            (
                select json_arrayagg(date_format(it, '%Y-%m-%d'))
                from org_date_table
            ) as date
 {executed in 4 msec}
2025-03-16 22:27:10.284 INFO  [http-nio-11040-exec-6] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/todo/detail
2025-03-16 22:27:10.284 INFO  [http-nio-11040-exec-6] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0MjEzMTYzMCwiZXhwIjoxNzQyMTMyMjMwLCJhdXRob3JpdGllcyI6IlJPTEVfU1RGLEFQUFJPVkUifQ.L9KFns1-FKN2NMfm_f6ARsv3oyfzwVHvYyPMfzmm85o
2025-03-16 22:27:10.284 INFO  [http-nio-11040-exec-6] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/todo/detail
2025-03-16 22:27:10.286 INFO  [http-nio-11040-exec-6] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-03-16 22:27:10.286 DEBUG [http-nio-11040-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT SUBSTR(todo_dt, 9, 2)
        FROM tb_todo
        WHERE shop_id= 2  and
            todo_dt like '%2025-03%'
 {executed in 3 msec}
2025-03-16 22:27:10.287 DEBUG [http-nio-11040-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
2. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 1 msec}
2025-03-16 22:27:10.288 DEBUG [http-nio-11040-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
2. SELECT (
            select IFNULL(sf.approval_st, false)
            from tb_staff sf
            where sf.staff_id = id and
                  sf.shop_id = curr_shop_id
                   ) as approval_st
        FROM tb_account
        where id='km1104rs'
 {executed in 1 msec}
2025-03-16 22:27:10.288 INFO  [http-nio-11040-exec-6] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-03-16 22:27:10.290 DEBUG [http-nio-11040-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
2. SELECT todo_id,
                color,
                checked,
               content
        FROM tb_todo td
        WHERE td.shop_id=2 and
            todo_dt='2025-03-16'
 {executed in 1 msec}
2025-03-16 22:27:10.293 INFO  [http-nio-11040-exec-9] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/todo/detail
2025-03-16 22:27:10.293 INFO  [http-nio-11040-exec-9] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0MjEzMTYzMCwiZXhwIjoxNzQyMTMyMjMwLCJhdXRob3JpdGllcyI6IlJPTEVfU1RGLEFQUFJPVkUifQ.L9KFns1-FKN2NMfm_f6ARsv3oyfzwVHvYyPMfzmm85o
2025-03-16 22:27:10.293 INFO  [http-nio-11040-exec-9] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/todo/detail
2025-03-16 22:27:10.294 INFO  [http-nio-11040-exec-9] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-03-16 22:27:10.296 DEBUG [http-nio-11040-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
4. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 0 msec}
2025-03-16 22:27:10.297 DEBUG [http-nio-11040-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
4. SELECT (
            select IFNULL(sf.approval_st, false)
            from tb_staff sf
            where sf.staff_id = id and
                  sf.shop_id = curr_shop_id
                   ) as approval_st
        FROM tb_account
        where id='km1104rs'
 {executed in 0 msec}
2025-03-16 22:27:10.297 INFO  [http-nio-11040-exec-9] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-03-16 22:27:10.300 DEBUG [http-nio-11040-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
4. SELECT todo_id,
                color,
                checked,
               content
        FROM tb_todo td
        WHERE td.shop_id=2 and
            todo_dt='2025-03-16'
 {executed in 2 msec}
2025-03-16 22:27:10.302 INFO  [http-nio-11040-exec-7] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/shop/all
2025-03-16 22:27:10.302 INFO  [http-nio-11040-exec-7] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0MjEzMTYzMCwiZXhwIjoxNzQyMTMyMjMwLCJhdXRob3JpdGllcyI6IlJPTEVfU1RGLEFQUFJPVkUifQ.L9KFns1-FKN2NMfm_f6ARsv3oyfzwVHvYyPMfzmm85o
2025-03-16 22:27:10.303 INFO  [http-nio-11040-exec-7] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/shop/all
2025-03-16 22:27:10.304 INFO  [http-nio-11040-exec-7] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-03-16 22:27:10.305 DEBUG [http-nio-11040-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
3. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 1 msec}
2025-03-16 22:27:10.306 DEBUG [http-nio-11040-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
3. SELECT (
            select IFNULL(sf.approval_st, false)
            from tb_staff sf
            where sf.staff_id = id and
                  sf.shop_id = curr_shop_id
                   ) as approval_st
        FROM tb_account
        where id='km1104rs'
 {executed in 0 msec}
2025-03-16 22:27:10.306 INFO  [http-nio-11040-exec-7] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-03-16 22:27:10.307 INFO  [http-nio-11040-exec-7] [c.momo.common.util.SecurityContextUtil] - principal: UserDetailsImpl(username=km1104rs, password=$2a$10$uXShhwl6ULOkbJe477uDWOfdiUUcu6lOSF/Dhj9xP3U1nUn/gXkc6, authorities=[ROLE_STF, APPROVE])
2025-03-16 22:27:10.308 DEBUG [http-nio-11040-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
3. select sh.shop_id,
               sh.shop_nm
        from tb_staff sf
        left outer join tb_shop sh on sh.shop_id=sf.shop_id
        where staff_id='km1104rs'
 {executed in 1 msec}
2025-03-16 22:27:10.311 INFO  [http-nio-11040-exec-10] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/img/download/pfp
2025-03-16 22:27:10.312 INFO  [http-nio-11040-exec-10] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0MjEzMTYzMCwiZXhwIjoxNzQyMTMyMjMwLCJhdXRob3JpdGllcyI6IlJPTEVfU1RGLEFQUFJPVkUifQ.L9KFns1-FKN2NMfm_f6ARsv3oyfzwVHvYyPMfzmm85o
2025-03-16 22:27:10.312 INFO  [http-nio-11040-exec-10] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/img/download/pfp
2025-03-16 22:27:10.313 INFO  [http-nio-11040-exec-10] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-03-16 22:27:10.315 DEBUG [http-nio-11040-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 0 msec}
2025-03-16 22:27:10.316 DEBUG [http-nio-11040-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT (
            select IFNULL(sf.approval_st, false)
            from tb_staff sf
            where sf.staff_id = id and
                  sf.shop_id = curr_shop_id
                   ) as approval_st
        FROM tb_account
        where id='km1104rs'
 {executed in 1 msec}
2025-03-16 22:27:10.316 INFO  [http-nio-11040-exec-10] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-03-16 22:27:10.321 INFO  [http-nio-11040-exec-1] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/sale/summary
2025-03-16 22:27:10.321 INFO  [http-nio-11040-exec-1] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0MjEzMTYzMCwiZXhwIjoxNzQyMTMyMjMwLCJhdXRob3JpdGllcyI6IlJPTEVfU1RGLEFQUFJPVkUifQ.L9KFns1-FKN2NMfm_f6ARsv3oyfzwVHvYyPMfzmm85o
2025-03-16 22:27:10.321 INFO  [http-nio-11040-exec-1] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/sale/summary
2025-03-16 22:27:10.322 INFO  [http-nio-11040-exec-1] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-03-16 22:27:10.323 DEBUG [http-nio-11040-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
2. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 1 msec}
2025-03-16 22:27:10.324 DEBUG [http-nio-11040-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
2. SELECT (
            select IFNULL(sf.approval_st, false)
            from tb_staff sf
            where sf.staff_id = id and
                  sf.shop_id = curr_shop_id
                   ) as approval_st
        FROM tb_account
        where id='km1104rs'
 {executed in 0 msec}
2025-03-16 22:27:10.324 INFO  [http-nio-11040-exec-1] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-03-16 22:27:10.330 DEBUG [http-nio-11040-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
2. with prevMonth as (
            SELECT *
            FROM tb_sale
            WHERE shop_id=2 and
                actv_dt like '2025-02%'
        ), currMonth as (
            SELECT *
            FROM tb_sale
            WHERE shop_id=2 and
                actv_dt like '2025-03%'
        ) , tb as (
            SELECT
                (
                    SELECT IFNULL(count(*), 0)
                    FROM prevMonth
                    WHERE device_id is not null
                    ) as prev,
                (
                    SELECT IFNULL(count(*), 0)
                    FROM currMonth
                    WHERE device_id is not null
                ) as curr
            from dual
            UNION ALL
            SELECT
                (
                    SELECT IFNULL(count(*), 0)
                    FROM prevMonth
                    WHERE internet_plan is not null
                ) as prev,
                (
                    SELECT IFNULL(count(*), 0)
                    FROM currMonth
                    WHERE internet_plan is not null
                ) as curr
            from dual
            UNION ALL
            SELECT
                (
                    SELECT IFNULL(count(*), 0)
                    FROM prevMonth
                    WHERE tv_plan is not null
                ) as prev,
                (
                    SELECT IFNULL(count(*), 0)
                    FROM currMonth
                    WHERE tv_plan is not null
                ) as curr
            from dual
            UNION ALL
            SELECT
                (
                    SELECT IFNULL(SUM(total_cms),0)
                    FROM prevMonth
                    where device_id is not null
                ) as prev,
                (
                    SELECT IFNULL(SUM(total_cms),0)
                    FROM currMonth
                    where device_id is not null
                ) as curr
            from dual
            UNION ALL
            SELECT
                (
                    SELECT IFNULL(AVG(total_cms),0)
                    FROM prevMonth
                    where device_id is not null
                ) as prev,
                (
                    SELECT IFNULL(AVG(total_cms),0)
                    FROM currMonth
                    where device_id is not null
                ) as curr
            from dual
        )

        SELECT FLOOR(curr) as value,
               (
                   CASE
                       WHEN curr = 0 THEN 0
                       WHEN prev = 0 THEN 100
                       WHEN prev != 0 THEN TRUNCATE(((curr/prev)-1)*100, 1)
                   END
                   ) as per
        FROM tb
 {executed in 3 msec}
2025-03-16 22:27:10.330 INFO  [http-nio-11040-exec-2] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/sale/ratio
2025-03-16 22:27:10.331 INFO  [http-nio-11040-exec-2] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0MjEzMTYzMCwiZXhwIjoxNzQyMTMyMjMwLCJhdXRob3JpdGllcyI6IlJPTEVfU1RGLEFQUFJPVkUifQ.L9KFns1-FKN2NMfm_f6ARsv3oyfzwVHvYyPMfzmm85o
2025-03-16 22:27:10.331 INFO  [http-nio-11040-exec-2] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/sale/ratio
2025-03-16 22:27:10.332 INFO  [http-nio-11040-exec-2] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-03-16 22:27:10.333 DEBUG [http-nio-11040-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 1 msec}
2025-03-16 22:27:10.334 DEBUG [http-nio-11040-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT (
            select IFNULL(sf.approval_st, false)
            from tb_staff sf
            where sf.staff_id = id and
                  sf.shop_id = curr_shop_id
                   ) as approval_st
        FROM tb_account
        where id='km1104rs'
 {executed in 0 msec}
2025-03-16 22:27:10.335 INFO  [http-nio-11040-exec-2] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-03-16 22:27:10.341 INFO  [http-nio-11040-exec-4] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/sale/wip
2025-03-16 22:27:10.341 INFO  [http-nio-11040-exec-4] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0MjEzMTYzMCwiZXhwIjoxNzQyMTMyMjMwLCJhdXRob3JpdGllcyI6IlJPTEVfU1RGLEFQUFJPVkUifQ.L9KFns1-FKN2NMfm_f6ARsv3oyfzwVHvYyPMfzmm85o
2025-03-16 22:27:10.341 INFO  [http-nio-11040-exec-4] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/sale/wip
2025-03-16 22:27:10.342 DEBUG [http-nio-11040-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SET @total_sale_count := (
            SELECT count(*)
            FROM tb_sale
            WHERE shop_id=2 and
                device_id is not null and
                actv_dt like '2025-03%'
        );

        with tb as (
            SELECT count(*) as curr
            FROM tb_sale_card sc
                     LEFT OUTER JOIN tb_sale sl on sl.sale_id=sc.sale_id
            WHERE sc.shop_id=2 and
                actv_dt like '2025-03%'
            UNION ALL
            SELECT count(*) as curr
            FROM tb_sale
            WHERE shop_id= 2 and
                actv_dt like '2025-03%' and
                sd_id is not null
            UNION ALL
            SELECT count(*) as curr
            FROM tb_sale
            WHERE shop_id= 2 and
                actv_dt like '2025-03%' and
                exsvc_id is not null
        )

        SELECT
            curr as value,
            @total_sale_count as total,
            (
                CASE
                    WHEN @total_sale_count = 0 THEN 0
                    WHEN @total_sale_count != 0 THEN TRUNCATE(((curr/@total_sale_count))*100, 1)
                    END
                ) as per
        FROM tb
 {executed in 6 msec}
2025-03-16 22:27:10.343 INFO  [http-nio-11040-exec-4] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-03-16 22:27:10.346 DEBUG [http-nio-11040-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
2. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 1 msec}
2025-03-16 22:27:10.347 DEBUG [http-nio-11040-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
2. SELECT (
            select IFNULL(sf.approval_st, false)
            from tb_staff sf
            where sf.staff_id = id and
                  sf.shop_id = curr_shop_id
                   ) as approval_st
        FROM tb_account
        where id='km1104rs'
 {executed in 1 msec}
2025-03-16 22:27:10.348 INFO  [http-nio-11040-exec-4] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-03-16 22:27:10.360 DEBUG [http-nio-11040-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
2. with table_ud as (
            SELECT ud_st
            FROM tb_sale_used_device sud
            LEFT OUTER JOIN tb_sale sl on sl.sale_id=sud.sale_id
            WHERE sud.shop_id=2
--               and
--                 actv_dt like '%'
        ), table_card as (
            SELECT card_st
            FROM tb_sale_card sc
            LEFT OUTER JOIN tb_sale sl on sl.sale_id=sc.sale_id
            WHERE sc.shop_id=2
--               and
--                 actv_dt like '%'
        ), table_comb as (
            SELECT comb_st
            FROM tb_sale
            WHERE shop_id=2
--               and
--                 actv_dt like '%%'
        ), table_sup as (
            SELECT sup_st
            FROM tb_sale_support sc LEFT OUTER JOIN tb_sale sl on sl.sale_id=sc.sale_id
            WHERE sc.shop_id=2
--               and
--                 actv_dt like '%%'
        ), table_pm as (
            SELECT checked
            FROM tb_promise sc
                LEFT OUTER JOIN tb_sale sl on sl.sale_id=sc.sale_id
            WHERE sc.shop_id=2
--               and
--                 actv_dt like '%%'
        ), rst as (
            SELECT
                (
                    SELECT count(*)
                    FROM table_ud
                    WHERE ud_st!=2
                )
            UNION ALL
            SELECT
                (
                    SELECT count(*)
                    FROM table_card
                    WHERE card_st!=2
                )
            UNION ALL
            SELECT
                (
                    SELECT count(*)
                    FROM table_comb
                    WHERE comb_st!=1
                )
            UNION ALL
            SELECT
                (
                    SELECT count(*)
                    FROM table_sup
                    WHERE sup_st!=1
                )
            UNION ALL
            SELECT
                (
                    SELECT count(*)
                    FROM table_pm
                    WHERE checked!=1
                )
        )

        SELECT *
        FROM rst
 {executed in 10 msec}
2025-03-16 22:27:10.372 INFO  [http-nio-11040-exec-5] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/notif/count/unread
2025-03-16 22:27:10.372 INFO  [http-nio-11040-exec-5] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0MjEzMTYzMCwiZXhwIjoxNzQyMTMyMjMwLCJhdXRob3JpdGllcyI6IlJPTEVfU1RGLEFQUFJPVkUifQ.L9KFns1-FKN2NMfm_f6ARsv3oyfzwVHvYyPMfzmm85o
2025-03-16 22:27:10.373 INFO  [http-nio-11040-exec-5] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/notif/count/unread
2025-03-16 22:27:10.375 INFO  [http-nio-11040-exec-5] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-03-16 22:27:10.389 DEBUG [http-nio-11040-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 12 msec}
2025-03-16 22:27:10.389 INFO  [http-nio-11040-exec-3] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/sale/change/ct
2025-03-16 22:27:10.389 INFO  [http-nio-11040-exec-3] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0MjEzMTYzMCwiZXhwIjoxNzQyMTMyMjMwLCJhdXRob3JpdGllcyI6IlJPTEVfU1RGLEFQUFJPVkUifQ.L9KFns1-FKN2NMfm_f6ARsv3oyfzwVHvYyPMfzmm85o
2025-03-16 22:27:10.389 INFO  [http-nio-11040-exec-3] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/sale/change/ct
2025-03-16 22:27:10.391 DEBUG [http-nio-11040-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT (
            select IFNULL(sf.approval_st, false)
            from tb_staff sf
            where sf.staff_id = id and
                  sf.shop_id = curr_shop_id
                   ) as approval_st
        FROM tb_account
        where id='km1104rs'
 {executed in 2 msec}
2025-03-16 22:27:10.392 INFO  [http-nio-11040-exec-3] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-03-16 22:27:10.392 INFO  [http-nio-11040-exec-5] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-03-16 22:27:10.392 INFO  [http-nio-11040-exec-5] [c.momo.common.util.SecurityContextUtil] - principal: UserDetailsImpl(username=km1104rs, password=$2a$10$uXShhwl6ULOkbJe477uDWOfdiUUcu6lOSF/Dhj9xP3U1nUn/gXkc6, authorities=[ROLE_STF, APPROVE])
2025-03-16 22:27:10.393 DEBUG [http-nio-11040-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
2. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 1 msec}
2025-03-16 22:27:10.394 DEBUG [http-nio-11040-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT count(*)
        FROM tb_notification
        WHERE receiver_id = 'km1104rs'
          AND read_st = FALSE
 {executed in 1 msec}
2025-03-16 22:27:10.394 DEBUG [http-nio-11040-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
2. SELECT (
            select IFNULL(sf.approval_st, false)
            from tb_staff sf
            where sf.staff_id = id and
                  sf.shop_id = curr_shop_id
                   ) as approval_st
        FROM tb_account
        where id='km1104rs'
 {executed in 0 msec}
2025-03-16 22:27:10.395 INFO  [http-nio-11040-exec-3] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-03-16 22:27:10.398 DEBUG [http-nio-11040-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
2. with tb as (
            SELECT
                (
                    SELECT count(*)
                    FROM tb_sale
                    WHERE shop_id=2 and
                          device_id != 0 and
                          actv_dt BETWEEN '2025-02-01' AND '2025-02-16'
                    ) as prev,
                (
                    SELECT count(*)
                    FROM tb_sale
                    WHERE shop_id=2 and
                        device_id != 0 and
                        actv_dt BETWEEN '2025-03-01' AND '2025-03-16'
                ) as curr
            FROM DUAL
        )

        SELECT tb.curr - tb.prev
        FROM tb
 {executed in 1 msec}
2025-03-16 22:27:10.406 INFO  [http-nio-11040-exec-8] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/pimg
2025-03-16 22:27:10.407 INFO  [http-nio-11040-exec-8] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0MjEzMTYzMCwiZXhwIjoxNzQyMTMyMjMwLCJhdXRob3JpdGllcyI6IlJPTEVfU1RGLEFQUFJPVkUifQ.L9KFns1-FKN2NMfm_f6ARsv3oyfzwVHvYyPMfzmm85o
2025-03-16 22:27:10.407 INFO  [http-nio-11040-exec-8] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/pimg
2025-03-16 22:27:10.409 INFO  [http-nio-11040-exec-8] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-03-16 22:27:10.410 DEBUG [http-nio-11040-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 1 msec}
2025-03-16 22:27:10.412 DEBUG [http-nio-11040-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT (
            select IFNULL(sf.approval_st, false)
            from tb_staff sf
            where sf.staff_id = id and
                  sf.shop_id = curr_shop_id
                   ) as approval_st
        FROM tb_account
        where id='km1104rs'
 {executed in 1 msec}
2025-03-16 22:27:10.412 INFO  [http-nio-11040-exec-8] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-03-16 22:27:10.413 DEBUG [http-nio-11040-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. select pimg_id as id,
               pimg_text as text,
               pimg_path as file
        from tb_post_img
        where shop_id=2
 {executed in 0 msec}
2025-03-16 22:27:10.428 INFO  [http-nio-11040-exec-6] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/todo
2025-03-16 22:27:10.428 INFO  [http-nio-11040-exec-6] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0MjEzMTYzMCwiZXhwIjoxNzQyMTMyMjMwLCJhdXRob3JpdGllcyI6IlJPTEVfU1RGLEFQUFJPVkUifQ.L9KFns1-FKN2NMfm_f6ARsv3oyfzwVHvYyPMfzmm85o
2025-03-16 22:27:10.428 INFO  [http-nio-11040-exec-6] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/todo
2025-03-16 22:27:10.430 INFO  [http-nio-11040-exec-6] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-03-16 22:27:10.431 DEBUG [http-nio-11040-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
2. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 1 msec}
2025-03-16 22:27:10.433 DEBUG [http-nio-11040-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
2. SELECT (
            select IFNULL(sf.approval_st, false)
            from tb_staff sf
            where sf.staff_id = id and
                  sf.shop_id = curr_shop_id
                   ) as approval_st
        FROM tb_account
        where id='km1104rs'
 {executed in 1 msec}
2025-03-16 22:27:10.433 INFO  [http-nio-11040-exec-6] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-03-16 22:27:10.435 DEBUG [http-nio-11040-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
2. SELECT SUBSTR(todo_dt, 9, 2)
        FROM tb_todo
        WHERE shop_id= 2  and
            todo_dt like '%2025-03%'
 {executed in 0 msec}
2025-03-16 22:27:10.448 INFO  [http-nio-11040-exec-9] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/todo/detail
2025-03-16 22:27:10.448 INFO  [http-nio-11040-exec-9] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0MjEzMTYzMCwiZXhwIjoxNzQyMTMyMjMwLCJhdXRob3JpdGllcyI6IlJPTEVfU1RGLEFQUFJPVkUifQ.L9KFns1-FKN2NMfm_f6ARsv3oyfzwVHvYyPMfzmm85o
2025-03-16 22:27:10.448 INFO  [http-nio-11040-exec-9] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/todo/detail
2025-03-16 22:27:10.450 INFO  [http-nio-11040-exec-9] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-03-16 22:27:10.452 DEBUG [http-nio-11040-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
4. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 1 msec}
2025-03-16 22:27:10.453 DEBUG [http-nio-11040-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
4. SELECT (
            select IFNULL(sf.approval_st, false)
            from tb_staff sf
            where sf.staff_id = id and
                  sf.shop_id = curr_shop_id
                   ) as approval_st
        FROM tb_account
        where id='km1104rs'
 {executed in 1 msec}
2025-03-16 22:27:10.453 INFO  [http-nio-11040-exec-9] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-03-16 22:27:10.454 DEBUG [http-nio-11040-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
4. SELECT todo_id,
                color,
                checked,
               content
        FROM tb_todo td
        WHERE td.shop_id=2 and
            todo_dt='2025-03-16'
 {executed in 0 msec}
2025-03-16 22:27:10.468 INFO  [http-nio-11040-exec-7] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/todo/detail
2025-03-16 22:27:10.468 INFO  [http-nio-11040-exec-7] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0MjEzMTYzMCwiZXhwIjoxNzQyMTMyMjMwLCJhdXRob3JpdGllcyI6IlJPTEVfU1RGLEFQUFJPVkUifQ.L9KFns1-FKN2NMfm_f6ARsv3oyfzwVHvYyPMfzmm85o
2025-03-16 22:27:10.468 INFO  [http-nio-11040-exec-7] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/todo/detail
2025-03-16 22:27:10.470 INFO  [http-nio-11040-exec-7] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-03-16 22:27:10.471 DEBUG [http-nio-11040-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
3. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 1 msec}
2025-03-16 22:27:10.472 DEBUG [http-nio-11040-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
3. SELECT (
            select IFNULL(sf.approval_st, false)
            from tb_staff sf
            where sf.staff_id = id and
                  sf.shop_id = curr_shop_id
                   ) as approval_st
        FROM tb_account
        where id='km1104rs'
 {executed in 1 msec}
2025-03-16 22:27:10.472 INFO  [http-nio-11040-exec-7] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-03-16 22:27:10.474 DEBUG [http-nio-11040-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
3. SELECT todo_id,
                color,
                checked,
               content
        FROM tb_todo td
        WHERE td.shop_id=2 and
            todo_dt='2025-03-16'
 {executed in 1 msec}
2025-03-16 22:27:10.488 INFO  [http-nio-11040-exec-10] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/sale/summary
2025-03-16 22:27:10.488 INFO  [http-nio-11040-exec-10] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0MjEzMTYzMCwiZXhwIjoxNzQyMTMyMjMwLCJhdXRob3JpdGllcyI6IlJPTEVfU1RGLEFQUFJPVkUifQ.L9KFns1-FKN2NMfm_f6ARsv3oyfzwVHvYyPMfzmm85o
2025-03-16 22:27:10.488 INFO  [http-nio-11040-exec-10] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/sale/summary
2025-03-16 22:27:10.489 INFO  [http-nio-11040-exec-10] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-03-16 22:27:10.491 DEBUG [http-nio-11040-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 2 msec}
2025-03-16 22:27:10.492 DEBUG [http-nio-11040-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT (
            select IFNULL(sf.approval_st, false)
            from tb_staff sf
            where sf.staff_id = id and
                  sf.shop_id = curr_shop_id
                   ) as approval_st
        FROM tb_account
        where id='km1104rs'
 {executed in 1 msec}
2025-03-16 22:27:10.492 INFO  [http-nio-11040-exec-10] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-03-16 22:27:10.498 DEBUG [http-nio-11040-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. with prevMonth as (
            SELECT *
            FROM tb_sale
            WHERE shop_id=2 and
                actv_dt like '2025-02%'
        ), currMonth as (
            SELECT *
            FROM tb_sale
            WHERE shop_id=2 and
                actv_dt like '2025-03%'
        ) , tb as (
            SELECT
                (
                    SELECT IFNULL(count(*), 0)
                    FROM prevMonth
                    WHERE device_id is not null
                    ) as prev,
                (
                    SELECT IFNULL(count(*), 0)
                    FROM currMonth
                    WHERE device_id is not null
                ) as curr
            from dual
            UNION ALL
            SELECT
                (
                    SELECT IFNULL(count(*), 0)
                    FROM prevMonth
                    WHERE internet_plan is not null
                ) as prev,
                (
                    SELECT IFNULL(count(*), 0)
                    FROM currMonth
                    WHERE internet_plan is not null
                ) as curr
            from dual
            UNION ALL
            SELECT
                (
                    SELECT IFNULL(count(*), 0)
                    FROM prevMonth
                    WHERE tv_plan is not null
                ) as prev,
                (
                    SELECT IFNULL(count(*), 0)
                    FROM currMonth
                    WHERE tv_plan is not null
                ) as curr
            from dual
            UNION ALL
            SELECT
                (
                    SELECT IFNULL(SUM(total_cms),0)
                    FROM prevMonth
                    where device_id is not null
                ) as prev,
                (
                    SELECT IFNULL(SUM(total_cms),0)
                    FROM currMonth
                    where device_id is not null
                ) as curr
            from dual
            UNION ALL
            SELECT
                (
                    SELECT IFNULL(AVG(total_cms),0)
                    FROM prevMonth
                    where device_id is not null
                ) as prev,
                (
                    SELECT IFNULL(AVG(total_cms),0)
                    FROM currMonth
                    where device_id is not null
                ) as curr
            from dual
        )

        SELECT FLOOR(curr) as value,
               (
                   CASE
                       WHEN curr = 0 THEN 0
                       WHEN prev = 0 THEN 100
                       WHEN prev != 0 THEN TRUNCATE(((curr/prev)-1)*100, 1)
                   END
                   ) as per
        FROM tb
 {executed in 3 msec}
2025-03-16 22:27:10.506 INFO  [http-nio-11040-exec-1] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/sale/ratio
2025-03-16 22:27:10.506 INFO  [http-nio-11040-exec-1] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0MjEzMTYzMCwiZXhwIjoxNzQyMTMyMjMwLCJhdXRob3JpdGllcyI6IlJPTEVfU1RGLEFQUFJPVkUifQ.L9KFns1-FKN2NMfm_f6ARsv3oyfzwVHvYyPMfzmm85o
2025-03-16 22:27:10.506 INFO  [http-nio-11040-exec-1] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/sale/ratio
2025-03-16 22:27:10.507 INFO  [http-nio-11040-exec-1] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-03-16 22:27:10.508 DEBUG [http-nio-11040-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
2. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 1 msec}
2025-03-16 22:27:10.510 DEBUG [http-nio-11040-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
2. SELECT (
            select IFNULL(sf.approval_st, false)
            from tb_staff sf
            where sf.staff_id = id and
                  sf.shop_id = curr_shop_id
                   ) as approval_st
        FROM tb_account
        where id='km1104rs'
 {executed in 1 msec}
2025-03-16 22:27:10.510 INFO  [http-nio-11040-exec-1] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-03-16 22:27:10.512 DEBUG [http-nio-11040-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
2. SET @total_sale_count := (
            SELECT count(*)
            FROM tb_sale
            WHERE shop_id=2 and
                device_id is not null and
                actv_dt like '2025-03%'
        );

        with tb as (
            SELECT count(*) as curr
            FROM tb_sale_card sc
                     LEFT OUTER JOIN tb_sale sl on sl.sale_id=sc.sale_id
            WHERE sc.shop_id=2 and
                actv_dt like '2025-03%'
            UNION ALL
            SELECT count(*) as curr
            FROM tb_sale
            WHERE shop_id= 2 and
                actv_dt like '2025-03%' and
                sd_id is not null
            UNION ALL
            SELECT count(*) as curr
            FROM tb_sale
            WHERE shop_id= 2 and
                actv_dt like '2025-03%' and
                exsvc_id is not null
        )

        SELECT
            curr as value,
            @total_sale_count as total,
            (
                CASE
                    WHEN @total_sale_count = 0 THEN 0
                    WHEN @total_sale_count != 0 THEN TRUNCATE(((curr/@total_sale_count))*100, 1)
                    END
                ) as per
        FROM tb
 {executed in 1 msec}
2025-03-16 22:27:10.522 INFO  [http-nio-11040-exec-2] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/sale/wip
2025-03-16 22:27:10.522 INFO  [http-nio-11040-exec-2] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0MjEzMTYzMCwiZXhwIjoxNzQyMTMyMjMwLCJhdXRob3JpdGllcyI6IlJPTEVfU1RGLEFQUFJPVkUifQ.L9KFns1-FKN2NMfm_f6ARsv3oyfzwVHvYyPMfzmm85o
2025-03-16 22:27:10.522 INFO  [http-nio-11040-exec-2] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/sale/wip
2025-03-16 22:27:10.523 INFO  [http-nio-11040-exec-2] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-03-16 22:27:10.525 DEBUG [http-nio-11040-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 1 msec}
2025-03-16 22:27:10.526 DEBUG [http-nio-11040-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT (
            select IFNULL(sf.approval_st, false)
            from tb_staff sf
            where sf.staff_id = id and
                  sf.shop_id = curr_shop_id
                   ) as approval_st
        FROM tb_account
        where id='km1104rs'
 {executed in 1 msec}
2025-03-16 22:27:10.526 INFO  [http-nio-11040-exec-2] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-03-16 22:27:10.529 DEBUG [http-nio-11040-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. with table_ud as (
            SELECT ud_st
            FROM tb_sale_used_device sud
            LEFT OUTER JOIN tb_sale sl on sl.sale_id=sud.sale_id
            WHERE sud.shop_id=2
--               and
--                 actv_dt like '%'
        ), table_card as (
            SELECT card_st
            FROM tb_sale_card sc
            LEFT OUTER JOIN tb_sale sl on sl.sale_id=sc.sale_id
            WHERE sc.shop_id=2
--               and
--                 actv_dt like '%'
        ), table_comb as (
            SELECT comb_st
            FROM tb_sale
            WHERE shop_id=2
--               and
--                 actv_dt like '%%'
        ), table_sup as (
            SELECT sup_st
            FROM tb_sale_support sc LEFT OUTER JOIN tb_sale sl on sl.sale_id=sc.sale_id
            WHERE sc.shop_id=2
--               and
--                 actv_dt like '%%'
        ), table_pm as (
            SELECT checked
            FROM tb_promise sc
                LEFT OUTER JOIN tb_sale sl on sl.sale_id=sc.sale_id
            WHERE sc.shop_id=2
--               and
--                 actv_dt like '%%'
        ), rst as (
            SELECT
                (
                    SELECT count(*)
                    FROM table_ud
                    WHERE ud_st!=2
                )
            UNION ALL
            SELECT
                (
                    SELECT count(*)
                    FROM table_card
                    WHERE card_st!=2
                )
            UNION ALL
            SELECT
                (
                    SELECT count(*)
                    FROM table_comb
                    WHERE comb_st!=1
                )
            UNION ALL
            SELECT
                (
                    SELECT count(*)
                    FROM table_sup
                    WHERE sup_st!=1
                )
            UNION ALL
            SELECT
                (
                    SELECT count(*)
                    FROM table_pm
                    WHERE checked!=1
                )
        )

        SELECT *
        FROM rst
 {executed in 2 msec}
2025-03-16 22:27:10.547 INFO  [http-nio-11040-exec-4] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/img/download/pimg
2025-03-16 22:27:10.547 INFO  [http-nio-11040-exec-4] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0MjEzMTYzMCwiZXhwIjoxNzQyMTMyMjMwLCJhdXRob3JpdGllcyI6IlJPTEVfU1RGLEFQUFJPVkUifQ.L9KFns1-FKN2NMfm_f6ARsv3oyfzwVHvYyPMfzmm85o
2025-03-16 22:27:10.547 INFO  [http-nio-11040-exec-4] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/img/download/pimg
2025-03-16 22:27:10.548 INFO  [http-nio-11040-exec-4] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-03-16 22:27:10.550 DEBUG [http-nio-11040-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
2. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 1 msec}
2025-03-16 22:27:10.554 DEBUG [http-nio-11040-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
2. SELECT (
            select IFNULL(sf.approval_st, false)
            from tb_staff sf
            where sf.staff_id = id and
                  sf.shop_id = curr_shop_id
                   ) as approval_st
        FROM tb_account
        where id='km1104rs'
 {executed in 3 msec}
2025-03-16 22:27:10.554 INFO  [http-nio-11040-exec-4] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-03-16 22:27:10.563 INFO  [http-nio-11040-exec-5] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/img/download/pimg
2025-03-16 22:27:10.563 INFO  [http-nio-11040-exec-5] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0MjEzMTYzMCwiZXhwIjoxNzQyMTMyMjMwLCJhdXRob3JpdGllcyI6IlJPTEVfU1RGLEFQUFJPVkUifQ.L9KFns1-FKN2NMfm_f6ARsv3oyfzwVHvYyPMfzmm85o
2025-03-16 22:27:10.563 INFO  [http-nio-11040-exec-5] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/img/download/pimg
2025-03-16 22:27:10.566 INFO  [http-nio-11040-exec-5] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-03-16 22:27:10.568 DEBUG [http-nio-11040-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 2 msec}
2025-03-16 22:27:10.570 DEBUG [http-nio-11040-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT (
            select IFNULL(sf.approval_st, false)
            from tb_staff sf
            where sf.staff_id = id and
                  sf.shop_id = curr_shop_id
                   ) as approval_st
        FROM tb_account
        where id='km1104rs'
 {executed in 1 msec}
2025-03-16 22:27:10.571 INFO  [http-nio-11040-exec-5] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-03-16 22:27:10.610 INFO  [http-nio-11040-exec-3] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/todo
2025-03-16 22:27:10.610 INFO  [http-nio-11040-exec-3] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0MjEzMTYzMCwiZXhwIjoxNzQyMTMyMjMwLCJhdXRob3JpdGllcyI6IlJPTEVfU1RGLEFQUFJPVkUifQ.L9KFns1-FKN2NMfm_f6ARsv3oyfzwVHvYyPMfzmm85o
2025-03-16 22:27:10.610 INFO  [http-nio-11040-exec-3] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/todo
2025-03-16 22:27:10.612 INFO  [http-nio-11040-exec-3] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-03-16 22:27:10.613 DEBUG [http-nio-11040-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
2. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 1 msec}
2025-03-16 22:27:10.614 DEBUG [http-nio-11040-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
2. SELECT (
            select IFNULL(sf.approval_st, false)
            from tb_staff sf
            where sf.staff_id = id and
                  sf.shop_id = curr_shop_id
                   ) as approval_st
        FROM tb_account
        where id='km1104rs'
 {executed in 1 msec}
2025-03-16 22:27:10.614 INFO  [http-nio-11040-exec-3] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-03-16 22:27:10.616 DEBUG [http-nio-11040-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
2. SELECT SUBSTR(todo_dt, 9, 2)
        FROM tb_todo
        WHERE shop_id= 2  and
            todo_dt like '%2025-03%'
 {executed in 0 msec}
2025-03-16 22:27:10.626 INFO  [http-nio-11040-exec-8] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/todo/detail
2025-03-16 22:27:10.626 INFO  [http-nio-11040-exec-8] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0MjEzMTYzMCwiZXhwIjoxNzQyMTMyMjMwLCJhdXRob3JpdGllcyI6IlJPTEVfU1RGLEFQUFJPVkUifQ.L9KFns1-FKN2NMfm_f6ARsv3oyfzwVHvYyPMfzmm85o
2025-03-16 22:27:10.626 INFO  [http-nio-11040-exec-8] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/todo/detail
2025-03-16 22:27:10.628 INFO  [http-nio-11040-exec-8] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-03-16 22:27:10.629 DEBUG [http-nio-11040-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 1 msec}
2025-03-16 22:27:10.630 DEBUG [http-nio-11040-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT (
            select IFNULL(sf.approval_st, false)
            from tb_staff sf
            where sf.staff_id = id and
                  sf.shop_id = curr_shop_id
                   ) as approval_st
        FROM tb_account
        where id='km1104rs'
 {executed in 1 msec}
2025-03-16 22:27:10.630 INFO  [http-nio-11040-exec-8] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-03-16 22:27:10.631 DEBUG [http-nio-11040-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT todo_id,
                color,
                checked,
               content
        FROM tb_todo td
        WHERE td.shop_id=2 and
            todo_dt='2025-03-16'
 {executed in 0 msec}
2025-03-16 22:27:10.645 INFO  [http-nio-11040-exec-6] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/todo/detail
2025-03-16 22:27:10.645 INFO  [http-nio-11040-exec-6] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0MjEzMTYzMCwiZXhwIjoxNzQyMTMyMjMwLCJhdXRob3JpdGllcyI6IlJPTEVfU1RGLEFQUFJPVkUifQ.L9KFns1-FKN2NMfm_f6ARsv3oyfzwVHvYyPMfzmm85o
2025-03-16 22:27:10.645 INFO  [http-nio-11040-exec-6] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/todo/detail
2025-03-16 22:27:10.646 INFO  [http-nio-11040-exec-6] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-03-16 22:27:10.647 DEBUG [http-nio-11040-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
2. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 1 msec}
2025-03-16 22:27:10.648 DEBUG [http-nio-11040-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
2. SELECT (
            select IFNULL(sf.approval_st, false)
            from tb_staff sf
            where sf.staff_id = id and
                  sf.shop_id = curr_shop_id
                   ) as approval_st
        FROM tb_account
        where id='km1104rs'
 {executed in 0 msec}
2025-03-16 22:27:10.648 INFO  [http-nio-11040-exec-6] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-03-16 22:27:10.650 DEBUG [http-nio-11040-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
2. SELECT todo_id,
                color,
                checked,
               content
        FROM tb_todo td
        WHERE td.shop_id=2 and
            todo_dt='2025-03-16'
 {executed in 1 msec}
2025-03-16 22:27:10.681 INFO  [http-nio-11040-exec-9] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/todo
2025-03-16 22:27:10.681 INFO  [http-nio-11040-exec-9] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0MjEzMTYzMCwiZXhwIjoxNzQyMTMyMjMwLCJhdXRob3JpdGllcyI6IlJPTEVfU1RGLEFQUFJPVkUifQ.L9KFns1-FKN2NMfm_f6ARsv3oyfzwVHvYyPMfzmm85o
2025-03-16 22:27:10.681 INFO  [http-nio-11040-exec-9] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/todo
2025-03-16 22:27:10.682 INFO  [http-nio-11040-exec-9] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-03-16 22:27:10.684 DEBUG [http-nio-11040-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
4. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 1 msec}
2025-03-16 22:27:10.685 DEBUG [http-nio-11040-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
4. SELECT (
            select IFNULL(sf.approval_st, false)
            from tb_staff sf
            where sf.staff_id = id and
                  sf.shop_id = curr_shop_id
                   ) as approval_st
        FROM tb_account
        where id='km1104rs'
 {executed in 1 msec}
2025-03-16 22:27:10.685 INFO  [http-nio-11040-exec-9] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-03-16 22:27:10.687 DEBUG [http-nio-11040-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
4. SELECT SUBSTR(todo_dt, 9, 2)
        FROM tb_todo
        WHERE shop_id= 2  and
            todo_dt like '%2025-03%'
 {executed in 1 msec}
2025-03-16 22:27:10.703 INFO  [http-nio-11040-exec-7] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/todo/detail
2025-03-16 22:27:10.703 INFO  [http-nio-11040-exec-7] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0MjEzMTYzMCwiZXhwIjoxNzQyMTMyMjMwLCJhdXRob3JpdGllcyI6IlJPTEVfU1RGLEFQUFJPVkUifQ.L9KFns1-FKN2NMfm_f6ARsv3oyfzwVHvYyPMfzmm85o
2025-03-16 22:27:10.703 INFO  [http-nio-11040-exec-7] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/todo/detail
2025-03-16 22:27:10.706 INFO  [http-nio-11040-exec-7] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-03-16 22:27:10.708 DEBUG [http-nio-11040-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
3. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 2 msec}
2025-03-16 22:27:10.710 DEBUG [http-nio-11040-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
3. SELECT (
            select IFNULL(sf.approval_st, false)
            from tb_staff sf
            where sf.staff_id = id and
                  sf.shop_id = curr_shop_id
                   ) as approval_st
        FROM tb_account
        where id='km1104rs'
 {executed in 1 msec}
2025-03-16 22:27:10.710 INFO  [http-nio-11040-exec-7] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-03-16 22:27:10.713 DEBUG [http-nio-11040-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
3. SELECT todo_id,
                color,
                checked,
               content
        FROM tb_todo td
        WHERE td.shop_id=2 and
            todo_dt='2025-03-16'
 {executed in 1 msec}
2025-03-16 22:27:10.727 INFO  [http-nio-11040-exec-10] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/todo/detail
2025-03-16 22:27:10.727 INFO  [http-nio-11040-exec-10] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0MjEzMTYzMCwiZXhwIjoxNzQyMTMyMjMwLCJhdXRob3JpdGllcyI6IlJPTEVfU1RGLEFQUFJPVkUifQ.L9KFns1-FKN2NMfm_f6ARsv3oyfzwVHvYyPMfzmm85o
2025-03-16 22:27:10.727 INFO  [http-nio-11040-exec-10] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/todo/detail
2025-03-16 22:27:10.728 INFO  [http-nio-11040-exec-10] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-03-16 22:27:10.729 DEBUG [http-nio-11040-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 1 msec}
2025-03-16 22:27:10.730 DEBUG [http-nio-11040-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT (
            select IFNULL(sf.approval_st, false)
            from tb_staff sf
            where sf.staff_id = id and
                  sf.shop_id = curr_shop_id
                   ) as approval_st
        FROM tb_account
        where id='km1104rs'
 {executed in 0 msec}
2025-03-16 22:27:10.730 INFO  [http-nio-11040-exec-10] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-03-16 22:27:10.732 DEBUG [http-nio-11040-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT todo_id,
                color,
                checked,
               content
        FROM tb_todo td
        WHERE td.shop_id=2 and
            todo_dt='2025-03-16'
 {executed in 0 msec}
2025-03-16 22:27:10.756 INFO  [http-nio-11040-exec-1] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/img/download/pimg
2025-03-16 22:27:10.756 INFO  [http-nio-11040-exec-1] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0MjEzMTYzMCwiZXhwIjoxNzQyMTMyMjMwLCJhdXRob3JpdGllcyI6IlJPTEVfU1RGLEFQUFJPVkUifQ.L9KFns1-FKN2NMfm_f6ARsv3oyfzwVHvYyPMfzmm85o
2025-03-16 22:27:10.756 INFO  [http-nio-11040-exec-1] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/img/download/pimg
2025-03-16 22:27:10.758 INFO  [http-nio-11040-exec-1] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-03-16 22:27:10.759 DEBUG [http-nio-11040-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
2. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 1 msec}
2025-03-16 22:27:10.761 DEBUG [http-nio-11040-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
2. SELECT (
            select IFNULL(sf.approval_st, false)
            from tb_staff sf
            where sf.staff_id = id and
                  sf.shop_id = curr_shop_id
                   ) as approval_st
        FROM tb_account
        where id='km1104rs'
 {executed in 1 msec}
2025-03-16 22:27:10.761 INFO  [http-nio-11040-exec-1] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-03-16 22:27:10.772 INFO  [http-nio-11040-exec-2] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/img/download/pimg
2025-03-16 22:27:10.773 INFO  [http-nio-11040-exec-2] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0MjEzMTYzMCwiZXhwIjoxNzQyMTMyMjMwLCJhdXRob3JpdGllcyI6IlJPTEVfU1RGLEFQUFJPVkUifQ.L9KFns1-FKN2NMfm_f6ARsv3oyfzwVHvYyPMfzmm85o
2025-03-16 22:27:10.773 INFO  [http-nio-11040-exec-2] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/img/download/pimg
2025-03-16 22:27:10.775 INFO  [http-nio-11040-exec-2] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-03-16 22:27:10.777 DEBUG [http-nio-11040-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 2 msec}
2025-03-16 22:27:10.778 DEBUG [http-nio-11040-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT (
            select IFNULL(sf.approval_st, false)
            from tb_staff sf
            where sf.staff_id = id and
                  sf.shop_id = curr_shop_id
                   ) as approval_st
        FROM tb_account
        where id='km1104rs'
 {executed in 0 msec}
2025-03-16 22:27:10.778 INFO  [http-nio-11040-exec-2] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-03-16 22:27:10.799 INFO  [http-nio-11040-exec-4] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/img/download/pimg
2025-03-16 22:27:10.799 INFO  [http-nio-11040-exec-4] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0MjEzMTYzMCwiZXhwIjoxNzQyMTMyMjMwLCJhdXRob3JpdGllcyI6IlJPTEVfU1RGLEFQUFJPVkUifQ.L9KFns1-FKN2NMfm_f6ARsv3oyfzwVHvYyPMfzmm85o
2025-03-16 22:27:10.799 INFO  [http-nio-11040-exec-4] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/img/download/pimg
2025-03-16 22:27:10.800 INFO  [http-nio-11040-exec-4] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-03-16 22:27:10.802 DEBUG [http-nio-11040-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
2. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 1 msec}
2025-03-16 22:27:10.803 DEBUG [http-nio-11040-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
2. SELECT (
            select IFNULL(sf.approval_st, false)
            from tb_staff sf
            where sf.staff_id = id and
                  sf.shop_id = curr_shop_id
                   ) as approval_st
        FROM tb_account
        where id='km1104rs'
 {executed in 0 msec}
2025-03-16 22:27:10.803 INFO  [http-nio-11040-exec-4] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-03-16 22:27:10.820 INFO  [http-nio-11040-exec-5] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/img/download/pimg
2025-03-16 22:27:10.820 INFO  [http-nio-11040-exec-5] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0MjEzMTYzMCwiZXhwIjoxNzQyMTMyMjMwLCJhdXRob3JpdGllcyI6IlJPTEVfU1RGLEFQUFJPVkUifQ.L9KFns1-FKN2NMfm_f6ARsv3oyfzwVHvYyPMfzmm85o
2025-03-16 22:27:10.820 INFO  [http-nio-11040-exec-5] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/img/download/pimg
2025-03-16 22:27:10.822 INFO  [http-nio-11040-exec-5] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-03-16 22:27:10.823 DEBUG [http-nio-11040-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 1 msec}
2025-03-16 22:27:10.826 DEBUG [http-nio-11040-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT (
            select IFNULL(sf.approval_st, false)
            from tb_staff sf
            where sf.staff_id = id and
                  sf.shop_id = curr_shop_id
                   ) as approval_st
        FROM tb_account
        where id='km1104rs'
 {executed in 2 msec}
2025-03-16 22:27:10.826 INFO  [http-nio-11040-exec-5] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-03-16 22:27:15.312 INFO  [http-nio-11040-exec-3] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/auth/refresh
2025-03-16 22:27:15.314 INFO  [http-nio-11040-exec-3] [com.momo.filter.JwtAuthorizationFilter] - access token: null
2025-03-16 22:27:15.314 INFO  [http-nio-11040-exec-3] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/auth/refresh
2025-03-16 22:27:15.314 INFO  [http-nio-11040-exec-3] [com.momo.filter.JwtAuthorizationFilter] - 유효한 JWT 토큰이 없습니다
2025-03-16 22:27:15.318 INFO  [http-nio-11040-exec-3] [com.momo.api.AuthController] - refresh
2025-03-16 22:27:15.324 DEBUG [http-nio-11040-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
2. SELECT  *
        FROM    tb_refresh_token
        WHERE   refresh_token='eyJhbGciOiJIUzI1NiJ9.eyJleHAiOjE3NDIxMzUyMzB9.3LEQSrj9zRVmaW8HV-VqQ4i65o2gyilwnyYKDDdEcFk'
 {executed in 2 msec}
2025-03-16 22:27:15.327 DEBUG [http-nio-11040-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
2. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 2 msec}
2025-03-16 22:27:15.328 DEBUG [http-nio-11040-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
2. SELECT (
            select IFNULL(sf.approval_st, false)
            from tb_staff sf
            where sf.staff_id = id and
                  sf.shop_id = curr_shop_id
                   ) as approval_st
        FROM tb_account
        where id='km1104rs'
 {executed in 1 msec}
2025-03-16 22:27:15.330 INFO  [http-nio-11040-exec-3] [com.momo.api.AuthController] - jwt: JwtVO(grantType=Bearer , username=km1104rs, accessToken=eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0MjEzMTYzNSwiZXhwIjoxNzQyMTMyMjM1LCJhdXRob3JpdGllcyI6IlJPTEVfU1RGLEFQUFJPVkUifQ.DsWUye49Hd9TzK3RPM5Vu33YlOGkV8Rab_JoGydfuyE, refreshToken=null, expireTime=null, revoked=false, expired=false)
2025-03-16 22:27:15.356 INFO  [http-nio-11040-exec-8] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/notif/all
2025-03-16 22:27:15.356 INFO  [http-nio-11040-exec-6] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/notif/read/all
2025-03-16 22:27:15.356 INFO  [http-nio-11040-exec-8] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0MjEzMTYzNSwiZXhwIjoxNzQyMTMyMjM1LCJhdXRob3JpdGllcyI6IlJPTEVfU1RGLEFQUFJPVkUifQ.DsWUye49Hd9TzK3RPM5Vu33YlOGkV8Rab_JoGydfuyE
2025-03-16 22:27:15.356 INFO  [http-nio-11040-exec-6] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0MjEzMTYzNSwiZXhwIjoxNzQyMTMyMjM1LCJhdXRob3JpdGllcyI6IlJPTEVfU1RGLEFQUFJPVkUifQ.DsWUye49Hd9TzK3RPM5Vu33YlOGkV8Rab_JoGydfuyE
2025-03-16 22:27:15.356 INFO  [http-nio-11040-exec-8] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/notif/all
2025-03-16 22:27:15.356 INFO  [http-nio-11040-exec-6] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/notif/read/all
2025-03-16 22:27:15.364 INFO  [http-nio-11040-exec-8] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-03-16 22:27:15.365 INFO  [http-nio-11040-exec-6] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-03-16 22:27:15.367 DEBUG [http-nio-11040-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
2. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 2 msec}
2025-03-16 22:27:15.367 DEBUG [http-nio-11040-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 1 msec}
2025-03-16 22:27:15.368 INFO  [http-nio-11040-exec-9] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/notif/count/unread
2025-03-16 22:27:15.368 INFO  [http-nio-11040-exec-9] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0MjEzMTYzNSwiZXhwIjoxNzQyMTMyMjM1LCJhdXRob3JpdGllcyI6IlJPTEVfU1RGLEFQUFJPVkUifQ.DsWUye49Hd9TzK3RPM5Vu33YlOGkV8Rab_JoGydfuyE
2025-03-16 22:27:15.368 INFO  [http-nio-11040-exec-9] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/notif/count/unread
2025-03-16 22:27:15.368 INFO  [http-nio-11040-exec-7] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/user/info
2025-03-16 22:27:15.368 INFO  [http-nio-11040-exec-7] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0MjEzMTYzNSwiZXhwIjoxNzQyMTMyMjM1LCJhdXRob3JpdGllcyI6IlJPTEVfU1RGLEFQUFJPVkUifQ.DsWUye49Hd9TzK3RPM5Vu33YlOGkV8Rab_JoGydfuyE
2025-03-16 22:27:15.368 INFO  [http-nio-11040-exec-7] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/user/info
2025-03-16 22:27:15.371 INFO  [http-nio-11040-exec-7] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-03-16 22:27:15.371 DEBUG [http-nio-11040-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
2. SELECT (
            select IFNULL(sf.approval_st, false)
            from tb_staff sf
            where sf.staff_id = id and
                  sf.shop_id = curr_shop_id
                   ) as approval_st
        FROM tb_account
        where id='km1104rs'
 {executed in 3 msec}
2025-03-16 22:27:15.371 DEBUG [http-nio-11040-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT (
            select IFNULL(sf.approval_st, false)
            from tb_staff sf
            where sf.staff_id = id and
                  sf.shop_id = curr_shop_id
                   ) as approval_st
        FROM tb_account
        where id='km1104rs'
 {executed in 3 msec}
2025-03-16 22:27:15.371 INFO  [http-nio-11040-exec-9] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-03-16 22:27:15.371 INFO  [http-nio-11040-exec-8] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-03-16 22:27:15.371 INFO  [http-nio-11040-exec-6] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-03-16 22:27:15.372 INFO  [http-nio-11040-exec-6] [c.momo.common.util.SecurityContextUtil] - principal: UserDetailsImpl(username=km1104rs, password=$2a$10$uXShhwl6ULOkbJe477uDWOfdiUUcu6lOSF/Dhj9xP3U1nUn/gXkc6, authorities=[ROLE_STF, APPROVE])
2025-03-16 22:27:15.372 INFO  [http-nio-11040-exec-8] [c.momo.common.util.SecurityContextUtil] - principal: UserDetailsImpl(username=km1104rs, password=$2a$10$uXShhwl6ULOkbJe477uDWOfdiUUcu6lOSF/Dhj9xP3U1nUn/gXkc6, authorities=[ROLE_STF, APPROVE])
2025-03-16 22:27:15.373 DEBUG [http-nio-11040-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
4. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 1 msec}
2025-03-16 22:27:15.373 DEBUG [http-nio-11040-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
3. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 1 msec}
2025-03-16 22:27:15.373 DEBUG [http-nio-11040-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
2. UPDATE tb_notification
        SET read_st = TRUE
        WHERE receiver_id = 'km1104rs'
          AND read_st = FALSE
 {executed in 1 msec}
2025-03-16 22:27:15.374 DEBUG [http-nio-11040-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT content,
               notif_id,
               read_st,
               notif_tp as type,
               IF(date(send_dt) = current_date,true,false) as today,
            (
               TIMESTAMPDIFF(MINUTE, send_dt, current_timestamp)
            ) as ago
        FROM tb_notification
        WHERE receiver_id='km1104rs'
        ORDER BY send_dt DESC
 {executed in 2 msec}
2025-03-16 22:27:15.374 DEBUG [http-nio-11040-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
4. SELECT (
            select IFNULL(sf.approval_st, false)
            from tb_staff sf
            where sf.staff_id = id and
                  sf.shop_id = curr_shop_id
                   ) as approval_st
        FROM tb_account
        where id='km1104rs'
 {executed in 1 msec}
2025-03-16 22:27:15.374 DEBUG [http-nio-11040-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
3. SELECT (
            select IFNULL(sf.approval_st, false)
            from tb_staff sf
            where sf.staff_id = id and
                  sf.shop_id = curr_shop_id
                   ) as approval_st
        FROM tb_account
        where id='km1104rs'
 {executed in 1 msec}
2025-03-16 22:27:15.374 INFO  [http-nio-11040-exec-7] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-03-16 22:27:15.374 INFO  [http-nio-11040-exec-9] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-03-16 22:27:15.375 INFO  [http-nio-11040-exec-7] [c.momo.common.util.SecurityContextUtil] - principal: UserDetailsImpl(username=km1104rs, password=$2a$10$uXShhwl6ULOkbJe477uDWOfdiUUcu6lOSF/Dhj9xP3U1nUn/gXkc6, authorities=[ROLE_STF, APPROVE])
2025-03-16 22:27:15.375 INFO  [http-nio-11040-exec-9] [c.momo.common.util.SecurityContextUtil] - principal: UserDetailsImpl(username=km1104rs, password=$2a$10$uXShhwl6ULOkbJe477uDWOfdiUUcu6lOSF/Dhj9xP3U1nUn/gXkc6, authorities=[ROLE_STF, APPROVE])
2025-03-16 22:27:15.377 DEBUG [http-nio-11040-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
3. SELECT ac.id,
               ac.name,
               ac.tel,
               ac.nickname,
               ac.pfp,
               ac.curr_shop_id,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where sf.shop_id = ac.curr_shop_id and
                         sf.staff_id = ac.id
                   ) as role,
               sh.shop_nm,
               sh.shop_addr,
               sh.provider,
               (
                   IFNULL((
                       select sf2.approval_st
                       from tb_staff sf2
                       where sf2.shop_id=ac.curr_shop_id and
                           sf2.staff_id=ac.id
                       ), -1)
                ) as approval_st,
                ac.corp_nm,
                ac.br_no
        FROM tb_account ac
        LEFT OUTER JOIN tb_shop sh on sh.shop_id=ac.curr_shop_id
        WHERE id = 'km1104rs'
 {executed in 2 msec}
2025-03-16 22:27:15.377 DEBUG [http-nio-11040-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
4. SELECT count(*)
        FROM tb_notification
        WHERE receiver_id = 'km1104rs'
          AND read_st = FALSE
 {executed in 1 msec}
2025-03-16 22:27:15.378 INFO  [http-nio-11040-exec-7] [com.momo.api.UserController] - User: {role=1, approval_st=1, shop_addr=충청남도 천안시 병천면 충절로 1600 한국기술교육대학교 다산정보관 102, br_no=5218702490, provider=2, name=박희찬, nickname=대표, corp_nm=123, tel=010-4524-0636, id=km1104rs, pfp=1921fc01-e573-4243-9365-6b905389f4fc.png, curr_shop_id=2, shop_nm=한기대점 }
2025-03-16 22:27:15.387 INFO  [http-nio-11040-exec-10] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/notif/count/unread
2025-03-16 22:27:15.387 INFO  [http-nio-11040-exec-10] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0MjEzMTYzNSwiZXhwIjoxNzQyMTMyMjM1LCJhdXRob3JpdGllcyI6IlJPTEVfU1RGLEFQUFJPVkUifQ.DsWUye49Hd9TzK3RPM5Vu33YlOGkV8Rab_JoGydfuyE
2025-03-16 22:27:15.387 INFO  [http-nio-11040-exec-10] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/notif/count/unread
2025-03-16 22:27:15.390 INFO  [http-nio-11040-exec-10] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-03-16 22:27:15.393 DEBUG [http-nio-11040-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 1 msec}
2025-03-16 22:27:15.395 DEBUG [http-nio-11040-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT (
            select IFNULL(sf.approval_st, false)
            from tb_staff sf
            where sf.staff_id = id and
                  sf.shop_id = curr_shop_id
                   ) as approval_st
        FROM tb_account
        where id='km1104rs'
 {executed in 2 msec}
2025-03-16 22:27:15.395 INFO  [http-nio-11040-exec-10] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-03-16 22:27:15.396 INFO  [http-nio-11040-exec-10] [c.momo.common.util.SecurityContextUtil] - principal: UserDetailsImpl(username=km1104rs, password=$2a$10$uXShhwl6ULOkbJe477uDWOfdiUUcu6lOSF/Dhj9xP3U1nUn/gXkc6, authorities=[ROLE_STF, APPROVE])
2025-03-16 22:27:15.401 DEBUG [http-nio-11040-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT count(*)
        FROM tb_notification
        WHERE receiver_id = 'km1104rs'
          AND read_st = FALSE
 {executed in 4 msec}
2025-03-16 22:27:15.410 INFO  [http-nio-11040-exec-1] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/notif/count/unread
2025-03-16 22:27:15.410 INFO  [http-nio-11040-exec-1] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0MjEzMTYzNSwiZXhwIjoxNzQyMTMyMjM1LCJhdXRob3JpdGllcyI6IlJPTEVfU1RGLEFQUFJPVkUifQ.DsWUye49Hd9TzK3RPM5Vu33YlOGkV8Rab_JoGydfuyE
2025-03-16 22:27:15.410 INFO  [http-nio-11040-exec-1] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/notif/count/unread
2025-03-16 22:27:15.412 INFO  [http-nio-11040-exec-1] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-03-16 22:27:15.413 INFO  [http-nio-11040-exec-2] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/sale/graph/ct/d
2025-03-16 22:27:15.413 INFO  [http-nio-11040-exec-2] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0MjEzMTYzNSwiZXhwIjoxNzQyMTMyMjM1LCJhdXRob3JpdGllcyI6IlJPTEVfU1RGLEFQUFJPVkUifQ.DsWUye49Hd9TzK3RPM5Vu33YlOGkV8Rab_JoGydfuyE
2025-03-16 22:27:15.413 INFO  [http-nio-11040-exec-2] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/sale/graph/ct/d
2025-03-16 22:27:15.414 INFO  [http-nio-11040-exec-2] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-03-16 22:27:15.415 DEBUG [http-nio-11040-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
2. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 1 msec}
2025-03-16 22:27:15.418 DEBUG [http-nio-11040-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 3 msec}
2025-03-16 22:27:15.418 DEBUG [http-nio-11040-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
2. SELECT (
            select IFNULL(sf.approval_st, false)
            from tb_staff sf
            where sf.staff_id = id and
                  sf.shop_id = curr_shop_id
                   ) as approval_st
        FROM tb_account
        where id='km1104rs'
 {executed in 3 msec}
2025-03-16 22:27:15.419 INFO  [http-nio-11040-exec-1] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-03-16 22:27:15.419 INFO  [http-nio-11040-exec-1] [c.momo.common.util.SecurityContextUtil] - principal: UserDetailsImpl(username=km1104rs, password=$2a$10$uXShhwl6ULOkbJe477uDWOfdiUUcu6lOSF/Dhj9xP3U1nUn/gXkc6, authorities=[ROLE_STF, APPROVE])
2025-03-16 22:27:15.420 DEBUG [http-nio-11040-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT (
            select IFNULL(sf.approval_st, false)
            from tb_staff sf
            where sf.staff_id = id and
                  sf.shop_id = curr_shop_id
                   ) as approval_st
        FROM tb_account
        where id='km1104rs'
 {executed in 1 msec}
2025-03-16 22:27:15.420 INFO  [http-nio-11040-exec-2] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-03-16 22:27:15.421 DEBUG [http-nio-11040-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
2. SELECT count(*)
        FROM tb_notification
        WHERE receiver_id = 'km1104rs'
          AND read_st = FALSE
 {executed in 1 msec}
2025-03-16 22:27:15.421 INFO  [http-nio-11040-exec-5] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/sale/change/ct
2025-03-16 22:27:15.421 INFO  [http-nio-11040-exec-5] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0MjEzMTYzNSwiZXhwIjoxNzQyMTMyMjM1LCJhdXRob3JpdGllcyI6IlJPTEVfU1RGLEFQUFJPVkUifQ.DsWUye49Hd9TzK3RPM5Vu33YlOGkV8Rab_JoGydfuyE
2025-03-16 22:27:15.421 INFO  [http-nio-11040-exec-5] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/sale/change/ct
2025-03-16 22:27:15.423 INFO  [http-nio-11040-exec-5] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-03-16 22:27:15.427 DEBUG [http-nio-11040-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. set @limit_cond := (
               case 'd'
                   when 'h' then '2000-01-24'
                   when 'd' then '2025-03-16'
                   when 'w' then '2025-03-16'
                   when 'm' then date_sub('2025-03-16', interval 1 month)
               end
        );

        with recursive org_date_table as (
            select (
                       case
                           when 'd' = 'h' then '2000-01-01'
                           when 'd' != 'h' then '2024-12-16'
                           end
                       ) as it
            union all
            select (
                       case 'd'
                           when 'h' then date_add(it, interval 1 day)
                           when 'd' then date_add(it, interval 1 day)
                           when 'w' then date_add(it, interval 1 week)
                           when 'm' then date_add(it, interval 1 month)
                           end
                       ) as it
            from org_date_table
            where it < @limit_cond
        ), date_table as (
            select
                year(it) as _year,
                (
                    case 'd'
                        when 'h' then day(it)
                        when 'd' then it
                        when 'w' then week(it)
                        when 'm' then month(it)
                        end
                    ) as dt
            from org_date_table
        ),  date_sale as (
            select year(actv_dt) _year,
                   month(actv_dt) as m,
                   week(actv_dt) as w,
                   actv_dt as d,
                   hour(regi_dt) as h,
                   tb_sale.*
            from tb_sale
            where shop_id=2 and

                actv_dt between '2024-12-16' and (
                    case
                        when 'd' = 'h' then '2024-12-16'
                        when 'd' != 'h' then '2025-03-16'
                        end
                    )
        ), final as (
            select count(device_id) as cnt
            from date_table dd
                     left outer join date_sale ds on dd._year=ds._year and
                                                     d = dt
            group by dd._year, dd.dt
        )

        select
            (
                select json_arrayagg(cnt)
                from final
            ) as value,
            (
                select json_arrayagg(date_format(it, '%Y-%m-%d'))
                from org_date_table
            ) as date
 {executed in 3 msec}
2025-03-16 22:27:15.427 DEBUG [http-nio-11040-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
2. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 3 msec}
2025-03-16 22:27:15.430 INFO  [http-nio-11040-exec-4] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/pimg
2025-03-16 22:27:15.431 INFO  [http-nio-11040-exec-4] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0MjEzMTYzNSwiZXhwIjoxNzQyMTMyMjM1LCJhdXRob3JpdGllcyI6IlJPTEVfU1RGLEFQUFJPVkUifQ.DsWUye49Hd9TzK3RPM5Vu33YlOGkV8Rab_JoGydfuyE
2025-03-16 22:27:15.431 INFO  [http-nio-11040-exec-4] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/pimg
2025-03-16 22:27:15.431 DEBUG [http-nio-11040-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
2. SELECT (
            select IFNULL(sf.approval_st, false)
            from tb_staff sf
            where sf.staff_id = id and
                  sf.shop_id = curr_shop_id
                   ) as approval_st
        FROM tb_account
        where id='km1104rs'
 {executed in 4 msec}
2025-03-16 22:27:15.431 INFO  [http-nio-11040-exec-5] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-03-16 22:27:15.432 INFO  [http-nio-11040-exec-4] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-03-16 22:27:15.433 DEBUG [http-nio-11040-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
2. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 1 msec}
2025-03-16 22:27:15.435 DEBUG [http-nio-11040-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. with tb as (
            SELECT
                (
                    SELECT count(*)
                    FROM tb_sale
                    WHERE shop_id=2 and
                          device_id != 0 and
                          actv_dt BETWEEN '2025-02-01' AND '2025-02-16'
                    ) as prev,
                (
                    SELECT count(*)
                    FROM tb_sale
                    WHERE shop_id=2 and
                        device_id != 0 and
                        actv_dt BETWEEN '2025-03-01' AND '2025-03-16'
                ) as curr
            FROM DUAL
        )

        SELECT tb.curr - tb.prev
        FROM tb
 {executed in 2 msec}
2025-03-16 22:27:15.437 DEBUG [http-nio-11040-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
2. SELECT (
            select IFNULL(sf.approval_st, false)
            from tb_staff sf
            where sf.staff_id = id and
                  sf.shop_id = curr_shop_id
                   ) as approval_st
        FROM tb_account
        where id='km1104rs'
 {executed in 2 msec}
2025-03-16 22:27:15.438 INFO  [http-nio-11040-exec-4] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-03-16 22:27:15.440 DEBUG [http-nio-11040-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
2. select pimg_id as id,
               pimg_text as text,
               pimg_path as file
        from tb_post_img
        where shop_id=2
 {executed in 1 msec}
2025-03-16 22:27:15.440 INFO  [http-nio-11040-exec-3] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/todo
2025-03-16 22:27:15.440 INFO  [http-nio-11040-exec-3] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0MjEzMTYzNSwiZXhwIjoxNzQyMTMyMjM1LCJhdXRob3JpdGllcyI6IlJPTEVfU1RGLEFQUFJPVkUifQ.DsWUye49Hd9TzK3RPM5Vu33YlOGkV8Rab_JoGydfuyE
2025-03-16 22:27:15.440 INFO  [http-nio-11040-exec-3] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/todo
2025-03-16 22:27:15.443 INFO  [http-nio-11040-exec-3] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-03-16 22:27:15.446 DEBUG [http-nio-11040-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
2. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 1 msec}
2025-03-16 22:27:15.447 INFO  [http-nio-11040-exec-6] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/todo/detail
2025-03-16 22:27:15.447 INFO  [http-nio-11040-exec-6] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0MjEzMTYzNSwiZXhwIjoxNzQyMTMyMjM1LCJhdXRob3JpdGllcyI6IlJPTEVfU1RGLEFQUFJPVkUifQ.DsWUye49Hd9TzK3RPM5Vu33YlOGkV8Rab_JoGydfuyE
2025-03-16 22:27:15.447 INFO  [http-nio-11040-exec-6] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/todo/detail
2025-03-16 22:27:15.449 DEBUG [http-nio-11040-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
2. SELECT (
            select IFNULL(sf.approval_st, false)
            from tb_staff sf
            where sf.staff_id = id and
                  sf.shop_id = curr_shop_id
                   ) as approval_st
        FROM tb_account
        where id='km1104rs'
 {executed in 3 msec}
2025-03-16 22:27:15.450 INFO  [http-nio-11040-exec-3] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-03-16 22:27:15.450 INFO  [http-nio-11040-exec-6] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-03-16 22:27:15.451 DEBUG [http-nio-11040-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
2. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 1 msec}
2025-03-16 22:27:15.452 DEBUG [http-nio-11040-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT SUBSTR(todo_dt, 9, 2)
        FROM tb_todo
        WHERE shop_id= 2  and
            todo_dt like '%2025-03%'
 {executed in 1 msec}
2025-03-16 22:27:15.452 DEBUG [http-nio-11040-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
2. SELECT (
            select IFNULL(sf.approval_st, false)
            from tb_staff sf
            where sf.staff_id = id and
                  sf.shop_id = curr_shop_id
                   ) as approval_st
        FROM tb_account
        where id='km1104rs'
 {executed in 0 msec}
2025-03-16 22:27:15.452 INFO  [http-nio-11040-exec-6] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-03-16 22:27:15.455 DEBUG [http-nio-11040-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
2. SELECT todo_id,
                color,
                checked,
               content
        FROM tb_todo td
        WHERE td.shop_id=2 and
            todo_dt='2025-03-16'
 {executed in 1 msec}
2025-03-16 22:27:15.460 INFO  [http-nio-11040-exec-8] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/todo/detail
2025-03-16 22:27:15.460 INFO  [http-nio-11040-exec-8] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0MjEzMTYzNSwiZXhwIjoxNzQyMTMyMjM1LCJhdXRob3JpdGllcyI6IlJPTEVfU1RGLEFQUFJPVkUifQ.DsWUye49Hd9TzK3RPM5Vu33YlOGkV8Rab_JoGydfuyE
2025-03-16 22:27:15.460 INFO  [http-nio-11040-exec-8] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/todo/detail
2025-03-16 22:27:15.462 INFO  [http-nio-11040-exec-8] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-03-16 22:27:15.463 DEBUG [http-nio-11040-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 1 msec}
2025-03-16 22:27:15.465 DEBUG [http-nio-11040-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT (
            select IFNULL(sf.approval_st, false)
            from tb_staff sf
            where sf.staff_id = id and
                  sf.shop_id = curr_shop_id
                   ) as approval_st
        FROM tb_account
        where id='km1104rs'
 {executed in 1 msec}
2025-03-16 22:27:15.466 INFO  [http-nio-11040-exec-8] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-03-16 22:27:15.468 DEBUG [http-nio-11040-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT todo_id,
                color,
                checked,
               content
        FROM tb_todo td
        WHERE td.shop_id=2 and
            todo_dt='2025-03-16'
 {executed in 0 msec}
2025-03-16 22:27:15.468 INFO  [http-nio-11040-exec-7] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/shop/all
2025-03-16 22:27:15.468 INFO  [http-nio-11040-exec-7] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0MjEzMTYzNSwiZXhwIjoxNzQyMTMyMjM1LCJhdXRob3JpdGllcyI6IlJPTEVfU1RGLEFQUFJPVkUifQ.DsWUye49Hd9TzK3RPM5Vu33YlOGkV8Rab_JoGydfuyE
2025-03-16 22:27:15.468 INFO  [http-nio-11040-exec-7] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/shop/all
2025-03-16 22:27:15.470 INFO  [http-nio-11040-exec-7] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-03-16 22:27:15.472 DEBUG [http-nio-11040-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
3. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 1 msec}
2025-03-16 22:27:15.473 DEBUG [http-nio-11040-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
3. SELECT (
            select IFNULL(sf.approval_st, false)
            from tb_staff sf
            where sf.staff_id = id and
                  sf.shop_id = curr_shop_id
                   ) as approval_st
        FROM tb_account
        where id='km1104rs'
 {executed in 1 msec}
2025-03-16 22:27:15.473 INFO  [http-nio-11040-exec-7] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-03-16 22:27:15.474 INFO  [http-nio-11040-exec-7] [c.momo.common.util.SecurityContextUtil] - principal: UserDetailsImpl(username=km1104rs, password=$2a$10$uXShhwl6ULOkbJe477uDWOfdiUUcu6lOSF/Dhj9xP3U1nUn/gXkc6, authorities=[ROLE_STF, APPROVE])
2025-03-16 22:27:15.476 DEBUG [http-nio-11040-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
3. select sh.shop_id,
               sh.shop_nm
        from tb_staff sf
        left outer join tb_shop sh on sh.shop_id=sf.shop_id
        where staff_id='km1104rs'
 {executed in 2 msec}
2025-03-16 22:27:15.477 INFO  [http-nio-11040-exec-9] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/img/download/pfp
2025-03-16 22:27:15.477 INFO  [http-nio-11040-exec-9] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0MjEzMTYzNSwiZXhwIjoxNzQyMTMyMjM1LCJhdXRob3JpdGllcyI6IlJPTEVfU1RGLEFQUFJPVkUifQ.DsWUye49Hd9TzK3RPM5Vu33YlOGkV8Rab_JoGydfuyE
2025-03-16 22:27:15.477 INFO  [http-nio-11040-exec-9] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/img/download/pfp
2025-03-16 22:27:15.478 INFO  [http-nio-11040-exec-9] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-03-16 22:27:15.479 DEBUG [http-nio-11040-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
4. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 1 msec}
2025-03-16 22:27:15.481 DEBUG [http-nio-11040-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
4. SELECT (
            select IFNULL(sf.approval_st, false)
            from tb_staff sf
            where sf.staff_id = id and
                  sf.shop_id = curr_shop_id
                   ) as approval_st
        FROM tb_account
        where id='km1104rs'
 {executed in 0 msec}
2025-03-16 22:27:15.481 INFO  [http-nio-11040-exec-9] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-03-16 22:27:15.485 INFO  [http-nio-11040-exec-10] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/sale/summary
2025-03-16 22:27:15.485 INFO  [http-nio-11040-exec-10] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0MjEzMTYzNSwiZXhwIjoxNzQyMTMyMjM1LCJhdXRob3JpdGllcyI6IlJPTEVfU1RGLEFQUFJPVkUifQ.DsWUye49Hd9TzK3RPM5Vu33YlOGkV8Rab_JoGydfuyE
2025-03-16 22:27:15.485 INFO  [http-nio-11040-exec-10] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/sale/summary
2025-03-16 22:27:15.486 INFO  [http-nio-11040-exec-10] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-03-16 22:27:15.498 DEBUG [http-nio-11040-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 8 msec}
2025-03-16 22:27:15.502 INFO  [http-nio-11040-exec-1] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/sale/ratio
2025-03-16 22:27:15.502 INFO  [http-nio-11040-exec-1] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0MjEzMTYzNSwiZXhwIjoxNzQyMTMyMjM1LCJhdXRob3JpdGllcyI6IlJPTEVfU1RGLEFQUFJPVkUifQ.DsWUye49Hd9TzK3RPM5Vu33YlOGkV8Rab_JoGydfuyE
2025-03-16 22:27:15.502 INFO  [http-nio-11040-exec-1] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/sale/ratio
2025-03-16 22:27:15.503 DEBUG [http-nio-11040-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT (
            select IFNULL(sf.approval_st, false)
            from tb_staff sf
            where sf.staff_id = id and
                  sf.shop_id = curr_shop_id
                   ) as approval_st
        FROM tb_account
        where id='km1104rs'
 {executed in 4 msec}
2025-03-16 22:27:15.503 INFO  [http-nio-11040-exec-2] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/sale/wip
2025-03-16 22:27:15.503 INFO  [http-nio-11040-exec-2] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0MjEzMTYzNSwiZXhwIjoxNzQyMTMyMjM1LCJhdXRob3JpdGllcyI6IlJPTEVfU1RGLEFQUFJPVkUifQ.DsWUye49Hd9TzK3RPM5Vu33YlOGkV8Rab_JoGydfuyE
2025-03-16 22:27:15.503 INFO  [http-nio-11040-exec-2] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/sale/wip
2025-03-16 22:27:15.504 INFO  [http-nio-11040-exec-10] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-03-16 22:27:15.504 INFO  [http-nio-11040-exec-1] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-03-16 22:27:15.504 INFO  [http-nio-11040-exec-2] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-03-16 22:27:15.505 DEBUG [http-nio-11040-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
2. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 0 msec}
2025-03-16 22:27:15.505 DEBUG [http-nio-11040-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 1 msec}
2025-03-16 22:27:15.506 DEBUG [http-nio-11040-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
2. SELECT (
            select IFNULL(sf.approval_st, false)
            from tb_staff sf
            where sf.staff_id = id and
                  sf.shop_id = curr_shop_id
                   ) as approval_st
        FROM tb_account
        where id='km1104rs'
 {executed in 1 msec}
2025-03-16 22:27:15.506 INFO  [http-nio-11040-exec-1] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-03-16 22:27:15.507 DEBUG [http-nio-11040-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT (
            select IFNULL(sf.approval_st, false)
            from tb_staff sf
            where sf.staff_id = id and
                  sf.shop_id = curr_shop_id
                   ) as approval_st
        FROM tb_account
        where id='km1104rs'
 {executed in 1 msec}
2025-03-16 22:27:15.507 INFO  [http-nio-11040-exec-2] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-03-16 22:27:15.509 DEBUG [http-nio-11040-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
2. SET @total_sale_count := (
            SELECT count(*)
            FROM tb_sale
            WHERE shop_id=2 and
                device_id is not null and
                actv_dt like '2025-03%'
        );

        with tb as (
            SELECT count(*) as curr
            FROM tb_sale_card sc
                     LEFT OUTER JOIN tb_sale sl on sl.sale_id=sc.sale_id
            WHERE sc.shop_id=2 and
                actv_dt like '2025-03%'
            UNION ALL
            SELECT count(*) as curr
            FROM tb_sale
            WHERE shop_id= 2 and
                actv_dt like '2025-03%' and
                sd_id is not null
            UNION ALL
            SELECT count(*) as curr
            FROM tb_sale
            WHERE shop_id= 2 and
                actv_dt like '2025-03%' and
                exsvc_id is not null
        )

        SELECT
            curr as value,
            @total_sale_count as total,
            (
                CASE
                    WHEN @total_sale_count = 0 THEN 0
                    WHEN @total_sale_count != 0 THEN TRUNCATE(((curr/@total_sale_count))*100, 1)
                    END
                ) as per
        FROM tb
 {executed in 2 msec}
2025-03-16 22:27:15.510 DEBUG [http-nio-11040-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
3. with prevMonth as (
            SELECT *
            FROM tb_sale
            WHERE shop_id=2 and
                actv_dt like '2025-02%'
        ), currMonth as (
            SELECT *
            FROM tb_sale
            WHERE shop_id=2 and
                actv_dt like '2025-03%'
        ) , tb as (
            SELECT
                (
                    SELECT IFNULL(count(*), 0)
                    FROM prevMonth
                    WHERE device_id is not null
                    ) as prev,
                (
                    SELECT IFNULL(count(*), 0)
                    FROM currMonth
                    WHERE device_id is not null
                ) as curr
            from dual
            UNION ALL
            SELECT
                (
                    SELECT IFNULL(count(*), 0)
                    FROM prevMonth
                    WHERE internet_plan is not null
                ) as prev,
                (
                    SELECT IFNULL(count(*), 0)
                    FROM currMonth
                    WHERE internet_plan is not null
                ) as curr
            from dual
            UNION ALL
            SELECT
                (
                    SELECT IFNULL(count(*), 0)
                    FROM prevMonth
                    WHERE tv_plan is not null
                ) as prev,
                (
                    SELECT IFNULL(count(*), 0)
                    FROM currMonth
                    WHERE tv_plan is not null
                ) as curr
            from dual
            UNION ALL
            SELECT
                (
                    SELECT IFNULL(SUM(total_cms),0)
                    FROM prevMonth
                    where device_id is not null
                ) as prev,
                (
                    SELECT IFNULL(SUM(total_cms),0)
                    FROM currMonth
                    where device_id is not null
                ) as curr
            from dual
            UNION ALL
            SELECT
                (
                    SELECT IFNULL(AVG(total_cms),0)
                    FROM prevMonth
                    where device_id is not null
                ) as prev,
                (
                    SELECT IFNULL(AVG(total_cms),0)
                    FROM currMonth
                    where device_id is not null
                ) as curr
            from dual
        )

        SELECT FLOOR(curr) as value,
               (
                   CASE
                       WHEN curr = 0 THEN 0
                       WHEN prev = 0 THEN 100
                       WHEN prev != 0 THEN TRUNCATE(((curr/prev)-1)*100, 1)
                   END
                   ) as per
        FROM tb
 {executed in 3 msec}
2025-03-16 22:27:15.510 DEBUG [http-nio-11040-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. with table_ud as (
            SELECT ud_st
            FROM tb_sale_used_device sud
            LEFT OUTER JOIN tb_sale sl on sl.sale_id=sud.sale_id
            WHERE sud.shop_id=2
--               and
--                 actv_dt like '%'
        ), table_card as (
            SELECT card_st
            FROM tb_sale_card sc
            LEFT OUTER JOIN tb_sale sl on sl.sale_id=sc.sale_id
            WHERE sc.shop_id=2
--               and
--                 actv_dt like '%'
        ), table_comb as (
            SELECT comb_st
            FROM tb_sale
            WHERE shop_id=2
--               and
--                 actv_dt like '%%'
        ), table_sup as (
            SELECT sup_st
            FROM tb_sale_support sc LEFT OUTER JOIN tb_sale sl on sl.sale_id=sc.sale_id
            WHERE sc.shop_id=2
--               and
--                 actv_dt like '%%'
        ), table_pm as (
            SELECT checked
            FROM tb_promise sc
                LEFT OUTER JOIN tb_sale sl on sl.sale_id=sc.sale_id
            WHERE sc.shop_id=2
--               and
--                 actv_dt like '%%'
        ), rst as (
            SELECT
                (
                    SELECT count(*)
                    FROM table_ud
                    WHERE ud_st!=2
                )
            UNION ALL
            SELECT
                (
                    SELECT count(*)
                    FROM table_card
                    WHERE card_st!=2
                )
            UNION ALL
            SELECT
                (
                    SELECT count(*)
                    FROM table_comb
                    WHERE comb_st!=1
                )
            UNION ALL
            SELECT
                (
                    SELECT count(*)
                    FROM table_sup
                    WHERE sup_st!=1
                )
            UNION ALL
            SELECT
                (
                    SELECT count(*)
                    FROM table_pm
                    WHERE checked!=1
                )
        )

        SELECT *
        FROM rst
 {executed in 2 msec}
2025-03-16 22:27:15.525 INFO  [http-nio-11040-exec-5] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/img/download/pimg
2025-03-16 22:27:15.526 INFO  [http-nio-11040-exec-5] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0MjEzMTYzNSwiZXhwIjoxNzQyMTMyMjM1LCJhdXRob3JpdGllcyI6IlJPTEVfU1RGLEFQUFJPVkUifQ.DsWUye49Hd9TzK3RPM5Vu33YlOGkV8Rab_JoGydfuyE
2025-03-16 22:27:15.526 INFO  [http-nio-11040-exec-5] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/img/download/pimg
2025-03-16 22:27:15.527 INFO  [http-nio-11040-exec-5] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-03-16 22:27:15.529 DEBUG [http-nio-11040-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 1 msec}
2025-03-16 22:27:15.531 DEBUG [http-nio-11040-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT (
            select IFNULL(sf.approval_st, false)
            from tb_staff sf
            where sf.staff_id = id and
                  sf.shop_id = curr_shop_id
                   ) as approval_st
        FROM tb_account
        where id='km1104rs'
 {executed in 2 msec}
2025-03-16 22:27:15.531 INFO  [http-nio-11040-exec-5] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-03-16 22:27:15.589 INFO  [http-nio-11040-exec-4] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/todo
2025-03-16 22:27:15.589 INFO  [http-nio-11040-exec-4] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0MjEzMTYzNSwiZXhwIjoxNzQyMTMyMjM1LCJhdXRob3JpdGllcyI6IlJPTEVfU1RGLEFQUFJPVkUifQ.DsWUye49Hd9TzK3RPM5Vu33YlOGkV8Rab_JoGydfuyE
2025-03-16 22:27:15.589 INFO  [http-nio-11040-exec-4] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/todo
2025-03-16 22:27:15.595 INFO  [http-nio-11040-exec-4] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-03-16 22:27:15.597 DEBUG [http-nio-11040-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
2. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 1 msec}
2025-03-16 22:27:15.598 DEBUG [http-nio-11040-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
2. SELECT (
            select IFNULL(sf.approval_st, false)
            from tb_staff sf
            where sf.staff_id = id and
                  sf.shop_id = curr_shop_id
                   ) as approval_st
        FROM tb_account
        where id='km1104rs'
 {executed in 1 msec}
2025-03-16 22:27:15.598 INFO  [http-nio-11040-exec-4] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-03-16 22:27:15.601 DEBUG [http-nio-11040-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
2. SELECT SUBSTR(todo_dt, 9, 2)
        FROM tb_todo
        WHERE shop_id= 2  and
            todo_dt like '%2025-03%'
 {executed in 1 msec}
2025-03-16 22:27:15.603 INFO  [http-nio-11040-exec-3] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/todo/detail
2025-03-16 22:27:15.603 INFO  [http-nio-11040-exec-3] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0MjEzMTYzNSwiZXhwIjoxNzQyMTMyMjM1LCJhdXRob3JpdGllcyI6IlJPTEVfU1RGLEFQUFJPVkUifQ.DsWUye49Hd9TzK3RPM5Vu33YlOGkV8Rab_JoGydfuyE
2025-03-16 22:27:15.603 INFO  [http-nio-11040-exec-3] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/todo/detail
2025-03-16 22:27:15.605 INFO  [http-nio-11040-exec-3] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-03-16 22:27:15.607 DEBUG [http-nio-11040-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 2 msec}
2025-03-16 22:27:15.610 DEBUG [http-nio-11040-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT (
            select IFNULL(sf.approval_st, false)
            from tb_staff sf
            where sf.staff_id = id and
                  sf.shop_id = curr_shop_id
                   ) as approval_st
        FROM tb_account
        where id='km1104rs'
 {executed in 2 msec}
2025-03-16 22:27:15.611 INFO  [http-nio-11040-exec-3] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-03-16 22:27:15.613 DEBUG [http-nio-11040-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT todo_id,
                color,
                checked,
               content
        FROM tb_todo td
        WHERE td.shop_id=2 and
            todo_dt='2025-03-16'
 {executed in 1 msec}
2025-03-16 22:27:15.622 INFO  [http-nio-11040-exec-6] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/todo/detail
2025-03-16 22:27:15.622 INFO  [http-nio-11040-exec-6] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0MjEzMTYzNSwiZXhwIjoxNzQyMTMyMjM1LCJhdXRob3JpdGllcyI6IlJPTEVfU1RGLEFQUFJPVkUifQ.DsWUye49Hd9TzK3RPM5Vu33YlOGkV8Rab_JoGydfuyE
2025-03-16 22:27:15.622 INFO  [http-nio-11040-exec-6] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/todo/detail
2025-03-16 22:27:15.624 INFO  [http-nio-11040-exec-6] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-03-16 22:27:15.626 DEBUG [http-nio-11040-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
2. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 1 msec}
2025-03-16 22:27:15.628 DEBUG [http-nio-11040-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
2. SELECT (
            select IFNULL(sf.approval_st, false)
            from tb_staff sf
            where sf.staff_id = id and
                  sf.shop_id = curr_shop_id
                   ) as approval_st
        FROM tb_account
        where id='km1104rs'
 {executed in 1 msec}
2025-03-16 22:27:15.628 INFO  [http-nio-11040-exec-6] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-03-16 22:27:15.630 DEBUG [http-nio-11040-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
2. SELECT todo_id,
                color,
                checked,
               content
        FROM tb_todo td
        WHERE td.shop_id=2 and
            todo_dt='2025-03-16'
 {executed in 1 msec}
2025-03-16 22:27:15.670 INFO  [http-nio-11040-exec-8] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/img/download/pimg
2025-03-16 22:27:15.670 INFO  [http-nio-11040-exec-8] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0MjEzMTYzNSwiZXhwIjoxNzQyMTMyMjM1LCJhdXRob3JpdGllcyI6IlJPTEVfU1RGLEFQUFJPVkUifQ.DsWUye49Hd9TzK3RPM5Vu33YlOGkV8Rab_JoGydfuyE
2025-03-16 22:27:15.670 INFO  [http-nio-11040-exec-8] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/img/download/pimg
2025-03-16 22:27:15.672 INFO  [http-nio-11040-exec-8] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-03-16 22:27:15.678 DEBUG [http-nio-11040-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 5 msec}
2025-03-16 22:27:15.745 INFO  [http-nio-11040-exec-7] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/todo
2025-03-16 22:27:15.745 INFO  [http-nio-11040-exec-7] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0MjEzMTYzNSwiZXhwIjoxNzQyMTMyMjM1LCJhdXRob3JpdGllcyI6IlJPTEVfU1RGLEFQUFJPVkUifQ.DsWUye49Hd9TzK3RPM5Vu33YlOGkV8Rab_JoGydfuyE
2025-03-16 22:27:15.745 INFO  [http-nio-11040-exec-7] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/todo
2025-03-16 22:27:15.750 INFO  [http-nio-11040-exec-7] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-03-16 22:27:15.753 INFO  [http-nio-11040-exec-9] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/todo/detail
2025-03-16 22:27:15.754 INFO  [http-nio-11040-exec-9] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0MjEzMTYzNSwiZXhwIjoxNzQyMTMyMjM1LCJhdXRob3JpdGllcyI6IlJPTEVfU1RGLEFQUFJPVkUifQ.DsWUye49Hd9TzK3RPM5Vu33YlOGkV8Rab_JoGydfuyE
2025-03-16 22:27:15.754 INFO  [http-nio-11040-exec-9] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/todo/detail
2025-03-16 22:27:15.757 INFO  [http-nio-11040-exec-9] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-03-16 22:27:15.759 DEBUG [http-nio-11040-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
3. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 6 msec}
2025-03-16 22:27:15.772 DEBUG [http-nio-11040-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT (
            select IFNULL(sf.approval_st, false)
            from tb_staff sf
            where sf.staff_id = id and
                  sf.shop_id = curr_shop_id
                   ) as approval_st
        FROM tb_account
        where id='km1104rs'
 {executed in 59 msec}
2025-03-16 22:27:15.773 INFO  [http-nio-11040-exec-8] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-03-16 22:27:15.803 DEBUG [http-nio-11040-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
3. SELECT (
            select IFNULL(sf.approval_st, false)
            from tb_staff sf
            where sf.staff_id = id and
                  sf.shop_id = curr_shop_id
                   ) as approval_st
        FROM tb_account
        where id='km1104rs'
 {executed in 42 msec}
2025-03-16 22:27:15.804 INFO  [http-nio-11040-exec-7] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-03-16 22:27:15.813 DEBUG [http-nio-11040-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
4. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 44 msec}
2025-03-16 22:27:15.815 DEBUG [http-nio-11040-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
3. SELECT SUBSTR(todo_dt, 9, 2)
        FROM tb_todo
        WHERE shop_id= 2  and
            todo_dt like '%2025-03%'
 {executed in 8 msec}
2025-03-16 22:27:15.820 INFO  [http-nio-11040-exec-1] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/img/download/pimg
2025-03-16 22:27:15.820 INFO  [http-nio-11040-exec-1] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0MjEzMTYzNSwiZXhwIjoxNzQyMTMyMjM1LCJhdXRob3JpdGllcyI6IlJPTEVfU1RGLEFQUFJPVkUifQ.DsWUye49Hd9TzK3RPM5Vu33YlOGkV8Rab_JoGydfuyE
2025-03-16 22:27:15.820 INFO  [http-nio-11040-exec-1] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/img/download/pimg
2025-03-16 22:27:15.823 DEBUG [http-nio-11040-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
4. SELECT (
            select IFNULL(sf.approval_st, false)
            from tb_staff sf
            where sf.staff_id = id and
                  sf.shop_id = curr_shop_id
                   ) as approval_st
        FROM tb_account
        where id='km1104rs'
 {executed in 7 msec}
2025-03-16 22:27:15.824 INFO  [http-nio-11040-exec-9] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-03-16 22:27:15.828 INFO  [http-nio-11040-exec-1] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-03-16 22:27:15.830 DEBUG [http-nio-11040-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
2. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 1 msec}
2025-03-16 22:27:15.830 DEBUG [http-nio-11040-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
4. SELECT todo_id,
                color,
                checked,
               content
        FROM tb_todo td
        WHERE td.shop_id=2 and
            todo_dt='2025-03-16'
 {executed in 1 msec}
2025-03-16 22:27:15.837 DEBUG [http-nio-11040-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
2. SELECT (
            select IFNULL(sf.approval_st, false)
            from tb_staff sf
            where sf.staff_id = id and
                  sf.shop_id = curr_shop_id
                   ) as approval_st
        FROM tb_account
        where id='km1104rs'
 {executed in 5 msec}
2025-03-16 22:27:15.838 INFO  [http-nio-11040-exec-1] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-03-16 22:27:15.840 INFO  [http-nio-11040-exec-10] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/todo/detail
2025-03-16 22:27:15.840 INFO  [http-nio-11040-exec-10] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0MjEzMTYzNSwiZXhwIjoxNzQyMTMyMjM1LCJhdXRob3JpdGllcyI6IlJPTEVfU1RGLEFQUFJPVkUifQ.DsWUye49Hd9TzK3RPM5Vu33YlOGkV8Rab_JoGydfuyE
2025-03-16 22:27:15.840 INFO  [http-nio-11040-exec-10] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/todo/detail
2025-03-16 22:27:15.846 INFO  [http-nio-11040-exec-10] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-03-16 22:27:15.853 DEBUG [http-nio-11040-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
3. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 5 msec}
2025-03-16 22:27:15.861 DEBUG [http-nio-11040-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
3. SELECT (
            select IFNULL(sf.approval_st, false)
            from tb_staff sf
            where sf.staff_id = id and
                  sf.shop_id = curr_shop_id
                   ) as approval_st
        FROM tb_account
        where id='km1104rs'
 {executed in 6 msec}
2025-03-16 22:27:15.862 INFO  [http-nio-11040-exec-10] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-03-16 22:27:15.867 DEBUG [http-nio-11040-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
3. SELECT todo_id,
                color,
                checked,
               content
        FROM tb_todo td
        WHERE td.shop_id=2 and
            todo_dt='2025-03-16'
 {executed in 2 msec}
2025-03-16 22:27:43.977 INFO  [MessageBroker-1] [o.s.w.s.c.WebSocketMessageBrokerStats] - WebSocketSession[0 current WS(0)-HttpStream(0)-HttpPoll(0), 0 total, 0 closed abnormally (0 connect failure, 0 send limit, 0 transport error)], stompSubProtocol[processed CONNECT(0)-CONNECTED(0)-DISCONNECT(0)], stompBrokerRelay[null], inboundChannel[pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 0], outboundChannel[pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 0], sockJsScheduler[pool size = 1, active threads = 1, queued tasks = 0, completed tasks = 0]
2025-03-16 22:29:25.476 INFO  [File Watcher] [o.s.b.d.a.LocalDevToolsAutoConfiguration$RestartingClassPathChangeChangedEventListener] - Restarting due to 1 class path change (0 additions, 0 deletions, 1 modification)
2025-03-16 22:29:25.480 INFO  [Thread-5] [o.s.m.s.b.SimpleBrokerMessageHandler] - Stopping...
2025-03-16 22:29:25.480 INFO  [Thread-5] [o.s.m.s.b.SimpleBrokerMessageHandler] - BrokerAvailabilityEvent[available=false, SimpleBrokerMessageHandler [org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry@4eb94e9f]]
2025-03-16 22:29:25.480 INFO  [Thread-5] [o.s.m.s.b.SimpleBrokerMessageHandler] - Stopped.
2025-03-16 22:29:25.480 INFO  [Thread-5] [org.quartz.core.QuartzScheduler] - Scheduler quartzScheduler_$_NON_CLUSTERED paused.
2025-03-16 22:29:25.480 INFO  [Thread-5] [o.apache.coyote.http11.Http11NioProtocol] - Stopping ProtocolHandler ["http-nio-11040"]
2025-03-16 22:29:25.485 INFO  [Thread-5] [o.s.s.quartz.SchedulerFactoryBean] - Shutting down Quartz Scheduler
2025-03-16 22:29:25.485 INFO  [Thread-5] [org.quartz.core.QuartzScheduler] - Scheduler quartzScheduler_$_NON_CLUSTERED shutting down.
2025-03-16 22:29:25.485 INFO  [Thread-5] [org.quartz.core.QuartzScheduler] - Scheduler quartzScheduler_$_NON_CLUSTERED paused.
2025-03-16 22:29:25.485 INFO  [Thread-5] [org.quartz.core.QuartzScheduler] - Scheduler quartzScheduler_$_NON_CLUSTERED shutdown complete.
2025-03-16 22:29:25.554 INFO  [restartedMain] [com.momo.PhoneManagementApplication] - Starting PhoneManagementApplication using Java 17.0.12 with PID 46648 (/Users/chan/momo/phoneManagement/target/classes started by chan in /Users/chan/momo/phoneManagement)
2025-03-16 22:29:25.554 INFO  [restartedMain] [com.momo.PhoneManagementApplication] - The following 1 profile is active: "dev"
2025-03-16 22:29:25.785 INFO  [restartedMain] [o.s.b.w.embedded.tomcat.TomcatWebServer] - Tomcat initialized with port 11040 (http)
2025-03-16 22:29:25.785 INFO  [restartedMain] [o.apache.coyote.http11.Http11NioProtocol] - Initializing ProtocolHandler ["http-nio-11040"]
2025-03-16 22:29:25.786 INFO  [restartedMain] [o.apache.catalina.core.StandardService] - Starting service [Tomcat]
2025-03-16 22:29:25.786 INFO  [restartedMain] [org.apache.catalina.core.StandardEngine] - Starting Servlet engine: [Apache Tomcat/10.1.17]
2025-03-16 22:29:25.792 INFO  [restartedMain] [o.a.c.c.C.[Tomcat].[localhost].[/]] - Initializing Spring embedded WebApplicationContext
2025-03-16 22:29:25.792 INFO  [restartedMain] [o.s.b.w.s.c.ServletWebServerApplicationContext] - Root WebApplicationContext: initialization completed in 237 ms
2025-03-16 22:29:26.022 INFO  [restartedMain] [org.quartz.impl.StdSchedulerFactory] - Using default implementation for ThreadExecutor
2025-03-16 22:29:26.023 INFO  [restartedMain] [org.quartz.core.SchedulerSignalerImpl] - Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2025-03-16 22:29:26.023 INFO  [restartedMain] [org.quartz.core.QuartzScheduler] - Quartz Scheduler v.2.3.2 created.
2025-03-16 22:29:26.023 INFO  [restartedMain] [org.quartz.simpl.RAMJobStore] - RAMJobStore initialized.
2025-03-16 22:29:26.023 INFO  [restartedMain] [org.quartz.core.QuartzScheduler] - Scheduler meta-data: Quartz Scheduler (v2.3.2) 'quartzScheduler' with instanceId 'NON_CLUSTERED'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 10 threads.
  Using job-store 'org.quartz.simpl.RAMJobStore' - which does not support persistence. and is not clustered.

2025-03-16 22:29:26.023 INFO  [restartedMain] [org.quartz.impl.StdSchedulerFactory] - Quartz scheduler 'quartzScheduler' initialized from an externally provided properties instance.
2025-03-16 22:29:26.023 INFO  [restartedMain] [org.quartz.impl.StdSchedulerFactory] - Quartz scheduler version: 2.3.2
2025-03-16 22:29:26.023 INFO  [restartedMain] [org.quartz.core.QuartzScheduler] - JobFactory set to: org.springframework.scheduling.quartz.SpringBeanJobFactory@3b702367
2025-03-16 22:29:26.036 INFO  [restartedMain] [o.s.b.f.a.AutowiredAnnotationBeanPostProcessor] - Autowired annotation is not supported on static fields: public static int com.momo.job.DormantUserJob.DORMANT_CYCLE_DATE
2025-03-16 22:29:26.082 INFO  [restartedMain] [o.s.b.a.w.s.WelcomePageHandlerMapping] - Adding welcome page: class path resource [public/index.html]
2025-03-16 22:29:26.230 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Will secure any request with [org.springframework.security.web.session.DisableEncodeUrlFilter@331d885d, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@11890d79, org.springframework.security.web.context.SecurityContextHolderFilter@1e58faff, org.springframework.security.web.header.HeaderWriterFilter@4cbfc037, org.springframework.web.filter.CorsFilter@35b91905, org.springframework.security.web.authentication.logout.LogoutFilter@2b7e6b5a, com.momo.filter.JwtAuthorizationFilter@1f6ec546, org.springframework.security.web.session.ConcurrentSessionFilter@6789fd5e, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@2cd43f7b, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@5a638dfd, org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationFilter@26dcb6a9, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@40eee996, org.springframework.security.web.session.SessionManagementFilter@67f2266a, org.springframework.security.web.access.ExceptionTranslationFilter@40773bf3, org.springframework.security.web.access.intercept.FilterSecurityInterceptor@13873f53]
2025-03-16 22:29:26.287 WARN  [restartedMain] [o.s.b.a.t.ThymeleafAutoConfiguration$DefaultTemplateResolverConfiguration] - Cannot find template location: classpath:/templates/ (please add some templates, check your Thymeleaf configuration, or set spring.thymeleaf.check-template-location=false)
2025-03-16 22:29:26.328 INFO  [restartedMain] [o.s.b.d.a.OptionalLiveReloadServer] - LiveReload server is running on port 35729
2025-03-16 22:29:26.337 INFO  [restartedMain] [o.apache.coyote.http11.Http11NioProtocol] - Starting ProtocolHandler ["http-nio-11040"]
2025-03-16 22:29:26.338 INFO  [restartedMain] [o.s.b.w.embedded.tomcat.TomcatWebServer] - Tomcat started on port 11040 (http) with context path ''
2025-03-16 22:29:26.338 INFO  [restartedMain] [o.s.m.s.b.SimpleBrokerMessageHandler] - Starting...
2025-03-16 22:29:26.338 INFO  [restartedMain] [o.s.m.s.b.SimpleBrokerMessageHandler] - BrokerAvailabilityEvent[available=true, SimpleBrokerMessageHandler [org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry@52b04705]]
2025-03-16 22:29:26.338 INFO  [restartedMain] [o.s.m.s.b.SimpleBrokerMessageHandler] - Started.
2025-03-16 22:29:26.339 INFO  [restartedMain] [o.s.s.quartz.SchedulerFactoryBean] - Starting Quartz Scheduler now
2025-03-16 22:29:26.339 INFO  [restartedMain] [org.quartz.core.QuartzScheduler] - Scheduler quartzScheduler_$_NON_CLUSTERED started.
2025-03-16 22:29:26.342 INFO  [restartedMain] [com.momo.PhoneManagementApplication] - Started PhoneManagementApplication in 0.807 seconds (process running for 165.531)
2025-03-16 22:29:26.343 INFO  [restartedMain] [o.s.b.d.a.ConditionEvaluationDeltaLoggingListener] - Condition evaluation unchanged
2025-03-16 22:29:49.670 INFO  [SpringApplicationShutdownHook] [o.s.m.s.b.SimpleBrokerMessageHandler] - Stopping...
2025-03-16 22:29:49.670 INFO  [SpringApplicationShutdownHook] [o.s.m.s.b.SimpleBrokerMessageHandler] - BrokerAvailabilityEvent[available=false, SimpleBrokerMessageHandler [org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry@52b04705]]
2025-03-16 22:29:49.670 INFO  [SpringApplicationShutdownHook] [o.s.m.s.b.SimpleBrokerMessageHandler] - Stopped.
2025-03-16 22:29:49.670 INFO  [SpringApplicationShutdownHook] [org.quartz.core.QuartzScheduler] - Scheduler quartzScheduler_$_NON_CLUSTERED paused.
2025-03-16 22:29:49.674 INFO  [SpringApplicationShutdownHook] [o.s.s.quartz.SchedulerFactoryBean] - Shutting down Quartz Scheduler
2025-03-16 22:29:49.674 INFO  [SpringApplicationShutdownHook] [org.quartz.core.QuartzScheduler] - Scheduler quartzScheduler_$_NON_CLUSTERED shutting down.
2025-03-16 22:29:49.674 INFO  [SpringApplicationShutdownHook] [org.quartz.core.QuartzScheduler] - Scheduler quartzScheduler_$_NON_CLUSTERED paused.
2025-03-16 22:29:49.674 INFO  [SpringApplicationShutdownHook] [org.quartz.core.QuartzScheduler] - Scheduler quartzScheduler_$_NON_CLUSTERED shutdown complete.
2025-03-16 22:29:51.335 INFO  [background-preinit] [o.h.validator.internal.util.Version] - HV000001: Hibernate Validator 8.0.1.Final
2025-03-16 22:29:51.355 INFO  [restartedMain] [com.momo.PhoneManagementApplication] - Starting PhoneManagementApplication using Java 17.0.12 with PID 46735 (/Users/chan/momo/phoneManagement/target/classes started by chan in /Users/chan/momo/phoneManagement)
2025-03-16 22:29:51.356 INFO  [restartedMain] [com.momo.PhoneManagementApplication] - The following 1 profile is active: "dev"
2025-03-16 22:29:51.465 INFO  [restartedMain] [o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor] - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2025-03-16 22:29:51.465 INFO  [restartedMain] [o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor] - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2025-03-16 22:29:52.175 INFO  [restartedMain] [o.s.b.w.embedded.tomcat.TomcatWebServer] - Tomcat initialized with port 11040 (http)
2025-03-16 22:29:52.180 INFO  [restartedMain] [o.apache.coyote.http11.Http11NioProtocol] - Initializing ProtocolHandler ["http-nio-11040"]
2025-03-16 22:29:52.181 INFO  [restartedMain] [o.apache.catalina.core.StandardService] - Starting service [Tomcat]
2025-03-16 22:29:52.181 INFO  [restartedMain] [org.apache.catalina.core.StandardEngine] - Starting Servlet engine: [Apache Tomcat/10.1.17]
2025-03-16 22:29:52.205 INFO  [restartedMain] [o.a.c.c.C.[Tomcat].[localhost].[/]] - Initializing Spring embedded WebApplicationContext
2025-03-16 22:29:52.205 INFO  [restartedMain] [o.s.b.w.s.c.ServletWebServerApplicationContext] - Root WebApplicationContext: initialization completed in 740 ms
2025-03-16 22:29:52.697 INFO  [restartedMain] [org.quartz.impl.StdSchedulerFactory] - Using default implementation for ThreadExecutor
2025-03-16 22:29:52.703 INFO  [restartedMain] [org.quartz.core.SchedulerSignalerImpl] - Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2025-03-16 22:29:52.703 INFO  [restartedMain] [org.quartz.core.QuartzScheduler] - Quartz Scheduler v.2.3.2 created.
2025-03-16 22:29:52.703 INFO  [restartedMain] [org.quartz.simpl.RAMJobStore] - RAMJobStore initialized.
2025-03-16 22:29:52.704 INFO  [restartedMain] [org.quartz.core.QuartzScheduler] - Scheduler meta-data: Quartz Scheduler (v2.3.2) 'quartzScheduler' with instanceId 'NON_CLUSTERED'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 10 threads.
  Using job-store 'org.quartz.simpl.RAMJobStore' - which does not support persistence. and is not clustered.

2025-03-16 22:29:52.704 INFO  [restartedMain] [org.quartz.impl.StdSchedulerFactory] - Quartz scheduler 'quartzScheduler' initialized from an externally provided properties instance.
2025-03-16 22:29:52.704 INFO  [restartedMain] [org.quartz.impl.StdSchedulerFactory] - Quartz scheduler version: 2.3.2
2025-03-16 22:29:52.704 INFO  [restartedMain] [org.quartz.core.QuartzScheduler] - JobFactory set to: org.springframework.scheduling.quartz.SpringBeanJobFactory@1d62013
2025-03-16 22:29:52.730 INFO  [restartedMain] [o.s.b.f.a.AutowiredAnnotationBeanPostProcessor] - Autowired annotation is not supported on static fields: public static int com.momo.job.DormantUserJob.DORMANT_CYCLE_DATE
2025-03-16 22:29:52.837 INFO  [restartedMain] [o.s.b.a.w.s.WelcomePageHandlerMapping] - Adding welcome page: class path resource [public/index.html]
2025-03-16 22:29:53.105 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Will secure any request with [org.springframework.security.web.session.DisableEncodeUrlFilter@50afc1f1, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@1373c1f4, org.springframework.security.web.context.SecurityContextHolderFilter@5c3573af, org.springframework.security.web.header.HeaderWriterFilter@7744bb7a, org.springframework.web.filter.CorsFilter@e0d3703, org.springframework.security.web.authentication.logout.LogoutFilter@23c40a4e, com.momo.filter.JwtAuthorizationFilter@d5a9c32, org.springframework.security.web.session.ConcurrentSessionFilter@5ef08e3c, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@97b158c, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@b91ab84, org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationFilter@e274c5a, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@23d47421, org.springframework.security.web.session.SessionManagementFilter@70876317, org.springframework.security.web.access.ExceptionTranslationFilter@207a893e, org.springframework.security.web.access.intercept.FilterSecurityInterceptor@1d73d8d1]
2025-03-16 22:29:53.214 WARN  [restartedMain] [o.s.b.a.t.ThymeleafAutoConfiguration$DefaultTemplateResolverConfiguration] - Cannot find template location: classpath:/templates/ (please add some templates, check your Thymeleaf configuration, or set spring.thymeleaf.check-template-location=false)
2025-03-16 22:29:53.284 INFO  [restartedMain] [o.s.b.d.a.OptionalLiveReloadServer] - LiveReload server is running on port 35729
2025-03-16 22:29:53.301 INFO  [restartedMain] [o.apache.coyote.http11.Http11NioProtocol] - Starting ProtocolHandler ["http-nio-11040"]
2025-03-16 22:29:53.310 INFO  [restartedMain] [o.s.b.w.embedded.tomcat.TomcatWebServer] - Tomcat started on port 11040 (http) with context path ''
2025-03-16 22:29:53.311 INFO  [restartedMain] [o.s.m.s.b.SimpleBrokerMessageHandler] - Starting...
2025-03-16 22:29:53.311 INFO  [restartedMain] [o.s.m.s.b.SimpleBrokerMessageHandler] - BrokerAvailabilityEvent[available=true, SimpleBrokerMessageHandler [org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry@4fe483de]]
2025-03-16 22:29:53.311 INFO  [restartedMain] [o.s.m.s.b.SimpleBrokerMessageHandler] - Started.
2025-03-16 22:29:53.312 INFO  [restartedMain] [o.s.s.quartz.SchedulerFactoryBean] - Starting Quartz Scheduler now
2025-03-16 22:29:53.312 INFO  [restartedMain] [org.quartz.core.QuartzScheduler] - Scheduler quartzScheduler_$_NON_CLUSTERED started.
2025-03-16 22:29:53.319 INFO  [restartedMain] [com.momo.PhoneManagementApplication] - Started PhoneManagementApplication in 2.279 seconds (process running for 2.691)
2025-03-16 22:29:56.331 INFO  [http-nio-11040-exec-1] [o.a.c.c.C.[Tomcat].[localhost].[/]] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-03-16 22:29:56.332 INFO  [http-nio-11040-exec-1] [o.s.web.servlet.DispatcherServlet] - Initializing Servlet 'dispatcherServlet'
2025-03-16 22:29:56.333 INFO  [http-nio-11040-exec-1] [o.s.web.servlet.DispatcherServlet] - Completed initialization in 1 ms
2025-03-16 22:29:56.361 INFO  [http-nio-11040-exec-1] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/auth/refresh
2025-03-16 22:29:56.363 INFO  [http-nio-11040-exec-1] [com.momo.filter.JwtAuthorizationFilter] - access token: null
2025-03-16 22:29:56.364 INFO  [http-nio-11040-exec-1] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/auth/refresh
2025-03-16 22:29:56.364 INFO  [http-nio-11040-exec-1] [com.momo.filter.JwtAuthorizationFilter] - 유효한 JWT 토큰이 없습니다
2025-03-16 22:29:56.450 INFO  [http-nio-11040-exec-1] [com.momo.api.AuthController] - refresh
2025-03-16 22:29:56.742 DEBUG [http-nio-11040-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT  *
        FROM    tb_refresh_token
        WHERE   refresh_token='eyJhbGciOiJIUzI1NiJ9.eyJleHAiOjE3NDIxMzUyMzB9.3LEQSrj9zRVmaW8HV-VqQ4i65o2gyilwnyYKDDdEcFk'
 {executed in 9 msec}
2025-03-16 22:29:56.753 DEBUG [http-nio-11040-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 2 msec}
2025-03-16 22:29:56.781 INFO  [http-nio-11040-exec-1] [com.momo.api.AuthController] - jwt: JwtVO(grantType=Bearer , username=km1104rs, accessToken=eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0MjEzMTc5NiwiZXhwIjoxNzQyMTMyMzk2LCJhdXRob3JpdGllcyI6IlJPTEVfU1RGLEFQUFJPVkUifQ.jy94fk-gbCUnNt9hOQJEbEUuOxqhj7qU25eRGBOVw74, refreshToken=null, expireTime=null, revoked=false, expired=false)
2025-03-16 22:29:56.834 INFO  [http-nio-11040-exec-2] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/notif/all
2025-03-16 22:29:56.834 INFO  [http-nio-11040-exec-2] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0MjEzMTc5NiwiZXhwIjoxNzQyMTMyMzk2LCJhdXRob3JpdGllcyI6IlJPTEVfU1RGLEFQUFJPVkUifQ.jy94fk-gbCUnNt9hOQJEbEUuOxqhj7qU25eRGBOVw74
2025-03-16 22:29:56.834 INFO  [http-nio-11040-exec-2] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/notif/all
2025-03-16 22:29:56.840 INFO  [http-nio-11040-exec-2] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-03-16 22:29:56.845 DEBUG [http-nio-11040-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 4 msec}
2025-03-16 22:29:56.931 INFO  [http-nio-11040-exec-4] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/user/info
2025-03-16 22:29:56.931 INFO  [http-nio-11040-exec-4] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0MjEzMTc5NiwiZXhwIjoxNzQyMTMyMzk2LCJhdXRob3JpdGllcyI6IlJPTEVfU1RGLEFQUFJPVkUifQ.jy94fk-gbCUnNt9hOQJEbEUuOxqhj7qU25eRGBOVw74
2025-03-16 22:29:56.931 INFO  [http-nio-11040-exec-2] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-03-16 22:29:56.931 INFO  [http-nio-11040-exec-3] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/notif/read/all
2025-03-16 22:29:56.934 INFO  [http-nio-11040-exec-3] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0MjEzMTc5NiwiZXhwIjoxNzQyMTMyMzk2LCJhdXRob3JpdGllcyI6IlJPTEVfU1RGLEFQUFJPVkUifQ.jy94fk-gbCUnNt9hOQJEbEUuOxqhj7qU25eRGBOVw74
2025-03-16 22:29:56.934 INFO  [http-nio-11040-exec-3] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/notif/read/all
2025-03-16 22:29:56.931 INFO  [http-nio-11040-exec-5] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/notif/count/unread
2025-03-16 22:29:56.936 INFO  [http-nio-11040-exec-5] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0MjEzMTc5NiwiZXhwIjoxNzQyMTMyMzk2LCJhdXRob3JpdGllcyI6IlJPTEVfU1RGLEFQUFJPVkUifQ.jy94fk-gbCUnNt9hOQJEbEUuOxqhj7qU25eRGBOVw74
2025-03-16 22:29:56.937 INFO  [http-nio-11040-exec-5] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/notif/count/unread
2025-03-16 22:29:56.933 INFO  [http-nio-11040-exec-4] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/user/info
2025-03-16 22:29:56.938 INFO  [http-nio-11040-exec-3] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-03-16 22:29:56.936 INFO  [http-nio-11040-exec-2] [c.momo.common.util.SecurityContextUtil] - principal: UserDetailsImpl(username=km1104rs, password=$2a$10$uXShhwl6ULOkbJe477uDWOfdiUUcu6lOSF/Dhj9xP3U1nUn/gXkc6, authorities=[ROLE_STF, APPROVE])
2025-03-16 22:29:56.944 INFO  [http-nio-11040-exec-4] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-03-16 22:29:56.944 INFO  [http-nio-11040-exec-5] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-03-16 22:29:56.950 DEBUG [http-nio-11040-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
3. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 5 msec}
2025-03-16 22:29:56.950 DEBUG [http-nio-11040-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 11 msec}
2025-03-16 22:29:56.950 DEBUG [http-nio-11040-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
2. SELECT content,
               notif_id,
               read_st,
               notif_tp as type,
               IF(date(send_dt) = current_date,true,false) as today,
            (
               TIMESTAMPDIFF(MINUTE, send_dt, current_timestamp)
            ) as ago
        FROM tb_notification
        WHERE receiver_id='km1104rs'
        ORDER BY send_dt DESC
 {executed in 5 msec}
2025-03-16 22:29:56.952 INFO  [http-nio-11040-exec-5] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-03-16 22:29:56.952 INFO  [http-nio-11040-exec-3] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-03-16 22:29:56.953 DEBUG [http-nio-11040-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
4. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 2 msec}
2025-03-16 22:29:56.953 INFO  [http-nio-11040-exec-3] [c.momo.common.util.SecurityContextUtil] - principal: UserDetailsImpl(username=km1104rs, password=$2a$10$uXShhwl6ULOkbJe477uDWOfdiUUcu6lOSF/Dhj9xP3U1nUn/gXkc6, authorities=[ROLE_STF, APPROVE])
2025-03-16 22:29:56.953 INFO  [http-nio-11040-exec-5] [c.momo.common.util.SecurityContextUtil] - principal: UserDetailsImpl(username=km1104rs, password=$2a$10$uXShhwl6ULOkbJe477uDWOfdiUUcu6lOSF/Dhj9xP3U1nUn/gXkc6, authorities=[ROLE_STF, APPROVE])
2025-03-16 22:29:56.955 DEBUG [http-nio-11040-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
3. UPDATE tb_notification
        SET read_st = TRUE
        WHERE receiver_id = 'km1104rs'
          AND read_st = FALSE
 {executed in 0 msec}
2025-03-16 22:29:56.962 DEBUG [http-nio-11040-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT count(*)
        FROM tb_notification
        WHERE receiver_id = 'km1104rs'
          AND read_st = FALSE
 {executed in 5 msec}
2025-03-16 22:29:56.962 INFO  [http-nio-11040-exec-4] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-03-16 22:29:56.963 INFO  [http-nio-11040-exec-4] [c.momo.common.util.SecurityContextUtil] - principal: UserDetailsImpl(username=km1104rs, password=$2a$10$uXShhwl6ULOkbJe477uDWOfdiUUcu6lOSF/Dhj9xP3U1nUn/gXkc6, authorities=[ROLE_STF, APPROVE])
2025-03-16 22:29:56.968 DEBUG [http-nio-11040-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
4. SELECT ac.id,
               ac.name,
               ac.tel,
               ac.nickname,
               ac.pfp,
               ac.curr_shop_id,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where sf.shop_id = ac.curr_shop_id and
                         sf.staff_id = ac.id
                   ) as role,
               sh.shop_nm,
               sh.shop_addr,
               sh.provider,
               (
                   IFNULL((
                       select sf2.approval_st
                       from tb_staff sf2
                       where sf2.shop_id=ac.curr_shop_id and
                           sf2.staff_id=ac.id
                       ), -1)
                ) as approval_st,
                ac.corp_nm,
                ac.br_no
        FROM tb_account ac
        LEFT OUTER JOIN tb_shop sh on sh.shop_id=ac.curr_shop_id
        WHERE id = 'km1104rs'
 {executed in 4 msec}
2025-03-16 22:29:56.970 INFO  [http-nio-11040-exec-4] [com.momo.api.UserController] - User: {role=1, approval_st=1, shop_addr=충청남도 천안시 병천면 충절로 1600 한국기술교육대학교 다산정보관 102, br_no=5218702490, provider=2, name=박희찬, nickname=대표, corp_nm=123, tel=010-4524-0636, id=km1104rs, pfp=1921fc01-e573-4243-9365-6b905389f4fc.png, curr_shop_id=2, shop_nm=한기대점 }
2025-03-16 22:29:56.974 INFO  [http-nio-11040-exec-6] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/notif/count/unread
2025-03-16 22:29:56.974 INFO  [http-nio-11040-exec-6] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0MjEzMTc5NiwiZXhwIjoxNzQyMTMyMzk2LCJhdXRob3JpdGllcyI6IlJPTEVfU1RGLEFQUFJPVkUifQ.jy94fk-gbCUnNt9hOQJEbEUuOxqhj7qU25eRGBOVw74
2025-03-16 22:29:56.974 INFO  [http-nio-11040-exec-6] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/notif/count/unread
2025-03-16 22:29:56.977 INFO  [http-nio-11040-exec-6] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-03-16 22:29:56.981 DEBUG [http-nio-11040-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 3 msec}
2025-03-16 22:29:56.986 INFO  [http-nio-11040-exec-6] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-03-16 22:29:56.987 INFO  [http-nio-11040-exec-6] [c.momo.common.util.SecurityContextUtil] - principal: UserDetailsImpl(username=km1104rs, password=$2a$10$uXShhwl6ULOkbJe477uDWOfdiUUcu6lOSF/Dhj9xP3U1nUn/gXkc6, authorities=[ROLE_STF, APPROVE])
2025-03-16 22:29:56.993 DEBUG [http-nio-11040-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT count(*)
        FROM tb_notification
        WHERE receiver_id = 'km1104rs'
          AND read_st = FALSE
 {executed in 2 msec}
2025-03-16 22:29:57.000 INFO  [http-nio-11040-exec-7] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/notif/count/unread
2025-03-16 22:29:57.000 INFO  [http-nio-11040-exec-7] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0MjEzMTc5NiwiZXhwIjoxNzQyMTMyMzk2LCJhdXRob3JpdGllcyI6IlJPTEVfU1RGLEFQUFJPVkUifQ.jy94fk-gbCUnNt9hOQJEbEUuOxqhj7qU25eRGBOVw74
2025-03-16 22:29:57.000 INFO  [http-nio-11040-exec-7] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/notif/count/unread
2025-03-16 22:29:57.003 INFO  [http-nio-11040-exec-7] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-03-16 22:29:57.005 DEBUG [http-nio-11040-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 2 msec}
2025-03-16 22:29:57.008 INFO  [http-nio-11040-exec-8] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/sale/graph/ct/d
2025-03-16 22:29:57.008 INFO  [http-nio-11040-exec-8] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0MjEzMTc5NiwiZXhwIjoxNzQyMTMyMzk2LCJhdXRob3JpdGllcyI6IlJPTEVfU1RGLEFQUFJPVkUifQ.jy94fk-gbCUnNt9hOQJEbEUuOxqhj7qU25eRGBOVw74
2025-03-16 22:29:57.008 INFO  [http-nio-11040-exec-8] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/sale/graph/ct/d
2025-03-16 22:29:57.008 INFO  [http-nio-11040-exec-7] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-03-16 22:29:57.009 INFO  [http-nio-11040-exec-7] [c.momo.common.util.SecurityContextUtil] - principal: UserDetailsImpl(username=km1104rs, password=$2a$10$uXShhwl6ULOkbJe477uDWOfdiUUcu6lOSF/Dhj9xP3U1nUn/gXkc6, authorities=[ROLE_STF, APPROVE])
2025-03-16 22:29:57.010 INFO  [http-nio-11040-exec-8] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-03-16 22:29:57.011 DEBUG [http-nio-11040-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT count(*)
        FROM tb_notification
        WHERE receiver_id = 'km1104rs'
          AND read_st = FALSE
 {executed in 1 msec}
2025-03-16 22:29:57.012 DEBUG [http-nio-11040-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
2. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 1 msec}
2025-03-16 22:29:57.014 INFO  [http-nio-11040-exec-9] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/sale/change/ct
2025-03-16 22:29:57.014 INFO  [http-nio-11040-exec-9] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0MjEzMTc5NiwiZXhwIjoxNzQyMTMyMzk2LCJhdXRob3JpdGllcyI6IlJPTEVfU1RGLEFQUFJPVkUifQ.jy94fk-gbCUnNt9hOQJEbEUuOxqhj7qU25eRGBOVw74
2025-03-16 22:29:57.015 INFO  [http-nio-11040-exec-9] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/sale/change/ct
2025-03-16 22:29:57.016 INFO  [http-nio-11040-exec-8] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-03-16 22:29:57.017 INFO  [http-nio-11040-exec-9] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-03-16 22:29:57.019 DEBUG [http-nio-11040-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 2 msec}
2025-03-16 22:29:57.023 INFO  [http-nio-11040-exec-10] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/pimg
2025-03-16 22:29:57.023 INFO  [http-nio-11040-exec-10] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0MjEzMTc5NiwiZXhwIjoxNzQyMTMyMzk2LCJhdXRob3JpdGllcyI6IlJPTEVfU1RGLEFQUFJPVkUifQ.jy94fk-gbCUnNt9hOQJEbEUuOxqhj7qU25eRGBOVw74
2025-03-16 22:29:57.023 INFO  [http-nio-11040-exec-9] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-03-16 22:29:57.023 INFO  [http-nio-11040-exec-10] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/pimg
2025-03-16 22:29:57.025 INFO  [http-nio-11040-exec-10] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-03-16 22:29:57.028 DEBUG [http-nio-11040-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. with tb as (
            SELECT
                (
                    SELECT count(*)
                    FROM tb_sale
                    WHERE shop_id=2 and
                          device_id != 0 and
                          actv_dt BETWEEN '2025-02-01' AND '2025-02-16'
                    ) as prev,
                (
                    SELECT count(*)
                    FROM tb_sale
                    WHERE shop_id=2 and
                        device_id != 0 and
                        actv_dt BETWEEN '2025-03-01' AND '2025-03-16'
                ) as curr
            FROM DUAL
        )

        SELECT tb.curr - tb.prev
        FROM tb
 {executed in 2 msec}
2025-03-16 22:29:57.028 DEBUG [http-nio-11040-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
2. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 2 msec}
2025-03-16 22:29:57.032 INFO  [http-nio-11040-exec-1] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/todo
2025-03-16 22:29:57.032 INFO  [http-nio-11040-exec-1] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0MjEzMTc5NiwiZXhwIjoxNzQyMTMyMzk2LCJhdXRob3JpdGllcyI6IlJPTEVfU1RGLEFQUFJPVkUifQ.jy94fk-gbCUnNt9hOQJEbEUuOxqhj7qU25eRGBOVw74
2025-03-16 22:29:57.032 INFO  [http-nio-11040-exec-1] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/todo
2025-03-16 22:29:57.032 INFO  [http-nio-11040-exec-10] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-03-16 22:29:57.034 INFO  [http-nio-11040-exec-1] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-03-16 22:29:57.036 DEBUG [http-nio-11040-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
2. select pimg_id as id,
               pimg_text as text,
               pimg_path as file
        from tb_post_img
        where shop_id=2
 {executed in 2 msec}
2025-03-16 22:29:57.036 DEBUG [http-nio-11040-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 2 msec}
2025-03-16 22:29:57.040 INFO  [http-nio-11040-exec-3] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/todo/detail
2025-03-16 22:29:57.040 INFO  [http-nio-11040-exec-3] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0MjEzMTc5NiwiZXhwIjoxNzQyMTMyMzk2LCJhdXRob3JpdGllcyI6IlJPTEVfU1RGLEFQUFJPVkUifQ.jy94fk-gbCUnNt9hOQJEbEUuOxqhj7qU25eRGBOVw74
2025-03-16 22:29:57.040 INFO  [http-nio-11040-exec-3] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/todo/detail
2025-03-16 22:29:57.041 INFO  [http-nio-11040-exec-1] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-03-16 22:29:57.043 INFO  [http-nio-11040-exec-3] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-03-16 22:29:57.044 DEBUG [http-nio-11040-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
3. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 1 msec}
2025-03-16 22:29:57.046 DEBUG [http-nio-11040-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT SUBSTR(todo_dt, 9, 2)
        FROM tb_todo
        WHERE shop_id= 2  and
            todo_dt like '%2025-03%'
 {executed in 1 msec}
2025-03-16 22:29:57.046 INFO  [http-nio-11040-exec-3] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-03-16 22:29:57.049 DEBUG [http-nio-11040-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
2. set @limit_cond := (
               case 'd'
                   when 'h' then '2000-01-24'
                   when 'd' then '2025-03-16'
                   when 'w' then '2025-03-16'
                   when 'm' then date_sub('2025-03-16', interval 1 month)
               end
        );

        with recursive org_date_table as (
            select (
                       case
                           when 'd' = 'h' then '2000-01-01'
                           when 'd' != 'h' then '2024-12-16'
                           end
                       ) as it
            union all
            select (
                       case 'd'
                           when 'h' then date_add(it, interval 1 day)
                           when 'd' then date_add(it, interval 1 day)
                           when 'w' then date_add(it, interval 1 week)
                           when 'm' then date_add(it, interval 1 month)
                           end
                       ) as it
            from org_date_table
            where it < @limit_cond
        ), date_table as (
            select
                year(it) as _year,
                (
                    case 'd'
                        when 'h' then day(it)
                        when 'd' then it
                        when 'w' then week(it)
                        when 'm' then month(it)
                        end
                    ) as dt
            from org_date_table
        ),  date_sale as (
            select year(actv_dt) _year,
                   month(actv_dt) as m,
                   week(actv_dt) as w,
                   actv_dt as d,
                   hour(regi_dt) as h,
                   tb_sale.*
            from tb_sale
            where shop_id=2 and

                actv_dt between '2024-12-16' and (
                    case
                        when 'd' = 'h' then '2024-12-16'
                        when 'd' != 'h' then '2025-03-16'
                        end
                    )
        ), final as (
            select count(device_id) as cnt
            from date_table dd
                     left outer join date_sale ds on dd._year=ds._year and
                                                     d = dt
            group by dd._year, dd.dt
        )

        select
            (
                select json_arrayagg(cnt)
                from final
            ) as value,
            (
                select json_arrayagg(date_format(it, '%Y-%m-%d'))
                from org_date_table
            ) as date
 {executed in 3 msec}
2025-03-16 22:29:57.051 DEBUG [http-nio-11040-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
3. SELECT /* TodoMapper.xml / getTodoDetail */
                todo_id,
                color,
                checked,
               content
        FROM tb_todo td
        WHERE td.shop_id=2 and
            todo_dt='2025-03-16'
 {executed in 3 msec}
2025-03-16 22:29:57.056 INFO  [http-nio-11040-exec-2] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/todo/detail
2025-03-16 22:29:57.056 INFO  [http-nio-11040-exec-5] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/shop/all
2025-03-16 22:29:57.057 INFO  [http-nio-11040-exec-5] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0MjEzMTc5NiwiZXhwIjoxNzQyMTMyMzk2LCJhdXRob3JpdGllcyI6IlJPTEVfU1RGLEFQUFJPVkUifQ.jy94fk-gbCUnNt9hOQJEbEUuOxqhj7qU25eRGBOVw74
2025-03-16 22:29:57.057 INFO  [http-nio-11040-exec-5] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/shop/all
2025-03-16 22:29:57.056 INFO  [http-nio-11040-exec-2] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0MjEzMTc5NiwiZXhwIjoxNzQyMTMyMzk2LCJhdXRob3JpdGllcyI6IlJPTEVfU1RGLEFQUFJPVkUifQ.jy94fk-gbCUnNt9hOQJEbEUuOxqhj7qU25eRGBOVw74
2025-03-16 22:29:57.057 INFO  [http-nio-11040-exec-2] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/todo/detail
2025-03-16 22:29:57.059 INFO  [http-nio-11040-exec-5] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-03-16 22:29:57.059 INFO  [http-nio-11040-exec-2] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-03-16 22:29:57.066 INFO  [http-nio-11040-exec-4] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/img/download/pfp
2025-03-16 22:29:57.066 INFO  [http-nio-11040-exec-4] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0MjEzMTc5NiwiZXhwIjoxNzQyMTMyMzk2LCJhdXRob3JpdGllcyI6IlJPTEVfU1RGLEFQUFJPVkUifQ.jy94fk-gbCUnNt9hOQJEbEUuOxqhj7qU25eRGBOVw74
2025-03-16 22:29:57.066 INFO  [http-nio-11040-exec-4] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/img/download/pfp
2025-03-16 22:29:57.070 INFO  [http-nio-11040-exec-4] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-03-16 22:29:57.071 DEBUG [http-nio-11040-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
2. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 12 msec}
2025-03-16 22:29:57.071 DEBUG [http-nio-11040-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
4. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 1 msec}
2025-03-16 22:29:57.072 INFO  [http-nio-11040-exec-6] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/sale/summary
2025-03-16 22:29:57.072 INFO  [http-nio-11040-exec-6] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0MjEzMTc5NiwiZXhwIjoxNzQyMTMyMzk2LCJhdXRob3JpdGllcyI6IlJPTEVfU1RGLEFQUFJPVkUifQ.jy94fk-gbCUnNt9hOQJEbEUuOxqhj7qU25eRGBOVw74
2025-03-16 22:29:57.072 INFO  [http-nio-11040-exec-6] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/sale/summary
2025-03-16 22:29:57.073 DEBUG [http-nio-11040-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 13 msec}
2025-03-16 22:29:57.074 INFO  [http-nio-11040-exec-2] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-03-16 22:29:57.074 INFO  [http-nio-11040-exec-4] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-03-16 22:29:57.074 INFO  [http-nio-11040-exec-6] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-03-16 22:29:57.074 INFO  [http-nio-11040-exec-5] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-03-16 22:29:57.074 INFO  [http-nio-11040-exec-5] [c.momo.common.util.SecurityContextUtil] - principal: UserDetailsImpl(username=km1104rs, password=$2a$10$uXShhwl6ULOkbJe477uDWOfdiUUcu6lOSF/Dhj9xP3U1nUn/gXkc6, authorities=[ROLE_STF, APPROVE])
2025-03-16 22:29:57.075 DEBUG [http-nio-11040-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 1 msec}
2025-03-16 22:29:57.076 DEBUG [http-nio-11040-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
2. SELECT /* TodoMapper.xml / getTodoDetail */
                todo_id,
                color,
                checked,
               content
        FROM tb_todo td
        WHERE td.shop_id=2 and
            todo_dt='2025-03-16'
 {executed in 2 msec}
2025-03-16 22:29:57.077 DEBUG [http-nio-11040-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
3. select sh.shop_id,
               sh.shop_nm
        from tb_staff sf
        left outer join tb_shop sh on sh.shop_id=sf.shop_id
        where staff_id='km1104rs'
 {executed in 2 msec}
2025-03-16 22:29:57.081 INFO  [http-nio-11040-exec-6] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-03-16 22:29:57.081 INFO  [http-nio-11040-exec-7] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/sale/ratio
2025-03-16 22:29:57.081 INFO  [http-nio-11040-exec-7] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0MjEzMTc5NiwiZXhwIjoxNzQyMTMyMzk2LCJhdXRob3JpdGllcyI6IlJPTEVfU1RGLEFQUFJPVkUifQ.jy94fk-gbCUnNt9hOQJEbEUuOxqhj7qU25eRGBOVw74
2025-03-16 22:29:57.082 INFO  [http-nio-11040-exec-7] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/sale/ratio
2025-03-16 22:29:57.083 INFO  [http-nio-11040-exec-7] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-03-16 22:29:57.085 DEBUG [http-nio-11040-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
2. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 2 msec}
2025-03-16 22:29:57.086 INFO  [http-nio-11040-exec-9] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/sale/wip
2025-03-16 22:29:57.086 INFO  [http-nio-11040-exec-9] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0MjEzMTc5NiwiZXhwIjoxNzQyMTMyMzk2LCJhdXRob3JpdGllcyI6IlJPTEVfU1RGLEFQUFJPVkUifQ.jy94fk-gbCUnNt9hOQJEbEUuOxqhj7qU25eRGBOVw74
2025-03-16 22:29:57.086 INFO  [http-nio-11040-exec-9] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/sale/wip
2025-03-16 22:29:57.086 DEBUG [http-nio-11040-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. with prevMonth as (
            SELECT *
            FROM tb_sale
            WHERE shop_id=2 and
                actv_dt like '2025-02%'
        ), currMonth as (
            SELECT *
            FROM tb_sale
            WHERE shop_id=2 and
                actv_dt like '2025-03%'
        ) , tb as (
            SELECT
                (
                    SELECT IFNULL(count(*), 0)
                    FROM prevMonth
                    WHERE device_id is not null
                    ) as prev,
                (
                    SELECT IFNULL(count(*), 0)
                    FROM currMonth
                    WHERE device_id is not null
                ) as curr
            from dual
            UNION ALL
            SELECT
                (
                    SELECT IFNULL(count(*), 0)
                    FROM prevMonth
                    WHERE internet_plan is not null
                ) as prev,
                (
                    SELECT IFNULL(count(*), 0)
                    FROM currMonth
                    WHERE internet_plan is not null
                ) as curr
            from dual
            UNION ALL
            SELECT
                (
                    SELECT IFNULL(count(*), 0)
                    FROM prevMonth
                    WHERE tv_plan is not null
                ) as prev,
                (
                    SELECT IFNULL(count(*), 0)
                    FROM currMonth
                    WHERE tv_plan is not null
                ) as curr
            from dual
            UNION ALL
            SELECT
                (
                    SELECT IFNULL(SUM(total_cms),0)
                    FROM prevMonth
                    where device_id is not null
                ) as prev,
                (
                    SELECT IFNULL(SUM(total_cms),0)
                    FROM currMonth
                    where device_id is not null
                ) as curr
            from dual
            UNION ALL
            SELECT
                (
                    SELECT IFNULL(AVG(total_cms),0)
                    FROM prevMonth
                    where device_id is not null
                ) as prev,
                (
                    SELECT IFNULL(AVG(total_cms),0)
                    FROM currMonth
                    where device_id is not null
                ) as curr
            from dual
        )

        SELECT FLOOR(curr) as value,
               (
                   CASE
                       WHEN curr = 0 THEN 0
                       WHEN prev = 0 THEN 100
                       WHEN prev != 0 THEN TRUNCATE(((curr/prev)-1)*100, 1)
                   END
                   ) as per
        FROM tb
 {executed in 2 msec}
2025-03-16 22:29:57.086 INFO  [http-nio-11040-exec-7] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-03-16 22:29:57.087 INFO  [http-nio-11040-exec-9] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-03-16 22:29:57.088 DEBUG [http-nio-11040-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 1 msec}
2025-03-16 22:29:57.089 DEBUG [http-nio-11040-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
2. SET @total_sale_count := (
            SELECT count(*)
            FROM tb_sale
            WHERE shop_id=2 and
                device_id is not null and
                actv_dt like '2025-03%'
        );

        with tb as (
            SELECT count(*) as curr
            FROM tb_sale_card sc
                     LEFT OUTER JOIN tb_sale sl on sl.sale_id=sc.sale_id
            WHERE sc.shop_id=2 and
                actv_dt like '2025-03%'
            UNION ALL
            SELECT count(*) as curr
            FROM tb_sale
            WHERE shop_id= 2 and
                actv_dt like '2025-03%' and
                sd_id is not null
            UNION ALL
            SELECT count(*) as curr
            FROM tb_sale
            WHERE shop_id= 2 and
                actv_dt like '2025-03%' and
                exsvc_id is not null
        )

        SELECT
            curr as value,
            @total_sale_count as total,
            (
                CASE
                    WHEN @total_sale_count = 0 THEN 0
                    WHEN @total_sale_count != 0 THEN TRUNCATE(((curr/@total_sale_count))*100, 1)
                    END
                ) as per
        FROM tb
 {executed in 0 msec}
2025-03-16 22:29:57.090 INFO  [http-nio-11040-exec-9] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-03-16 22:29:57.096 DEBUG [http-nio-11040-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. with table_ud as (
            SELECT ud_st
            FROM tb_sale_used_device sud
            LEFT OUTER JOIN tb_sale sl on sl.sale_id=sud.sale_id
            WHERE sud.shop_id=2
--               and
--                 actv_dt like '%'
        ), table_card as (
            SELECT card_st
            FROM tb_sale_card sc
            LEFT OUTER JOIN tb_sale sl on sl.sale_id=sc.sale_id
            WHERE sc.shop_id=2
--               and
--                 actv_dt like '%'
        ), table_comb as (
            SELECT comb_st
            FROM tb_sale
            WHERE shop_id=2
--               and
--                 actv_dt like '%%'
        ), table_sup as (
            SELECT sup_st
            FROM tb_sale_support sc LEFT OUTER JOIN tb_sale sl on sl.sale_id=sc.sale_id
            WHERE sc.shop_id=2
--               and
--                 actv_dt like '%%'
        ), table_pm as (
            SELECT checked
            FROM tb_promise sc
                LEFT OUTER JOIN tb_sale sl on sl.sale_id=sc.sale_id
            WHERE sc.shop_id=2
--               and
--                 actv_dt like '%%'
        ), rst as (
            SELECT
                (
                    SELECT count(*)
                    FROM table_ud
                    WHERE ud_st!=2
                )
            UNION ALL
            SELECT
                (
                    SELECT count(*)
                    FROM table_card
                    WHERE card_st!=2
                )
            UNION ALL
            SELECT
                (
                    SELECT count(*)
                    FROM table_comb
                    WHERE comb_st!=1
                )
            UNION ALL
            SELECT
                (
                    SELECT count(*)
                    FROM table_sup
                    WHERE sup_st!=1
                )
            UNION ALL
            SELECT
                (
                    SELECT count(*)
                    FROM table_pm
                    WHERE checked!=1
                )
        )

        SELECT *
        FROM rst
 {executed in 2 msec}
2025-03-16 22:29:57.108 INFO  [http-nio-11040-exec-10] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/img/download/pimg
2025-03-16 22:29:57.108 INFO  [http-nio-11040-exec-10] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0MjEzMTc5NiwiZXhwIjoxNzQyMTMyMzk2LCJhdXRob3JpdGllcyI6IlJPTEVfU1RGLEFQUFJPVkUifQ.jy94fk-gbCUnNt9hOQJEbEUuOxqhj7qU25eRGBOVw74
2025-03-16 22:29:57.108 INFO  [http-nio-11040-exec-10] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/img/download/pimg
2025-03-16 22:29:57.110 INFO  [http-nio-11040-exec-10] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-03-16 22:29:57.111 DEBUG [http-nio-11040-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
2. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 1 msec}
2025-03-16 22:29:57.113 INFO  [http-nio-11040-exec-10] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-03-16 22:29:57.156 INFO  [http-nio-11040-exec-1] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/todo
2025-03-16 22:29:57.156 INFO  [http-nio-11040-exec-1] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0MjEzMTc5NiwiZXhwIjoxNzQyMTMyMzk2LCJhdXRob3JpdGllcyI6IlJPTEVfU1RGLEFQUFJPVkUifQ.jy94fk-gbCUnNt9hOQJEbEUuOxqhj7qU25eRGBOVw74
2025-03-16 22:29:57.156 INFO  [http-nio-11040-exec-1] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/todo
2025-03-16 22:29:57.158 INFO  [http-nio-11040-exec-1] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-03-16 22:29:57.159 DEBUG [http-nio-11040-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 1 msec}
2025-03-16 22:29:57.161 INFO  [http-nio-11040-exec-1] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-03-16 22:29:57.162 DEBUG [http-nio-11040-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT SUBSTR(todo_dt, 9, 2)
        FROM tb_todo
        WHERE shop_id= 2  and
            todo_dt like '%2025-03%'
 {executed in 1 msec}
2025-03-16 22:29:57.165 INFO  [http-nio-11040-exec-8] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/todo/detail
2025-03-16 22:29:57.166 INFO  [http-nio-11040-exec-8] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0MjEzMTc5NiwiZXhwIjoxNzQyMTMyMzk2LCJhdXRob3JpdGllcyI6IlJPTEVfU1RGLEFQUFJPVkUifQ.jy94fk-gbCUnNt9hOQJEbEUuOxqhj7qU25eRGBOVw74
2025-03-16 22:29:57.166 INFO  [http-nio-11040-exec-8] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/todo/detail
2025-03-16 22:29:57.167 INFO  [http-nio-11040-exec-8] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-03-16 22:29:57.168 DEBUG [http-nio-11040-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
2. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 1 msec}
2025-03-16 22:29:57.169 INFO  [http-nio-11040-exec-8] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-03-16 22:29:57.171 DEBUG [http-nio-11040-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
2. SELECT /* TodoMapper.xml / getTodoDetail */
                todo_id,
                color,
                checked,
               content
        FROM tb_todo td
        WHERE td.shop_id=2 and
            todo_dt='2025-03-16'
 {executed in 1 msec}
2025-03-16 22:29:57.177 INFO  [http-nio-11040-exec-3] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/todo/detail
2025-03-16 22:29:57.177 INFO  [http-nio-11040-exec-3] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0MjEzMTc5NiwiZXhwIjoxNzQyMTMyMzk2LCJhdXRob3JpdGllcyI6IlJPTEVfU1RGLEFQUFJPVkUifQ.jy94fk-gbCUnNt9hOQJEbEUuOxqhj7qU25eRGBOVw74
2025-03-16 22:29:57.177 INFO  [http-nio-11040-exec-3] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/todo/detail
2025-03-16 22:29:57.178 INFO  [http-nio-11040-exec-3] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-03-16 22:29:57.180 DEBUG [http-nio-11040-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
3. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 1 msec}
2025-03-16 22:29:57.181 INFO  [http-nio-11040-exec-3] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-03-16 22:29:57.183 DEBUG [http-nio-11040-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
3. SELECT /* TodoMapper.xml / getTodoDetail */
                todo_id,
                color,
                checked,
               content
        FROM tb_todo td
        WHERE td.shop_id=2 and
            todo_dt='2025-03-16'
 {executed in 1 msec}
2025-03-16 22:29:57.203 INFO  [http-nio-11040-exec-2] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/todo
2025-03-16 22:29:57.203 INFO  [http-nio-11040-exec-2] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0MjEzMTc5NiwiZXhwIjoxNzQyMTMyMzk2LCJhdXRob3JpdGllcyI6IlJPTEVfU1RGLEFQUFJPVkUifQ.jy94fk-gbCUnNt9hOQJEbEUuOxqhj7qU25eRGBOVw74
2025-03-16 22:29:57.203 INFO  [http-nio-11040-exec-2] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/todo
2025-03-16 22:29:57.205 INFO  [http-nio-11040-exec-2] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-03-16 22:29:57.208 DEBUG [http-nio-11040-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
2. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 3 msec}
2025-03-16 22:29:57.210 INFO  [http-nio-11040-exec-2] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-03-16 22:29:57.212 DEBUG [http-nio-11040-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
2. SELECT SUBSTR(todo_dt, 9, 2)
        FROM tb_todo
        WHERE shop_id= 2  and
            todo_dt like '%2025-03%'
 {executed in 0 msec}
2025-03-16 22:29:57.220 INFO  [http-nio-11040-exec-5] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/todo/detail
2025-03-16 22:29:57.220 INFO  [http-nio-11040-exec-5] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0MjEzMTc5NiwiZXhwIjoxNzQyMTMyMzk2LCJhdXRob3JpdGllcyI6IlJPTEVfU1RGLEFQUFJPVkUifQ.jy94fk-gbCUnNt9hOQJEbEUuOxqhj7qU25eRGBOVw74
2025-03-16 22:29:57.220 INFO  [http-nio-11040-exec-5] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/todo/detail
2025-03-16 22:29:57.222 INFO  [http-nio-11040-exec-5] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-03-16 22:29:57.225 DEBUG [http-nio-11040-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
3. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 3 msec}
2025-03-16 22:29:57.227 INFO  [http-nio-11040-exec-5] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-03-16 22:29:57.229 DEBUG [http-nio-11040-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
3. SELECT /* TodoMapper.xml / getTodoDetail */
                todo_id,
                color,
                checked,
               content
        FROM tb_todo td
        WHERE td.shop_id=2 and
            todo_dt='2025-03-16'
 {executed in 1 msec}
2025-03-16 22:29:57.242 INFO  [http-nio-11040-exec-4] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/todo/detail
2025-03-16 22:29:57.242 INFO  [http-nio-11040-exec-4] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0MjEzMTc5NiwiZXhwIjoxNzQyMTMyMzk2LCJhdXRob3JpdGllcyI6IlJPTEVfU1RGLEFQUFJPVkUifQ.jy94fk-gbCUnNt9hOQJEbEUuOxqhj7qU25eRGBOVw74
2025-03-16 22:29:57.242 INFO  [http-nio-11040-exec-4] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/todo/detail
2025-03-16 22:29:57.244 INFO  [http-nio-11040-exec-4] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-03-16 22:29:57.247 DEBUG [http-nio-11040-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
4. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 1 msec}
2025-03-16 22:29:57.248 INFO  [http-nio-11040-exec-4] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-03-16 22:29:57.251 DEBUG [http-nio-11040-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
4. SELECT /* TodoMapper.xml / getTodoDetail */
                todo_id,
                color,
                checked,
               content
        FROM tb_todo td
        WHERE td.shop_id=2 and
            todo_dt='2025-03-16'
 {executed in 1 msec}
2025-03-16 22:29:57.263 INFO  [http-nio-11040-exec-6] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/img/download/pimg
2025-03-16 22:29:57.263 INFO  [http-nio-11040-exec-6] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0MjEzMTc5NiwiZXhwIjoxNzQyMTMyMzk2LCJhdXRob3JpdGllcyI6IlJPTEVfU1RGLEFQUFJPVkUifQ.jy94fk-gbCUnNt9hOQJEbEUuOxqhj7qU25eRGBOVw74
2025-03-16 22:29:57.263 INFO  [http-nio-11040-exec-6] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/img/download/pimg
2025-03-16 22:29:57.266 INFO  [http-nio-11040-exec-6] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-03-16 22:29:57.270 DEBUG [http-nio-11040-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 2 msec}
2025-03-16 22:29:57.273 INFO  [http-nio-11040-exec-6] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-03-16 22:29:57.303 INFO  [http-nio-11040-exec-7] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/img/download/pimg
2025-03-16 22:29:57.303 INFO  [http-nio-11040-exec-7] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0MjEzMTc5NiwiZXhwIjoxNzQyMTMyMzk2LCJhdXRob3JpdGllcyI6IlJPTEVfU1RGLEFQUFJPVkUifQ.jy94fk-gbCUnNt9hOQJEbEUuOxqhj7qU25eRGBOVw74
2025-03-16 22:29:57.303 INFO  [http-nio-11040-exec-7] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/img/download/pimg
2025-03-16 22:29:57.305 INFO  [http-nio-11040-exec-7] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-03-16 22:29:57.309 DEBUG [http-nio-11040-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
2. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 2 msec}
2025-03-16 22:29:57.319 INFO  [http-nio-11040-exec-7] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-03-16 22:30:04.625 INFO  [http-nio-11040-exec-9] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/auth/refresh
2025-03-16 22:30:04.625 INFO  [http-nio-11040-exec-9] [com.momo.filter.JwtAuthorizationFilter] - access token: null
2025-03-16 22:30:04.626 INFO  [http-nio-11040-exec-9] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/auth/refresh
2025-03-16 22:30:04.626 INFO  [http-nio-11040-exec-9] [com.momo.filter.JwtAuthorizationFilter] - 유효한 JWT 토큰이 없습니다
2025-03-16 22:30:04.630 INFO  [http-nio-11040-exec-9] [com.momo.api.AuthController] - refresh
2025-03-16 22:30:04.639 DEBUG [http-nio-11040-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT  *
        FROM    tb_refresh_token
        WHERE   refresh_token='eyJhbGciOiJIUzI1NiJ9.eyJleHAiOjE3NDIxMzUyMzB9.3LEQSrj9zRVmaW8HV-VqQ4i65o2gyilwnyYKDDdEcFk'
 {executed in 3 msec}
2025-03-16 22:30:04.643 DEBUG [http-nio-11040-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 3 msec}
2025-03-16 22:30:04.646 INFO  [http-nio-11040-exec-9] [com.momo.api.AuthController] - jwt: JwtVO(grantType=Bearer , username=km1104rs, accessToken=eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0MjEzMTgwNCwiZXhwIjoxNzQyMTMyNDA0LCJhdXRob3JpdGllcyI6IlJPTEVfU1RGLEFQUFJPVkUifQ.FtGFslOX8yJjlQRU-qbeJUwKW_DL2vNoEakYy-RcDWg, refreshToken=null, expireTime=null, revoked=false, expired=false)
2025-03-16 22:30:04.673 INFO  [http-nio-11040-exec-10] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/notif/all
2025-03-16 22:30:04.675 INFO  [http-nio-11040-exec-10] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0MjEzMTgwNCwiZXhwIjoxNzQyMTMyNDA0LCJhdXRob3JpdGllcyI6IlJPTEVfU1RGLEFQUFJPVkUifQ.FtGFslOX8yJjlQRU-qbeJUwKW_DL2vNoEakYy-RcDWg
2025-03-16 22:30:04.675 INFO  [http-nio-11040-exec-10] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/notif/all
2025-03-16 22:30:04.676 INFO  [http-nio-11040-exec-1] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/notif/read/all
2025-03-16 22:30:04.676 INFO  [http-nio-11040-exec-1] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0MjEzMTgwNCwiZXhwIjoxNzQyMTMyNDA0LCJhdXRob3JpdGllcyI6IlJPTEVfU1RGLEFQUFJPVkUifQ.FtGFslOX8yJjlQRU-qbeJUwKW_DL2vNoEakYy-RcDWg
2025-03-16 22:30:04.676 INFO  [http-nio-11040-exec-1] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/notif/read/all
2025-03-16 22:30:04.677 INFO  [http-nio-11040-exec-10] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-03-16 22:30:04.678 INFO  [http-nio-11040-exec-1] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-03-16 22:30:04.678 INFO  [http-nio-11040-exec-8] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/notif/count/unread
2025-03-16 22:30:04.678 INFO  [http-nio-11040-exec-8] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0MjEzMTgwNCwiZXhwIjoxNzQyMTMyNDA0LCJhdXRob3JpdGllcyI6IlJPTEVfU1RGLEFQUFJPVkUifQ.FtGFslOX8yJjlQRU-qbeJUwKW_DL2vNoEakYy-RcDWg
2025-03-16 22:30:04.678 INFO  [http-nio-11040-exec-8] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/notif/count/unread
2025-03-16 22:30:04.680 INFO  [http-nio-11040-exec-8] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-03-16 22:30:04.682 DEBUG [http-nio-11040-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
2. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 3 msec}
2025-03-16 22:30:04.683 DEBUG [http-nio-11040-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 3 msec}
2025-03-16 22:30:04.685 INFO  [http-nio-11040-exec-3] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/user/info
2025-03-16 22:30:04.685 INFO  [http-nio-11040-exec-3] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0MjEzMTgwNCwiZXhwIjoxNzQyMTMyNDA0LCJhdXRob3JpdGllcyI6IlJPTEVfU1RGLEFQUFJPVkUifQ.FtGFslOX8yJjlQRU-qbeJUwKW_DL2vNoEakYy-RcDWg
2025-03-16 22:30:04.685 INFO  [http-nio-11040-exec-3] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/user/info
2025-03-16 22:30:04.688 INFO  [http-nio-11040-exec-3] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-03-16 22:30:04.688 INFO  [http-nio-11040-exec-1] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-03-16 22:30:04.688 DEBUG [http-nio-11040-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
3. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 8 msec}
2025-03-16 22:30:04.689 INFO  [http-nio-11040-exec-1] [c.momo.common.util.SecurityContextUtil] - principal: UserDetailsImpl(username=km1104rs, password=$2a$10$uXShhwl6ULOkbJe477uDWOfdiUUcu6lOSF/Dhj9xP3U1nUn/gXkc6, authorities=[ROLE_STF, APPROVE])
2025-03-16 22:30:04.689 INFO  [http-nio-11040-exec-10] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-03-16 22:30:04.690 INFO  [http-nio-11040-exec-10] [c.momo.common.util.SecurityContextUtil] - principal: UserDetailsImpl(username=km1104rs, password=$2a$10$uXShhwl6ULOkbJe477uDWOfdiUUcu6lOSF/Dhj9xP3U1nUn/gXkc6, authorities=[ROLE_STF, APPROVE])
2025-03-16 22:30:04.690 INFO  [http-nio-11040-exec-8] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-03-16 22:30:04.690 DEBUG [http-nio-11040-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 2 msec}
2025-03-16 22:30:04.691 INFO  [http-nio-11040-exec-8] [c.momo.common.util.SecurityContextUtil] - principal: UserDetailsImpl(username=km1104rs, password=$2a$10$uXShhwl6ULOkbJe477uDWOfdiUUcu6lOSF/Dhj9xP3U1nUn/gXkc6, authorities=[ROLE_STF, APPROVE])
2025-03-16 22:30:04.694 DEBUG [http-nio-11040-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
4. UPDATE tb_notification
        SET read_st = TRUE
        WHERE receiver_id = 'km1104rs'
          AND read_st = FALSE
 {executed in 3 msec}
2025-03-16 22:30:04.694 DEBUG [http-nio-11040-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
2. SELECT content,
               notif_id,
               read_st,
               notif_tp as type,
               IF(date(send_dt) = current_date,true,false) as today,
            (
               TIMESTAMPDIFF(MINUTE, send_dt, current_timestamp)
            ) as ago
        FROM tb_notification
        WHERE receiver_id='km1104rs'
        ORDER BY send_dt DESC
 {executed in 3 msec}
2025-03-16 22:30:04.694 DEBUG [http-nio-11040-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
3. SELECT count(*)
        FROM tb_notification
        WHERE receiver_id = 'km1104rs'
          AND read_st = FALSE
 {executed in 3 msec}
2025-03-16 22:30:04.694 INFO  [http-nio-11040-exec-3] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-03-16 22:30:04.694 INFO  [http-nio-11040-exec-3] [c.momo.common.util.SecurityContextUtil] - principal: UserDetailsImpl(username=km1104rs, password=$2a$10$uXShhwl6ULOkbJe477uDWOfdiUUcu6lOSF/Dhj9xP3U1nUn/gXkc6, authorities=[ROLE_STF, APPROVE])
2025-03-16 22:30:04.699 DEBUG [http-nio-11040-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT ac.id,
               ac.name,
               ac.tel,
               ac.nickname,
               ac.pfp,
               ac.curr_shop_id,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where sf.shop_id = ac.curr_shop_id and
                         sf.staff_id = ac.id
                   ) as role,
               sh.shop_nm,
               sh.shop_addr,
               sh.provider,
               (
                   IFNULL((
                       select sf2.approval_st
                       from tb_staff sf2
                       where sf2.shop_id=ac.curr_shop_id and
                           sf2.staff_id=ac.id
                       ), -1)
                ) as approval_st,
                ac.corp_nm,
                ac.br_no
        FROM tb_account ac
        LEFT OUTER JOIN tb_shop sh on sh.shop_id=ac.curr_shop_id
        WHERE id = 'km1104rs'
 {executed in 4 msec}
2025-03-16 22:30:04.700 INFO  [http-nio-11040-exec-2] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/notif/count/unread
2025-03-16 22:30:04.700 INFO  [http-nio-11040-exec-3] [com.momo.api.UserController] - User: {role=1, approval_st=1, shop_addr=충청남도 천안시 병천면 충절로 1600 한국기술교육대학교 다산정보관 102, br_no=5218702490, provider=2, name=박희찬, nickname=대표, corp_nm=123, tel=010-4524-0636, id=km1104rs, pfp=1921fc01-e573-4243-9365-6b905389f4fc.png, curr_shop_id=2, shop_nm=한기대점 }
2025-03-16 22:30:04.700 INFO  [http-nio-11040-exec-2] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0MjEzMTgwNCwiZXhwIjoxNzQyMTMyNDA0LCJhdXRob3JpdGllcyI6IlJPTEVfU1RGLEFQUFJPVkUifQ.FtGFslOX8yJjlQRU-qbeJUwKW_DL2vNoEakYy-RcDWg
2025-03-16 22:30:04.700 INFO  [http-nio-11040-exec-2] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/notif/count/unread
2025-03-16 22:30:04.704 INFO  [http-nio-11040-exec-2] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-03-16 22:30:04.710 DEBUG [http-nio-11040-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
2. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 5 msec}
2025-03-16 22:30:04.722 INFO  [http-nio-11040-exec-2] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-03-16 22:30:04.723 INFO  [http-nio-11040-exec-2] [c.momo.common.util.SecurityContextUtil] - principal: UserDetailsImpl(username=km1104rs, password=$2a$10$uXShhwl6ULOkbJe477uDWOfdiUUcu6lOSF/Dhj9xP3U1nUn/gXkc6, authorities=[ROLE_STF, APPROVE])
2025-03-16 22:30:04.727 DEBUG [http-nio-11040-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
2. SELECT count(*)
        FROM tb_notification
        WHERE receiver_id = 'km1104rs'
          AND read_st = FALSE
 {executed in 1 msec}
2025-03-16 22:30:04.733 INFO  [http-nio-11040-exec-5] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/notif/count/unread
2025-03-16 22:30:04.733 INFO  [http-nio-11040-exec-5] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0MjEzMTgwNCwiZXhwIjoxNzQyMTMyNDA0LCJhdXRob3JpdGllcyI6IlJPTEVfU1RGLEFQUFJPVkUifQ.FtGFslOX8yJjlQRU-qbeJUwKW_DL2vNoEakYy-RcDWg
2025-03-16 22:30:04.733 INFO  [http-nio-11040-exec-5] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/notif/count/unread
2025-03-16 22:30:04.736 INFO  [http-nio-11040-exec-5] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-03-16 22:30:04.738 DEBUG [http-nio-11040-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
3. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 2 msec}
2025-03-16 22:30:04.739 INFO  [http-nio-11040-exec-4] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/sale/graph/ct/d
2025-03-16 22:30:04.739 INFO  [http-nio-11040-exec-4] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0MjEzMTgwNCwiZXhwIjoxNzQyMTMyNDA0LCJhdXRob3JpdGllcyI6IlJPTEVfU1RGLEFQUFJPVkUifQ.FtGFslOX8yJjlQRU-qbeJUwKW_DL2vNoEakYy-RcDWg
2025-03-16 22:30:04.739 INFO  [http-nio-11040-exec-4] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/sale/graph/ct/d
2025-03-16 22:30:04.742 INFO  [http-nio-11040-exec-4] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-03-16 22:30:04.744 INFO  [http-nio-11040-exec-5] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-03-16 22:30:04.744 INFO  [http-nio-11040-exec-5] [c.momo.common.util.SecurityContextUtil] - principal: UserDetailsImpl(username=km1104rs, password=$2a$10$uXShhwl6ULOkbJe477uDWOfdiUUcu6lOSF/Dhj9xP3U1nUn/gXkc6, authorities=[ROLE_STF, APPROVE])
2025-03-16 22:30:04.747 DEBUG [http-nio-11040-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
4. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 5 msec}
2025-03-16 22:30:04.748 INFO  [http-nio-11040-exec-6] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/sale/change/ct
2025-03-16 22:30:04.748 INFO  [http-nio-11040-exec-6] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0MjEzMTgwNCwiZXhwIjoxNzQyMTMyNDA0LCJhdXRob3JpdGllcyI6IlJPTEVfU1RGLEFQUFJPVkUifQ.FtGFslOX8yJjlQRU-qbeJUwKW_DL2vNoEakYy-RcDWg
2025-03-16 22:30:04.748 INFO  [http-nio-11040-exec-6] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/sale/change/ct
2025-03-16 22:30:04.753 INFO  [http-nio-11040-exec-6] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-03-16 22:30:04.756 DEBUG [http-nio-11040-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
3. SELECT count(*)
        FROM tb_notification
        WHERE receiver_id = 'km1104rs'
          AND read_st = FALSE
 {executed in 10 msec}
2025-03-16 22:30:04.756 INFO  [http-nio-11040-exec-7] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/pimg
2025-03-16 22:30:04.756 INFO  [http-nio-11040-exec-7] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0MjEzMTgwNCwiZXhwIjoxNzQyMTMyNDA0LCJhdXRob3JpdGllcyI6IlJPTEVfU1RGLEFQUFJPVkUifQ.FtGFslOX8yJjlQRU-qbeJUwKW_DL2vNoEakYy-RcDWg
2025-03-16 22:30:04.757 INFO  [http-nio-11040-exec-7] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/pimg
2025-03-16 22:30:04.761 INFO  [http-nio-11040-exec-7] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-03-16 22:30:04.792 INFO  [http-nio-11040-exec-1] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/todo/detail
2025-03-16 22:30:04.792 INFO  [http-nio-11040-exec-1] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0MjEzMTgwNCwiZXhwIjoxNzQyMTMyNDA0LCJhdXRob3JpdGllcyI6IlJPTEVfU1RGLEFQUFJPVkUifQ.FtGFslOX8yJjlQRU-qbeJUwKW_DL2vNoEakYy-RcDWg
2025-03-16 22:30:04.792 INFO  [http-nio-11040-exec-1] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/todo/detail
2025-03-16 22:30:04.792 INFO  [http-nio-11040-exec-9] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/todo
2025-03-16 22:30:04.792 INFO  [http-nio-11040-exec-9] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0MjEzMTgwNCwiZXhwIjoxNzQyMTMyNDA0LCJhdXRob3JpdGllcyI6IlJPTEVfU1RGLEFQUFJPVkUifQ.FtGFslOX8yJjlQRU-qbeJUwKW_DL2vNoEakYy-RcDWg
2025-03-16 22:30:04.792 INFO  [http-nio-11040-exec-9] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/todo
2025-03-16 22:30:04.794 INFO  [http-nio-11040-exec-9] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-03-16 22:30:04.794 INFO  [http-nio-11040-exec-1] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-03-16 22:30:04.796 INFO  [http-nio-11040-exec-4] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-03-16 22:30:04.806 DEBUG [http-nio-11040-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 52 msec}
2025-03-16 22:30:04.815 DEBUG [http-nio-11040-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
2. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 54 msec}
2025-03-16 22:30:04.819 INFO  [http-nio-11040-exec-8] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/shop/all
2025-03-16 22:30:04.819 INFO  [http-nio-11040-exec-8] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0MjEzMTgwNCwiZXhwIjoxNzQyMTMyNDA0LCJhdXRob3JpdGllcyI6IlJPTEVfU1RGLEFQUFJPVkUifQ.FtGFslOX8yJjlQRU-qbeJUwKW_DL2vNoEakYy-RcDWg
2025-03-16 22:30:04.819 INFO  [http-nio-11040-exec-8] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/shop/all
2025-03-16 22:30:04.822 INFO  [http-nio-11040-exec-8] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-03-16 22:30:04.823 INFO  [http-nio-11040-exec-6] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-03-16 22:30:04.823 INFO  [http-nio-11040-exec-7] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-03-16 22:30:04.824 DEBUG [http-nio-11040-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
5. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 28 msec}
2025-03-16 22:30:04.824 DEBUG [http-nio-11040-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
4. set @limit_cond := (
               case 'd'
                   when 'h' then '2000-01-24'
                   when 'd' then '2025-03-16'
                   when 'w' then '2025-03-16'
                   when 'm' then date_sub('2025-03-16', interval 1 month)
               end
        );

        with recursive org_date_table as (
            select (
                       case
                           when 'd' = 'h' then '2000-01-01'
                           when 'd' != 'h' then '2024-12-16'
                           end
                       ) as it
            union all
            select (
                       case 'd'
                           when 'h' then date_add(it, interval 1 day)
                           when 'd' then date_add(it, interval 1 day)
                           when 'w' then date_add(it, interval 1 week)
                           when 'm' then date_add(it, interval 1 month)
                           end
                       ) as it
            from org_date_table
            where it < @limit_cond
        ), date_table as (
            select
                year(it) as _year,
                (
                    case 'd'
                        when 'h' then day(it)
                        when 'd' then it
                        when 'w' then week(it)
                        when 'm' then month(it)
                        end
                    ) as dt
            from org_date_table
        ),  date_sale as (
            select year(actv_dt) _year,
                   month(actv_dt) as m,
                   week(actv_dt) as w,
                   actv_dt as d,
                   hour(regi_dt) as h,
                   tb_sale.*
            from tb_sale
            where shop_id=2 and

                actv_dt between '2024-12-16' and (
                    case
                        when 'd' = 'h' then '2024-12-16'
                        when 'd' != 'h' then '2025-03-16'
                        end
                    )
        ), final as (
            select count(device_id) as cnt
            from date_table dd
                     left outer join date_sale ds on dd._year=ds._year and
                                                     d = dt
            group by dd._year, dd.dt
        )

        select
            (
                select json_arrayagg(cnt)
                from final
            ) as value,
            (
                select json_arrayagg(date_format(it, '%Y-%m-%d'))
                from org_date_table
            ) as date
 {executed in 24 msec}
2025-03-16 22:30:04.825 DEBUG [http-nio-11040-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
6. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 29 msec}
2025-03-16 22:30:04.843 DEBUG [http-nio-11040-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
3. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 21 msec}
2025-03-16 22:30:04.849 DEBUG [http-nio-11040-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
2. select pimg_id as id,
               pimg_text as text,
               pimg_path as file
        from tb_post_img
        where shop_id=2
 {executed in 21 msec}
2025-03-16 22:30:04.849 INFO  [http-nio-11040-exec-10] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/img/download/pfp
2025-03-16 22:30:04.849 INFO  [http-nio-11040-exec-10] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0MjEzMTgwNCwiZXhwIjoxNzQyMTMyNDA0LCJhdXRob3JpdGllcyI6IlJPTEVfU1RGLEFQUFJPVkUifQ.FtGFslOX8yJjlQRU-qbeJUwKW_DL2vNoEakYy-RcDWg
2025-03-16 22:30:04.849 INFO  [http-nio-11040-exec-10] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/img/download/pfp
2025-03-16 22:30:04.852 DEBUG [http-nio-11040-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. with tb as (
            SELECT
                (
                    SELECT count(*)
                    FROM tb_sale
                    WHERE shop_id=2 and
                          device_id != 0 and
                          actv_dt BETWEEN '2025-02-01' AND '2025-02-16'
                    ) as prev,
                (
                    SELECT count(*)
                    FROM tb_sale
                    WHERE shop_id=2 and
                        device_id != 0 and
                        actv_dt BETWEEN '2025-03-01' AND '2025-03-16'
                ) as curr
            FROM DUAL
        )

        SELECT tb.curr - tb.prev
        FROM tb
 {executed in 26 msec}
2025-03-16 22:30:04.853 INFO  [http-nio-11040-exec-10] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-03-16 22:30:04.874 INFO  [http-nio-11040-exec-8] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-03-16 22:30:04.877 INFO  [http-nio-11040-exec-8] [c.momo.common.util.SecurityContextUtil] - principal: UserDetailsImpl(username=km1104rs, password=$2a$10$uXShhwl6ULOkbJe477uDWOfdiUUcu6lOSF/Dhj9xP3U1nUn/gXkc6, authorities=[ROLE_STF, APPROVE])
2025-03-16 22:30:04.877 DEBUG [http-nio-11040-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
2. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 23 msec}
2025-03-16 22:30:04.880 DEBUG [http-nio-11040-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
3. select sh.shop_id,
               sh.shop_nm
        from tb_staff sf
        left outer join tb_shop sh on sh.shop_id=sf.shop_id
        where staff_id='km1104rs'
 {executed in 2 msec}
2025-03-16 22:30:04.880 INFO  [http-nio-11040-exec-10] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-03-16 22:30:04.882 INFO  [http-nio-11040-exec-9] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-03-16 22:30:04.892 INFO  [http-nio-11040-exec-3] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/sale/summary
2025-03-16 22:30:04.892 INFO  [http-nio-11040-exec-3] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0MjEzMTgwNCwiZXhwIjoxNzQyMTMyNDA0LCJhdXRob3JpdGllcyI6IlJPTEVfU1RGLEFQUFJPVkUifQ.FtGFslOX8yJjlQRU-qbeJUwKW_DL2vNoEakYy-RcDWg
2025-03-16 22:30:04.892 INFO  [http-nio-11040-exec-3] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/sale/summary
2025-03-16 22:30:04.900 INFO  [http-nio-11040-exec-3] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-03-16 22:30:04.900 INFO  [http-nio-11040-exec-2] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/sale/ratio
2025-03-16 22:30:04.900 INFO  [http-nio-11040-exec-2] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0MjEzMTgwNCwiZXhwIjoxNzQyMTMyNDA0LCJhdXRob3JpdGllcyI6IlJPTEVfU1RGLEFQUFJPVkUifQ.FtGFslOX8yJjlQRU-qbeJUwKW_DL2vNoEakYy-RcDWg
2025-03-16 22:30:04.900 INFO  [http-nio-11040-exec-2] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/sale/ratio
2025-03-16 22:30:04.901 INFO  [http-nio-11040-exec-5] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/sale/wip
2025-03-16 22:30:04.901 INFO  [http-nio-11040-exec-5] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0MjEzMTgwNCwiZXhwIjoxNzQyMTMyNDA0LCJhdXRob3JpdGllcyI6IlJPTEVfU1RGLEFQUFJPVkUifQ.FtGFslOX8yJjlQRU-qbeJUwKW_DL2vNoEakYy-RcDWg
2025-03-16 22:30:04.901 INFO  [http-nio-11040-exec-5] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/sale/wip
2025-03-16 22:30:04.901 INFO  [http-nio-11040-exec-4] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/img/download/pimg
2025-03-16 22:30:04.901 INFO  [http-nio-11040-exec-4] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0MjEzMTgwNCwiZXhwIjoxNzQyMTMyNDA0LCJhdXRob3JpdGllcyI6IlJPTEVfU1RGLEFQUFJPVkUifQ.FtGFslOX8yJjlQRU-qbeJUwKW_DL2vNoEakYy-RcDWg
2025-03-16 22:30:04.901 INFO  [http-nio-11040-exec-4] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/img/download/pimg
2025-03-16 22:30:04.903 INFO  [http-nio-11040-exec-4] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-03-16 22:30:04.907 INFO  [http-nio-11040-exec-2] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-03-16 22:30:04.904 INFO  [http-nio-11040-exec-5] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-03-16 22:30:05.066 INFO  [http-nio-11040-exec-1] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-03-16 22:30:05.070 DEBUG [http-nio-11040-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
2. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 162 msec}
2025-03-16 22:30:05.070 DEBUG [http-nio-11040-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
6. SELECT /* TodoMapper.xml / getTodoDetail */
                todo_id,
                color,
                checked,
               content
        FROM tb_todo td
        WHERE td.shop_id=2 and
            todo_dt='2025-03-16'
 {executed in 2 msec}
2025-03-16 22:30:05.072 DEBUG [http-nio-11040-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
5. SELECT SUBSTR(todo_dt, 9, 2)
        FROM tb_todo
        WHERE shop_id= 2  and
            todo_dt like '%2025-03%'
 {executed in 178 msec}
2025-03-16 22:30:05.072 DEBUG [http-nio-11040-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 172 msec}
2025-03-16 22:30:05.074 INFO  [http-nio-11040-exec-2] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-03-16 22:30:05.076 INFO  [http-nio-11040-exec-3] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-03-16 22:30:05.079 DEBUG [http-nio-11040-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
4. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 173 msec}
2025-03-16 22:30:05.080 DEBUG [http-nio-11040-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
3. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 169 msec}
2025-03-16 22:30:05.083 DEBUG [http-nio-11040-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
2. SET @total_sale_count := (
            SELECT count(*)
            FROM tb_sale
            WHERE shop_id=2 and
                device_id is not null and
                actv_dt like '2025-03%'
        );

        with tb as (
            SELECT count(*) as curr
            FROM tb_sale_card sc
                     LEFT OUTER JOIN tb_sale sl on sl.sale_id=sc.sale_id
            WHERE sc.shop_id=2 and
                actv_dt like '2025-03%'
            UNION ALL
            SELECT count(*) as curr
            FROM tb_sale
            WHERE shop_id= 2 and
                actv_dt like '2025-03%' and
                sd_id is not null
            UNION ALL
            SELECT count(*) as curr
            FROM tb_sale
            WHERE shop_id= 2 and
                actv_dt like '2025-03%' and
                exsvc_id is not null
        )

        SELECT
            curr as value,
            @total_sale_count as total,
            (
                CASE
                    WHEN @total_sale_count = 0 THEN 0
                    WHEN @total_sale_count != 0 THEN TRUNCATE(((curr/@total_sale_count))*100, 1)
                    END
                ) as per
        FROM tb
 {executed in 7 msec}
2025-03-16 22:30:05.087 INFO  [http-nio-11040-exec-5] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-03-16 22:30:05.088 INFO  [http-nio-11040-exec-6] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/todo
2025-03-16 22:30:05.088 INFO  [http-nio-11040-exec-7] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/todo/detail
2025-03-16 22:30:05.089 INFO  [http-nio-11040-exec-6] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0MjEzMTgwNCwiZXhwIjoxNzQyMTMyNDA0LCJhdXRob3JpdGllcyI6IlJPTEVfU1RGLEFQUFJPVkUifQ.FtGFslOX8yJjlQRU-qbeJUwKW_DL2vNoEakYy-RcDWg
2025-03-16 22:30:05.089 INFO  [http-nio-11040-exec-7] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0MjEzMTgwNCwiZXhwIjoxNzQyMTMyNDA0LCJhdXRob3JpdGllcyI6IlJPTEVfU1RGLEFQUFJPVkUifQ.FtGFslOX8yJjlQRU-qbeJUwKW_DL2vNoEakYy-RcDWg
2025-03-16 22:30:05.089 INFO  [http-nio-11040-exec-6] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/todo
2025-03-16 22:30:05.089 INFO  [http-nio-11040-exec-7] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/todo/detail
2025-03-16 22:30:05.091 INFO  [http-nio-11040-exec-4] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-03-16 22:30:05.092 INFO  [http-nio-11040-exec-6] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-03-16 22:30:05.092 INFO  [http-nio-11040-exec-7] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-03-16 22:30:05.096 DEBUG [http-nio-11040-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. with prevMonth as (
            SELECT *
            FROM tb_sale
            WHERE shop_id=2 and
                actv_dt like '2025-02%'
        ), currMonth as (
            SELECT *
            FROM tb_sale
            WHERE shop_id=2 and
                actv_dt like '2025-03%'
        ) , tb as (
            SELECT
                (
                    SELECT IFNULL(count(*), 0)
                    FROM prevMonth
                    WHERE device_id is not null
                    ) as prev,
                (
                    SELECT IFNULL(count(*), 0)
                    FROM currMonth
                    WHERE device_id is not null
                ) as curr
            from dual
            UNION ALL
            SELECT
                (
                    SELECT IFNULL(count(*), 0)
                    FROM prevMonth
                    WHERE internet_plan is not null
                ) as prev,
                (
                    SELECT IFNULL(count(*), 0)
                    FROM currMonth
                    WHERE internet_plan is not null
                ) as curr
            from dual
            UNION ALL
            SELECT
                (
                    SELECT IFNULL(count(*), 0)
                    FROM prevMonth
                    WHERE tv_plan is not null
                ) as prev,
                (
                    SELECT IFNULL(count(*), 0)
                    FROM currMonth
                    WHERE tv_plan is not null
                ) as curr
            from dual
            UNION ALL
            SELECT
                (
                    SELECT IFNULL(SUM(total_cms),0)
                    FROM prevMonth
                    where device_id is not null
                ) as prev,
                (
                    SELECT IFNULL(SUM(total_cms),0)
                    FROM currMonth
                    where device_id is not null
                ) as curr
            from dual
            UNION ALL
            SELECT
                (
                    SELECT IFNULL(AVG(total_cms),0)
                    FROM prevMonth
                    where device_id is not null
                ) as prev,
                (
                    SELECT IFNULL(AVG(total_cms),0)
                    FROM currMonth
                    where device_id is not null
                ) as curr
            from dual
        )

        SELECT FLOOR(curr) as value,
               (
                   CASE
                       WHEN curr = 0 THEN 0
                       WHEN prev = 0 THEN 100
                       WHEN prev != 0 THEN TRUNCATE(((curr/prev)-1)*100, 1)
                   END
                   ) as per
        FROM tb
 {executed in 14 msec}
2025-03-16 22:30:05.102 DEBUG [http-nio-11040-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
4. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 10 msec}
2025-03-16 22:30:05.102 DEBUG [http-nio-11040-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
2. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 10 msec}
2025-03-16 22:30:05.103 DEBUG [http-nio-11040-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
3. with table_ud as (
            SELECT ud_st
            FROM tb_sale_used_device sud
            LEFT OUTER JOIN tb_sale sl on sl.sale_id=sud.sale_id
            WHERE sud.shop_id=2
--               and
--                 actv_dt like '%'
        ), table_card as (
            SELECT card_st
            FROM tb_sale_card sc
            LEFT OUTER JOIN tb_sale sl on sl.sale_id=sc.sale_id
            WHERE sc.shop_id=2
--               and
--                 actv_dt like '%'
        ), table_comb as (
            SELECT comb_st
            FROM tb_sale
            WHERE shop_id=2
--               and
--                 actv_dt like '%%'
        ), table_sup as (
            SELECT sup_st
            FROM tb_sale_support sc LEFT OUTER JOIN tb_sale sl on sl.sale_id=sc.sale_id
            WHERE sc.shop_id=2
--               and
--                 actv_dt like '%%'
        ), table_pm as (
            SELECT checked
            FROM tb_promise sc
                LEFT OUTER JOIN tb_sale sl on sl.sale_id=sc.sale_id
            WHERE sc.shop_id=2
--               and
--                 actv_dt like '%%'
        ), rst as (
            SELECT
                (
                    SELECT count(*)
                    FROM table_ud
                    WHERE ud_st!=2
                )
            UNION ALL
            SELECT
                (
                    SELECT count(*)
                    FROM table_card
                    WHERE card_st!=2
                )
            UNION ALL
            SELECT
                (
                    SELECT count(*)
                    FROM table_comb
                    WHERE comb_st!=1
                )
            UNION ALL
            SELECT
                (
                    SELECT count(*)
                    FROM table_sup
                    WHERE sup_st!=1
                )
            UNION ALL
            SELECT
                (
                    SELECT count(*)
                    FROM table_pm
                    WHERE checked!=1
                )
        )

        SELECT *
        FROM rst
 {executed in 12 msec}
2025-03-16 22:30:05.106 INFO  [http-nio-11040-exec-6] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-03-16 22:30:05.106 INFO  [http-nio-11040-exec-7] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-03-16 22:30:05.110 DEBUG [http-nio-11040-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
4. SELECT SUBSTR(todo_dt, 9, 2)
        FROM tb_todo
        WHERE shop_id= 2  and
            todo_dt like '%2025-03%'
 {executed in 2 msec}
2025-03-16 22:30:05.111 DEBUG [http-nio-11040-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
2. SELECT /* TodoMapper.xml / getTodoDetail */
                todo_id,
                color,
                checked,
               content
        FROM tb_todo td
        WHERE td.shop_id=2 and
            todo_dt='2025-03-16'
 {executed in 2 msec}
2025-03-16 22:30:05.120 INFO  [http-nio-11040-exec-8] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/todo/detail
2025-03-16 22:30:05.120 INFO  [http-nio-11040-exec-10] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/todo
2025-03-16 22:30:05.120 INFO  [http-nio-11040-exec-8] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0MjEzMTgwNCwiZXhwIjoxNzQyMTMyNDA0LCJhdXRob3JpdGllcyI6IlJPTEVfU1RGLEFQUFJPVkUifQ.FtGFslOX8yJjlQRU-qbeJUwKW_DL2vNoEakYy-RcDWg
2025-03-16 22:30:05.120 INFO  [http-nio-11040-exec-8] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/todo/detail
2025-03-16 22:30:05.120 INFO  [http-nio-11040-exec-10] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0MjEzMTgwNCwiZXhwIjoxNzQyMTMyNDA0LCJhdXRob3JpdGllcyI6IlJPTEVfU1RGLEFQUFJPVkUifQ.FtGFslOX8yJjlQRU-qbeJUwKW_DL2vNoEakYy-RcDWg
2025-03-16 22:30:05.120 INFO  [http-nio-11040-exec-10] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/todo
2025-03-16 22:30:05.122 INFO  [http-nio-11040-exec-8] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-03-16 22:30:05.123 INFO  [http-nio-11040-exec-10] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-03-16 22:30:05.127 DEBUG [http-nio-11040-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
2. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 3 msec}
2025-03-16 22:30:05.127 DEBUG [http-nio-11040-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
3. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 4 msec}
2025-03-16 22:30:05.131 INFO  [http-nio-11040-exec-10] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-03-16 22:30:05.134 INFO  [http-nio-11040-exec-8] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-03-16 22:30:05.136 DEBUG [http-nio-11040-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
2. SELECT SUBSTR(todo_dt, 9, 2)
        FROM tb_todo
        WHERE shop_id= 2  and
            todo_dt like '%2025-03%'
 {executed in 1 msec}
2025-03-16 22:30:05.137 DEBUG [http-nio-11040-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
3. SELECT /* TodoMapper.xml / getTodoDetail */
                todo_id,
                color,
                checked,
               content
        FROM tb_todo td
        WHERE td.shop_id=2 and
            todo_dt='2025-03-16'
 {executed in 1 msec}
2025-03-16 22:30:05.148 INFO  [http-nio-11040-exec-1] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/todo/detail
2025-03-16 22:30:05.150 INFO  [http-nio-11040-exec-1] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0MjEzMTgwNCwiZXhwIjoxNzQyMTMyNDA0LCJhdXRob3JpdGllcyI6IlJPTEVfU1RGLEFQUFJPVkUifQ.FtGFslOX8yJjlQRU-qbeJUwKW_DL2vNoEakYy-RcDWg
2025-03-16 22:30:05.150 INFO  [http-nio-11040-exec-1] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/todo/detail
2025-03-16 22:30:05.154 INFO  [http-nio-11040-exec-1] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-03-16 22:30:05.157 DEBUG [http-nio-11040-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
6. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 3 msec}
2025-03-16 22:30:05.164 INFO  [http-nio-11040-exec-1] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-03-16 22:30:05.169 INFO  [http-nio-11040-exec-9] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/todo
2025-03-16 22:30:05.169 INFO  [http-nio-11040-exec-9] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0MjEzMTgwNCwiZXhwIjoxNzQyMTMyNDA0LCJhdXRob3JpdGllcyI6IlJPTEVfU1RGLEFQUFJPVkUifQ.FtGFslOX8yJjlQRU-qbeJUwKW_DL2vNoEakYy-RcDWg
2025-03-16 22:30:05.169 INFO  [http-nio-11040-exec-9] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/todo
2025-03-16 22:30:05.171 INFO  [http-nio-11040-exec-9] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-03-16 22:30:05.171 DEBUG [http-nio-11040-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
6. SELECT /* TodoMapper.xml / getTodoDetail */
                todo_id,
                color,
                checked,
               content
        FROM tb_todo td
        WHERE td.shop_id=2 and
            todo_dt='2025-03-16'
 {executed in 3 msec}
2025-03-16 22:30:05.175 DEBUG [http-nio-11040-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
5. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 4 msec}
2025-03-16 22:30:05.177 INFO  [http-nio-11040-exec-2] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/todo/detail
2025-03-16 22:30:05.177 INFO  [http-nio-11040-exec-2] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0MjEzMTgwNCwiZXhwIjoxNzQyMTMyNDA0LCJhdXRob3JpdGllcyI6IlJPTEVfU1RGLEFQUFJPVkUifQ.FtGFslOX8yJjlQRU-qbeJUwKW_DL2vNoEakYy-RcDWg
2025-03-16 22:30:05.177 INFO  [http-nio-11040-exec-2] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/todo/detail
2025-03-16 22:30:05.177 INFO  [http-nio-11040-exec-9] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-03-16 22:30:05.178 INFO  [http-nio-11040-exec-2] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-03-16 22:30:05.180 DEBUG [http-nio-11040-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
5. SELECT SUBSTR(todo_dt, 9, 2)
        FROM tb_todo
        WHERE shop_id= 2  and
            todo_dt like '%2025-03%'
 {executed in 1 msec}
2025-03-16 22:30:05.180 DEBUG [http-nio-11040-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
2. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 1 msec}
2025-03-16 22:30:05.184 INFO  [http-nio-11040-exec-2] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-03-16 22:30:05.186 DEBUG [http-nio-11040-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
2. SELECT /* TodoMapper.xml / getTodoDetail */
                todo_id,
                color,
                checked,
               content
        FROM tb_todo td
        WHERE td.shop_id=2 and
            todo_dt='2025-03-16'
 {executed in 1 msec}
2025-03-16 22:30:05.191 INFO  [http-nio-11040-exec-4] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/todo/detail
2025-03-16 22:30:05.192 INFO  [http-nio-11040-exec-4] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0MjEzMTgwNCwiZXhwIjoxNzQyMTMyNDA0LCJhdXRob3JpdGllcyI6IlJPTEVfU1RGLEFQUFJPVkUifQ.FtGFslOX8yJjlQRU-qbeJUwKW_DL2vNoEakYy-RcDWg
2025-03-16 22:30:05.192 INFO  [http-nio-11040-exec-4] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/todo/detail
2025-03-16 22:30:05.194 INFO  [http-nio-11040-exec-4] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-03-16 22:30:05.195 DEBUG [http-nio-11040-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
4. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 1 msec}
2025-03-16 22:30:05.197 INFO  [http-nio-11040-exec-4] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-03-16 22:30:05.199 DEBUG [http-nio-11040-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
4. SELECT /* TodoMapper.xml / getTodoDetail */
                todo_id,
                color,
                checked,
               content
        FROM tb_todo td
        WHERE td.shop_id=2 and
            todo_dt='2025-03-16'
 {executed in 1 msec}
2025-03-16 22:30:05.203 INFO  [http-nio-11040-exec-3] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/todo/detail
2025-03-16 22:30:05.203 INFO  [http-nio-11040-exec-3] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0MjEzMTgwNCwiZXhwIjoxNzQyMTMyNDA0LCJhdXRob3JpdGllcyI6IlJPTEVfU1RGLEFQUFJPVkUifQ.FtGFslOX8yJjlQRU-qbeJUwKW_DL2vNoEakYy-RcDWg
2025-03-16 22:30:05.203 INFO  [http-nio-11040-exec-3] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/todo/detail
2025-03-16 22:30:05.205 INFO  [http-nio-11040-exec-3] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-03-16 22:30:05.206 DEBUG [http-nio-11040-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 1 msec}
2025-03-16 22:30:05.208 INFO  [http-nio-11040-exec-3] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-03-16 22:30:05.210 DEBUG [http-nio-11040-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT /* TodoMapper.xml / getTodoDetail */
                todo_id,
                color,
                checked,
               content
        FROM tb_todo td
        WHERE td.shop_id=2 and
            todo_dt='2025-03-16'
 {executed in 1 msec}
2025-03-16 22:30:05.222 INFO  [http-nio-11040-exec-5] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/todo/detail
2025-03-16 22:30:05.222 INFO  [http-nio-11040-exec-5] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0MjEzMTgwNCwiZXhwIjoxNzQyMTMyNDA0LCJhdXRob3JpdGllcyI6IlJPTEVfU1RGLEFQUFJPVkUifQ.FtGFslOX8yJjlQRU-qbeJUwKW_DL2vNoEakYy-RcDWg
2025-03-16 22:30:05.222 INFO  [http-nio-11040-exec-5] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/todo/detail
2025-03-16 22:30:05.224 INFO  [http-nio-11040-exec-5] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-03-16 22:30:05.225 DEBUG [http-nio-11040-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
3. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 1 msec}
2025-03-16 22:30:05.227 INFO  [http-nio-11040-exec-5] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-03-16 22:30:05.228 DEBUG [http-nio-11040-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
3. SELECT /* TodoMapper.xml / getTodoDetail */
                todo_id,
                color,
                checked,
               content
        FROM tb_todo td
        WHERE td.shop_id=2 and
            todo_dt='2025-03-16'
 {executed in 1 msec}
2025-03-16 22:30:05.252 INFO  [http-nio-11040-exec-7] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/img/download/pimg
2025-03-16 22:30:05.252 INFO  [http-nio-11040-exec-7] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0MjEzMTgwNCwiZXhwIjoxNzQyMTMyNDA0LCJhdXRob3JpdGllcyI6IlJPTEVfU1RGLEFQUFJPVkUifQ.FtGFslOX8yJjlQRU-qbeJUwKW_DL2vNoEakYy-RcDWg
2025-03-16 22:30:05.252 INFO  [http-nio-11040-exec-7] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/img/download/pimg
2025-03-16 22:30:05.258 INFO  [http-nio-11040-exec-7] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-03-16 22:30:05.260 DEBUG [http-nio-11040-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
2. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 2 msec}
2025-03-16 22:30:05.261 INFO  [http-nio-11040-exec-7] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-03-16 22:30:05.280 INFO  [http-nio-11040-exec-6] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/img/download/pimg
2025-03-16 22:30:05.280 INFO  [http-nio-11040-exec-6] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0MjEzMTgwNCwiZXhwIjoxNzQyMTMyNDA0LCJhdXRob3JpdGllcyI6IlJPTEVfU1RGLEFQUFJPVkUifQ.FtGFslOX8yJjlQRU-qbeJUwKW_DL2vNoEakYy-RcDWg
2025-03-16 22:30:05.280 INFO  [http-nio-11040-exec-6] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/img/download/pimg
2025-03-16 22:30:05.281 INFO  [http-nio-11040-exec-6] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-03-16 22:30:05.284 DEBUG [http-nio-11040-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
4. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 3 msec}
2025-03-16 22:30:05.294 INFO  [http-nio-11040-exec-6] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-03-16 22:30:53.310 INFO  [MessageBroker-1] [o.s.w.s.c.WebSocketMessageBrokerStats] - WebSocketSession[0 current WS(0)-HttpStream(0)-HttpPoll(0), 0 total, 0 closed abnormally (0 connect failure, 0 send limit, 0 transport error)], stompSubProtocol[processed CONNECT(0)-CONNECTED(0)-DISCONNECT(0)], stompBrokerRelay[null], inboundChannel[pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 0], outboundChannel[pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 0], sockJsScheduler[pool size = 1, active threads = 1, queued tasks = 0, completed tasks = 0]
2025-03-16 22:31:12.270 INFO  [File Watcher] [o.s.b.d.a.LocalDevToolsAutoConfiguration$RestartingClassPathChangeChangedEventListener] - Restarting due to 2 class path changes (0 additions, 0 deletions, 2 modifications)
2025-03-16 22:31:12.276 INFO  [Thread-5] [o.s.m.s.b.SimpleBrokerMessageHandler] - Stopping...
2025-03-16 22:31:12.276 INFO  [Thread-5] [o.s.m.s.b.SimpleBrokerMessageHandler] - BrokerAvailabilityEvent[available=false, SimpleBrokerMessageHandler [org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry@4fe483de]]
2025-03-16 22:31:12.276 INFO  [Thread-5] [o.s.m.s.b.SimpleBrokerMessageHandler] - Stopped.
2025-03-16 22:31:12.277 INFO  [Thread-5] [org.quartz.core.QuartzScheduler] - Scheduler quartzScheduler_$_NON_CLUSTERED paused.
2025-03-16 22:31:12.278 INFO  [Thread-5] [o.apache.coyote.http11.Http11NioProtocol] - Stopping ProtocolHandler ["http-nio-11040"]
2025-03-16 22:31:12.289 INFO  [Thread-5] [o.s.s.quartz.SchedulerFactoryBean] - Shutting down Quartz Scheduler
2025-03-16 22:31:12.289 INFO  [Thread-5] [org.quartz.core.QuartzScheduler] - Scheduler quartzScheduler_$_NON_CLUSTERED shutting down.
2025-03-16 22:31:12.289 INFO  [Thread-5] [org.quartz.core.QuartzScheduler] - Scheduler quartzScheduler_$_NON_CLUSTERED paused.
2025-03-16 22:31:12.290 INFO  [Thread-5] [org.quartz.core.QuartzScheduler] - Scheduler quartzScheduler_$_NON_CLUSTERED shutdown complete.
2025-03-16 22:31:12.346 INFO  [restartedMain] [com.momo.PhoneManagementApplication] - Starting PhoneManagementApplication using Java 17.0.12 with PID 46735 (/Users/chan/momo/phoneManagement/target/classes started by chan in /Users/chan/momo/phoneManagement)
2025-03-16 22:31:12.346 INFO  [restartedMain] [com.momo.PhoneManagementApplication] - The following 1 profile is active: "dev"
2025-03-16 22:31:12.553 INFO  [restartedMain] [o.s.b.w.embedded.tomcat.TomcatWebServer] - Tomcat initialized with port 11040 (http)
2025-03-16 22:31:12.554 INFO  [restartedMain] [o.apache.coyote.http11.Http11NioProtocol] - Initializing ProtocolHandler ["http-nio-11040"]
2025-03-16 22:31:12.554 INFO  [restartedMain] [o.apache.catalina.core.StandardService] - Starting service [Tomcat]
2025-03-16 22:31:12.554 INFO  [restartedMain] [org.apache.catalina.core.StandardEngine] - Starting Servlet engine: [Apache Tomcat/10.1.17]
2025-03-16 22:31:12.559 INFO  [restartedMain] [o.a.c.c.C.[Tomcat].[localhost].[/]] - Initializing Spring embedded WebApplicationContext
2025-03-16 22:31:12.559 INFO  [restartedMain] [o.s.b.w.s.c.ServletWebServerApplicationContext] - Root WebApplicationContext: initialization completed in 211 ms
2025-03-16 22:31:12.775 INFO  [restartedMain] [org.quartz.impl.StdSchedulerFactory] - Using default implementation for ThreadExecutor
2025-03-16 22:31:12.776 INFO  [restartedMain] [org.quartz.core.SchedulerSignalerImpl] - Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2025-03-16 22:31:12.776 INFO  [restartedMain] [org.quartz.core.QuartzScheduler] - Quartz Scheduler v.2.3.2 created.
2025-03-16 22:31:12.776 INFO  [restartedMain] [org.quartz.simpl.RAMJobStore] - RAMJobStore initialized.
2025-03-16 22:31:12.776 INFO  [restartedMain] [org.quartz.core.QuartzScheduler] - Scheduler meta-data: Quartz Scheduler (v2.3.2) 'quartzScheduler' with instanceId 'NON_CLUSTERED'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 10 threads.
  Using job-store 'org.quartz.simpl.RAMJobStore' - which does not support persistence. and is not clustered.

2025-03-16 22:31:12.776 INFO  [restartedMain] [org.quartz.impl.StdSchedulerFactory] - Quartz scheduler 'quartzScheduler' initialized from an externally provided properties instance.
2025-03-16 22:31:12.776 INFO  [restartedMain] [org.quartz.impl.StdSchedulerFactory] - Quartz scheduler version: 2.3.2
2025-03-16 22:31:12.776 INFO  [restartedMain] [org.quartz.core.QuartzScheduler] - JobFactory set to: org.springframework.scheduling.quartz.SpringBeanJobFactory@427a7eb0
2025-03-16 22:31:12.789 INFO  [restartedMain] [o.s.b.f.a.AutowiredAnnotationBeanPostProcessor] - Autowired annotation is not supported on static fields: public static int com.momo.job.DormantUserJob.DORMANT_CYCLE_DATE
2025-03-16 22:31:12.835 INFO  [restartedMain] [o.s.b.a.w.s.WelcomePageHandlerMapping] - Adding welcome page: class path resource [public/index.html]
2025-03-16 22:31:12.981 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Will secure any request with [org.springframework.security.web.session.DisableEncodeUrlFilter@429d33b9, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@493e3aba, org.springframework.security.web.context.SecurityContextHolderFilter@39872461, org.springframework.security.web.header.HeaderWriterFilter@127936f9, org.springframework.web.filter.CorsFilter@670e4af7, org.springframework.security.web.authentication.logout.LogoutFilter@752e0af6, com.momo.filter.JwtAuthorizationFilter@305e9dd2, org.springframework.security.web.session.ConcurrentSessionFilter@3120f36c, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@62121356, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@4387bc85, org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationFilter@7543fa6, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@1b75709b, org.springframework.security.web.session.SessionManagementFilter@60882786, org.springframework.security.web.access.ExceptionTranslationFilter@4699d6c7, org.springframework.security.web.access.intercept.FilterSecurityInterceptor@6b678c08]
2025-03-16 22:31:13.034 WARN  [restartedMain] [o.s.b.a.t.ThymeleafAutoConfiguration$DefaultTemplateResolverConfiguration] - Cannot find template location: classpath:/templates/ (please add some templates, check your Thymeleaf configuration, or set spring.thymeleaf.check-template-location=false)
2025-03-16 22:31:13.074 INFO  [restartedMain] [o.s.b.d.a.OptionalLiveReloadServer] - LiveReload server is running on port 35729
2025-03-16 22:31:13.083 INFO  [restartedMain] [o.apache.coyote.http11.Http11NioProtocol] - Starting ProtocolHandler ["http-nio-11040"]
2025-03-16 22:31:13.084 INFO  [restartedMain] [o.s.b.w.embedded.tomcat.TomcatWebServer] - Tomcat started on port 11040 (http) with context path ''
2025-03-16 22:31:13.084 INFO  [restartedMain] [o.s.m.s.b.SimpleBrokerMessageHandler] - Starting...
2025-03-16 22:31:13.084 INFO  [restartedMain] [o.s.m.s.b.SimpleBrokerMessageHandler] - BrokerAvailabilityEvent[available=true, SimpleBrokerMessageHandler [org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry@42c0bea9]]
2025-03-16 22:31:13.084 INFO  [restartedMain] [o.s.m.s.b.SimpleBrokerMessageHandler] - Started.
2025-03-16 22:31:13.084 INFO  [restartedMain] [o.s.s.quartz.SchedulerFactoryBean] - Starting Quartz Scheduler now
2025-03-16 22:31:13.084 INFO  [restartedMain] [org.quartz.core.QuartzScheduler] - Scheduler quartzScheduler_$_NON_CLUSTERED started.
2025-03-16 22:31:13.087 INFO  [restartedMain] [com.momo.PhoneManagementApplication] - Started PhoneManagementApplication in 0.756 seconds (process running for 82.458)
2025-03-16 22:31:13.089 INFO  [restartedMain] [o.s.b.d.a.ConditionEvaluationDeltaLoggingListener] - Condition evaluation unchanged
2025-03-16 22:32:13.087 INFO  [MessageBroker-1] [o.s.w.s.c.WebSocketMessageBrokerStats] - WebSocketSession[0 current WS(0)-HttpStream(0)-HttpPoll(0), 0 total, 0 closed abnormally (0 connect failure, 0 send limit, 0 transport error)], stompSubProtocol[processed CONNECT(0)-CONNECTED(0)-DISCONNECT(0)], stompBrokerRelay[null], inboundChannel[pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 0], outboundChannel[pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 0], sockJsScheduler[pool size = 1, active threads = 1, queued tasks = 0, completed tasks = 0]
2025-03-16 22:33:17.740 INFO  [SpringApplicationShutdownHook] [o.s.m.s.b.SimpleBrokerMessageHandler] - Stopping...
2025-03-16 22:33:17.740 INFO  [SpringApplicationShutdownHook] [o.s.m.s.b.SimpleBrokerMessageHandler] - BrokerAvailabilityEvent[available=false, SimpleBrokerMessageHandler [org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry@42c0bea9]]
2025-03-16 22:33:17.740 INFO  [SpringApplicationShutdownHook] [o.s.m.s.b.SimpleBrokerMessageHandler] - Stopped.
2025-03-16 22:33:17.740 INFO  [SpringApplicationShutdownHook] [org.quartz.core.QuartzScheduler] - Scheduler quartzScheduler_$_NON_CLUSTERED paused.
2025-03-16 22:33:17.742 INFO  [SpringApplicationShutdownHook] [o.s.s.quartz.SchedulerFactoryBean] - Shutting down Quartz Scheduler
2025-03-16 22:33:17.742 INFO  [SpringApplicationShutdownHook] [org.quartz.core.QuartzScheduler] - Scheduler quartzScheduler_$_NON_CLUSTERED shutting down.
2025-03-16 22:33:17.742 INFO  [SpringApplicationShutdownHook] [org.quartz.core.QuartzScheduler] - Scheduler quartzScheduler_$_NON_CLUSTERED paused.
2025-03-16 22:33:17.742 INFO  [SpringApplicationShutdownHook] [org.quartz.core.QuartzScheduler] - Scheduler quartzScheduler_$_NON_CLUSTERED shutdown complete.
