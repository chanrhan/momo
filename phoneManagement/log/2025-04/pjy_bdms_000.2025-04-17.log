2025-04-17 21:50:30.950 INFO  [background-preinit] [o.h.validator.internal.util.Version] - HV000001: Hibernate Validator 8.0.1.Final
2025-04-17 21:50:30.983 INFO  [restartedMain] [com.momo.PhoneManagementApplication] - Starting PhoneManagementApplication using Java 17.0.12 with PID 73746 (/Users/chan/momo/phoneManagement/target/classes started by chan in /Users/chan/momo/phoneManagement)
2025-04-17 21:50:30.984 INFO  [restartedMain] [com.momo.PhoneManagementApplication] - The following 1 profile is active: "dev"
2025-04-17 21:50:31.153 INFO  [restartedMain] [o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor] - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2025-04-17 21:50:31.153 INFO  [restartedMain] [o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor] - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2025-04-17 21:50:32.198 INFO  [restartedMain] [o.s.b.w.embedded.tomcat.TomcatWebServer] - Tomcat initialized with port 11040 (http)
2025-04-17 21:50:32.205 INFO  [restartedMain] [o.apache.coyote.http11.Http11NioProtocol] - Initializing ProtocolHandler ["http-nio-11040"]
2025-04-17 21:50:32.206 INFO  [restartedMain] [o.apache.catalina.core.StandardService] - Starting service [Tomcat]
2025-04-17 21:50:32.207 INFO  [restartedMain] [org.apache.catalina.core.StandardEngine] - Starting Servlet engine: [Apache Tomcat/10.1.17]
2025-04-17 21:50:32.238 INFO  [restartedMain] [o.a.c.c.C.[Tomcat].[localhost].[/]] - Initializing Spring embedded WebApplicationContext
2025-04-17 21:50:32.239 INFO  [restartedMain] [o.s.b.w.s.c.ServletWebServerApplicationContext] - Root WebApplicationContext: initialization completed in 1085 ms
2025-04-17 21:50:33.081 INFO  [restartedMain] [org.quartz.impl.StdSchedulerFactory] - Using default implementation for ThreadExecutor
2025-04-17 21:50:33.087 INFO  [restartedMain] [org.quartz.core.SchedulerSignalerImpl] - Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2025-04-17 21:50:33.087 INFO  [restartedMain] [org.quartz.core.QuartzScheduler] - Quartz Scheduler v.2.3.2 created.
2025-04-17 21:50:33.088 INFO  [restartedMain] [org.quartz.simpl.RAMJobStore] - RAMJobStore initialized.
2025-04-17 21:50:33.088 INFO  [restartedMain] [org.quartz.core.QuartzScheduler] - Scheduler meta-data: Quartz Scheduler (v2.3.2) 'quartzScheduler' with instanceId 'NON_CLUSTERED'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 10 threads.
  Using job-store 'org.quartz.simpl.RAMJobStore' - which does not support persistence. and is not clustered.

2025-04-17 21:50:33.088 INFO  [restartedMain] [org.quartz.impl.StdSchedulerFactory] - Quartz scheduler 'quartzScheduler' initialized from an externally provided properties instance.
2025-04-17 21:50:33.088 INFO  [restartedMain] [org.quartz.impl.StdSchedulerFactory] - Quartz scheduler version: 2.3.2
2025-04-17 21:50:33.088 INFO  [restartedMain] [org.quartz.core.QuartzScheduler] - JobFactory set to: org.springframework.scheduling.quartz.SpringBeanJobFactory@76c3d612
2025-04-17 21:50:33.116 INFO  [restartedMain] [o.s.b.f.a.AutowiredAnnotationBeanPostProcessor] - Autowired annotation is not supported on static fields: public static int com.momo.job.DormantUserJob.DORMANT_CYCLE_DATE
2025-04-17 21:50:33.235 INFO  [restartedMain] [o.s.b.a.w.s.WelcomePageHandlerMapping] - Adding welcome page: class path resource [public/index.html]
2025-04-17 21:50:33.594 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Will secure any request with [org.springframework.security.web.session.DisableEncodeUrlFilter@69465f66, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@3d2af1d9, org.springframework.security.web.context.SecurityContextHolderFilter@6fb88565, org.springframework.security.web.header.HeaderWriterFilter@464e92cd, org.springframework.web.filter.CorsFilter@4a59ac37, org.springframework.security.web.authentication.logout.LogoutFilter@5af6187e, com.momo.filter.JwtAuthorizationFilter@307bfaca, org.springframework.security.web.session.ConcurrentSessionFilter@42206d93, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@7c7b5e14, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@301b42c, org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationFilter@31a98184, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@6b9d3ecc, org.springframework.security.web.session.SessionManagementFilter@2531c427, org.springframework.security.web.access.ExceptionTranslationFilter@55a98138, org.springframework.security.web.access.intercept.FilterSecurityInterceptor@31373a66]
2025-04-17 21:50:33.709 WARN  [restartedMain] [o.s.b.a.t.ThymeleafAutoConfiguration$DefaultTemplateResolverConfiguration] - Cannot find template location: classpath:/templates/ (please add some templates, check your Thymeleaf configuration, or set spring.thymeleaf.check-template-location=false)
2025-04-17 21:50:33.791 INFO  [restartedMain] [o.s.b.d.a.OptionalLiveReloadServer] - LiveReload server is running on port 35729
2025-04-17 21:50:33.817 INFO  [restartedMain] [o.apache.coyote.http11.Http11NioProtocol] - Starting ProtocolHandler ["http-nio-11040"]
2025-04-17 21:50:33.829 INFO  [restartedMain] [o.s.b.w.embedded.tomcat.TomcatWebServer] - Tomcat started on port 11040 (http) with context path ''
2025-04-17 21:50:33.831 INFO  [restartedMain] [o.s.m.s.b.SimpleBrokerMessageHandler] - Starting...
2025-04-17 21:50:33.831 INFO  [restartedMain] [o.s.m.s.b.SimpleBrokerMessageHandler] - BrokerAvailabilityEvent[available=true, SimpleBrokerMessageHandler [org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry@29b8d76e]]
2025-04-17 21:50:33.832 INFO  [restartedMain] [o.s.m.s.b.SimpleBrokerMessageHandler] - Started.
2025-04-17 21:50:33.832 INFO  [restartedMain] [o.s.s.quartz.SchedulerFactoryBean] - Starting Quartz Scheduler now
2025-04-17 21:50:33.832 INFO  [restartedMain] [org.quartz.core.QuartzScheduler] - Scheduler quartzScheduler_$_NON_CLUSTERED started.
2025-04-17 21:50:33.840 INFO  [restartedMain] [com.momo.PhoneManagementApplication] - Started PhoneManagementApplication in 3.441 seconds (process running for 4.332)
2025-04-17 21:50:35.307 INFO  [http-nio-11040-exec-1] [o.a.c.c.C.[Tomcat].[localhost].[/]] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-04-17 21:50:35.307 INFO  [http-nio-11040-exec-1] [o.s.web.servlet.DispatcherServlet] - Initializing Servlet 'dispatcherServlet'
2025-04-17 21:50:35.308 INFO  [http-nio-11040-exec-1] [o.s.web.servlet.DispatcherServlet] - Completed initialization in 1 ms
2025-04-17 21:50:35.320 INFO  [http-nio-11040-exec-1] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/user/info
2025-04-17 21:50:35.320 INFO  [http-nio-11040-exec-1] [com.momo.filter.JwtAuthorizationFilter] - access token: null
2025-04-17 21:50:35.320 INFO  [http-nio-11040-exec-1] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/user/info
2025-04-17 21:50:35.320 INFO  [http-nio-11040-exec-1] [com.momo.filter.JwtAuthorizationFilter] - 유효한 JWT 토큰이 없습니다
2025-04-17 21:50:35.333 INFO  [http-nio-11040-exec-1] [c.momo.common.util.SecurityContextUtil] - principal: anonymousUser
2025-04-17 21:50:35.588 DEBUG [http-nio-11040-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT ac.id,
               ac.name,
               ac.tel,
               ac.nickname,
               ac.pfp,
               ac.curr_shop_id,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where sf.shop_id = ac.curr_shop_id and
                         sf.staff_id = ac.id
                   ) as role,
               sh.shop_nm,
               sh.shop_addr,
               sh.provider,
               (
                   IFNULL((
                       select sf2.approval_st
                       from tb_staff sf2
                       where sf2.shop_id=ac.curr_shop_id and
                           sf2.staff_id=ac.id
                       ), -1)
                ) as approval_st,
                ac.corp_nm,
                ac.br_no
        FROM tb_account ac
        LEFT OUTER JOIN tb_shop sh on sh.shop_id=ac.curr_shop_id
        WHERE id = ''
 {executed in 34 msec}
2025-04-17 21:50:35.599 INFO  [http-nio-11040-exec-1] [com.momo.api.UserController] - User: null
2025-04-17 21:50:35.769 INFO  [http-nio-11040-exec-2] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/public/login
2025-04-17 21:50:35.769 INFO  [http-nio-11040-exec-2] [com.momo.filter.JwtAuthorizationFilter] - access token: null
2025-04-17 21:50:35.769 INFO  [http-nio-11040-exec-2] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/public/login
2025-04-17 21:50:35.769 INFO  [http-nio-11040-exec-2] [com.momo.filter.JwtAuthorizationFilter] - 유효한 JWT 토큰이 없습니다
2025-04-17 21:50:35.821 DEBUG [http-nio-11040-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='admin'
 {executed in 3 msec}
2025-04-17 21:50:35.964 DEBUG [http-nio-11040-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. UPDATE
            tb_account
        SET last_login_dt=NOW(),
            user_st=0
        WHERE id = 'admin'
 {executed in 14 msec}
2025-04-17 21:50:35.986 INFO  [http-nio-11040-exec-2] [com.momo.service.JwtService] - save refresh token: JwtVO(grantType=Bearer, username=admin, accessToken=eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJhZG1pbiIsImlhdCI6MTc0NDg5NDIzNSwiZXhwIjoxNzQ0ODk0ODM1LCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.rdn-5cXE4Mlsh29n3JivZq87JaTkLGP-ylB7nA-5wvk, refreshToken=eyJhbGciOiJIUzI1NiJ9.eyJleHAiOjE3NDQ4OTc4MzV9.CioQCNp8_AyFI3wede0McXVwQqyFdaLI6uWT-QLuFLs, expireTime=3600000, revoked=false, expired=false)
2025-04-17 21:50:35.991 DEBUG [http-nio-11040-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT  *
        FROM    tb_refresh_token
        WHERE   user_id='admin'
 {executed in 4 msec}
2025-04-17 21:50:35.993 DEBUG [http-nio-11040-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. UPDATE  tb_refresh_token
        SET     refresh_token='eyJhbGciOiJIUzI1NiJ9.eyJleHAiOjE3NDQ4OTc4MzV9.CioQCNp8_AyFI3wede0McXVwQqyFdaLI6uWT-QLuFLs'
        WHERE   user_id='admin'
 {executed in 1 msec}
2025-04-17 21:50:35.996 DEBUG [http-nio-11040-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT curr_shop_id
        FROM tb_account
        WHERE id='admin'
 {executed in 1 msec}
2025-04-17 21:50:36.019 INFO  [http-nio-11040-exec-3] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/user/info
2025-04-17 21:50:36.019 INFO  [http-nio-11040-exec-3] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJhZG1pbiIsImlhdCI6MTc0NDg5NDIzNSwiZXhwIjoxNzQ0ODk0ODM1LCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.rdn-5cXE4Mlsh29n3JivZq87JaTkLGP-ylB7nA-5wvk
2025-04-17 21:50:36.019 INFO  [http-nio-11040-exec-3] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/user/info
2025-04-17 21:50:36.049 INFO  [http-nio-11040-exec-3] [com.momo.provider.JwtProvider] - get authentication username : admin
2025-04-17 21:50:36.053 DEBUG [http-nio-11040-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='admin'
 {executed in 3 msec}
2025-04-17 21:50:36.054 INFO  [http-nio-11040-exec-3] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'admin' 인증 정보를 저장했습니다
2025-04-17 21:50:36.058 INFO  [http-nio-11040-exec-3] [c.momo.common.util.SecurityContextUtil] - principal: UserDetailsImpl(username=admin, password=$2a$10$ShKoYoto0un02FeMgyao9ubb.9d0Y3BhGjLtmnmvV6OfsqBqGOmU2, authorities=[ROLE_NONE])
2025-04-17 21:50:36.063 DEBUG [http-nio-11040-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT ac.id,
               ac.name,
               ac.tel,
               ac.nickname,
               ac.pfp,
               ac.curr_shop_id,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where sf.shop_id = ac.curr_shop_id and
                         sf.staff_id = ac.id
                   ) as role,
               sh.shop_nm,
               sh.shop_addr,
               sh.provider,
               (
                   IFNULL((
                       select sf2.approval_st
                       from tb_staff sf2
                       where sf2.shop_id=ac.curr_shop_id and
                           sf2.staff_id=ac.id
                       ), -1)
                ) as approval_st,
                ac.corp_nm,
                ac.br_no
        FROM tb_account ac
        LEFT OUTER JOIN tb_shop sh on sh.shop_id=ac.curr_shop_id
        WHERE id = 'admin'
 {executed in 4 msec}
2025-04-17 21:50:36.064 INFO  [http-nio-11040-exec-3] [com.momo.api.UserController] - User: {role=null, approval_st=-1, shop_addr=null, br_no=null, provider=null, name=박희찬관리자용, nickname=null, corp_nm=null, tel=010-4524-0636, id=admin, pfp=null, curr_shop_id=-1, shop_nm=null}
2025-04-17 21:50:36.113 INFO  [http-nio-11040-exec-4] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/auth/refresh
2025-04-17 21:50:36.113 INFO  [http-nio-11040-exec-4] [com.momo.filter.JwtAuthorizationFilter] - access token: null
2025-04-17 21:50:36.113 INFO  [http-nio-11040-exec-4] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/auth/refresh
2025-04-17 21:50:36.114 INFO  [http-nio-11040-exec-4] [com.momo.filter.JwtAuthorizationFilter] - 유효한 JWT 토큰이 없습니다
2025-04-17 21:50:36.118 INFO  [http-nio-11040-exec-4] [com.momo.api.AuthController] - refresh
2025-04-17 21:50:36.124 DEBUG [http-nio-11040-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT  *
        FROM    tb_refresh_token
        WHERE   refresh_token='eyJhbGciOiJIUzI1NiJ9.eyJleHAiOjE3NDQ4OTc4MzV9.CioQCNp8_AyFI3wede0McXVwQqyFdaLI6uWT-QLuFLs'
 {executed in 3 msec}
2025-04-17 21:50:36.136 DEBUG [http-nio-11040-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='admin'
 {executed in 10 msec}
2025-04-17 21:50:36.138 INFO  [http-nio-11040-exec-4] [com.momo.api.AuthController] - jwt: JwtVO(grantType=Bearer , username=admin, accessToken=eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJhZG1pbiIsImlhdCI6MTc0NDg5NDIzNiwiZXhwIjoxNzQ0ODk0ODM2LCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.t4zFhivOkTFyEPjvMRVC_EVjHqmeAc02GJdcFiyYFI4, refreshToken=null, expireTime=null, revoked=false, expired=false)
2025-04-17 21:50:36.138 INFO  [http-nio-11040-exec-4] [com.momo.service.CommonService] - Session('curr_shop_id') is not found. Try to find on Database...
2025-04-17 21:50:36.138 INFO  [http-nio-11040-exec-4] [c.momo.common.util.SecurityContextUtil] - principal: anonymousUser
2025-04-17 21:50:36.140 DEBUG [http-nio-11040-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT curr_shop_id
        FROM tb_account
        WHERE id=''
 {executed in 1 msec}
2025-04-17 21:50:36.142 ERROR [http-nio-11040-exec-4] [com.momo.handler.GlobalExceptionHandler] - BusinessException: com.momo.common.response.ErrorResponse@29e6390f
2025-04-17 21:50:36.143 WARN  [http-nio-11040-exec-4] [o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver] - Resolved [com.momo.exception.BusinessException]
2025-04-17 21:50:36.158 INFO  [http-nio-11040-exec-5] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/user/info
2025-04-17 21:50:36.158 INFO  [http-nio-11040-exec-5] [com.momo.filter.JwtAuthorizationFilter] - access token: null
2025-04-17 21:50:36.158 INFO  [http-nio-11040-exec-5] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/user/info
2025-04-17 21:50:36.158 INFO  [http-nio-11040-exec-5] [com.momo.filter.JwtAuthorizationFilter] - 유효한 JWT 토큰이 없습니다
2025-04-17 21:50:36.159 INFO  [http-nio-11040-exec-5] [c.momo.common.util.SecurityContextUtil] - principal: anonymousUser
2025-04-17 21:50:36.161 DEBUG [http-nio-11040-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT ac.id,
               ac.name,
               ac.tel,
               ac.nickname,
               ac.pfp,
               ac.curr_shop_id,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where sf.shop_id = ac.curr_shop_id and
                         sf.staff_id = ac.id
                   ) as role,
               sh.shop_nm,
               sh.shop_addr,
               sh.provider,
               (
                   IFNULL((
                       select sf2.approval_st
                       from tb_staff sf2
                       where sf2.shop_id=ac.curr_shop_id and
                           sf2.staff_id=ac.id
                       ), -1)
                ) as approval_st,
                ac.corp_nm,
                ac.br_no
        FROM tb_account ac
        LEFT OUTER JOIN tb_shop sh on sh.shop_id=ac.curr_shop_id
        WHERE id = ''
 {executed in 1 msec}
2025-04-17 21:50:36.161 INFO  [http-nio-11040-exec-5] [com.momo.api.UserController] - User: null
2025-04-17 21:50:36.816 INFO  [http-nio-11040-exec-6] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/public/login
2025-04-17 21:50:36.816 INFO  [http-nio-11040-exec-6] [com.momo.filter.JwtAuthorizationFilter] - access token: null
2025-04-17 21:50:36.817 INFO  [http-nio-11040-exec-6] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/public/login
2025-04-17 21:50:36.817 INFO  [http-nio-11040-exec-6] [com.momo.filter.JwtAuthorizationFilter] - 유효한 JWT 토큰이 없습니다
2025-04-17 21:50:36.825 DEBUG [http-nio-11040-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='admin'
 {executed in 3 msec}
2025-04-17 21:50:36.961 DEBUG [http-nio-11040-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. UPDATE
            tb_account
        SET last_login_dt=NOW(),
            user_st=0
        WHERE id = 'admin'
 {executed in 1 msec}
2025-04-17 21:50:36.963 INFO  [http-nio-11040-exec-6] [com.momo.service.JwtService] - save refresh token: JwtVO(grantType=Bearer, username=admin, accessToken=eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJhZG1pbiIsImlhdCI6MTc0NDg5NDIzNiwiZXhwIjoxNzQ0ODk0ODM2LCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.t4zFhivOkTFyEPjvMRVC_EVjHqmeAc02GJdcFiyYFI4, refreshToken=eyJhbGciOiJIUzI1NiJ9.eyJleHAiOjE3NDQ4OTc4MzZ9.uS9nxDU4UO4yj6daIKWwBYh-aKrI0hLvb2rq9l6m0L8, expireTime=3600000, revoked=false, expired=false)
2025-04-17 21:50:36.965 DEBUG [http-nio-11040-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT  *
        FROM    tb_refresh_token
        WHERE   user_id='admin'
 {executed in 2 msec}
2025-04-17 21:50:36.966 DEBUG [http-nio-11040-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. UPDATE  tb_refresh_token
        SET     refresh_token='eyJhbGciOiJIUzI1NiJ9.eyJleHAiOjE3NDQ4OTc4MzZ9.uS9nxDU4UO4yj6daIKWwBYh-aKrI0hLvb2rq9l6m0L8'
        WHERE   user_id='admin'
 {executed in 1 msec}
2025-04-17 21:50:36.968 DEBUG [http-nio-11040-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT curr_shop_id
        FROM tb_account
        WHERE id='admin'
 {executed in 1 msec}
2025-04-17 21:50:36.988 INFO  [http-nio-11040-exec-7] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/user/info
2025-04-17 21:50:36.988 INFO  [http-nio-11040-exec-7] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJhZG1pbiIsImlhdCI6MTc0NDg5NDIzNiwiZXhwIjoxNzQ0ODk0ODM2LCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.t4zFhivOkTFyEPjvMRVC_EVjHqmeAc02GJdcFiyYFI4
2025-04-17 21:50:36.988 INFO  [http-nio-11040-exec-7] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/user/info
2025-04-17 21:50:36.991 INFO  [http-nio-11040-exec-7] [com.momo.provider.JwtProvider] - get authentication username : admin
2025-04-17 21:50:36.993 DEBUG [http-nio-11040-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='admin'
 {executed in 2 msec}
2025-04-17 21:50:36.993 INFO  [http-nio-11040-exec-7] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'admin' 인증 정보를 저장했습니다
2025-04-17 21:50:36.996 INFO  [http-nio-11040-exec-7] [c.momo.common.util.SecurityContextUtil] - principal: UserDetailsImpl(username=admin, password=$2a$10$ShKoYoto0un02FeMgyao9ubb.9d0Y3BhGjLtmnmvV6OfsqBqGOmU2, authorities=[ROLE_NONE])
2025-04-17 21:50:37.000 DEBUG [http-nio-11040-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT ac.id,
               ac.name,
               ac.tel,
               ac.nickname,
               ac.pfp,
               ac.curr_shop_id,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where sf.shop_id = ac.curr_shop_id and
                         sf.staff_id = ac.id
                   ) as role,
               sh.shop_nm,
               sh.shop_addr,
               sh.provider,
               (
                   IFNULL((
                       select sf2.approval_st
                       from tb_staff sf2
                       where sf2.shop_id=ac.curr_shop_id and
                           sf2.staff_id=ac.id
                       ), -1)
                ) as approval_st,
                ac.corp_nm,
                ac.br_no
        FROM tb_account ac
        LEFT OUTER JOIN tb_shop sh on sh.shop_id=ac.curr_shop_id
        WHERE id = 'admin'
 {executed in 2 msec}
2025-04-17 21:50:37.001 INFO  [http-nio-11040-exec-7] [com.momo.api.UserController] - User: {role=null, approval_st=-1, shop_addr=null, br_no=null, provider=null, name=박희찬관리자용, nickname=null, corp_nm=null, tel=010-4524-0636, id=admin, pfp=null, curr_shop_id=-1, shop_nm=null}
2025-04-17 21:50:37.075 INFO  [http-nio-11040-exec-8] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/auth/refresh
2025-04-17 21:50:37.076 INFO  [http-nio-11040-exec-8] [com.momo.filter.JwtAuthorizationFilter] - access token: null
2025-04-17 21:50:37.076 INFO  [http-nio-11040-exec-8] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/auth/refresh
2025-04-17 21:50:37.076 INFO  [http-nio-11040-exec-8] [com.momo.filter.JwtAuthorizationFilter] - 유효한 JWT 토큰이 없습니다
2025-04-17 21:50:37.079 INFO  [http-nio-11040-exec-8] [com.momo.api.AuthController] - refresh
2025-04-17 21:50:37.086 DEBUG [http-nio-11040-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT  *
        FROM    tb_refresh_token
        WHERE   refresh_token='eyJhbGciOiJIUzI1NiJ9.eyJleHAiOjE3NDQ4OTc4MzZ9.uS9nxDU4UO4yj6daIKWwBYh-aKrI0hLvb2rq9l6m0L8'
 {executed in 3 msec}
2025-04-17 21:50:37.089 DEBUG [http-nio-11040-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='admin'
 {executed in 1 msec}
2025-04-17 21:50:37.091 INFO  [http-nio-11040-exec-8] [com.momo.api.AuthController] - jwt: JwtVO(grantType=Bearer , username=admin, accessToken=eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJhZG1pbiIsImlhdCI6MTc0NDg5NDIzNywiZXhwIjoxNzQ0ODk0ODM3LCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.iP3a4G8clWHx1zegl329Ui-3FFJQiv4FD3eMUDFg-qE, refreshToken=null, expireTime=null, revoked=false, expired=false)
2025-04-17 21:50:37.091 INFO  [http-nio-11040-exec-8] [com.momo.service.CommonService] - Session('curr_shop_id') is not found. Try to find on Database...
2025-04-17 21:50:37.091 INFO  [http-nio-11040-exec-8] [c.momo.common.util.SecurityContextUtil] - principal: anonymousUser
2025-04-17 21:50:37.092 DEBUG [http-nio-11040-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT curr_shop_id
        FROM tb_account
        WHERE id=''
 {executed in 1 msec}
2025-04-17 21:50:37.093 ERROR [http-nio-11040-exec-8] [com.momo.handler.GlobalExceptionHandler] - BusinessException: com.momo.common.response.ErrorResponse@da6e6e3
2025-04-17 21:50:37.094 WARN  [http-nio-11040-exec-8] [o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver] - Resolved [com.momo.exception.BusinessException]
2025-04-17 21:50:37.108 INFO  [http-nio-11040-exec-9] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/user/info
2025-04-17 21:50:37.108 INFO  [http-nio-11040-exec-9] [com.momo.filter.JwtAuthorizationFilter] - access token: null
2025-04-17 21:50:37.109 INFO  [http-nio-11040-exec-9] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/user/info
2025-04-17 21:50:37.109 INFO  [http-nio-11040-exec-9] [com.momo.filter.JwtAuthorizationFilter] - 유효한 JWT 토큰이 없습니다
2025-04-17 21:50:37.111 INFO  [http-nio-11040-exec-9] [c.momo.common.util.SecurityContextUtil] - principal: anonymousUser
2025-04-17 21:50:37.113 DEBUG [http-nio-11040-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT ac.id,
               ac.name,
               ac.tel,
               ac.nickname,
               ac.pfp,
               ac.curr_shop_id,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where sf.shop_id = ac.curr_shop_id and
                         sf.staff_id = ac.id
                   ) as role,
               sh.shop_nm,
               sh.shop_addr,
               sh.provider,
               (
                   IFNULL((
                       select sf2.approval_st
                       from tb_staff sf2
                       where sf2.shop_id=ac.curr_shop_id and
                           sf2.staff_id=ac.id
                       ), -1)
                ) as approval_st,
                ac.corp_nm,
                ac.br_no
        FROM tb_account ac
        LEFT OUTER JOIN tb_shop sh on sh.shop_id=ac.curr_shop_id
        WHERE id = ''
 {executed in 2 msec}
2025-04-17 21:50:37.114 INFO  [http-nio-11040-exec-9] [com.momo.api.UserController] - User: null
2025-04-17 21:50:51.837 INFO  [http-nio-11040-exec-10] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/public/login
2025-04-17 21:50:51.838 INFO  [http-nio-11040-exec-10] [com.momo.filter.JwtAuthorizationFilter] - access token: null
2025-04-17 21:50:51.838 INFO  [http-nio-11040-exec-10] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/public/login
2025-04-17 21:50:51.838 INFO  [http-nio-11040-exec-10] [com.momo.filter.JwtAuthorizationFilter] - 유효한 JWT 토큰이 없습니다
2025-04-17 21:50:51.842 DEBUG [http-nio-11040-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='admin'
 {executed in 1 msec}
2025-04-17 21:50:51.970 DEBUG [http-nio-11040-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. UPDATE
            tb_account
        SET last_login_dt=NOW(),
            user_st=0
        WHERE id = 'admin'
 {executed in 1 msec}
2025-04-17 21:50:51.972 INFO  [http-nio-11040-exec-10] [com.momo.service.JwtService] - save refresh token: JwtVO(grantType=Bearer, username=admin, accessToken=eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJhZG1pbiIsImlhdCI6MTc0NDg5NDI1MSwiZXhwIjoxNzQ0ODk0ODUxLCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.k5tFkZu9Ruqs1k0HU14J_iUOhOYyLkfMMp0mouJrewE, refreshToken=eyJhbGciOiJIUzI1NiJ9.eyJleHAiOjE3NDQ4OTc4NTF9.muSQ5CmKJdAM9NFFMEeq3HGlQVC4DTS3ABpxoiGIaGM, expireTime=3600000, revoked=false, expired=false)
2025-04-17 21:50:51.974 DEBUG [http-nio-11040-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT  *
        FROM    tb_refresh_token
        WHERE   user_id='admin'
 {executed in 1 msec}
2025-04-17 21:50:51.975 DEBUG [http-nio-11040-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. UPDATE  tb_refresh_token
        SET     refresh_token='eyJhbGciOiJIUzI1NiJ9.eyJleHAiOjE3NDQ4OTc4NTF9.muSQ5CmKJdAM9NFFMEeq3HGlQVC4DTS3ABpxoiGIaGM'
        WHERE   user_id='admin'
 {executed in 1 msec}
2025-04-17 21:50:51.978 DEBUG [http-nio-11040-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT curr_shop_id
        FROM tb_account
        WHERE id='admin'
 {executed in 1 msec}
2025-04-17 21:50:51.994 INFO  [http-nio-11040-exec-1] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/user/info
2025-04-17 21:50:51.995 INFO  [http-nio-11040-exec-1] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJhZG1pbiIsImlhdCI6MTc0NDg5NDI1MSwiZXhwIjoxNzQ0ODk0ODUxLCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.k5tFkZu9Ruqs1k0HU14J_iUOhOYyLkfMMp0mouJrewE
2025-04-17 21:50:51.995 INFO  [http-nio-11040-exec-1] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/user/info
2025-04-17 21:50:51.998 INFO  [http-nio-11040-exec-1] [com.momo.provider.JwtProvider] - get authentication username : admin
2025-04-17 21:50:52.000 DEBUG [http-nio-11040-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='admin'
 {executed in 2 msec}
2025-04-17 21:50:52.001 INFO  [http-nio-11040-exec-1] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'admin' 인증 정보를 저장했습니다
2025-04-17 21:50:52.001 INFO  [http-nio-11040-exec-1] [c.momo.common.util.SecurityContextUtil] - principal: UserDetailsImpl(username=admin, password=$2a$10$ShKoYoto0un02FeMgyao9ubb.9d0Y3BhGjLtmnmvV6OfsqBqGOmU2, authorities=[ROLE_NONE])
2025-04-17 21:50:52.003 DEBUG [http-nio-11040-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT ac.id,
               ac.name,
               ac.tel,
               ac.nickname,
               ac.pfp,
               ac.curr_shop_id,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where sf.shop_id = ac.curr_shop_id and
                         sf.staff_id = ac.id
                   ) as role,
               sh.shop_nm,
               sh.shop_addr,
               sh.provider,
               (
                   IFNULL((
                       select sf2.approval_st
                       from tb_staff sf2
                       where sf2.shop_id=ac.curr_shop_id and
                           sf2.staff_id=ac.id
                       ), -1)
                ) as approval_st,
                ac.corp_nm,
                ac.br_no
        FROM tb_account ac
        LEFT OUTER JOIN tb_shop sh on sh.shop_id=ac.curr_shop_id
        WHERE id = 'admin'
 {executed in 1 msec}
2025-04-17 21:50:52.005 INFO  [http-nio-11040-exec-1] [com.momo.api.UserController] - User: {role=null, approval_st=-1, shop_addr=null, br_no=null, provider=null, name=박희찬관리자용, nickname=null, corp_nm=null, tel=010-4524-0636, id=admin, pfp=null, curr_shop_id=-1, shop_nm=null}
2025-04-17 21:50:52.078 INFO  [http-nio-11040-exec-2] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/auth/refresh
2025-04-17 21:50:52.078 INFO  [http-nio-11040-exec-2] [com.momo.filter.JwtAuthorizationFilter] - access token: null
2025-04-17 21:50:52.078 INFO  [http-nio-11040-exec-2] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/auth/refresh
2025-04-17 21:50:52.078 INFO  [http-nio-11040-exec-2] [com.momo.filter.JwtAuthorizationFilter] - 유효한 JWT 토큰이 없습니다
2025-04-17 21:50:52.080 INFO  [http-nio-11040-exec-2] [com.momo.api.AuthController] - refresh
2025-04-17 21:50:52.089 DEBUG [http-nio-11040-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT  *
        FROM    tb_refresh_token
        WHERE   refresh_token='eyJhbGciOiJIUzI1NiJ9.eyJleHAiOjE3NDQ4OTc4NTF9.muSQ5CmKJdAM9NFFMEeq3HGlQVC4DTS3ABpxoiGIaGM'
 {executed in 3 msec}
2025-04-17 21:50:52.093 DEBUG [http-nio-11040-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='admin'
 {executed in 3 msec}
2025-04-17 21:50:52.096 INFO  [http-nio-11040-exec-2] [com.momo.api.AuthController] - jwt: JwtVO(grantType=Bearer , username=admin, accessToken=eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJhZG1pbiIsImlhdCI6MTc0NDg5NDI1MiwiZXhwIjoxNzQ0ODk0ODUyLCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.kNng2SqbBPmpNE1pVjX4DeNCKGIJalxuVkXv0x2diQQ, refreshToken=null, expireTime=null, revoked=false, expired=false)
2025-04-17 21:50:52.119 INFO  [http-nio-11040-exec-3] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/notif/all
2025-04-17 21:50:52.119 INFO  [http-nio-11040-exec-3] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJhZG1pbiIsImlhdCI6MTc0NDg5NDI1MiwiZXhwIjoxNzQ0ODk0ODUyLCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.kNng2SqbBPmpNE1pVjX4DeNCKGIJalxuVkXv0x2diQQ
2025-04-17 21:50:52.119 INFO  [http-nio-11040-exec-3] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/notif/all
2025-04-17 21:50:52.123 INFO  [http-nio-11040-exec-3] [com.momo.provider.JwtProvider] - get authentication username : admin
2025-04-17 21:50:52.125 DEBUG [http-nio-11040-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='admin'
 {executed in 1 msec}
2025-04-17 21:50:52.126 INFO  [http-nio-11040-exec-3] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'admin' 인증 정보를 저장했습니다
2025-04-17 21:50:52.126 INFO  [http-nio-11040-exec-3] [c.momo.common.util.SecurityContextUtil] - principal: UserDetailsImpl(username=admin, password=$2a$10$ShKoYoto0un02FeMgyao9ubb.9d0Y3BhGjLtmnmvV6OfsqBqGOmU2, authorities=[ROLE_NONE])
2025-04-17 21:50:52.184 INFO  [http-nio-11040-exec-5] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/notif/count/unread
2025-04-17 21:50:52.184 INFO  [http-nio-11040-exec-4] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/notif/read/all
2025-04-17 21:50:52.184 INFO  [http-nio-11040-exec-5] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJhZG1pbiIsImlhdCI6MTc0NDg5NDI1MiwiZXhwIjoxNzQ0ODk0ODUyLCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.kNng2SqbBPmpNE1pVjX4DeNCKGIJalxuVkXv0x2diQQ
2025-04-17 21:50:52.184 INFO  [http-nio-11040-exec-4] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJhZG1pbiIsImlhdCI6MTc0NDg5NDI1MiwiZXhwIjoxNzQ0ODk0ODUyLCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.kNng2SqbBPmpNE1pVjX4DeNCKGIJalxuVkXv0x2diQQ
2025-04-17 21:50:52.184 INFO  [http-nio-11040-exec-5] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/notif/count/unread
2025-04-17 21:50:52.184 INFO  [http-nio-11040-exec-4] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/notif/read/all
2025-04-17 21:50:52.184 INFO  [http-nio-11040-exec-6] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/user/info
2025-04-17 21:50:52.184 INFO  [http-nio-11040-exec-6] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJhZG1pbiIsImlhdCI6MTc0NDg5NDI1MiwiZXhwIjoxNzQ0ODk0ODUyLCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.kNng2SqbBPmpNE1pVjX4DeNCKGIJalxuVkXv0x2diQQ
2025-04-17 21:50:52.184 INFO  [http-nio-11040-exec-6] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/user/info
2025-04-17 21:50:52.186 INFO  [http-nio-11040-exec-4] [com.momo.provider.JwtProvider] - get authentication username : admin
2025-04-17 21:50:52.186 INFO  [http-nio-11040-exec-5] [com.momo.provider.JwtProvider] - get authentication username : admin
2025-04-17 21:50:52.186 INFO  [http-nio-11040-exec-6] [com.momo.provider.JwtProvider] - get authentication username : admin
2025-04-17 21:50:52.196 DEBUG [http-nio-11040-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT content,
               notif_id,
               read_st,
               notif_tp as type,
               IF(date(send_dt) = current_date,true,false) as today,
            (
               TIMESTAMPDIFF(MINUTE, send_dt, current_timestamp)
            ) as ago
        FROM tb_notification
        WHERE receiver_id='admin'
        ORDER BY send_dt DESC
 {executed in 69 msec}
2025-04-17 21:50:52.199 DEBUG [http-nio-11040-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
4. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='admin'
 {executed in 13 msec}
2025-04-17 21:50:52.199 DEBUG [http-nio-11040-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
3. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='admin'
 {executed in 13 msec}
2025-04-17 21:50:52.199 DEBUG [http-nio-11040-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
2. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='admin'
 {executed in 13 msec}
2025-04-17 21:50:52.200 INFO  [http-nio-11040-exec-5] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'admin' 인증 정보를 저장했습니다
2025-04-17 21:50:52.200 INFO  [http-nio-11040-exec-4] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'admin' 인증 정보를 저장했습니다
2025-04-17 21:50:52.200 INFO  [http-nio-11040-exec-6] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'admin' 인증 정보를 저장했습니다
2025-04-17 21:50:52.201 INFO  [http-nio-11040-exec-5] [c.momo.common.util.SecurityContextUtil] - principal: UserDetailsImpl(username=admin, password=$2a$10$ShKoYoto0un02FeMgyao9ubb.9d0Y3BhGjLtmnmvV6OfsqBqGOmU2, authorities=[ROLE_NONE])
2025-04-17 21:50:52.201 INFO  [http-nio-11040-exec-4] [c.momo.common.util.SecurityContextUtil] - principal: UserDetailsImpl(username=admin, password=$2a$10$ShKoYoto0un02FeMgyao9ubb.9d0Y3BhGjLtmnmvV6OfsqBqGOmU2, authorities=[ROLE_NONE])
2025-04-17 21:50:52.201 INFO  [http-nio-11040-exec-6] [c.momo.common.util.SecurityContextUtil] - principal: UserDetailsImpl(username=admin, password=$2a$10$ShKoYoto0un02FeMgyao9ubb.9d0Y3BhGjLtmnmvV6OfsqBqGOmU2, authorities=[ROLE_NONE])
2025-04-17 21:50:52.203 DEBUG [http-nio-11040-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
2. UPDATE tb_notification
        SET read_st = TRUE
        WHERE receiver_id = 'admin'
          AND read_st = FALSE
 {executed in 1 msec}
2025-04-17 21:50:52.203 DEBUG [http-nio-11040-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
4. SELECT ac.id,
               ac.name,
               ac.tel,
               ac.nickname,
               ac.pfp,
               ac.curr_shop_id,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where sf.shop_id = ac.curr_shop_id and
                         sf.staff_id = ac.id
                   ) as role,
               sh.shop_nm,
               sh.shop_addr,
               sh.provider,
               (
                   IFNULL((
                       select sf2.approval_st
                       from tb_staff sf2
                       where sf2.shop_id=ac.curr_shop_id and
                           sf2.staff_id=ac.id
                       ), -1)
                ) as approval_st,
                ac.corp_nm,
                ac.br_no
        FROM tb_account ac
        LEFT OUTER JOIN tb_shop sh on sh.shop_id=ac.curr_shop_id
        WHERE id = 'admin'
 {executed in 1 msec}
2025-04-17 21:50:52.204 DEBUG [http-nio-11040-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
3. SELECT count(*)
        FROM tb_notification
        WHERE receiver_id = 'admin'
          AND read_st = FALSE
 {executed in 2 msec}
2025-04-17 21:50:52.204 INFO  [http-nio-11040-exec-6] [com.momo.api.UserController] - User: {role=null, approval_st=-1, shop_addr=null, br_no=null, provider=null, name=박희찬관리자용, nickname=null, corp_nm=null, tel=010-4524-0636, id=admin, pfp=null, curr_shop_id=-1, shop_nm=null}
2025-04-17 21:50:52.212 INFO  [http-nio-11040-exec-7] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/notif/count/unread
2025-04-17 21:50:52.213 INFO  [http-nio-11040-exec-7] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJhZG1pbiIsImlhdCI6MTc0NDg5NDI1MiwiZXhwIjoxNzQ0ODk0ODUyLCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.kNng2SqbBPmpNE1pVjX4DeNCKGIJalxuVkXv0x2diQQ
2025-04-17 21:50:52.213 INFO  [http-nio-11040-exec-7] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/notif/count/unread
2025-04-17 21:50:52.218 INFO  [http-nio-11040-exec-7] [com.momo.provider.JwtProvider] - get authentication username : admin
2025-04-17 21:50:52.221 DEBUG [http-nio-11040-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='admin'
 {executed in 1 msec}
2025-04-17 21:50:52.222 INFO  [http-nio-11040-exec-7] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'admin' 인증 정보를 저장했습니다
2025-04-17 21:50:52.226 INFO  [http-nio-11040-exec-7] [c.momo.common.util.SecurityContextUtil] - principal: UserDetailsImpl(username=admin, password=$2a$10$ShKoYoto0un02FeMgyao9ubb.9d0Y3BhGjLtmnmvV6OfsqBqGOmU2, authorities=[ROLE_NONE])
2025-04-17 21:50:52.228 INFO  [http-nio-11040-exec-9] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/user/info
2025-04-17 21:50:52.229 DEBUG [http-nio-11040-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT count(*)
        FROM tb_notification
        WHERE receiver_id = 'admin'
          AND read_st = FALSE
 {executed in 2 msec}
2025-04-17 21:50:52.229 INFO  [http-nio-11040-exec-9] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJhZG1pbiIsImlhdCI6MTc0NDg5NDI1MiwiZXhwIjoxNzQ0ODk0ODUyLCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.kNng2SqbBPmpNE1pVjX4DeNCKGIJalxuVkXv0x2diQQ
2025-04-17 21:50:52.229 INFO  [http-nio-11040-exec-8] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/user/all
2025-04-17 21:50:52.229 INFO  [http-nio-11040-exec-9] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/user/info
2025-04-17 21:50:52.229 INFO  [http-nio-11040-exec-8] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJhZG1pbiIsImlhdCI6MTc0NDg5NDI1MiwiZXhwIjoxNzQ0ODk0ODUyLCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.kNng2SqbBPmpNE1pVjX4DeNCKGIJalxuVkXv0x2diQQ
2025-04-17 21:50:52.229 INFO  [http-nio-11040-exec-8] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/user/all
2025-04-17 21:50:52.232 INFO  [http-nio-11040-exec-8] [com.momo.provider.JwtProvider] - get authentication username : admin
2025-04-17 21:50:52.233 INFO  [http-nio-11040-exec-9] [com.momo.provider.JwtProvider] - get authentication username : admin
2025-04-17 21:50:52.235 DEBUG [http-nio-11040-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='admin'
 {executed in 2 msec}
2025-04-17 21:50:52.235 DEBUG [http-nio-11040-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
2. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='admin'
 {executed in 2 msec}
2025-04-17 21:50:52.235 INFO  [http-nio-11040-exec-9] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'admin' 인증 정보를 저장했습니다
2025-04-17 21:50:52.235 INFO  [http-nio-11040-exec-8] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'admin' 인증 정보를 저장했습니다
2025-04-17 21:50:52.236 INFO  [http-nio-11040-exec-9] [c.momo.common.util.SecurityContextUtil] - principal: UserDetailsImpl(username=admin, password=$2a$10$ShKoYoto0un02FeMgyao9ubb.9d0Y3BhGjLtmnmvV6OfsqBqGOmU2, authorities=[ROLE_NONE])
2025-04-17 21:50:52.237 DEBUG [http-nio-11040-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT ac.id,
               ac.name,
               ac.tel,
               ac.nickname,
               ac.pfp,
               ac.curr_shop_id,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where sf.shop_id = ac.curr_shop_id and
                         sf.staff_id = ac.id
                   ) as role,
               sh.shop_nm,
               sh.shop_addr,
               sh.provider,
               (
                   IFNULL((
                       select sf2.approval_st
                       from tb_staff sf2
                       where sf2.shop_id=ac.curr_shop_id and
                           sf2.staff_id=ac.id
                       ), -1)
                ) as approval_st,
                ac.corp_nm,
                ac.br_no
        FROM tb_account ac
        LEFT OUTER JOIN tb_shop sh on sh.shop_id=ac.curr_shop_id
        WHERE id = 'admin'
 {executed in 1 msec}
2025-04-17 21:50:52.238 INFO  [http-nio-11040-exec-9] [com.momo.api.UserController] - User: {role=null, approval_st=-1, shop_addr=null, br_no=null, provider=null, name=박희찬관리자용, nickname=null, corp_nm=null, tel=010-4524-0636, id=admin, pfp=null, curr_shop_id=-1, shop_nm=null}
2025-04-17 21:50:52.238 INFO  [http-nio-11040-exec-8] [com.momo.api.UserController] - user all: UserVO(id=null, shopId=null, pwd=null, updatePwd=null, name=null, email=null, tel=null, terms=null, userSt=0, role=null, approval=null, pfp=null, startDt=null, brNo=null, corpNm=null, regiDt=null)
2025-04-17 21:50:52.280 DEBUG [http-nio-11040-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
2. with users as (
            select ac.*,
                   sf.role,
                   IF(sf.role = 1, ac.br_no, '') as _br_no,
                    sf.approval_st,
                    sf.shop_id,
                    sh.shop_nm
            from tb_staff sf
            left outer join tb_shop sh on sh.shop_id=sf.shop_id
            left outer join tb_account ac on ac.id=sf.staff_id
            where user_st=0
        ), search as (
            select *
            from users
            where

                1=1

        ), result as (
            select json_arrayagg(json_object(
                'id', id,
                'shop_id',shop_id,
                'name',name,
                'pfp',pfp,
                'email',email,
                'tel',tel,
                'br_no',_br_no,
                'regi_dt',date_format(regi_dt, '%Y-%m-%d'),
                'last_login_dt',last_login_dt,
                'role',role,
                'approval_st',approval_st,
                'shop_nm',shop_nm
                ))
            from search
        )

        select (
                   select count(*)
                   from users
               ) as total_cnt,
               (
                   select *
                   from result
               ) as list
 {executed in 7 msec}
2025-04-17 21:50:52.299 INFO  [http-nio-11040-exec-10] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/img/download/pfp
2025-04-17 21:50:52.299 INFO  [http-nio-11040-exec-10] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJhZG1pbiIsImlhdCI6MTc0NDg5NDI1MiwiZXhwIjoxNzQ0ODk0ODUyLCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.kNng2SqbBPmpNE1pVjX4DeNCKGIJalxuVkXv0x2diQQ
2025-04-17 21:50:52.299 INFO  [http-nio-11040-exec-10] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/img/download/pfp
2025-04-17 21:50:52.302 INFO  [http-nio-11040-exec-10] [com.momo.provider.JwtProvider] - get authentication username : admin
2025-04-17 21:50:52.304 DEBUG [http-nio-11040-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='admin'
 {executed in 1 msec}
2025-04-17 21:50:52.305 INFO  [http-nio-11040-exec-10] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'admin' 인증 정보를 저장했습니다
2025-04-17 21:50:52.325 INFO  [http-nio-11040-exec-1] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/img/download/pfp
2025-04-17 21:50:52.325 INFO  [http-nio-11040-exec-1] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJhZG1pbiIsImlhdCI6MTc0NDg5NDI1MiwiZXhwIjoxNzQ0ODk0ODUyLCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.kNng2SqbBPmpNE1pVjX4DeNCKGIJalxuVkXv0x2diQQ
2025-04-17 21:50:52.325 INFO  [http-nio-11040-exec-1] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/img/download/pfp
2025-04-17 21:50:52.328 INFO  [http-nio-11040-exec-1] [com.momo.provider.JwtProvider] - get authentication username : admin
2025-04-17 21:50:52.330 DEBUG [http-nio-11040-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='admin'
 {executed in 1 msec}
2025-04-17 21:50:52.331 INFO  [http-nio-11040-exec-1] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'admin' 인증 정보를 저장했습니다
2025-04-17 21:50:52.341 INFO  [http-nio-11040-exec-2] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/img/download/pfp
2025-04-17 21:50:52.341 INFO  [http-nio-11040-exec-2] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJhZG1pbiIsImlhdCI6MTc0NDg5NDI1MiwiZXhwIjoxNzQ0ODk0ODUyLCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.kNng2SqbBPmpNE1pVjX4DeNCKGIJalxuVkXv0x2diQQ
2025-04-17 21:50:52.341 INFO  [http-nio-11040-exec-2] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/img/download/pfp
2025-04-17 21:50:52.343 INFO  [http-nio-11040-exec-2] [com.momo.provider.JwtProvider] - get authentication username : admin
2025-04-17 21:50:52.345 DEBUG [http-nio-11040-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='admin'
 {executed in 1 msec}
2025-04-17 21:50:52.346 INFO  [http-nio-11040-exec-2] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'admin' 인증 정보를 저장했습니다
2025-04-17 21:50:59.776 INFO  [http-nio-11040-exec-3] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/user/staff/approval
2025-04-17 21:50:59.777 INFO  [http-nio-11040-exec-3] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJhZG1pbiIsImlhdCI6MTc0NDg5NDI1MiwiZXhwIjoxNzQ0ODk0ODUyLCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.kNng2SqbBPmpNE1pVjX4DeNCKGIJalxuVkXv0x2diQQ
2025-04-17 21:50:59.777 INFO  [http-nio-11040-exec-3] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/user/staff/approval
2025-04-17 21:50:59.780 INFO  [http-nio-11040-exec-3] [com.momo.provider.JwtProvider] - get authentication username : admin
2025-04-17 21:50:59.784 DEBUG [http-nio-11040-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='admin'
 {executed in 2 msec}
2025-04-17 21:50:59.784 INFO  [http-nio-11040-exec-3] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'admin' 인증 정보를 저장했습니다
2025-04-17 21:50:59.789 DEBUG [http-nio-11040-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. UPDATE tb_staff
        SET approval_st=1
        WHERE staff_id='toto2' and
              shop_id=7
 {executed in 1 msec}
2025-04-17 21:50:59.800 INFO  [http-nio-11040-exec-4] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/user/all
2025-04-17 21:50:59.801 INFO  [http-nio-11040-exec-4] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJhZG1pbiIsImlhdCI6MTc0NDg5NDI1MiwiZXhwIjoxNzQ0ODk0ODUyLCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.kNng2SqbBPmpNE1pVjX4DeNCKGIJalxuVkXv0x2diQQ
2025-04-17 21:50:59.801 INFO  [http-nio-11040-exec-4] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/user/all
2025-04-17 21:50:59.803 INFO  [http-nio-11040-exec-4] [com.momo.provider.JwtProvider] - get authentication username : admin
2025-04-17 21:50:59.806 DEBUG [http-nio-11040-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
2. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='admin'
 {executed in 1 msec}
2025-04-17 21:50:59.806 INFO  [http-nio-11040-exec-4] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'admin' 인증 정보를 저장했습니다
2025-04-17 21:50:59.808 INFO  [http-nio-11040-exec-4] [com.momo.api.UserController] - user all: UserVO(id=null, shopId=null, pwd=null, updatePwd=null, name=null, email=null, tel=null, terms=null, userSt=0, role=null, approval=null, pfp=null, startDt=null, brNo=null, corpNm=null, regiDt=null)
2025-04-17 21:50:59.814 DEBUG [http-nio-11040-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
2. with users as (
            select ac.*,
                   sf.role,
                   IF(sf.role = 1, ac.br_no, '') as _br_no,
                    sf.approval_st,
                    sf.shop_id,
                    sh.shop_nm
            from tb_staff sf
            left outer join tb_shop sh on sh.shop_id=sf.shop_id
            left outer join tb_account ac on ac.id=sf.staff_id
            where user_st=0
        ), search as (
            select *
            from users
            where

                1=1

        ), result as (
            select json_arrayagg(json_object(
                'id', id,
                'shop_id',shop_id,
                'name',name,
                'pfp',pfp,
                'email',email,
                'tel',tel,
                'br_no',_br_no,
                'regi_dt',date_format(regi_dt, '%Y-%m-%d'),
                'last_login_dt',last_login_dt,
                'role',role,
                'approval_st',approval_st,
                'shop_nm',shop_nm
                ))
            from search
        )

        select (
                   select count(*)
                   from users
               ) as total_cnt,
               (
                   select *
                   from result
               ) as list
 {executed in 3 msec}
2025-04-17 21:50:59.833 INFO  [http-nio-11040-exec-6] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/img/download/pfp
2025-04-17 21:50:59.833 INFO  [http-nio-11040-exec-6] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJhZG1pbiIsImlhdCI6MTc0NDg5NDI1MiwiZXhwIjoxNzQ0ODk0ODUyLCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.kNng2SqbBPmpNE1pVjX4DeNCKGIJalxuVkXv0x2diQQ
2025-04-17 21:50:59.833 INFO  [http-nio-11040-exec-6] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/img/download/pfp
2025-04-17 21:50:59.835 INFO  [http-nio-11040-exec-6] [com.momo.provider.JwtProvider] - get authentication username : admin
2025-04-17 21:50:59.837 DEBUG [http-nio-11040-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
4. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='admin'
 {executed in 1 msec}
2025-04-17 21:50:59.837 INFO  [http-nio-11040-exec-6] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'admin' 인증 정보를 저장했습니다
2025-04-17 21:50:59.847 INFO  [http-nio-11040-exec-5] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/img/download/pfp
2025-04-17 21:50:59.847 INFO  [http-nio-11040-exec-5] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJhZG1pbiIsImlhdCI6MTc0NDg5NDI1MiwiZXhwIjoxNzQ0ODk0ODUyLCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.kNng2SqbBPmpNE1pVjX4DeNCKGIJalxuVkXv0x2diQQ
2025-04-17 21:50:59.847 INFO  [http-nio-11040-exec-5] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/img/download/pfp
2025-04-17 21:50:59.849 INFO  [http-nio-11040-exec-5] [com.momo.provider.JwtProvider] - get authentication username : admin
2025-04-17 21:50:59.850 DEBUG [http-nio-11040-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
3. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='admin'
 {executed in 1 msec}
2025-04-17 21:50:59.851 INFO  [http-nio-11040-exec-5] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'admin' 인증 정보를 저장했습니다
2025-04-17 21:50:59.857 INFO  [http-nio-11040-exec-7] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/img/download/pfp
2025-04-17 21:50:59.857 INFO  [http-nio-11040-exec-7] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJhZG1pbiIsImlhdCI6MTc0NDg5NDI1MiwiZXhwIjoxNzQ0ODk0ODUyLCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.kNng2SqbBPmpNE1pVjX4DeNCKGIJalxuVkXv0x2diQQ
2025-04-17 21:50:59.857 INFO  [http-nio-11040-exec-7] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/img/download/pfp
2025-04-17 21:50:59.859 INFO  [http-nio-11040-exec-7] [com.momo.provider.JwtProvider] - get authentication username : admin
2025-04-17 21:50:59.860 DEBUG [http-nio-11040-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='admin'
 {executed in 1 msec}
2025-04-17 21:50:59.860 INFO  [http-nio-11040-exec-7] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'admin' 인증 정보를 저장했습니다
2025-04-17 21:51:02.161 INFO  [http-nio-11040-exec-9] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/user/info
2025-04-17 21:51:02.161 INFO  [http-nio-11040-exec-9] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJhZG1pbiIsImlhdCI6MTc0NDg5NDI1MiwiZXhwIjoxNzQ0ODk0ODUyLCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.kNng2SqbBPmpNE1pVjX4DeNCKGIJalxuVkXv0x2diQQ
2025-04-17 21:51:02.162 INFO  [http-nio-11040-exec-9] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/user/info
2025-04-17 21:51:02.164 INFO  [http-nio-11040-exec-9] [com.momo.provider.JwtProvider] - get authentication username : admin
2025-04-17 21:51:02.167 DEBUG [http-nio-11040-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='admin'
 {executed in 1 msec}
2025-04-17 21:51:02.168 INFO  [http-nio-11040-exec-9] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'admin' 인증 정보를 저장했습니다
2025-04-17 21:51:02.169 INFO  [http-nio-11040-exec-9] [c.momo.common.util.SecurityContextUtil] - principal: UserDetailsImpl(username=admin, password=$2a$10$ShKoYoto0un02FeMgyao9ubb.9d0Y3BhGjLtmnmvV6OfsqBqGOmU2, authorities=[ROLE_NONE])
2025-04-17 21:51:02.171 DEBUG [http-nio-11040-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT ac.id,
               ac.name,
               ac.tel,
               ac.nickname,
               ac.pfp,
               ac.curr_shop_id,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where sf.shop_id = ac.curr_shop_id and
                         sf.staff_id = ac.id
                   ) as role,
               sh.shop_nm,
               sh.shop_addr,
               sh.provider,
               (
                   IFNULL((
                       select sf2.approval_st
                       from tb_staff sf2
                       where sf2.shop_id=ac.curr_shop_id and
                           sf2.staff_id=ac.id
                       ), -1)
                ) as approval_st,
                ac.corp_nm,
                ac.br_no
        FROM tb_account ac
        LEFT OUTER JOIN tb_shop sh on sh.shop_id=ac.curr_shop_id
        WHERE id = 'admin'
 {executed in 1 msec}
2025-04-17 21:51:02.172 INFO  [http-nio-11040-exec-9] [com.momo.api.UserController] - User: {role=null, approval_st=-1, shop_addr=null, br_no=null, provider=null, name=박희찬관리자용, nickname=null, corp_nm=null, tel=010-4524-0636, id=admin, pfp=null, curr_shop_id=-1, shop_nm=null}
2025-04-17 21:51:06.439 INFO  [http-nio-11040-exec-8] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/public/login
2025-04-17 21:51:06.440 INFO  [http-nio-11040-exec-8] [com.momo.filter.JwtAuthorizationFilter] - access token: null
2025-04-17 21:51:06.440 INFO  [http-nio-11040-exec-8] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/public/login
2025-04-17 21:51:06.440 INFO  [http-nio-11040-exec-8] [com.momo.filter.JwtAuthorizationFilter] - 유효한 JWT 토큰이 없습니다
2025-04-17 21:51:06.448 DEBUG [http-nio-11040-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
2. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 3 msec}
2025-04-17 21:51:06.589 DEBUG [http-nio-11040-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
2. UPDATE
            tb_account
        SET last_login_dt=NOW(),
            user_st=0
        WHERE id = 'km1104rs'
 {executed in 3 msec}
2025-04-17 21:51:06.593 INFO  [http-nio-11040-exec-8] [com.momo.service.JwtService] - save refresh token: JwtVO(grantType=Bearer, username=km1104rs, accessToken=eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDg5NDI2NiwiZXhwIjoxNzQ0ODk0ODY2LCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.9gKPqLpoZUhuBZAxeJMGGl4HxqudLsB5VEB99agO5S8, refreshToken=eyJhbGciOiJIUzI1NiJ9.eyJleHAiOjE3NDQ4OTc4NjZ9.kSmR1vpvfQZO8aI4TS_cDu3QOCVvhBkgahzUvCXVn7o, expireTime=3600000, revoked=false, expired=false)
2025-04-17 21:51:06.604 DEBUG [http-nio-11040-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
2. SELECT  *
        FROM    tb_refresh_token
        WHERE   user_id='km1104rs'
 {executed in 10 msec}
2025-04-17 21:51:06.605 DEBUG [http-nio-11040-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
2. UPDATE  tb_refresh_token
        SET     refresh_token='eyJhbGciOiJIUzI1NiJ9.eyJleHAiOjE3NDQ4OTc4NjZ9.kSmR1vpvfQZO8aI4TS_cDu3QOCVvhBkgahzUvCXVn7o'
        WHERE   user_id='km1104rs'
 {executed in 1 msec}
2025-04-17 21:51:06.608 DEBUG [http-nio-11040-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
2. SELECT curr_shop_id
        FROM tb_account
        WHERE id='km1104rs'
 {executed in 1 msec}
2025-04-17 21:51:06.622 INFO  [http-nio-11040-exec-10] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/user/info
2025-04-17 21:51:06.622 INFO  [http-nio-11040-exec-10] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDg5NDI2NiwiZXhwIjoxNzQ0ODk0ODY2LCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.9gKPqLpoZUhuBZAxeJMGGl4HxqudLsB5VEB99agO5S8
2025-04-17 21:51:06.622 INFO  [http-nio-11040-exec-10] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/user/info
2025-04-17 21:51:06.623 INFO  [http-nio-11040-exec-10] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-17 21:51:06.625 DEBUG [http-nio-11040-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 1 msec}
2025-04-17 21:51:06.625 INFO  [http-nio-11040-exec-10] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-17 21:51:06.625 INFO  [http-nio-11040-exec-10] [c.momo.common.util.SecurityContextUtil] - principal: UserDetailsImpl(username=km1104rs, password=$2a$10$uXShhwl6ULOkbJe477uDWOfdiUUcu6lOSF/Dhj9xP3U1nUn/gXkc6, authorities=[ROLE_NONE])
2025-04-17 21:51:06.627 DEBUG [http-nio-11040-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT ac.id,
               ac.name,
               ac.tel,
               ac.nickname,
               ac.pfp,
               ac.curr_shop_id,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where sf.shop_id = ac.curr_shop_id and
                         sf.staff_id = ac.id
                   ) as role,
               sh.shop_nm,
               sh.shop_addr,
               sh.provider,
               (
                   IFNULL((
                       select sf2.approval_st
                       from tb_staff sf2
                       where sf2.shop_id=ac.curr_shop_id and
                           sf2.staff_id=ac.id
                       ), -1)
                ) as approval_st,
                ac.corp_nm,
                ac.br_no
        FROM tb_account ac
        LEFT OUTER JOIN tb_shop sh on sh.shop_id=ac.curr_shop_id
        WHERE id = 'km1104rs'
 {executed in 1 msec}
2025-04-17 21:51:06.627 INFO  [http-nio-11040-exec-10] [com.momo.api.UserController] - User: {role=0, approval_st=1, shop_addr=충청남도 천안시 병천면 충절로 1600 한국기술교육대학교 다산정보관 102, br_no=5218702490, provider=2, name=박희찬, nickname=대표, corp_nm=123, tel=010-4524-0636, id=km1104rs, pfp=1921fc01-e573-4243-9365-6b905389f4fc.png, curr_shop_id=2, shop_nm=한기대점 }
2025-04-17 21:51:06.720 INFO  [http-nio-11040-exec-1] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/auth/refresh
2025-04-17 21:51:06.720 INFO  [http-nio-11040-exec-1] [com.momo.filter.JwtAuthorizationFilter] - access token: null
2025-04-17 21:51:06.720 INFO  [http-nio-11040-exec-1] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/auth/refresh
2025-04-17 21:51:06.720 INFO  [http-nio-11040-exec-1] [com.momo.filter.JwtAuthorizationFilter] - 유효한 JWT 토큰이 없습니다
2025-04-17 21:51:06.722 INFO  [http-nio-11040-exec-1] [com.momo.api.AuthController] - refresh
2025-04-17 21:51:06.730 DEBUG [http-nio-11040-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT  *
        FROM    tb_refresh_token
        WHERE   refresh_token='eyJhbGciOiJIUzI1NiJ9.eyJleHAiOjE3NDQ4OTc4NjZ9.kSmR1vpvfQZO8aI4TS_cDu3QOCVvhBkgahzUvCXVn7o'
 {executed in 2 msec}
2025-04-17 21:51:06.733 DEBUG [http-nio-11040-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 2 msec}
2025-04-17 21:51:06.735 INFO  [http-nio-11040-exec-1] [com.momo.api.AuthController] - jwt: JwtVO(grantType=Bearer , username=km1104rs, accessToken=eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDg5NDI2NiwiZXhwIjoxNzQ0ODk0ODY2LCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.9gKPqLpoZUhuBZAxeJMGGl4HxqudLsB5VEB99agO5S8, refreshToken=null, expireTime=null, revoked=false, expired=false)
2025-04-17 21:51:06.753 INFO  [http-nio-11040-exec-2] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/notif/all
2025-04-17 21:51:06.754 INFO  [http-nio-11040-exec-2] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDg5NDI2NiwiZXhwIjoxNzQ0ODk0ODY2LCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.9gKPqLpoZUhuBZAxeJMGGl4HxqudLsB5VEB99agO5S8
2025-04-17 21:51:06.754 INFO  [http-nio-11040-exec-2] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/notif/all
2025-04-17 21:51:06.756 INFO  [http-nio-11040-exec-3] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/notif/read/all
2025-04-17 21:51:06.757 INFO  [http-nio-11040-exec-3] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDg5NDI2NiwiZXhwIjoxNzQ0ODk0ODY2LCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.9gKPqLpoZUhuBZAxeJMGGl4HxqudLsB5VEB99agO5S8
2025-04-17 21:51:06.757 INFO  [http-nio-11040-exec-3] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/notif/read/all
2025-04-17 21:51:06.757 INFO  [http-nio-11040-exec-6] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/user/info
2025-04-17 21:51:06.757 INFO  [http-nio-11040-exec-6] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDg5NDI2NiwiZXhwIjoxNzQ0ODk0ODY2LCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.9gKPqLpoZUhuBZAxeJMGGl4HxqudLsB5VEB99agO5S8
2025-04-17 21:51:06.757 INFO  [http-nio-11040-exec-6] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/user/info
2025-04-17 21:51:06.757 INFO  [http-nio-11040-exec-4] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/notif/count/unread
2025-04-17 21:51:06.757 INFO  [http-nio-11040-exec-4] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDg5NDI2NiwiZXhwIjoxNzQ0ODk0ODY2LCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.9gKPqLpoZUhuBZAxeJMGGl4HxqudLsB5VEB99agO5S8
2025-04-17 21:51:06.757 INFO  [http-nio-11040-exec-4] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/notif/count/unread
2025-04-17 21:51:06.758 INFO  [http-nio-11040-exec-2] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-17 21:51:06.759 INFO  [http-nio-11040-exec-4] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-17 21:51:06.759 INFO  [http-nio-11040-exec-6] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-17 21:51:06.759 INFO  [http-nio-11040-exec-3] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-17 21:51:06.760 DEBUG [http-nio-11040-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 2 msec}
2025-04-17 21:51:06.760 INFO  [http-nio-11040-exec-2] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-17 21:51:06.760 DEBUG [http-nio-11040-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
4. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 1 msec}
2025-04-17 21:51:06.760 DEBUG [http-nio-11040-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
2. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 1 msec}
2025-04-17 21:51:06.760 DEBUG [http-nio-11040-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
3. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 1 msec}
2025-04-17 21:51:06.760 INFO  [http-nio-11040-exec-6] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-17 21:51:06.760 INFO  [http-nio-11040-exec-4] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-17 21:51:06.760 INFO  [http-nio-11040-exec-3] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-17 21:51:06.761 INFO  [http-nio-11040-exec-2] [c.momo.common.util.SecurityContextUtil] - principal: UserDetailsImpl(username=km1104rs, password=$2a$10$uXShhwl6ULOkbJe477uDWOfdiUUcu6lOSF/Dhj9xP3U1nUn/gXkc6, authorities=[ROLE_NONE])
2025-04-17 21:51:06.761 INFO  [http-nio-11040-exec-6] [c.momo.common.util.SecurityContextUtil] - principal: UserDetailsImpl(username=km1104rs, password=$2a$10$uXShhwl6ULOkbJe477uDWOfdiUUcu6lOSF/Dhj9xP3U1nUn/gXkc6, authorities=[ROLE_NONE])
2025-04-17 21:51:06.761 INFO  [http-nio-11040-exec-4] [c.momo.common.util.SecurityContextUtil] - principal: UserDetailsImpl(username=km1104rs, password=$2a$10$uXShhwl6ULOkbJe477uDWOfdiUUcu6lOSF/Dhj9xP3U1nUn/gXkc6, authorities=[ROLE_NONE])
2025-04-17 21:51:06.761 INFO  [http-nio-11040-exec-3] [c.momo.common.util.SecurityContextUtil] - principal: UserDetailsImpl(username=km1104rs, password=$2a$10$uXShhwl6ULOkbJe477uDWOfdiUUcu6lOSF/Dhj9xP3U1nUn/gXkc6, authorities=[ROLE_NONE])
2025-04-17 21:51:06.762 DEBUG [http-nio-11040-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
3. UPDATE tb_notification
        SET read_st = TRUE
        WHERE receiver_id = 'km1104rs'
          AND read_st = FALSE
 {executed in 0 msec}
2025-04-17 21:51:06.762 DEBUG [http-nio-11040-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
4. SELECT ac.id,
               ac.name,
               ac.tel,
               ac.nickname,
               ac.pfp,
               ac.curr_shop_id,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where sf.shop_id = ac.curr_shop_id and
                         sf.staff_id = ac.id
                   ) as role,
               sh.shop_nm,
               sh.shop_addr,
               sh.provider,
               (
                   IFNULL((
                       select sf2.approval_st
                       from tb_staff sf2
                       where sf2.shop_id=ac.curr_shop_id and
                           sf2.staff_id=ac.id
                       ), -1)
                ) as approval_st,
                ac.corp_nm,
                ac.br_no
        FROM tb_account ac
        LEFT OUTER JOIN tb_shop sh on sh.shop_id=ac.curr_shop_id
        WHERE id = 'km1104rs'
 {executed in 1 msec}
2025-04-17 21:51:06.762 DEBUG [http-nio-11040-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT content,
               notif_id,
               read_st,
               notif_tp as type,
               IF(date(send_dt) = current_date,true,false) as today,
            (
               TIMESTAMPDIFF(MINUTE, send_dt, current_timestamp)
            ) as ago
        FROM tb_notification
        WHERE receiver_id='km1104rs'
        ORDER BY send_dt DESC
 {executed in 1 msec}
2025-04-17 21:51:06.762 DEBUG [http-nio-11040-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
2. SELECT count(*)
        FROM tb_notification
        WHERE receiver_id = 'km1104rs'
          AND read_st = FALSE
 {executed in 1 msec}
2025-04-17 21:51:06.762 INFO  [http-nio-11040-exec-6] [com.momo.api.UserController] - User: {role=0, approval_st=1, shop_addr=충청남도 천안시 병천면 충절로 1600 한국기술교육대학교 다산정보관 102, br_no=5218702490, provider=2, name=박희찬, nickname=대표, corp_nm=123, tel=010-4524-0636, id=km1104rs, pfp=1921fc01-e573-4243-9365-6b905389f4fc.png, curr_shop_id=2, shop_nm=한기대점 }
2025-04-17 21:51:06.770 INFO  [http-nio-11040-exec-5] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/notif/count/unread
2025-04-17 21:51:06.770 INFO  [http-nio-11040-exec-5] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDg5NDI2NiwiZXhwIjoxNzQ0ODk0ODY2LCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.9gKPqLpoZUhuBZAxeJMGGl4HxqudLsB5VEB99agO5S8
2025-04-17 21:51:06.770 INFO  [http-nio-11040-exec-5] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/notif/count/unread
2025-04-17 21:51:06.771 INFO  [http-nio-11040-exec-5] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-17 21:51:06.774 DEBUG [http-nio-11040-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
3. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 2 msec}
2025-04-17 21:51:06.774 INFO  [http-nio-11040-exec-5] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-17 21:51:06.774 INFO  [http-nio-11040-exec-5] [c.momo.common.util.SecurityContextUtil] - principal: UserDetailsImpl(username=km1104rs, password=$2a$10$uXShhwl6ULOkbJe477uDWOfdiUUcu6lOSF/Dhj9xP3U1nUn/gXkc6, authorities=[ROLE_NONE])
2025-04-17 21:51:06.776 DEBUG [http-nio-11040-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
3. SELECT count(*)
        FROM tb_notification
        WHERE receiver_id = 'km1104rs'
          AND read_st = FALSE
 {executed in 1 msec}
2025-04-17 21:51:06.802 INFO  [http-nio-11040-exec-7] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/notif/count/unread
2025-04-17 21:51:06.802 INFO  [http-nio-11040-exec-7] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDg5NDI2NiwiZXhwIjoxNzQ0ODk0ODY2LCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.9gKPqLpoZUhuBZAxeJMGGl4HxqudLsB5VEB99agO5S8
2025-04-17 21:51:06.802 INFO  [http-nio-11040-exec-7] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/notif/count/unread
2025-04-17 21:51:06.804 INFO  [http-nio-11040-exec-9] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/sale/graph/ct/d
2025-04-17 21:51:06.804 INFO  [http-nio-11040-exec-9] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDg5NDI2NiwiZXhwIjoxNzQ0ODk0ODY2LCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.9gKPqLpoZUhuBZAxeJMGGl4HxqudLsB5VEB99agO5S8
2025-04-17 21:51:06.804 INFO  [http-nio-11040-exec-9] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/sale/graph/ct/d
2025-04-17 21:51:06.804 INFO  [http-nio-11040-exec-7] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-17 21:51:06.807 INFO  [http-nio-11040-exec-9] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-17 21:51:06.808 DEBUG [http-nio-11040-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 2 msec}
2025-04-17 21:51:06.811 INFO  [http-nio-11040-exec-10] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/pimg
2025-04-17 21:51:06.820 INFO  [http-nio-11040-exec-10] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDg5NDI2NiwiZXhwIjoxNzQ0ODk0ODY2LCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.9gKPqLpoZUhuBZAxeJMGGl4HxqudLsB5VEB99agO5S8
2025-04-17 21:51:06.820 INFO  [http-nio-11040-exec-10] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/pimg
2025-04-17 21:51:06.820 INFO  [http-nio-11040-exec-8] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/sale/change/ct
2025-04-17 21:51:06.821 INFO  [http-nio-11040-exec-7] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-17 21:51:06.821 INFO  [http-nio-11040-exec-8] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDg5NDI2NiwiZXhwIjoxNzQ0ODk0ODY2LCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.9gKPqLpoZUhuBZAxeJMGGl4HxqudLsB5VEB99agO5S8
2025-04-17 21:51:06.821 INFO  [http-nio-11040-exec-8] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/sale/change/ct
2025-04-17 21:51:06.821 INFO  [http-nio-11040-exec-1] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/todo
2025-04-17 21:51:06.821 INFO  [http-nio-11040-exec-1] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDg5NDI2NiwiZXhwIjoxNzQ0ODk0ODY2LCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.9gKPqLpoZUhuBZAxeJMGGl4HxqudLsB5VEB99agO5S8
2025-04-17 21:51:06.821 INFO  [http-nio-11040-exec-1] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/todo
2025-04-17 21:51:06.822 INFO  [http-nio-11040-exec-7] [c.momo.common.util.SecurityContextUtil] - principal: UserDetailsImpl(username=km1104rs, password=$2a$10$uXShhwl6ULOkbJe477uDWOfdiUUcu6lOSF/Dhj9xP3U1nUn/gXkc6, authorities=[ROLE_NONE])
2025-04-17 21:51:06.824 INFO  [http-nio-11040-exec-8] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-17 21:51:06.821 DEBUG [http-nio-11040-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
2. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 13 msec}
2025-04-17 21:51:06.832 INFO  [http-nio-11040-exec-1] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-17 21:51:06.832 INFO  [http-nio-11040-exec-9] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-17 21:51:06.836 DEBUG [http-nio-11040-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT count(*)
        FROM tb_notification
        WHERE receiver_id = 'km1104rs'
          AND read_st = FALSE
 {executed in 8 msec}
2025-04-17 21:51:06.836 DEBUG [http-nio-11040-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
3. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 8 msec}
2025-04-17 21:51:06.836 INFO  [http-nio-11040-exec-8] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-17 21:51:06.836 INFO  [http-nio-11040-exec-10] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-17 21:51:06.838 DEBUG [http-nio-11040-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
2. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 4 msec}
2025-04-17 21:51:06.838 INFO  [http-nio-11040-exec-1] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-17 21:51:06.838 DEBUG [http-nio-11040-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
3. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 2 msec}
2025-04-17 21:51:06.841 INFO  [http-nio-11040-exec-10] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-17 21:51:06.852 INFO  [http-nio-11040-exec-3] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/shop/all
2025-04-17 21:51:06.852 INFO  [http-nio-11040-exec-3] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDg5NDI2NiwiZXhwIjoxNzQ0ODk0ODY2LCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.9gKPqLpoZUhuBZAxeJMGGl4HxqudLsB5VEB99agO5S8
2025-04-17 21:51:06.852 INFO  [http-nio-11040-exec-3] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/shop/all
2025-04-17 21:51:06.853 INFO  [http-nio-11040-exec-6] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/todo/detail
2025-04-17 21:51:06.854 INFO  [http-nio-11040-exec-6] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDg5NDI2NiwiZXhwIjoxNzQ0ODk0ODY2LCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.9gKPqLpoZUhuBZAxeJMGGl4HxqudLsB5VEB99agO5S8
2025-04-17 21:51:06.854 INFO  [http-nio-11040-exec-6] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/todo/detail
2025-04-17 21:51:06.854 INFO  [http-nio-11040-exec-3] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-17 21:51:06.856 INFO  [http-nio-11040-exec-6] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-17 21:51:06.874 DEBUG [http-nio-11040-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. with tb as (
            SELECT
                (
                    SELECT count(*)
                    FROM tb_sale
                    WHERE shop_id=2 and
                          device_id != 0 and
                          actv_dt BETWEEN '2025-03-01' AND '2025-03-17'
                    ) as prev,
                (
                    SELECT count(*)
                    FROM tb_sale
                    WHERE shop_id=2 and
                        device_id != 0 and
                        actv_dt BETWEEN '2025-04-01' AND '2025-04-17'
                ) as curr
            FROM DUAL
        )

        SELECT tb.curr - tb.prev
        FROM tb
 {executed in 31 msec}
2025-04-17 21:51:06.875 DEBUG [http-nio-11040-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
5. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 19 msec}
2025-04-17 21:51:06.875 INFO  [http-nio-11040-exec-3] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-17 21:51:06.876 INFO  [http-nio-11040-exec-3] [c.momo.common.util.SecurityContextUtil] - principal: UserDetailsImpl(username=km1104rs, password=$2a$10$uXShhwl6ULOkbJe477uDWOfdiUUcu6lOSF/Dhj9xP3U1nUn/gXkc6, authorities=[ROLE_NONE])
2025-04-17 21:51:06.877 DEBUG [http-nio-11040-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
4. set @limit_cond := (
               case 'd'
                   when 'h' then '2000-01-24'
                   when 'd' then '2025-04-17'
                   when 'w' then '2025-04-17'
                   when 'm' then date_sub('2025-04-17', interval 1 month)
               end
        );

        with recursive org_date_table as (
            select (
                       case
                           when 'd' = 'h' then '2000-01-01'
                           when 'd' != 'h' then '2025-01-17'
                           end
                       ) as it
            union all
            select (
                       case 'd'
                           when 'h' then date_add(it, interval 1 day)
                           when 'd' then date_add(it, interval 1 day)
                           when 'w' then date_add(it, interval 1 week)
                           when 'm' then date_add(it, interval 1 month)
                           end
                       ) as it
            from org_date_table
            where it < @limit_cond
        ), date_table as (
            select
                year(it) as _year,
                (
                    case 'd'
                        when 'h' then day(it)
                        when 'd' then it
                        when 'w' then week(it)
                        when 'm' then month(it)
                        end
                    ) as dt
            from org_date_table
        ),  date_sale as (
            select year(actv_dt) _year,
                   month(actv_dt) as m,
                   week(actv_dt) as w,
                   actv_dt as d,
                   hour(regi_dt) as h,
                   tb_sale.*
            from tb_sale
            where shop_id=2 and

                actv_dt between '2025-01-17' and (
                    case
                        when 'd' = 'h' then '2025-01-17'
                        when 'd' != 'h' then '2025-04-17'
                        end
                    )
        ), final as (
            select count(device_id) as cnt
            from date_table dd
                     left outer join date_sale ds on dd._year=ds._year and
                                                     d = dt
            group by dd._year, dd.dt
        )

        select
            (
                select json_arrayagg(cnt)
                from final
            ) as value,
            (
                select json_arrayagg(date_format(it, '%Y-%m-%d'))
                from org_date_table
            ) as date
 {executed in 32 msec}
2025-04-17 21:51:06.881 DEBUG [http-nio-11040-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
3. select pimg_id as id,
               pimg_text as text,
               pimg_path as file
        from tb_post_img
        where shop_id=2
 {executed in 39 msec}
2025-04-17 21:51:06.890 DEBUG [http-nio-11040-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
2. SELECT SUBSTR(todo_dt, 9, 2)
        FROM tb_todo
        WHERE shop_id= 2  and
            todo_dt like '%2025-04%'
 {executed in 30 msec}
2025-04-17 21:51:06.893 DEBUG [http-nio-11040-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
6. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 19 msec}
2025-04-17 21:51:06.893 INFO  [http-nio-11040-exec-6] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-17 21:51:06.898 DEBUG [http-nio-11040-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
5. select sh.shop_id,
               sh.shop_nm
        from tb_staff sf
        left outer join tb_shop sh on sh.shop_id=sf.shop_id
        where staff_id='km1104rs'
 {executed in 22 msec}
2025-04-17 21:51:06.905 INFO  [http-nio-11040-exec-4] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/img/download/pfp
2025-04-17 21:51:06.905 INFO  [http-nio-11040-exec-4] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDg5NDI2NiwiZXhwIjoxNzQ0ODk0ODY2LCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.9gKPqLpoZUhuBZAxeJMGGl4HxqudLsB5VEB99agO5S8
2025-04-17 21:51:06.905 INFO  [http-nio-11040-exec-4] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/img/download/pfp
2025-04-17 21:51:06.905 INFO  [http-nio-11040-exec-5] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/sale/ratio
2025-04-17 21:51:06.906 INFO  [http-nio-11040-exec-5] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDg5NDI2NiwiZXhwIjoxNzQ0ODk0ODY2LCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.9gKPqLpoZUhuBZAxeJMGGl4HxqudLsB5VEB99agO5S8
2025-04-17 21:51:06.905 INFO  [http-nio-11040-exec-2] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/sale/summary
2025-04-17 21:51:06.906 INFO  [http-nio-11040-exec-2] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDg5NDI2NiwiZXhwIjoxNzQ0ODk0ODY2LCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.9gKPqLpoZUhuBZAxeJMGGl4HxqudLsB5VEB99agO5S8
2025-04-17 21:51:06.906 INFO  [http-nio-11040-exec-2] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/sale/summary
2025-04-17 21:51:06.906 INFO  [http-nio-11040-exec-5] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/sale/ratio
2025-04-17 21:51:06.908 INFO  [http-nio-11040-exec-2] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-17 21:51:06.908 INFO  [http-nio-11040-exec-7] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/sale/wip
2025-04-17 21:51:06.908 INFO  [http-nio-11040-exec-5] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-17 21:51:06.908 INFO  [http-nio-11040-exec-7] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDg5NDI2NiwiZXhwIjoxNzQ0ODk0ODY2LCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.9gKPqLpoZUhuBZAxeJMGGl4HxqudLsB5VEB99agO5S8
2025-04-17 21:51:06.908 INFO  [http-nio-11040-exec-7] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/sale/wip
2025-04-17 21:51:06.908 INFO  [http-nio-11040-exec-4] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-17 21:51:06.908 DEBUG [http-nio-11040-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
6. SELECT /* TodoMapper.xml : getTodoDetail */
                todo_id,
                color,
                checked,
               content
        FROM tb_todo td
        WHERE td.shop_id=2 and
            todo_dt='2025-04-17'
 {executed in 12 msec}
2025-04-17 21:51:06.910 INFO  [http-nio-11040-exec-7] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-17 21:51:06.911 DEBUG [http-nio-11040-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 1 msec}
2025-04-17 21:51:06.911 INFO  [http-nio-11040-exec-2] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-17 21:51:06.915 DEBUG [http-nio-11040-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
2. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 6 msec}
2025-04-17 21:51:06.916 INFO  [http-nio-11040-exec-8] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/todo/detail
2025-04-17 21:51:06.916 INFO  [http-nio-11040-exec-8] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDg5NDI2NiwiZXhwIjoxNzQ0ODk0ODY2LCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.9gKPqLpoZUhuBZAxeJMGGl4HxqudLsB5VEB99agO5S8
2025-04-17 21:51:06.916 INFO  [http-nio-11040-exec-8] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/todo/detail
2025-04-17 21:51:06.916 INFO  [http-nio-11040-exec-4] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-17 21:51:06.919 DEBUG [http-nio-11040-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
3. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 10 msec}
2025-04-17 21:51:06.919 INFO  [http-nio-11040-exec-8] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-17 21:51:06.920 INFO  [http-nio-11040-exec-5] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-17 21:51:06.936 INFO  [http-nio-11040-exec-9] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/img/download/pimg
2025-04-17 21:51:06.943 INFO  [http-nio-11040-exec-9] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDg5NDI2NiwiZXhwIjoxNzQ0ODk0ODY2LCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.9gKPqLpoZUhuBZAxeJMGGl4HxqudLsB5VEB99agO5S8
2025-04-17 21:51:06.943 INFO  [http-nio-11040-exec-9] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/img/download/pimg
2025-04-17 21:51:06.965 DEBUG [http-nio-11040-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
4. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 46 msec}
2025-04-17 21:51:06.966 INFO  [http-nio-11040-exec-7] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-17 21:51:06.975 INFO  [http-nio-11040-exec-9] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-17 21:51:06.987 DEBUG [http-nio-11040-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
2. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 66 msec}
2025-04-17 21:51:06.987 INFO  [http-nio-11040-exec-8] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-17 21:51:06.988 INFO  [http-nio-11040-exec-10] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/todo
2025-04-17 21:51:06.988 INFO  [http-nio-11040-exec-10] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDg5NDI2NiwiZXhwIjoxNzQ0ODk0ODY2LCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.9gKPqLpoZUhuBZAxeJMGGl4HxqudLsB5VEB99agO5S8
2025-04-17 21:51:06.988 INFO  [http-nio-11040-exec-10] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/todo
2025-04-17 21:51:06.987 DEBUG [http-nio-11040-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
3. SET @total_sale_count := (
            SELECT count(*)
            FROM tb_sale
            WHERE shop_id=2 and
                device_id is not null and
                actv_dt like '2025-04%'
        );

        with tb as (
            SELECT count(*) as curr
            FROM tb_sale_card sc
                     LEFT OUTER JOIN tb_sale sl on sl.sale_id=sc.sale_id
            WHERE sc.shop_id=2 and
                actv_dt like '2025-04%'
            UNION ALL
            SELECT count(*) as curr
            FROM tb_sale
            WHERE shop_id= 2 and
                actv_dt like '2025-04%' and
                sd_id is not null
            UNION ALL
            SELECT count(*) as curr
            FROM tb_sale
            WHERE shop_id= 2 and
                actv_dt like '2025-04%' and
                exsvc_id is not null
        )

        SELECT
            curr as value,
            @total_sale_count as total,
            (
                CASE
                    WHEN @total_sale_count = 0 THEN 0
                    WHEN @total_sale_count != 0 THEN TRUNCATE(((curr/@total_sale_count))*100, 1)
                    END
                ) as per
        FROM tb
 {executed in 65 msec}
2025-04-17 21:51:06.990 DEBUG [http-nio-11040-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
5. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 14 msec}
2025-04-17 21:51:06.992 INFO  [http-nio-11040-exec-9] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-17 21:51:06.995 INFO  [http-nio-11040-exec-10] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-17 21:51:07.000 DEBUG [http-nio-11040-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
4. with table_ud as (
            SELECT ud_st
            FROM tb_sale_used_device sud
            LEFT OUTER JOIN tb_sale sl on sl.sale_id=sud.sale_id
            WHERE sud.shop_id=2
--               and
--                 actv_dt like '%'
        ), table_card as (
            SELECT card_st
            FROM tb_sale_card sc
            LEFT OUTER JOIN tb_sale sl on sl.sale_id=sc.sale_id
            WHERE sc.shop_id=2
--               and
--                 actv_dt like '%'
        ), table_comb as (
            SELECT comb_st
            FROM tb_sale
            WHERE shop_id=2
--               and
--                 actv_dt like '%%'
        ), table_sup as (
            SELECT sup_st
            FROM tb_sale_support sc LEFT OUTER JOIN tb_sale sl on sl.sale_id=sc.sale_id
            WHERE sc.shop_id=2
--               and
--                 actv_dt like '%%'
        ), table_pm as (
            SELECT checked
            FROM tb_promise sc
                LEFT OUTER JOIN tb_sale sl on sl.sale_id=sc.sale_id
            WHERE sc.shop_id=2
--               and
--                 actv_dt like '%%'
        ), rst as (
            SELECT
                (
                    SELECT count(*)
                    FROM table_ud
                    WHERE ud_st!=2
                )
            UNION ALL
            SELECT
                (
                    SELECT count(*)
                    FROM table_card
                    WHERE card_st!=2
                )
            UNION ALL
            SELECT
                (
                    SELECT count(*)
                    FROM table_comb
                    WHERE comb_st!=1
                )
            UNION ALL
            SELECT
                (
                    SELECT count(*)
                    FROM table_sup
                    WHERE sup_st!=1
                )
            UNION ALL
            SELECT
                (
                    SELECT count(*)
                    FROM table_pm
                    WHERE checked!=1
                )
        )

        SELECT *
        FROM rst
 {executed in 22 msec}
2025-04-17 21:51:07.000 DEBUG [http-nio-11040-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. with prevMonth as (
            SELECT *
            FROM tb_sale
            WHERE shop_id=2 and
                actv_dt like '2025-03%'
        ), currMonth as (
            SELECT *
            FROM tb_sale
            WHERE shop_id=2 and
                actv_dt like '2025-04%'
        ) , tb as (
            SELECT
                (
                    SELECT IFNULL(count(*), 0)
                    FROM prevMonth
                    WHERE device_id is not null
                    ) as prev,
                (
                    SELECT IFNULL(count(*), 0)
                    FROM currMonth
                    WHERE device_id is not null
                ) as curr
            from dual
            UNION ALL
            SELECT
                (
                    SELECT IFNULL(count(*), 0)
                    FROM prevMonth
                    WHERE internet_plan is not null
                ) as prev,
                (
                    SELECT IFNULL(count(*), 0)
                    FROM currMonth
                    WHERE internet_plan is not null
                ) as curr
            from dual
            UNION ALL
            SELECT
                (
                    SELECT IFNULL(count(*), 0)
                    FROM prevMonth
                    WHERE tv_plan is not null
                ) as prev,
                (
                    SELECT IFNULL(count(*), 0)
                    FROM currMonth
                    WHERE tv_plan is not null
                ) as curr
            from dual
            UNION ALL
            SELECT
                (
                    SELECT IFNULL(SUM(total_cms),0)
                    FROM prevMonth
                    where device_id is not null
                ) as prev,
                (
                    SELECT IFNULL(SUM(total_cms),0)
                    FROM currMonth
                    where device_id is not null
                ) as curr
            from dual
            UNION ALL
            SELECT
                (
                    SELECT IFNULL(AVG(total_cms),0)
                    FROM prevMonth
                    where device_id is not null
                ) as prev,
                (
                    SELECT IFNULL(AVG(total_cms),0)
                    FROM currMonth
                    where device_id is not null
                ) as curr
            from dual
        )

        SELECT FLOOR(curr) as value,
               (
                   CASE
                       WHEN curr = 0 THEN 0
                       WHEN prev = 0 THEN 100
                       WHEN prev != 0 THEN TRUNCATE(((curr/prev)-1)*100, 1)
                   END
                   ) as per
        FROM tb
 {executed in 83 msec}
2025-04-17 21:51:07.014 DEBUG [http-nio-11040-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
2. SELECT /* TodoMapper.xml : getTodoDetail */
                todo_id,
                color,
                checked,
               content
        FROM tb_todo td
        WHERE td.shop_id=2 and
            todo_dt='2025-04-17'
 {executed in 22 msec}
2025-04-17 21:51:07.029 DEBUG [http-nio-11040-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
3. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 33 msec}
2025-04-17 21:51:07.035 INFO  [http-nio-11040-exec-10] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-17 21:51:07.084 INFO  [http-nio-11040-exec-1] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/img/download/pimg
2025-04-17 21:51:07.085 INFO  [http-nio-11040-exec-1] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDg5NDI2NiwiZXhwIjoxNzQ0ODk0ODY2LCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.9gKPqLpoZUhuBZAxeJMGGl4HxqudLsB5VEB99agO5S8
2025-04-17 21:51:07.085 INFO  [http-nio-11040-exec-1] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/img/download/pimg
2025-04-17 21:51:07.087 INFO  [http-nio-11040-exec-3] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/todo/detail
2025-04-17 21:51:07.087 INFO  [http-nio-11040-exec-3] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDg5NDI2NiwiZXhwIjoxNzQ0ODk0ODY2LCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.9gKPqLpoZUhuBZAxeJMGGl4HxqudLsB5VEB99agO5S8
2025-04-17 21:51:07.087 INFO  [http-nio-11040-exec-3] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/todo/detail
2025-04-17 21:51:07.088 DEBUG [http-nio-11040-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
3. SELECT SUBSTR(todo_dt, 9, 2)
        FROM tb_todo
        WHERE shop_id= 2  and
            todo_dt like '%2025-04%'
 {executed in 23 msec}
2025-04-17 21:51:07.093 INFO  [http-nio-11040-exec-3] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-17 21:51:07.094 INFO  [http-nio-11040-exec-1] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-17 21:51:07.102 DEBUG [http-nio-11040-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
5. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 7 msec}
2025-04-17 21:51:07.102 DEBUG [http-nio-11040-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
2. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 6 msec}
2025-04-17 21:51:07.102 INFO  [http-nio-11040-exec-1] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-17 21:51:07.103 INFO  [http-nio-11040-exec-3] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-17 21:51:07.103 INFO  [http-nio-11040-exec-6] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/todo
2025-04-17 21:51:07.103 INFO  [http-nio-11040-exec-6] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDg5NDI2NiwiZXhwIjoxNzQ0ODk0ODY2LCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.9gKPqLpoZUhuBZAxeJMGGl4HxqudLsB5VEB99agO5S8
2025-04-17 21:51:07.103 INFO  [http-nio-11040-exec-6] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/todo
2025-04-17 21:51:07.107 INFO  [http-nio-11040-exec-6] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-17 21:51:07.111 DEBUG [http-nio-11040-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
5. SELECT /* TodoMapper.xml : getTodoDetail */
                todo_id,
                color,
                checked,
               content
        FROM tb_todo td
        WHERE td.shop_id=2 and
            todo_dt='2025-04-17'
 {executed in 6 msec}
2025-04-17 21:51:07.114 DEBUG [http-nio-11040-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
6. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 5 msec}
2025-04-17 21:51:07.115 INFO  [http-nio-11040-exec-6] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-17 21:51:07.119 INFO  [http-nio-11040-exec-4] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/img/download/pimg
2025-04-17 21:51:07.119 INFO  [http-nio-11040-exec-4] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDg5NDI2NiwiZXhwIjoxNzQ0ODk0ODY2LCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.9gKPqLpoZUhuBZAxeJMGGl4HxqudLsB5VEB99agO5S8
2025-04-17 21:51:07.119 INFO  [http-nio-11040-exec-4] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/img/download/pimg
2025-04-17 21:51:07.121 DEBUG [http-nio-11040-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
6. SELECT SUBSTR(todo_dt, 9, 2)
        FROM tb_todo
        WHERE shop_id= 2  and
            todo_dt like '%2025-04%'
 {executed in 1 msec}
2025-04-17 21:51:07.121 INFO  [http-nio-11040-exec-4] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-17 21:51:07.121 INFO  [http-nio-11040-exec-7] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/todo/detail
2025-04-17 21:51:07.121 INFO  [http-nio-11040-exec-7] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDg5NDI2NiwiZXhwIjoxNzQ0ODk0ODY2LCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.9gKPqLpoZUhuBZAxeJMGGl4HxqudLsB5VEB99agO5S8
2025-04-17 21:51:07.121 INFO  [http-nio-11040-exec-7] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/todo/detail
2025-04-17 21:51:07.125 INFO  [http-nio-11040-exec-7] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-17 21:51:07.125 DEBUG [http-nio-11040-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
2. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 4 msec}
2025-04-17 21:51:07.126 INFO  [http-nio-11040-exec-4] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-17 21:51:07.128 DEBUG [http-nio-11040-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
4. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 2 msec}
2025-04-17 21:51:07.128 INFO  [http-nio-11040-exec-7] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-17 21:51:07.129 INFO  [http-nio-11040-exec-9] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/todo
2025-04-17 21:51:07.129 INFO  [http-nio-11040-exec-9] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDg5NDI2NiwiZXhwIjoxNzQ0ODk0ODY2LCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.9gKPqLpoZUhuBZAxeJMGGl4HxqudLsB5VEB99agO5S8
2025-04-17 21:51:07.129 INFO  [http-nio-11040-exec-9] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/todo
2025-04-17 21:51:07.131 INFO  [http-nio-11040-exec-9] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-17 21:51:07.135 DEBUG [http-nio-11040-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
5. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 3 msec}
2025-04-17 21:51:07.136 INFO  [http-nio-11040-exec-9] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-17 21:51:07.138 DEBUG [http-nio-11040-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
4. SELECT /* TodoMapper.xml : getTodoDetail */
                todo_id,
                color,
                checked,
               content
        FROM tb_todo td
        WHERE td.shop_id=2 and
            todo_dt='2025-04-17'
 {executed in 9 msec}
2025-04-17 21:51:07.139 DEBUG [http-nio-11040-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
5. SELECT SUBSTR(todo_dt, 9, 2)
        FROM tb_todo
        WHERE shop_id= 2  and
            todo_dt like '%2025-04%'
 {executed in 1 msec}
2025-04-17 21:51:07.153 INFO  [http-nio-11040-exec-2] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/todo
2025-04-17 21:51:07.153 INFO  [http-nio-11040-exec-8] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/todo/detail
2025-04-17 21:51:07.153 INFO  [http-nio-11040-exec-2] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDg5NDI2NiwiZXhwIjoxNzQ0ODk0ODY2LCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.9gKPqLpoZUhuBZAxeJMGGl4HxqudLsB5VEB99agO5S8
2025-04-17 21:51:07.153 INFO  [http-nio-11040-exec-8] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDg5NDI2NiwiZXhwIjoxNzQ0ODk0ODY2LCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.9gKPqLpoZUhuBZAxeJMGGl4HxqudLsB5VEB99agO5S8
2025-04-17 21:51:07.153 INFO  [http-nio-11040-exec-2] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/todo
2025-04-17 21:51:07.153 INFO  [http-nio-11040-exec-8] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/todo/detail
2025-04-17 21:51:07.155 INFO  [http-nio-11040-exec-2] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-17 21:51:07.155 INFO  [http-nio-11040-exec-8] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-17 21:51:07.158 DEBUG [http-nio-11040-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 2 msec}
2025-04-17 21:51:07.158 DEBUG [http-nio-11040-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
2. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 2 msec}
2025-04-17 21:51:07.158 INFO  [http-nio-11040-exec-2] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-17 21:51:07.159 INFO  [http-nio-11040-exec-8] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-17 21:51:07.165 DEBUG [http-nio-11040-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
2. SELECT /* TodoMapper.xml : getTodoDetail */
                todo_id,
                color,
                checked,
               content
        FROM tb_todo td
        WHERE td.shop_id=2 and
            todo_dt='2025-04-17'
 {executed in 5 msec}
2025-04-17 21:51:07.171 DEBUG [http-nio-11040-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT SUBSTR(todo_dt, 9, 2)
        FROM tb_todo
        WHERE shop_id= 2  and
            todo_dt like '%2025-04%'
 {executed in 11 msec}
2025-04-17 21:51:07.173 INFO  [http-nio-11040-exec-5] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/todo/detail
2025-04-17 21:51:07.174 INFO  [http-nio-11040-exec-5] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDg5NDI2NiwiZXhwIjoxNzQ0ODk0ODY2LCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.9gKPqLpoZUhuBZAxeJMGGl4HxqudLsB5VEB99agO5S8
2025-04-17 21:51:07.174 INFO  [http-nio-11040-exec-5] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/todo/detail
2025-04-17 21:51:07.177 INFO  [http-nio-11040-exec-5] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-17 21:51:07.180 INFO  [http-nio-11040-exec-10] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/todo
2025-04-17 21:51:07.180 INFO  [http-nio-11040-exec-10] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDg5NDI2NiwiZXhwIjoxNzQ0ODk0ODY2LCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.9gKPqLpoZUhuBZAxeJMGGl4HxqudLsB5VEB99agO5S8
2025-04-17 21:51:07.180 INFO  [http-nio-11040-exec-10] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/todo
2025-04-17 21:51:07.180 DEBUG [http-nio-11040-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
3. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 1 msec}
2025-04-17 21:51:07.180 INFO  [http-nio-11040-exec-5] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-17 21:51:07.182 INFO  [http-nio-11040-exec-10] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-17 21:51:07.184 DEBUG [http-nio-11040-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
3. SELECT /* TodoMapper.xml : getTodoDetail */
                todo_id,
                color,
                checked,
               content
        FROM tb_todo td
        WHERE td.shop_id=2 and
            todo_dt='2025-04-17'
 {executed in 1 msec}
2025-04-17 21:51:07.184 DEBUG [http-nio-11040-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 1 msec}
2025-04-17 21:51:07.184 INFO  [http-nio-11040-exec-10] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-17 21:51:07.188 DEBUG [http-nio-11040-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT SUBSTR(todo_dt, 9, 2)
        FROM tb_todo
        WHERE shop_id= 2  and
            todo_dt like '%2025-04%'
 {executed in 2 msec}
2025-04-17 21:51:07.191 INFO  [http-nio-11040-exec-1] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/todo/detail
2025-04-17 21:51:07.191 INFO  [http-nio-11040-exec-1] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDg5NDI2NiwiZXhwIjoxNzQ0ODk0ODY2LCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.9gKPqLpoZUhuBZAxeJMGGl4HxqudLsB5VEB99agO5S8
2025-04-17 21:51:07.191 INFO  [http-nio-11040-exec-1] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/todo/detail
2025-04-17 21:51:07.194 INFO  [http-nio-11040-exec-1] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-17 21:51:07.195 DEBUG [http-nio-11040-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
2. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 1 msec}
2025-04-17 21:51:07.196 INFO  [http-nio-11040-exec-1] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-17 21:51:07.198 DEBUG [http-nio-11040-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
2. SELECT /* TodoMapper.xml : getTodoDetail */
                todo_id,
                color,
                checked,
               content
        FROM tb_todo td
        WHERE td.shop_id=2 and
            todo_dt='2025-04-17'
 {executed in 1 msec}
2025-04-17 21:51:07.202 INFO  [http-nio-11040-exec-3] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/todo/detail
2025-04-17 21:51:07.203 INFO  [http-nio-11040-exec-3] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDg5NDI2NiwiZXhwIjoxNzQ0ODk0ODY2LCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.9gKPqLpoZUhuBZAxeJMGGl4HxqudLsB5VEB99agO5S8
2025-04-17 21:51:07.203 INFO  [http-nio-11040-exec-3] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/todo/detail
2025-04-17 21:51:07.204 INFO  [http-nio-11040-exec-3] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-17 21:51:07.207 DEBUG [http-nio-11040-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
5. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 2 msec}
2025-04-17 21:51:07.208 INFO  [http-nio-11040-exec-3] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-17 21:51:07.210 DEBUG [http-nio-11040-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
5. SELECT /* TodoMapper.xml : getTodoDetail */
                todo_id,
                color,
                checked,
               content
        FROM tb_todo td
        WHERE td.shop_id=2 and
            todo_dt='2025-04-17'
 {executed in 1 msec}
2025-04-17 21:51:07.215 INFO  [http-nio-11040-exec-6] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/todo/detail
2025-04-17 21:51:07.215 INFO  [http-nio-11040-exec-6] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDg5NDI2NiwiZXhwIjoxNzQ0ODk0ODY2LCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.9gKPqLpoZUhuBZAxeJMGGl4HxqudLsB5VEB99agO5S8
2025-04-17 21:51:07.215 INFO  [http-nio-11040-exec-6] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/todo/detail
2025-04-17 21:51:07.217 INFO  [http-nio-11040-exec-6] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-17 21:51:07.219 DEBUG [http-nio-11040-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
6. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 2 msec}
2025-04-17 21:51:07.219 INFO  [http-nio-11040-exec-6] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-17 21:51:07.221 DEBUG [http-nio-11040-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
6. SELECT /* TodoMapper.xml : getTodoDetail */
                todo_id,
                color,
                checked,
               content
        FROM tb_todo td
        WHERE td.shop_id=2 and
            todo_dt='2025-04-17'
 {executed in 1 msec}
2025-04-17 21:51:07.226 INFO  [http-nio-11040-exec-7] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/todo/detail
2025-04-17 21:51:07.227 INFO  [http-nio-11040-exec-7] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDg5NDI2NiwiZXhwIjoxNzQ0ODk0ODY2LCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.9gKPqLpoZUhuBZAxeJMGGl4HxqudLsB5VEB99agO5S8
2025-04-17 21:51:07.227 INFO  [http-nio-11040-exec-7] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/todo/detail
2025-04-17 21:51:07.228 INFO  [http-nio-11040-exec-7] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-17 21:51:07.230 DEBUG [http-nio-11040-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
4. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 1 msec}
2025-04-17 21:51:07.230 INFO  [http-nio-11040-exec-7] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-17 21:51:07.232 DEBUG [http-nio-11040-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
4. SELECT /* TodoMapper.xml : getTodoDetail */
                todo_id,
                color,
                checked,
               content
        FROM tb_todo td
        WHERE td.shop_id=2 and
            todo_dt='2025-04-17'
 {executed in 1 msec}
2025-04-17 21:51:07.237 INFO  [http-nio-11040-exec-9] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/todo/detail
2025-04-17 21:51:07.237 INFO  [http-nio-11040-exec-9] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDg5NDI2NiwiZXhwIjoxNzQ0ODk0ODY2LCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.9gKPqLpoZUhuBZAxeJMGGl4HxqudLsB5VEB99agO5S8
2025-04-17 21:51:07.237 INFO  [http-nio-11040-exec-9] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/todo/detail
2025-04-17 21:51:07.239 INFO  [http-nio-11040-exec-9] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-17 21:51:07.241 DEBUG [http-nio-11040-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
5. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 1 msec}
2025-04-17 21:51:07.241 INFO  [http-nio-11040-exec-9] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-17 21:51:07.243 DEBUG [http-nio-11040-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
5. SELECT /* TodoMapper.xml : getTodoDetail */
                todo_id,
                color,
                checked,
               content
        FROM tb_todo td
        WHERE td.shop_id=2 and
            todo_dt='2025-04-17'
 {executed in 1 msec}
2025-04-17 21:51:07.249 INFO  [http-nio-11040-exec-4] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/todo/detail
2025-04-17 21:51:07.249 INFO  [http-nio-11040-exec-4] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDg5NDI2NiwiZXhwIjoxNzQ0ODk0ODY2LCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.9gKPqLpoZUhuBZAxeJMGGl4HxqudLsB5VEB99agO5S8
2025-04-17 21:51:07.249 INFO  [http-nio-11040-exec-4] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/todo/detail
2025-04-17 21:51:07.250 INFO  [http-nio-11040-exec-4] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-17 21:51:07.253 DEBUG [http-nio-11040-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
2. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 1 msec}
2025-04-17 21:51:07.253 INFO  [http-nio-11040-exec-4] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-17 21:51:07.255 DEBUG [http-nio-11040-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
2. SELECT /* TodoMapper.xml : getTodoDetail */
                todo_id,
                color,
                checked,
               content
        FROM tb_todo td
        WHERE td.shop_id=2 and
            todo_dt='2025-04-17'
 {executed in 1 msec}
2025-04-17 21:51:07.981 INFO  [http-nio-11040-exec-8] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/notif/count/unread
2025-04-17 21:51:07.981 INFO  [http-nio-11040-exec-8] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDg5NDI2NiwiZXhwIjoxNzQ0ODk0ODY2LCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.9gKPqLpoZUhuBZAxeJMGGl4HxqudLsB5VEB99agO5S8
2025-04-17 21:51:07.981 INFO  [http-nio-11040-exec-8] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/notif/count/unread
2025-04-17 21:51:07.983 INFO  [http-nio-11040-exec-8] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-17 21:51:07.986 DEBUG [http-nio-11040-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
2. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 2 msec}
2025-04-17 21:51:07.986 INFO  [http-nio-11040-exec-8] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-17 21:51:07.987 INFO  [http-nio-11040-exec-8] [c.momo.common.util.SecurityContextUtil] - principal: UserDetailsImpl(username=km1104rs, password=$2a$10$uXShhwl6ULOkbJe477uDWOfdiUUcu6lOSF/Dhj9xP3U1nUn/gXkc6, authorities=[ROLE_NONE])
2025-04-17 21:51:07.989 DEBUG [http-nio-11040-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
2. SELECT count(*)
        FROM tb_notification
        WHERE receiver_id = 'km1104rs'
          AND read_st = FALSE
 {executed in 2 msec}
2025-04-17 21:51:07.994 INFO  [http-nio-11040-exec-2] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/notif/count/unread
2025-04-17 21:51:07.995 INFO  [http-nio-11040-exec-2] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDg5NDI2NiwiZXhwIjoxNzQ0ODk0ODY2LCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.9gKPqLpoZUhuBZAxeJMGGl4HxqudLsB5VEB99agO5S8
2025-04-17 21:51:07.995 INFO  [http-nio-11040-exec-2] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/notif/count/unread
2025-04-17 21:51:07.996 INFO  [http-nio-11040-exec-2] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-17 21:51:07.998 DEBUG [http-nio-11040-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 1 msec}
2025-04-17 21:51:07.998 INFO  [http-nio-11040-exec-2] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-17 21:51:07.999 INFO  [http-nio-11040-exec-2] [c.momo.common.util.SecurityContextUtil] - principal: UserDetailsImpl(username=km1104rs, password=$2a$10$uXShhwl6ULOkbJe477uDWOfdiUUcu6lOSF/Dhj9xP3U1nUn/gXkc6, authorities=[ROLE_NONE])
2025-04-17 21:51:08.001 DEBUG [http-nio-11040-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT count(*)
        FROM tb_notification
        WHERE receiver_id = 'km1104rs'
          AND read_st = FALSE
 {executed in 0 msec}
2025-04-17 21:51:08.640 INFO  [http-nio-11040-exec-10] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/user/staff/inner/all/except-self
2025-04-17 21:51:08.640 INFO  [http-nio-11040-exec-10] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDg5NDI2NiwiZXhwIjoxNzQ0ODk0ODY2LCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.9gKPqLpoZUhuBZAxeJMGGl4HxqudLsB5VEB99agO5S8
2025-04-17 21:51:08.640 INFO  [http-nio-11040-exec-5] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/notif/count/unread
2025-04-17 21:51:08.640 INFO  [http-nio-11040-exec-10] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/user/staff/inner/all/except-self
2025-04-17 21:51:08.640 INFO  [http-nio-11040-exec-5] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDg5NDI2NiwiZXhwIjoxNzQ0ODk0ODY2LCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.9gKPqLpoZUhuBZAxeJMGGl4HxqudLsB5VEB99agO5S8
2025-04-17 21:51:08.640 INFO  [http-nio-11040-exec-5] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/notif/count/unread
2025-04-17 21:51:08.642 INFO  [http-nio-11040-exec-5] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-17 21:51:08.642 INFO  [http-nio-11040-exec-10] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-17 21:51:08.645 DEBUG [http-nio-11040-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 1 msec}
2025-04-17 21:51:08.645 DEBUG [http-nio-11040-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
3. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 1 msec}
2025-04-17 21:51:08.646 INFO  [http-nio-11040-exec-5] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-17 21:51:08.646 INFO  [http-nio-11040-exec-10] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-17 21:51:08.646 INFO  [http-nio-11040-exec-5] [c.momo.common.util.SecurityContextUtil] - principal: UserDetailsImpl(username=km1104rs, password=$2a$10$uXShhwl6ULOkbJe477uDWOfdiUUcu6lOSF/Dhj9xP3U1nUn/gXkc6, authorities=[ROLE_NONE])
2025-04-17 21:51:08.647 INFO  [http-nio-11040-exec-10] [c.momo.common.util.SecurityContextUtil] - principal: UserDetailsImpl(username=km1104rs, password=$2a$10$uXShhwl6ULOkbJe477uDWOfdiUUcu6lOSF/Dhj9xP3U1nUn/gXkc6, authorities=[ROLE_NONE])
2025-04-17 21:51:08.650 DEBUG [http-nio-11040-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
3. SELECT count(*)
        FROM tb_notification
        WHERE receiver_id = 'km1104rs'
          AND read_st = FALSE
 {executed in 2 msec}
2025-04-17 21:51:08.651 DEBUG [http-nio-11040-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. WITH sale as (
            SELECT sf.staff_id as id,
                    sf.role,
                    ac.name,
                    ac.tel,
                    ac.email,
                    sf.start_dt,
                    ac.last_login_dt,
                    sf.shop_id,
                    sf.approval_st
            from tb_staff sf
            left outer join tb_account ac on ac.id = sf.staff_id
            where sf.shop_id = 2 and
                  sf.approval_st != 2 and
                  sf.staff_id != 'km1104rs'
        ), search as (
            SELECT *
            from sale
            WHERE

            1=1

        ), result as (
            SELECT json_arrayagg(json_object(
                'id',id,
                'role',role,
                'name',name,
                'tel',tel,
                'email',email,
                'last_login_dt',last_login_dt,
                'start_dt',start_dt,
                'shop_id',shop_id,
                'approval_st',approval_st
                ))
            from search
        )

        select (
            select IFNULL(count(*),0)
            from sale
        ) as total_cnt,
            (
                select *
                from result
        ) as list
 {executed in 1 msec}
2025-04-17 21:51:08.670 INFO  [http-nio-11040-exec-1] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/notif/count/unread
2025-04-17 21:51:08.670 INFO  [http-nio-11040-exec-1] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDg5NDI2NiwiZXhwIjoxNzQ0ODk0ODY2LCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.9gKPqLpoZUhuBZAxeJMGGl4HxqudLsB5VEB99agO5S8
2025-04-17 21:51:08.670 INFO  [http-nio-11040-exec-1] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/notif/count/unread
2025-04-17 21:51:08.679 INFO  [http-nio-11040-exec-1] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-17 21:51:08.683 DEBUG [http-nio-11040-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
2. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 1 msec}
2025-04-17 21:51:08.683 INFO  [http-nio-11040-exec-1] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-17 21:51:08.684 INFO  [http-nio-11040-exec-1] [c.momo.common.util.SecurityContextUtil] - principal: UserDetailsImpl(username=km1104rs, password=$2a$10$uXShhwl6ULOkbJe477uDWOfdiUUcu6lOSF/Dhj9xP3U1nUn/gXkc6, authorities=[ROLE_NONE])
2025-04-17 21:51:08.687 DEBUG [http-nio-11040-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
2. SELECT count(*)
        FROM tb_notification
        WHERE receiver_id = 'km1104rs'
          AND read_st = FALSE
 {executed in 2 msec}
2025-04-17 21:51:10.030 INFO  [http-nio-11040-exec-3] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/notif/count/unread
2025-04-17 21:51:10.030 INFO  [http-nio-11040-exec-3] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDg5NDI2NiwiZXhwIjoxNzQ0ODk0ODY2LCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.9gKPqLpoZUhuBZAxeJMGGl4HxqudLsB5VEB99agO5S8
2025-04-17 21:51:10.030 INFO  [http-nio-11040-exec-3] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/notif/count/unread
2025-04-17 21:51:10.033 INFO  [http-nio-11040-exec-3] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-17 21:51:10.036 DEBUG [http-nio-11040-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
5. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 2 msec}
2025-04-17 21:51:10.037 INFO  [http-nio-11040-exec-3] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-17 21:51:10.038 INFO  [http-nio-11040-exec-3] [c.momo.common.util.SecurityContextUtil] - principal: UserDetailsImpl(username=km1104rs, password=$2a$10$uXShhwl6ULOkbJe477uDWOfdiUUcu6lOSF/Dhj9xP3U1nUn/gXkc6, authorities=[ROLE_NONE])
2025-04-17 21:51:10.041 DEBUG [http-nio-11040-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
5. SELECT count(*)
        FROM tb_notification
        WHERE receiver_id = 'km1104rs'
          AND read_st = FALSE
 {executed in 2 msec}
2025-04-17 21:51:11.354 INFO  [http-nio-11040-exec-6] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/notif/count/unread
2025-04-17 21:51:11.354 INFO  [http-nio-11040-exec-6] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDg5NDI2NiwiZXhwIjoxNzQ0ODk0ODY2LCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.9gKPqLpoZUhuBZAxeJMGGl4HxqudLsB5VEB99agO5S8
2025-04-17 21:51:11.354 INFO  [http-nio-11040-exec-6] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/notif/count/unread
2025-04-17 21:51:11.357 INFO  [http-nio-11040-exec-6] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-17 21:51:11.361 DEBUG [http-nio-11040-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
6. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 3 msec}
2025-04-17 21:51:11.362 INFO  [http-nio-11040-exec-6] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-17 21:51:11.362 INFO  [http-nio-11040-exec-6] [c.momo.common.util.SecurityContextUtil] - principal: UserDetailsImpl(username=km1104rs, password=$2a$10$uXShhwl6ULOkbJe477uDWOfdiUUcu6lOSF/Dhj9xP3U1nUn/gXkc6, authorities=[ROLE_NONE])
2025-04-17 21:51:11.367 DEBUG [http-nio-11040-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
6. SELECT count(*)
        FROM tb_notification
        WHERE receiver_id = 'km1104rs'
          AND read_st = FALSE
 {executed in 3 msec}
2025-04-17 21:51:11.556 INFO  [http-nio-11040-exec-7] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/notif/count/unread
2025-04-17 21:51:11.556 INFO  [http-nio-11040-exec-7] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDg5NDI2NiwiZXhwIjoxNzQ0ODk0ODY2LCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.9gKPqLpoZUhuBZAxeJMGGl4HxqudLsB5VEB99agO5S8
2025-04-17 21:51:11.556 INFO  [http-nio-11040-exec-7] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/notif/count/unread
2025-04-17 21:51:11.559 INFO  [http-nio-11040-exec-7] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-17 21:51:11.566 DEBUG [http-nio-11040-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
4. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 6 msec}
2025-04-17 21:51:11.567 INFO  [http-nio-11040-exec-7] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-17 21:51:11.568 INFO  [http-nio-11040-exec-7] [c.momo.common.util.SecurityContextUtil] - principal: UserDetailsImpl(username=km1104rs, password=$2a$10$uXShhwl6ULOkbJe477uDWOfdiUUcu6lOSF/Dhj9xP3U1nUn/gXkc6, authorities=[ROLE_NONE])
2025-04-17 21:51:11.576 DEBUG [http-nio-11040-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
4. SELECT count(*)
        FROM tb_notification
        WHERE receiver_id = 'km1104rs'
          AND read_st = FALSE
 {executed in 1 msec}
2025-04-17 21:51:12.170 INFO  [http-nio-11040-exec-9] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/notif/count/unread
2025-04-17 21:51:12.170 INFO  [http-nio-11040-exec-9] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDg5NDI2NiwiZXhwIjoxNzQ0ODk0ODY2LCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.9gKPqLpoZUhuBZAxeJMGGl4HxqudLsB5VEB99agO5S8
2025-04-17 21:51:12.170 INFO  [http-nio-11040-exec-9] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/notif/count/unread
2025-04-17 21:51:12.172 INFO  [http-nio-11040-exec-9] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-17 21:51:12.173 DEBUG [http-nio-11040-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
5. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 1 msec}
2025-04-17 21:51:12.174 INFO  [http-nio-11040-exec-9] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-17 21:51:12.175 INFO  [http-nio-11040-exec-9] [c.momo.common.util.SecurityContextUtil] - principal: UserDetailsImpl(username=km1104rs, password=$2a$10$uXShhwl6ULOkbJe477uDWOfdiUUcu6lOSF/Dhj9xP3U1nUn/gXkc6, authorities=[ROLE_NONE])
2025-04-17 21:51:12.178 DEBUG [http-nio-11040-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
5. SELECT count(*)
        FROM tb_notification
        WHERE receiver_id = 'km1104rs'
          AND read_st = FALSE
 {executed in 1 msec}
2025-04-17 21:51:12.186 INFO  [http-nio-11040-exec-4] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/notif/count/unread
2025-04-17 21:51:12.186 INFO  [http-nio-11040-exec-4] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDg5NDI2NiwiZXhwIjoxNzQ0ODk0ODY2LCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.9gKPqLpoZUhuBZAxeJMGGl4HxqudLsB5VEB99agO5S8
2025-04-17 21:51:12.186 INFO  [http-nio-11040-exec-4] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/notif/count/unread
2025-04-17 21:51:12.188 INFO  [http-nio-11040-exec-4] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-17 21:51:12.190 DEBUG [http-nio-11040-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
2. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 1 msec}
2025-04-17 21:51:12.191 INFO  [http-nio-11040-exec-4] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-17 21:51:12.191 INFO  [http-nio-11040-exec-4] [c.momo.common.util.SecurityContextUtil] - principal: UserDetailsImpl(username=km1104rs, password=$2a$10$uXShhwl6ULOkbJe477uDWOfdiUUcu6lOSF/Dhj9xP3U1nUn/gXkc6, authorities=[ROLE_NONE])
2025-04-17 21:51:12.194 DEBUG [http-nio-11040-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
2. SELECT count(*)
        FROM tb_notification
        WHERE receiver_id = 'km1104rs'
          AND read_st = FALSE
 {executed in 1 msec}
2025-04-17 21:51:13.315 INFO  [http-nio-11040-exec-8] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/notif/count/unread
2025-04-17 21:51:13.321 INFO  [http-nio-11040-exec-8] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDg5NDI2NiwiZXhwIjoxNzQ0ODk0ODY2LCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.9gKPqLpoZUhuBZAxeJMGGl4HxqudLsB5VEB99agO5S8
2025-04-17 21:51:13.321 INFO  [http-nio-11040-exec-8] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/notif/count/unread
2025-04-17 21:51:13.324 INFO  [http-nio-11040-exec-8] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-17 21:51:13.327 DEBUG [http-nio-11040-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
2. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 1 msec}
2025-04-17 21:51:13.327 INFO  [http-nio-11040-exec-8] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-17 21:51:13.328 INFO  [http-nio-11040-exec-8] [c.momo.common.util.SecurityContextUtil] - principal: UserDetailsImpl(username=km1104rs, password=$2a$10$uXShhwl6ULOkbJe477uDWOfdiUUcu6lOSF/Dhj9xP3U1nUn/gXkc6, authorities=[ROLE_NONE])
2025-04-17 21:51:13.331 DEBUG [http-nio-11040-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
2. SELECT count(*)
        FROM tb_notification
        WHERE receiver_id = 'km1104rs'
          AND read_st = FALSE
 {executed in 1 msec}
2025-04-17 21:51:13.519 INFO  [http-nio-11040-exec-2] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/notif/count/unread
2025-04-17 21:51:13.520 INFO  [http-nio-11040-exec-2] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDg5NDI2NiwiZXhwIjoxNzQ0ODk0ODY2LCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.9gKPqLpoZUhuBZAxeJMGGl4HxqudLsB5VEB99agO5S8
2025-04-17 21:51:13.520 INFO  [http-nio-11040-exec-2] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/notif/count/unread
2025-04-17 21:51:13.526 INFO  [http-nio-11040-exec-2] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-17 21:51:13.530 DEBUG [http-nio-11040-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 2 msec}
2025-04-17 21:51:13.531 INFO  [http-nio-11040-exec-2] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-17 21:51:13.533 INFO  [http-nio-11040-exec-2] [c.momo.common.util.SecurityContextUtil] - principal: UserDetailsImpl(username=km1104rs, password=$2a$10$uXShhwl6ULOkbJe477uDWOfdiUUcu6lOSF/Dhj9xP3U1nUn/gXkc6, authorities=[ROLE_NONE])
2025-04-17 21:51:13.541 DEBUG [http-nio-11040-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT count(*)
        FROM tb_notification
        WHERE receiver_id = 'km1104rs'
          AND read_st = FALSE
 {executed in 4 msec}
2025-04-17 21:51:13.589 INFO  [http-nio-11040-exec-5] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/notif/count/unread
2025-04-17 21:51:13.589 INFO  [http-nio-11040-exec-5] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDg5NDI2NiwiZXhwIjoxNzQ0ODk0ODY2LCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.9gKPqLpoZUhuBZAxeJMGGl4HxqudLsB5VEB99agO5S8
2025-04-17 21:51:13.589 INFO  [http-nio-11040-exec-5] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/notif/count/unread
2025-04-17 21:51:13.592 INFO  [http-nio-11040-exec-5] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-17 21:51:13.594 DEBUG [http-nio-11040-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
3. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 1 msec}
2025-04-17 21:51:13.594 INFO  [http-nio-11040-exec-5] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-17 21:51:13.594 INFO  [http-nio-11040-exec-5] [c.momo.common.util.SecurityContextUtil] - principal: UserDetailsImpl(username=km1104rs, password=$2a$10$uXShhwl6ULOkbJe477uDWOfdiUUcu6lOSF/Dhj9xP3U1nUn/gXkc6, authorities=[ROLE_NONE])
2025-04-17 21:51:13.596 DEBUG [http-nio-11040-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
3. SELECT count(*)
        FROM tb_notification
        WHERE receiver_id = 'km1104rs'
          AND read_st = FALSE
 {executed in 1 msec}
2025-04-17 21:51:14.320 INFO  [http-nio-11040-exec-10] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/notif/count/unread
2025-04-17 21:51:14.320 INFO  [http-nio-11040-exec-10] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDg5NDI2NiwiZXhwIjoxNzQ0ODk0ODY2LCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.9gKPqLpoZUhuBZAxeJMGGl4HxqudLsB5VEB99agO5S8
2025-04-17 21:51:14.320 INFO  [http-nio-11040-exec-10] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/notif/count/unread
2025-04-17 21:51:14.321 INFO  [http-nio-11040-exec-10] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-17 21:51:14.323 DEBUG [http-nio-11040-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 1 msec}
2025-04-17 21:51:14.323 INFO  [http-nio-11040-exec-10] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-17 21:51:14.324 INFO  [http-nio-11040-exec-10] [c.momo.common.util.SecurityContextUtil] - principal: UserDetailsImpl(username=km1104rs, password=$2a$10$uXShhwl6ULOkbJe477uDWOfdiUUcu6lOSF/Dhj9xP3U1nUn/gXkc6, authorities=[ROLE_NONE])
2025-04-17 21:51:14.326 DEBUG [http-nio-11040-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT count(*)
        FROM tb_notification
        WHERE receiver_id = 'km1104rs'
          AND read_st = FALSE
 {executed in 1 msec}
2025-04-17 21:51:14.921 INFO  [http-nio-11040-exec-1] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/notif/count/unread
2025-04-17 21:51:14.921 INFO  [http-nio-11040-exec-1] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDg5NDI2NiwiZXhwIjoxNzQ0ODk0ODY2LCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.9gKPqLpoZUhuBZAxeJMGGl4HxqudLsB5VEB99agO5S8
2025-04-17 21:51:14.921 INFO  [http-nio-11040-exec-1] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/notif/count/unread
2025-04-17 21:51:14.923 INFO  [http-nio-11040-exec-1] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-17 21:51:14.927 DEBUG [http-nio-11040-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
2. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 2 msec}
2025-04-17 21:51:14.928 INFO  [http-nio-11040-exec-1] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-17 21:51:14.929 INFO  [http-nio-11040-exec-1] [c.momo.common.util.SecurityContextUtil] - principal: UserDetailsImpl(username=km1104rs, password=$2a$10$uXShhwl6ULOkbJe477uDWOfdiUUcu6lOSF/Dhj9xP3U1nUn/gXkc6, authorities=[ROLE_NONE])
2025-04-17 21:51:14.933 DEBUG [http-nio-11040-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
2. SELECT count(*)
        FROM tb_notification
        WHERE receiver_id = 'km1104rs'
          AND read_st = FALSE
 {executed in 2 msec}
2025-04-17 21:51:14.951 INFO  [http-nio-11040-exec-3] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/notif/count/unread
2025-04-17 21:51:14.951 INFO  [http-nio-11040-exec-3] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDg5NDI2NiwiZXhwIjoxNzQ0ODk0ODY2LCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.9gKPqLpoZUhuBZAxeJMGGl4HxqudLsB5VEB99agO5S8
2025-04-17 21:51:14.951 INFO  [http-nio-11040-exec-3] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/notif/count/unread
2025-04-17 21:51:14.953 INFO  [http-nio-11040-exec-3] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-17 21:51:14.956 DEBUG [http-nio-11040-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
5. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 2 msec}
2025-04-17 21:51:14.957 INFO  [http-nio-11040-exec-3] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-17 21:51:14.958 INFO  [http-nio-11040-exec-3] [c.momo.common.util.SecurityContextUtil] - principal: UserDetailsImpl(username=km1104rs, password=$2a$10$uXShhwl6ULOkbJe477uDWOfdiUUcu6lOSF/Dhj9xP3U1nUn/gXkc6, authorities=[ROLE_NONE])
2025-04-17 21:51:14.960 DEBUG [http-nio-11040-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
5. SELECT count(*)
        FROM tb_notification
        WHERE receiver_id = 'km1104rs'
          AND read_st = FALSE
 {executed in 1 msec}
2025-04-17 21:51:15.990 INFO  [http-nio-11040-exec-6] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/notif/count/unread
2025-04-17 21:51:15.990 INFO  [http-nio-11040-exec-6] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDg5NDI2NiwiZXhwIjoxNzQ0ODk0ODY2LCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.9gKPqLpoZUhuBZAxeJMGGl4HxqudLsB5VEB99agO5S8
2025-04-17 21:51:15.990 INFO  [http-nio-11040-exec-6] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/notif/count/unread
2025-04-17 21:51:15.991 INFO  [http-nio-11040-exec-7] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/sale/graph/ct/d
2025-04-17 21:51:15.991 INFO  [http-nio-11040-exec-7] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDg5NDI2NiwiZXhwIjoxNzQ0ODk0ODY2LCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.9gKPqLpoZUhuBZAxeJMGGl4HxqudLsB5VEB99agO5S8
2025-04-17 21:51:15.991 INFO  [http-nio-11040-exec-7] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/sale/graph/ct/d
2025-04-17 21:51:15.992 INFO  [http-nio-11040-exec-7] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-17 21:51:15.993 INFO  [http-nio-11040-exec-9] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/sale/graph/ct/d
2025-04-17 21:51:15.993 INFO  [http-nio-11040-exec-9] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDg5NDI2NiwiZXhwIjoxNzQ0ODk0ODY2LCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.9gKPqLpoZUhuBZAxeJMGGl4HxqudLsB5VEB99agO5S8
2025-04-17 21:51:15.993 INFO  [http-nio-11040-exec-9] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/sale/graph/ct/d
2025-04-17 21:51:15.993 INFO  [http-nio-11040-exec-4] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/sale/graph/ct/select/0
2025-04-17 21:51:15.993 INFO  [http-nio-11040-exec-4] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDg5NDI2NiwiZXhwIjoxNzQ0ODk0ODY2LCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.9gKPqLpoZUhuBZAxeJMGGl4HxqudLsB5VEB99agO5S8
2025-04-17 21:51:15.993 INFO  [http-nio-11040-exec-4] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/sale/graph/ct/select/0
2025-04-17 21:51:15.995 INFO  [http-nio-11040-exec-8] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/sale/graph/stat/select/0
2025-04-17 21:51:15.995 INFO  [http-nio-11040-exec-8] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDg5NDI2NiwiZXhwIjoxNzQ0ODk0ODY2LCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.9gKPqLpoZUhuBZAxeJMGGl4HxqudLsB5VEB99agO5S8
2025-04-17 21:51:15.995 INFO  [http-nio-11040-exec-8] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/sale/graph/stat/select/0
2025-04-17 21:51:15.996 INFO  [http-nio-11040-exec-6] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-17 21:51:15.996 INFO  [http-nio-11040-exec-4] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-17 21:51:15.996 INFO  [http-nio-11040-exec-2] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/sale/graph/ratio/select/0
2025-04-17 21:51:15.996 INFO  [http-nio-11040-exec-2] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDg5NDI2NiwiZXhwIjoxNzQ0ODk0ODY2LCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.9gKPqLpoZUhuBZAxeJMGGl4HxqudLsB5VEB99agO5S8
2025-04-17 21:51:15.996 INFO  [http-nio-11040-exec-2] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/sale/graph/ratio/select/0
2025-04-17 21:51:15.998 INFO  [http-nio-11040-exec-2] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-17 21:51:15.998 INFO  [http-nio-11040-exec-8] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-17 21:51:15.999 INFO  [http-nio-11040-exec-9] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-17 21:51:16.002 DEBUG [http-nio-11040-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
2. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 2 msec}
2025-04-17 21:51:16.002 DEBUG [http-nio-11040-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
6. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 2 msec}
2025-04-17 21:51:16.003 INFO  [http-nio-11040-exec-6] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-17 21:51:16.003 INFO  [http-nio-11040-exec-4] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-17 21:51:16.004 INFO  [http-nio-11040-exec-6] [c.momo.common.util.SecurityContextUtil] - principal: UserDetailsImpl(username=km1104rs, password=$2a$10$uXShhwl6ULOkbJe477uDWOfdiUUcu6lOSF/Dhj9xP3U1nUn/gXkc6, authorities=[ROLE_NONE])
2025-04-17 21:51:16.007 DEBUG [http-nio-11040-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
4. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 7 msec}
2025-04-17 21:51:16.007 DEBUG [http-nio-11040-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 6 msec}
2025-04-17 21:51:16.008 INFO  [http-nio-11040-exec-7] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-17 21:51:16.008 INFO  [http-nio-11040-exec-2] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-17 21:51:16.009 DEBUG [http-nio-11040-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
5. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 8 msec}
2025-04-17 21:51:16.010 INFO  [http-nio-11040-exec-9] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-17 21:51:16.010 DEBUG [http-nio-11040-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
3. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 10 msec}
2025-04-17 21:51:16.011 INFO  [http-nio-11040-exec-8] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-17 21:51:16.011 DEBUG [http-nio-11040-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
6. SELECT count(*)
        FROM tb_notification
        WHERE receiver_id = 'km1104rs'
          AND read_st = FALSE
 {executed in 5 msec}
2025-04-17 21:51:16.011 DEBUG [http-nio-11040-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. with recursive istm_range as (
            select 0 as i
            union all
            select i+1
            from istm_range
            where i<5
        ), base as (
            select ct_istm
            from tb_sale
            where shop_id=2 and

                actv_dt between '2025-04-01' and '2025-04-30'
        ), final as (
            select i as istm,
                   IFNULL(count(base.ct_istm),0) as cnt
            from istm_range
                     left outer join base on base.ct_istm=istm_range.i
            group by i
            order by istm desc
        )

        select json_arrayagg(istm) as type,
               json_arrayagg(cnt) as cnt,
               json_arrayagg(IF((
                      select IFNULL(count(ct_istm), 0)
                      from base
                  ) = 0 or cnt = 0, 0, TRUNCATE((cnt/(
                   select IFNULL(count(ct_istm), 0)
                   from base
               )) * 100, 1))) as per
        from final
 {executed in 1 msec}
2025-04-17 21:51:16.012 DEBUG [http-nio-11040-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
2. with recursive group_generation as (
            select 0 as g
            union all
            select g+1
            from group_generation
            where g < 8
        ), group_weekday as (
            select 0 as g
            union all
            select g+1
            from group_weekday
            where g < 6
        ),  sale as (
            select weekday(actv_dt) as days,
                   device_id,
                   cust_cd,
                   sale_id
            from tb_sale
            where shop_id=2 and

                device_id is not null and
                actv_dt between '2025-04-01' and '2025-04-30'
        ), sale_gene as (
            select sale_id,
                   (
                       case
                           when length(cust_cd) = 6 then floor((year(curdate()) - concat((
                                 case
                                     when substring(cust_cd, 1,2) > '44' then '19'
                                     when substring(cust_cd, 1,2) <= '44' then '20'
                                     end
                                 ),substring(cust_cd,1,2))) / 10)
                           when length(cust_cd) != 6 then null
                           end
                       ) as generation
            from sale
        ), generation as (
            select g,
                   device_id
            from group_generation g
                     left outer join sale_gene sg on g.g=sg.generation
                     left outer join sale s on s.sale_id=sg.sale_id
        ), weekdays as (
            select g,
                   device_id
            from group_weekday w
                     left outer join sale s on s.days=w.g
        )

        select IFNULL(count(device_id),0) as avg
        from generation
        group by g
 {executed in 4 msec}
2025-04-17 21:51:16.013 DEBUG [http-nio-11040-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
4. set @limit_cond := (
               case 'd'
                   when 'h' then '2000-01-24'
                   when 'd' then '2025-04-17'
                   when 'w' then '2025-04-17'
                   when 'm' then date_sub('2025-04-17', interval 1 month)
               end
        );

        with recursive org_date_table as (
            select (
                       case
                           when 'd' = 'h' then '2000-01-01'
                           when 'd' != 'h' then '2025-01-17'
                           end
                       ) as it
            union all
            select (
                       case 'd'
                           when 'h' then date_add(it, interval 1 day)
                           when 'd' then date_add(it, interval 1 day)
                           when 'w' then date_add(it, interval 1 week)
                           when 'm' then date_add(it, interval 1 month)
                           end
                       ) as it
            from org_date_table
            where it < @limit_cond
        ), date_table as (
            select
                year(it) as _year,
                (
                    case 'd'
                        when 'h' then day(it)
                        when 'd' then it
                        when 'w' then week(it)
                        when 'm' then month(it)
                        end
                    ) as dt
            from org_date_table
        ),  date_sale as (
            select year(actv_dt) _year,
                   month(actv_dt) as m,
                   week(actv_dt) as w,
                   actv_dt as d,
                   hour(regi_dt) as h,
                   tb_sale.*
            from tb_sale
            where shop_id=2 and

                actv_dt between '2025-01-17' and (
                    case
                        when 'd' = 'h' then '2025-01-17'
                        when 'd' != 'h' then '2025-04-17'
                        end
                    )
        ), final as (
            select count(device_id) as cnt
            from date_table dd
                     left outer join date_sale ds on dd._year=ds._year and
                                                     d = dt
            group by dd._year, dd.dt
        )

        select
            (
                select json_arrayagg(cnt)
                from final
            ) as value,
            (
                select json_arrayagg(date_format(it, '%Y-%m-%d'))
                from org_date_table
            ) as date
 {executed in 2 msec}
2025-04-17 21:51:16.015 DEBUG [http-nio-11040-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
5. set @limit_cond := (
               case 'd'
                   when 'h' then '2000-01-24'
                   when 'd' then '2025-04-16'
                   when 'w' then '2025-04-16'
                   when 'm' then date_sub('2025-04-16', interval 1 month)
               end
        );

        with recursive org_date_table as (
            select (
                       case
                           when 'd' = 'h' then '2000-01-01'
                           when 'd' != 'h' then '2025-04-10'
                           end
                       ) as it
            union all
            select (
                       case 'd'
                           when 'h' then date_add(it, interval 1 day)
                           when 'd' then date_add(it, interval 1 day)
                           when 'w' then date_add(it, interval 1 week)
                           when 'm' then date_add(it, interval 1 month)
                           end
                       ) as it
            from org_date_table
            where it < @limit_cond
        ), date_table as (
            select
                year(it) as _year,
                (
                    case 'd'
                        when 'h' then day(it)
                        when 'd' then it
                        when 'w' then week(it)
                        when 'm' then month(it)
                        end
                    ) as dt
            from org_date_table
        ),  date_sale as (
            select year(actv_dt) _year,
                   month(actv_dt) as m,
                   week(actv_dt) as w,
                   actv_dt as d,
                   hour(regi_dt) as h,
                   tb_sale.*
            from tb_sale
            where shop_id=2 and

                actv_dt between '2025-04-10' and (
                    case
                        when 'd' = 'h' then '2025-04-10'
                        when 'd' != 'h' then '2025-04-16'
                        end
                    )
        ), final as (
            select count(device_id) as cnt
            from date_table dd
                     left outer join date_sale ds on dd._year=ds._year and
                                                     d = dt
            group by dd._year, dd.dt
        )

        select
            (
                select json_arrayagg(cnt)
                from final
            ) as value,
            (
                select json_arrayagg(date_format(it, '%Y-%m-%d'))
                from org_date_table
            ) as date
 {executed in 3 msec}
2025-04-17 21:51:16.019 DEBUG [http-nio-11040-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
3. with base as (select device_id,
                             (SELECT device_nm
                              FROM tb_device
                              WHERE tb_device.device_id = sl.device_id)      as device,
                             sd_id,
                             (SELECT sd_nm
                              FROM tb_second_device
                              WHERE tb_second_device.sd_id = sl.sd_id)       as sec_device,
                             ct_actv_plan,
                             (SELECT ct_plan_nm
                              FROM tb_ct_plan
                              WHERE tb_ct_plan.ct_plan_id = sl.ct_actv_plan) as actv_plan
                      from tb_sale sl
                      where shop_id = 2 and

                        actv_dt between '2025-04-01' and '2025-04-30'),
             device as (SELECT device                   as name,
                               count(device_id) as count
                        from base
                        where device_id is not null
                        group by device),
             sec_device as (SELECT sec_device                   as name,
                                   count(sec_device) as count
                            from base
                            where sd_id is not null
                            group by sec_device),
             actv_plan as (SELECT actv_plan                   as name,
                                  count(actv_plan) as count
                           from base
                           where ct_actv_plan is not null
                           group by actv_plan),
             total as (select count('device') as cnt
                       from base
                       where 'device' is not null
             )

        select name,
               count,
               (
                   IF((select cnt
                       from total) = 0 or count = 0, 0, TRUNCATE(
                              (count / (
                                  select cnt
                                  from total
                              )
                                  ) * 100, 1))
                   ) as per
        from device
        order by per desc
        limit 5
 {executed in 6 msec}
2025-04-17 21:51:16.020 INFO  [http-nio-11040-exec-10] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/sale/graph/ct/d
2025-04-17 21:51:16.020 INFO  [http-nio-11040-exec-10] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDg5NDI2NiwiZXhwIjoxNzQ0ODk0ODY2LCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.9gKPqLpoZUhuBZAxeJMGGl4HxqudLsB5VEB99agO5S8
2025-04-17 21:51:16.020 INFO  [http-nio-11040-exec-10] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/sale/graph/ct/d
2025-04-17 21:51:16.020 INFO  [http-nio-11040-exec-1] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/sale/graph/ct/d
2025-04-17 21:51:16.020 INFO  [http-nio-11040-exec-1] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDg5NDI2NiwiZXhwIjoxNzQ0ODk0ODY2LCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.9gKPqLpoZUhuBZAxeJMGGl4HxqudLsB5VEB99agO5S8
2025-04-17 21:51:16.020 INFO  [http-nio-11040-exec-3] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/sale/graph/ct/select/0
2025-04-17 21:51:16.020 INFO  [http-nio-11040-exec-1] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/sale/graph/ct/d
2025-04-17 21:51:16.020 INFO  [http-nio-11040-exec-3] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDg5NDI2NiwiZXhwIjoxNzQ0ODk0ODY2LCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.9gKPqLpoZUhuBZAxeJMGGl4HxqudLsB5VEB99agO5S8
2025-04-17 21:51:16.020 INFO  [http-nio-11040-exec-3] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/sale/graph/ct/select/0
2025-04-17 21:51:16.021 INFO  [http-nio-11040-exec-5] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/sale/graph/summary
2025-04-17 21:51:16.021 INFO  [http-nio-11040-exec-5] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDg5NDI2NiwiZXhwIjoxNzQ0ODk0ODY2LCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.9gKPqLpoZUhuBZAxeJMGGl4HxqudLsB5VEB99agO5S8
2025-04-17 21:51:16.021 INFO  [http-nio-11040-exec-2] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/sale/graph/stat/select/0
2025-04-17 21:51:16.021 INFO  [http-nio-11040-exec-5] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/sale/graph/summary
2025-04-17 21:51:16.021 INFO  [http-nio-11040-exec-2] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDg5NDI2NiwiZXhwIjoxNzQ0ODk0ODY2LCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.9gKPqLpoZUhuBZAxeJMGGl4HxqudLsB5VEB99agO5S8
2025-04-17 21:51:16.021 INFO  [http-nio-11040-exec-2] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/sale/graph/stat/select/0
2025-04-17 21:51:16.022 INFO  [http-nio-11040-exec-3] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-17 21:51:16.022 INFO  [http-nio-11040-exec-5] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-17 21:51:16.022 INFO  [http-nio-11040-exec-10] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-17 21:51:16.022 INFO  [http-nio-11040-exec-1] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-17 21:51:16.023 INFO  [http-nio-11040-exec-2] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-17 21:51:16.024 DEBUG [http-nio-11040-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
2. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 0 msec}
2025-04-17 21:51:16.024 DEBUG [http-nio-11040-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
5. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 2 msec}
2025-04-17 21:51:16.024 DEBUG [http-nio-11040-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 0 msec}
2025-04-17 21:51:16.029 DEBUG [http-nio-11040-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
4. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 1 msec}
2025-04-17 21:51:16.029 INFO  [http-nio-11040-exec-2] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-17 21:51:16.029 INFO  [http-nio-11040-exec-1] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-17 21:51:16.029 INFO  [http-nio-11040-exec-10] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-17 21:51:16.029 INFO  [http-nio-11040-exec-3] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-17 21:51:16.029 DEBUG [http-nio-11040-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
3. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 7 msec}
2025-04-17 21:51:16.029 INFO  [http-nio-11040-exec-5] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-17 21:51:16.030 INFO  [http-nio-11040-exec-6] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/sale/graph/ratio/select/0
2025-04-17 21:51:16.030 INFO  [http-nio-11040-exec-6] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDg5NDI2NiwiZXhwIjoxNzQ0ODk0ODY2LCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.9gKPqLpoZUhuBZAxeJMGGl4HxqudLsB5VEB99agO5S8
2025-04-17 21:51:16.030 INFO  [http-nio-11040-exec-6] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/sale/graph/ratio/select/0
2025-04-17 21:51:16.031 INFO  [http-nio-11040-exec-6] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-17 21:51:16.032 DEBUG [http-nio-11040-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
2. set @limit_cond := (
               case 'd'
                   when 'h' then '2000-01-24'
                   when 'd' then '2025-04-16'
                   when 'w' then '2025-04-16'
                   when 'm' then date_sub('2025-04-16', interval 1 month)
               end
        );

        with recursive org_date_table as (
            select (
                       case
                           when 'd' = 'h' then '2000-01-01'
                           when 'd' != 'h' then '2025-04-10'
                           end
                       ) as it
            union all
            select (
                       case 'd'
                           when 'h' then date_add(it, interval 1 day)
                           when 'd' then date_add(it, interval 1 day)
                           when 'w' then date_add(it, interval 1 week)
                           when 'm' then date_add(it, interval 1 month)
                           end
                       ) as it
            from org_date_table
            where it < @limit_cond
        ), date_table as (
            select
                year(it) as _year,
                (
                    case 'd'
                        when 'h' then day(it)
                        when 'd' then it
                        when 'w' then week(it)
                        when 'm' then month(it)
                        end
                    ) as dt
            from org_date_table
        ),  date_sale as (
            select year(actv_dt) _year,
                   month(actv_dt) as m,
                   week(actv_dt) as w,
                   actv_dt as d,
                   hour(regi_dt) as h,
                   tb_sale.*
            from tb_sale
            where shop_id=2 and

                    seller_id='km1104rs' and

                actv_dt between '2025-04-10' and (
                    case
                        when 'd' = 'h' then '2025-04-10'
                        when 'd' != 'h' then '2025-04-16'
                        end
                    )
        ), final as (
            select count(device_id) as cnt
            from date_table dd
                     left outer join date_sale ds on dd._year=ds._year and
                                                     d = dt
            group by dd._year, dd.dt
        )

        select
            (
                select json_arrayagg(cnt)
                from final
            ) as value,
            (
                select json_arrayagg(date_format(it, '%Y-%m-%d'))
                from org_date_table
            ) as date
 {executed in 1 msec}
2025-04-17 21:51:16.032 DEBUG [http-nio-11040-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. set @limit_cond := (
               case 'd'
                   when 'h' then '2000-01-24'
                   when 'd' then '2025-04-17'
                   when 'w' then '2025-04-17'
                   when 'm' then date_sub('2025-04-17', interval 1 month)
               end
        );

        with recursive org_date_table as (
            select (
                       case
                           when 'd' = 'h' then '2000-01-01'
                           when 'd' != 'h' then '2025-01-17'
                           end
                       ) as it
            union all
            select (
                       case 'd'
                           when 'h' then date_add(it, interval 1 day)
                           when 'd' then date_add(it, interval 1 day)
                           when 'w' then date_add(it, interval 1 week)
                           when 'm' then date_add(it, interval 1 month)
                           end
                       ) as it
            from org_date_table
            where it < @limit_cond
        ), date_table as (
            select
                year(it) as _year,
                (
                    case 'd'
                        when 'h' then day(it)
                        when 'd' then it
                        when 'w' then week(it)
                        when 'm' then month(it)
                        end
                    ) as dt
            from org_date_table
        ),  date_sale as (
            select year(actv_dt) _year,
                   month(actv_dt) as m,
                   week(actv_dt) as w,
                   actv_dt as d,
                   hour(regi_dt) as h,
                   tb_sale.*
            from tb_sale
            where shop_id=2 and

                    seller_id='km1104rs' and

                actv_dt between '2025-01-17' and (
                    case
                        when 'd' = 'h' then '2025-01-17'
                        when 'd' != 'h' then '2025-04-17'
                        end
                    )
        ), final as (
            select count(device_id) as cnt
            from date_table dd
                     left outer join date_sale ds on dd._year=ds._year and
                                                     d = dt
            group by dd._year, dd.dt
        )

        select
            (
                select json_arrayagg(cnt)
                from final
            ) as value,
            (
                select json_arrayagg(date_format(it, '%Y-%m-%d'))
                from org_date_table
            ) as date
 {executed in 2 msec}
2025-04-17 21:51:16.032 DEBUG [http-nio-11040-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
6. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 1 msec}
2025-04-17 21:51:16.032 INFO  [http-nio-11040-exec-6] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-17 21:51:16.033 DEBUG [http-nio-11040-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
5. with recursive group_generation as (
            select 0 as g
            union all
            select g+1
            from group_generation
            where g < 8
        ), group_weekday as (
            select 0 as g
            union all
            select g+1
            from group_weekday
            where g < 6
        ),  sale as (
            select weekday(actv_dt) as days,
                   device_id,
                   cust_cd,
                   sale_id
            from tb_sale
            where shop_id=2 and

                      seller_id='km1104rs' and

                device_id is not null and
                actv_dt between '2025-04-01' and '2025-04-30'
        ), sale_gene as (
            select sale_id,
                   (
                       case
                           when length(cust_cd) = 6 then floor((year(curdate()) - concat((
                                 case
                                     when substring(cust_cd, 1,2) > '44' then '19'
                                     when substring(cust_cd, 1,2) <= '44' then '20'
                                     end
                                 ),substring(cust_cd,1,2))) / 10)
                           when length(cust_cd) != 6 then null
                           end
                       ) as generation
            from sale
        ), generation as (
            select g,
                   device_id
            from group_generation g
                     left outer join sale_gene sg on g.g=sg.generation
                     left outer join sale s on s.sale_id=sg.sale_id
        ), weekdays as (
            select g,
                   device_id
            from group_weekday w
                     left outer join sale s on s.days=w.g
        )

        select IFNULL(count(device_id),0) as avg
        from generation
        group by g
 {executed in 1 msec}
2025-04-17 21:51:16.035 DEBUG [http-nio-11040-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
4. with base as (select device_id,
                             (SELECT device_nm
                              FROM tb_device
                              WHERE tb_device.device_id = sl.device_id)      as device,
                             sd_id,
                             (SELECT sd_nm
                              FROM tb_second_device
                              WHERE tb_second_device.sd_id = sl.sd_id)       as sec_device,
                             ct_actv_plan,
                             (SELECT ct_plan_nm
                              FROM tb_ct_plan
                              WHERE tb_ct_plan.ct_plan_id = sl.ct_actv_plan) as actv_plan
                      from tb_sale sl
                      where shop_id = 2 and

                                seller_id='km1104rs' and

                        actv_dt between '2025-04-01' and '2025-04-30'),
             device as (SELECT device                   as name,
                               count(device_id) as count
                        from base
                        where device_id is not null
                        group by device),
             sec_device as (SELECT sec_device                   as name,
                                   count(sec_device) as count
                            from base
                            where sd_id is not null
                            group by sec_device),
             actv_plan as (SELECT actv_plan                   as name,
                                  count(actv_plan) as count
                           from base
                           where ct_actv_plan is not null
                           group by actv_plan),
             total as (select count('device') as cnt
                       from base
                       where 'device' is not null
             )

        select name,
               count,
               (
                   IF((select cnt
                       from total) = 0 or count = 0, 0, TRUNCATE(
                              (count / (
                                  select cnt
                                  from total
                              )
                                  ) * 100, 1))
                   ) as per
        from device
        order by per desc
        limit 5
 {executed in 3 msec}
2025-04-17 21:51:16.039 DEBUG [http-nio-11040-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
6. with recursive istm_range as (
            select 0 as i
            union all
            select i+1
            from istm_range
            where i<5
        ), base as (
            select ct_istm
            from tb_sale
            where shop_id=2 and

                        seller_id='km1104rs' and

                actv_dt between '2025-04-01' and '2025-04-30'
        ), final as (
            select i as istm,
                   IFNULL(count(base.ct_istm),0) as cnt
            from istm_range
                     left outer join base on base.ct_istm=istm_range.i
            group by i
            order by istm desc
        )

        select json_arrayagg(istm) as type,
               json_arrayagg(cnt) as cnt,
               json_arrayagg(IF((
                      select IFNULL(count(ct_istm), 0)
                      from base
                  ) = 0 or cnt = 0, 0, TRUNCATE((cnt/(
                   select IFNULL(count(ct_istm), 0)
                   from base
               )) * 100, 1))) as per
        from final
 {executed in 4 msec}
2025-04-17 21:51:16.039 INFO  [http-nio-11040-exec-4] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/sale/graph/summary
2025-04-17 21:51:16.039 INFO  [http-nio-11040-exec-4] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDg5NDI2NiwiZXhwIjoxNzQ0ODk0ODY2LCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.9gKPqLpoZUhuBZAxeJMGGl4HxqudLsB5VEB99agO5S8
2025-04-17 21:51:16.039 INFO  [http-nio-11040-exec-4] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/sale/graph/summary
2025-04-17 21:51:16.030 INFO  [http-nio-11040-exec-5] [com.momo.api.SaleController] - summary: CommonVO(provider=null, date=null, year=null, month=null, day=null, selectType=null, range=null, dateType=null, prevFromYmd=null, prevToYmd=null, currFromYmd=null, currToYmd=null, fromYmd=2024-10-01, toYmd=2025-04-01, fromYm=null, toYm=null, prevDate=null, currDate=null)
2025-04-17 21:51:16.040 INFO  [http-nio-11040-exec-4] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-17 21:51:16.042 DEBUG [http-nio-11040-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
2. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 1 msec}
2025-04-17 21:51:16.042 INFO  [http-nio-11040-exec-4] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-17 21:51:16.043 INFO  [http-nio-11040-exec-4] [com.momo.api.SaleController] - summary: CommonVO(provider=null, date=null, year=null, month=null, day=null, selectType=null, range=null, dateType=null, prevFromYmd=null, prevToYmd=null, currFromYmd=null, currToYmd=null, fromYmd=2024-10-01, toYmd=2025-04-01, fromYm=null, toYm=null, prevDate=null, currDate=null)
2025-04-17 21:51:16.062 DEBUG [http-nio-11040-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
3. #         월별 날짜 구하기
        with recursive month_range as (
            select '2024-10-01' as d
            union all
            select date_add(d, interval 1 month) as d
            from month_range
            where date_add(d, interval 1 month) < '2025-04-01'
        ), months as(
            select month(d) as m
            from month_range
        ), filtered_sale as ( # 판매일보 초벌
            select month(actv_dt) as actv_month,
                   device_id,
                   internet_plan,
                   tv_plan,
                    exsvc_id,
                   total_cms,
                   wt_cms,
                   sale_id,
                   sd_id,
                    shop_id
            from tb_sale
            where shop_id=2 and

                actv_dt between '2024-10-01' and date_add('2025-04-01', interval 1 month)
        ), ct_graph as ( # 무선 그래프 데이터
            SELECT m,
                   count(device_id) as cnt
            FROM months
                     LEFT OUTER JOIN filtered_sale on actv_month = m and
                                                      device_id is not null
            group by m
        ), internet_graph as ( # 인터넷 그래프 데이터
            SELECT m,
                   count(internet_plan) as cnt
            FROM months
                     LEFT OUTER JOIN filtered_sale on actv_month = m  and
                                                      internet_plan is not null
            group by m
        ), tv_graph as ( # TV 그래프 데이터
            SELECT m,
                   count(tv_plan) as cnt
            FROM months
                     LEFT OUTER JOIN filtered_sale on actv_month = m  and
                                                      tv_plan is not null
            group by m
        ), card as ( # 카드 데이터
            SELECT m,
                   (
                    select count(*)
                    from tb_sale_card sc
                    left outer join filtered_sale fs on fs.shop_id = sc.shop_id and
                                                        fs.sale_id = sc.sale_id
                   )  as cnt
            FROM months
                     LEFT OUTER JOIN filtered_sale on actv_month = m
            group by m
        ), exsvc as ( # 부가서비스 데이터
            SELECT m,
                   count(exsvc_id) as cnt
            FROM months
                     LEFT OUTER JOIN filtered_sale on actv_month = m  and
                                                      exsvc_id is not null
            group by m
        ), tc_graph as ( # 총 이익 그래프 데이터
            SELECT m,
                   IFNULL(sum(total_cms), 0) as cnt
            FROM months
                     LEFT OUTER JOIN filtered_sale on actv_month = m
            group by m
        ), avg_margin_graph as ( # 개인 평균 마진 그래프 데이터
            SELECT m,
                   IFNULL(avg(total_cms), 0) as cnt
            FROM months
                     LEFT OUTER JOIN filtered_sale on actv_month = m and
                                                      device_id is not null
            group by m
        ), ud_graph as ( # 중고 개통 그래프 데이터
            SELECT m,
                   count(ud_id) as cnt
            FROM months
                     LEFT OUTER JOIN filtered_sale on actv_month = m
                     LEFT OUTER JOIN tb_sale_used_device sud on sud.sale_id=filtered_sale.sale_id
            group by m
        ), sec_graph as ( # 세컨 그래프 데이터
            SELECT m,
                   count(sd_id) as cnt
            FROM months
                     LEFT OUTER JOIN filtered_sale on actv_month = m and
                                                      sd_id != 0
            group by m
        ), diff_ct as (
            select
                (
                    select cnt
                    from ct_graph
                    limit 4, 1
                ) as prv,
                (
                    select cnt
                    from ct_graph
                    limit 5,1
                ) as curr
            from dual
        ), diff_internet as (
            select
                (
                    select cnt
                    from internet_graph
                    limit 4,1
                ) as prv,
                (
                    select cnt
                    from internet_graph
                    limit 5,1
                ) as curr
            from dual
        ), diff_tv as (
            select
                (
                    select cnt
                    from tv_graph
                    limit 4,1
                ) as prv,
                (
                    select cnt
                    from tv_graph
                    limit 5,1
                ) as curr
            from dual
        ), diff_card as (
            select
                (
                    select cnt
                    from card
                    limit 4,1
                ) as prv,
                (
                    select cnt
                    from card
                    limit 5,1
                ) as curr
            from dual
        ), diff_exsvc as (
            select
                (
                    select cnt
                    from exsvc
                    limit 4,1
                ) as prv,
                (
                    select cnt
                    from exsvc
                    limit 5,1
                ) as curr
            from dual
        ), diff_tc as (
            select
                (
                    select cnt
                    from tc_graph
                    limit 4,1
                ) as prv,
                (
                    select cnt
                    from tc_graph
                    limit 5,1
                ) as curr
            from dual
        ) , diff_margin as (
            select
                (
                    select cnt
                    from avg_margin_graph
                    limit 4,1
                ) as prv,
                (
                    select cnt
                    from avg_margin_graph
                    limit 5,1
                ) as curr
            from dual
        ), diff_ud as (
            select
                (
                    select cnt
                    from ud_graph
                    limit 4,1
                ) as prv,
                (
                    select cnt
                    from ud_graph
                    limit 5,1
                ) as curr
            from dual
        ) , diff_sec as (
            select
                (
                    select cnt
                    from sec_graph
                    limit 4,1
                ) as prv,
                (
                    select cnt
                    from sec_graph
                    limit 5,1
                ) as curr
            from dual
        ), final as (
            select
                curr,
                prv,
                (
                    select json_arrayagg(cnt)
                    from ct_graph
                ) as list
            from diff_ct
            union all
            select
                curr,
                prv,
                (
                    select json_arrayagg(cnt)
                    from internet_graph
                ) as list
            from diff_internet
            union all
            select
                curr,
                prv,
                (
                    select json_arrayagg(cnt)
                    from tv_graph
                ) as list
            from diff_tv
             union all
            select
                curr,
                prv,
                (
                    select json_arrayagg(cnt)
                    from card
                ) as list
            from diff_card
             union all
            select
                curr,
                prv,
                (
                    select json_arrayagg(cnt)
                    from exsvc
                ) as list
            from diff_exsvc
            union all
            select
                curr,
                prv,
                (
                    select json_arrayagg(cnt)
                    from tc_graph
                ) as list
            from diff_tc
            union all
            select
                curr,
                prv,
                (
                    select json_arrayagg(cnt)
                    from avg_margin_graph
                ) as list
            from diff_margin
            union all
            select
                curr,
                prv,
                (
                    select json_arrayagg(cnt)
                    from ud_graph
                ) as list
            from diff_ud
            union all
            select
                curr,
                prv,
                (
                    select json_arrayagg(cnt)
                    from sec_graph
                ) as list
            from diff_sec
        )

        select FLOOR(curr) as value,
               (
                   CASE
                       WHEN curr = 0 and prv = 0 THEN 0
                       WHEN prv != 0 and curr = 0 THEN -100
                       WHEN prv = 0 and curr != 0 THEN 100
                       WHEN curr != 0 and prv != 0 THEN TRUNCATE(((curr/prv)-1)*100, 1)
                       END
                   ) as per,
               list
        from final
 {executed in 17 msec}
2025-04-17 21:51:16.068 DEBUG [http-nio-11040-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
2. #         월별 날짜 구하기
        with recursive month_range as (
            select '2024-10-01' as d
            union all
            select date_add(d, interval 1 month) as d
            from month_range
            where date_add(d, interval 1 month) < '2025-04-01'
        ), months as(
            select month(d) as m
            from month_range
        ), filtered_sale as ( # 판매일보 초벌
            select month(actv_dt) as actv_month,
                   device_id,
                   internet_plan,
                   tv_plan,
                    exsvc_id,
                   total_cms,
                   wt_cms,
                   sale_id,
                   sd_id,
                    shop_id
            from tb_sale
            where shop_id=2 and

                    seller_id='km1104rs' and

                actv_dt between '2024-10-01' and date_add('2025-04-01', interval 1 month)
        ), ct_graph as ( # 무선 그래프 데이터
            SELECT m,
                   count(device_id) as cnt
            FROM months
                     LEFT OUTER JOIN filtered_sale on actv_month = m and
                                                      device_id is not null
            group by m
        ), internet_graph as ( # 인터넷 그래프 데이터
            SELECT m,
                   count(internet_plan) as cnt
            FROM months
                     LEFT OUTER JOIN filtered_sale on actv_month = m  and
                                                      internet_plan is not null
            group by m
        ), tv_graph as ( # TV 그래프 데이터
            SELECT m,
                   count(tv_plan) as cnt
            FROM months
                     LEFT OUTER JOIN filtered_sale on actv_month = m  and
                                                      tv_plan is not null
            group by m
        ), card as ( # 카드 데이터
            SELECT m,
                   (
                    select count(*)
                    from tb_sale_card sc
                    left outer join filtered_sale fs on fs.shop_id = sc.shop_id and
                                                        fs.sale_id = sc.sale_id
                   )  as cnt
            FROM months
                     LEFT OUTER JOIN filtered_sale on actv_month = m
            group by m
        ), exsvc as ( # 부가서비스 데이터
            SELECT m,
                   count(exsvc_id) as cnt
            FROM months
                     LEFT OUTER JOIN filtered_sale on actv_month = m  and
                                                      exsvc_id is not null
            group by m
        ), tc_graph as ( # 총 이익 그래프 데이터
            SELECT m,
                   IFNULL(sum(total_cms), 0) as cnt
            FROM months
                     LEFT OUTER JOIN filtered_sale on actv_month = m
            group by m
        ), avg_margin_graph as ( # 개인 평균 마진 그래프 데이터
            SELECT m,
                   IFNULL(avg(total_cms), 0) as cnt
            FROM months
                     LEFT OUTER JOIN filtered_sale on actv_month = m and
                                                      device_id is not null
            group by m
        ), ud_graph as ( # 중고 개통 그래프 데이터
            SELECT m,
                   count(ud_id) as cnt
            FROM months
                     LEFT OUTER JOIN filtered_sale on actv_month = m
                     LEFT OUTER JOIN tb_sale_used_device sud on sud.sale_id=filtered_sale.sale_id
            group by m
        ), sec_graph as ( # 세컨 그래프 데이터
            SELECT m,
                   count(sd_id) as cnt
            FROM months
                     LEFT OUTER JOIN filtered_sale on actv_month = m and
                                                      sd_id != 0
            group by m
        ), diff_ct as (
            select
                (
                    select cnt
                    from ct_graph
                    limit 4, 1
                ) as prv,
                (
                    select cnt
                    from ct_graph
                    limit 5,1
                ) as curr
            from dual
        ), diff_internet as (
            select
                (
                    select cnt
                    from internet_graph
                    limit 4,1
                ) as prv,
                (
                    select cnt
                    from internet_graph
                    limit 5,1
                ) as curr
            from dual
        ), diff_tv as (
            select
                (
                    select cnt
                    from tv_graph
                    limit 4,1
                ) as prv,
                (
                    select cnt
                    from tv_graph
                    limit 5,1
                ) as curr
            from dual
        ), diff_card as (
            select
                (
                    select cnt
                    from card
                    limit 4,1
                ) as prv,
                (
                    select cnt
                    from card
                    limit 5,1
                ) as curr
            from dual
        ), diff_exsvc as (
            select
                (
                    select cnt
                    from exsvc
                    limit 4,1
                ) as prv,
                (
                    select cnt
                    from exsvc
                    limit 5,1
                ) as curr
            from dual
        ), diff_tc as (
            select
                (
                    select cnt
                    from tc_graph
                    limit 4,1
                ) as prv,
                (
                    select cnt
                    from tc_graph
                    limit 5,1
                ) as curr
            from dual
        ) , diff_margin as (
            select
                (
                    select cnt
                    from avg_margin_graph
                    limit 4,1
                ) as prv,
                (
                    select cnt
                    from avg_margin_graph
                    limit 5,1
                ) as curr
            from dual
        ), diff_ud as (
            select
                (
                    select cnt
                    from ud_graph
                    limit 4,1
                ) as prv,
                (
                    select cnt
                    from ud_graph
                    limit 5,1
                ) as curr
            from dual
        ) , diff_sec as (
            select
                (
                    select cnt
                    from sec_graph
                    limit 4,1
                ) as prv,
                (
                    select cnt
                    from sec_graph
                    limit 5,1
                ) as curr
            from dual
        ), final as (
            select
                curr,
                prv,
                (
                    select json_arrayagg(cnt)
                    from ct_graph
                ) as list
            from diff_ct
            union all
            select
                curr,
                prv,
                (
                    select json_arrayagg(cnt)
                    from internet_graph
                ) as list
            from diff_internet
            union all
            select
                curr,
                prv,
                (
                    select json_arrayagg(cnt)
                    from tv_graph
                ) as list
            from diff_tv
             union all
            select
                curr,
                prv,
                (
                    select json_arrayagg(cnt)
                    from card
                ) as list
            from diff_card
             union all
            select
                curr,
                prv,
                (
                    select json_arrayagg(cnt)
                    from exsvc
                ) as list
            from diff_exsvc
            union all
            select
                curr,
                prv,
                (
                    select json_arrayagg(cnt)
                    from tc_graph
                ) as list
            from diff_tc
            union all
            select
                curr,
                prv,
                (
                    select json_arrayagg(cnt)
                    from avg_margin_graph
                ) as list
            from diff_margin
            union all
            select
                curr,
                prv,
                (
                    select json_arrayagg(cnt)
                    from ud_graph
                ) as list
            from diff_ud
            union all
            select
                curr,
                prv,
                (
                    select json_arrayagg(cnt)
                    from sec_graph
                ) as list
            from diff_sec
        )

        select FLOOR(curr) as value,
               (
                   CASE
                       WHEN curr = 0 and prv = 0 THEN 0
                       WHEN prv != 0 and curr = 0 THEN -100
                       WHEN prv = 0 and curr != 0 THEN 100
                       WHEN curr != 0 and prv != 0 THEN TRUNCATE(((curr/prv)-1)*100, 1)
                       END
                   ) as per,
               list
        from final
 {executed in 17 msec}
2025-04-17 21:51:16.076 INFO  [http-nio-11040-exec-9] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/sale/graph/stat/select/0
2025-04-17 21:51:16.076 INFO  [http-nio-11040-exec-7] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/sale/graph/ct/select/0
2025-04-17 21:51:16.076 INFO  [http-nio-11040-exec-9] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDg5NDI2NiwiZXhwIjoxNzQ0ODk0ODY2LCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.9gKPqLpoZUhuBZAxeJMGGl4HxqudLsB5VEB99agO5S8
2025-04-17 21:51:16.076 INFO  [http-nio-11040-exec-7] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDg5NDI2NiwiZXhwIjoxNzQ0ODk0ODY2LCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.9gKPqLpoZUhuBZAxeJMGGl4HxqudLsB5VEB99agO5S8
2025-04-17 21:51:16.076 INFO  [http-nio-11040-exec-9] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/sale/graph/stat/select/0
2025-04-17 21:51:16.076 INFO  [http-nio-11040-exec-7] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/sale/graph/ct/select/0
2025-04-17 21:51:16.077 INFO  [http-nio-11040-exec-8] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/sale/graph/ratio/select/0
2025-04-17 21:51:16.077 INFO  [http-nio-11040-exec-8] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDg5NDI2NiwiZXhwIjoxNzQ0ODk0ODY2LCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.9gKPqLpoZUhuBZAxeJMGGl4HxqudLsB5VEB99agO5S8
2025-04-17 21:51:16.077 INFO  [http-nio-11040-exec-8] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/sale/graph/ratio/select/0
2025-04-17 21:51:16.078 INFO  [http-nio-11040-exec-7] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-17 21:51:16.078 INFO  [http-nio-11040-exec-9] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-17 21:51:16.078 INFO  [http-nio-11040-exec-8] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-17 21:51:16.079 DEBUG [http-nio-11040-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
5. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 1 msec}
2025-04-17 21:51:16.079 DEBUG [http-nio-11040-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
4. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 1 msec}
2025-04-17 21:51:16.079 DEBUG [http-nio-11040-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
3. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 1 msec}
2025-04-17 21:51:16.079 INFO  [http-nio-11040-exec-9] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-17 21:51:16.079 INFO  [http-nio-11040-exec-7] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-17 21:51:16.079 INFO  [http-nio-11040-exec-8] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-17 21:51:16.084 DEBUG [http-nio-11040-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
3. with recursive istm_range as (
            select 0 as i
            union all
            select i+1
            from istm_range
            where i<5
        ), base as (
            select ct_istm
            from tb_sale
            where shop_id=2 and

                        seller_id='km1104rs' and

                actv_dt between '2025-04-01' and '2025-04-30'
        ), final as (
            select i as istm,
                   IFNULL(count(base.ct_istm),0) as cnt
            from istm_range
                     left outer join base on base.ct_istm=istm_range.i
            group by i
            order by istm desc
        )

        select json_arrayagg(istm) as type,
               json_arrayagg(cnt) as cnt,
               json_arrayagg(IF((
                      select IFNULL(count(ct_istm), 0)
                      from base
                  ) = 0 or cnt = 0, 0, TRUNCATE((cnt/(
                   select IFNULL(count(ct_istm), 0)
                   from base
               )) * 100, 1))) as per
        from final
 {executed in 1 msec}
2025-04-17 21:51:16.084 DEBUG [http-nio-11040-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
4. with recursive group_generation as (
            select 0 as g
            union all
            select g+1
            from group_generation
            where g < 8
        ), group_weekday as (
            select 0 as g
            union all
            select g+1
            from group_weekday
            where g < 6
        ),  sale as (
            select weekday(actv_dt) as days,
                   device_id,
                   cust_cd,
                   sale_id
            from tb_sale
            where shop_id=2 and

                      seller_id='km1104rs' and

                device_id is not null and
                actv_dt between '2025-04-01' and '2025-04-30'
        ), sale_gene as (
            select sale_id,
                   (
                       case
                           when length(cust_cd) = 6 then floor((year(curdate()) - concat((
                                 case
                                     when substring(cust_cd, 1,2) > '44' then '19'
                                     when substring(cust_cd, 1,2) <= '44' then '20'
                                     end
                                 ),substring(cust_cd,1,2))) / 10)
                           when length(cust_cd) != 6 then null
                           end
                       ) as generation
            from sale
        ), generation as (
            select g,
                   device_id
            from group_generation g
                     left outer join sale_gene sg on g.g=sg.generation
                     left outer join sale s on s.sale_id=sg.sale_id
        ), weekdays as (
            select g,
                   device_id
            from group_weekday w
                     left outer join sale s on s.days=w.g
        )

        select IFNULL(count(device_id),0) as avg
        from generation
        group by g
 {executed in 1 msec}
2025-04-17 21:51:16.085 DEBUG [http-nio-11040-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
5. with base as (select device_id,
                             (SELECT device_nm
                              FROM tb_device
                              WHERE tb_device.device_id = sl.device_id)      as device,
                             sd_id,
                             (SELECT sd_nm
                              FROM tb_second_device
                              WHERE tb_second_device.sd_id = sl.sd_id)       as sec_device,
                             ct_actv_plan,
                             (SELECT ct_plan_nm
                              FROM tb_ct_plan
                              WHERE tb_ct_plan.ct_plan_id = sl.ct_actv_plan) as actv_plan
                      from tb_sale sl
                      where shop_id = 2 and

                                seller_id='km1104rs' and

                        actv_dt between '2025-04-01' and '2025-04-30'),
             device as (SELECT device                   as name,
                               count(device_id) as count
                        from base
                        where device_id is not null
                        group by device),
             sec_device as (SELECT sec_device                   as name,
                                   count(sec_device) as count
                            from base
                            where sd_id is not null
                            group by sec_device),
             actv_plan as (SELECT actv_plan                   as name,
                                  count(actv_plan) as count
                           from base
                           where ct_actv_plan is not null
                           group by actv_plan),
             total as (select count('device') as cnt
                       from base
                       where 'device' is not null
             )

        select name,
               count,
               (
                   IF((select cnt
                       from total) = 0 or count = 0, 0, TRUNCATE(
                              (count / (
                                  select cnt
                                  from total
                              )
                                  ) * 100, 1))
                   ) as per
        from device
        order by per desc
        limit 5
 {executed in 2 msec}
2025-04-17 21:51:16.093 INFO  [http-nio-11040-exec-1] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/sale/graph/stat/select/0
2025-04-17 21:51:16.093 INFO  [http-nio-11040-exec-3] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/sale/graph/ratio/select/0
2025-04-17 21:51:16.093 INFO  [http-nio-11040-exec-10] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/sale/graph/ct/select/0
2025-04-17 21:51:16.093 INFO  [http-nio-11040-exec-1] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDg5NDI2NiwiZXhwIjoxNzQ0ODk0ODY2LCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.9gKPqLpoZUhuBZAxeJMGGl4HxqudLsB5VEB99agO5S8
2025-04-17 21:51:16.093 INFO  [http-nio-11040-exec-10] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDg5NDI2NiwiZXhwIjoxNzQ0ODk0ODY2LCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.9gKPqLpoZUhuBZAxeJMGGl4HxqudLsB5VEB99agO5S8
2025-04-17 21:51:16.093 INFO  [http-nio-11040-exec-3] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDg5NDI2NiwiZXhwIjoxNzQ0ODk0ODY2LCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.9gKPqLpoZUhuBZAxeJMGGl4HxqudLsB5VEB99agO5S8
2025-04-17 21:51:16.093 INFO  [http-nio-11040-exec-3] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/sale/graph/ratio/select/0
2025-04-17 21:51:16.093 INFO  [http-nio-11040-exec-1] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/sale/graph/stat/select/0
2025-04-17 21:51:16.093 INFO  [http-nio-11040-exec-10] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/sale/graph/ct/select/0
2025-04-17 21:51:16.094 INFO  [http-nio-11040-exec-10] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-17 21:51:16.094 INFO  [http-nio-11040-exec-3] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-17 21:51:16.095 INFO  [http-nio-11040-exec-1] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-17 21:51:16.096 DEBUG [http-nio-11040-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 1 msec}
2025-04-17 21:51:16.096 DEBUG [http-nio-11040-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
5. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 1 msec}
2025-04-17 21:51:16.096 DEBUG [http-nio-11040-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
2. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 0 msec}
2025-04-17 21:51:16.096 INFO  [http-nio-11040-exec-10] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-17 21:51:16.096 INFO  [http-nio-11040-exec-1] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-17 21:51:16.096 INFO  [http-nio-11040-exec-3] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-17 21:51:16.099 DEBUG [http-nio-11040-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. with recursive group_generation as (
            select 0 as g
            union all
            select g+1
            from group_generation
            where g < 8
        ), group_weekday as (
            select 0 as g
            union all
            select g+1
            from group_weekday
            where g < 6
        ),  sale as (
            select weekday(actv_dt) as days,
                   device_id,
                   cust_cd,
                   sale_id
            from tb_sale
            where shop_id=2 and

                      seller_id='km1104rs' and

                device_id is not null and
                actv_dt between '2025-04-01' and '2025-04-30'
        ), sale_gene as (
            select sale_id,
                   (
                       case
                           when length(cust_cd) = 6 then floor((year(curdate()) - concat((
                                 case
                                     when substring(cust_cd, 1,2) > '44' then '19'
                                     when substring(cust_cd, 1,2) <= '44' then '20'
                                     end
                                 ),substring(cust_cd,1,2))) / 10)
                           when length(cust_cd) != 6 then null
                           end
                       ) as generation
            from sale
        ), generation as (
            select g,
                   device_id
            from group_generation g
                     left outer join sale_gene sg on g.g=sg.generation
                     left outer join sale s on s.sale_id=sg.sale_id
        ), weekdays as (
            select g,
                   device_id
            from group_weekday w
                     left outer join sale s on s.days=w.g
        )

        select IFNULL(count(device_id),0) as avg
        from generation
        group by g
 {executed in 1 msec}
2025-04-17 21:51:16.099 DEBUG [http-nio-11040-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
5. with recursive istm_range as (
            select 0 as i
            union all
            select i+1
            from istm_range
            where i<5
        ), base as (
            select ct_istm
            from tb_sale
            where shop_id=2 and

                        seller_id='km1104rs' and

                actv_dt between '2025-04-01' and '2025-04-30'
        ), final as (
            select i as istm,
                   IFNULL(count(base.ct_istm),0) as cnt
            from istm_range
                     left outer join base on base.ct_istm=istm_range.i
            group by i
            order by istm desc
        )

        select json_arrayagg(istm) as type,
               json_arrayagg(cnt) as cnt,
               json_arrayagg(IF((
                      select IFNULL(count(ct_istm), 0)
                      from base
                  ) = 0 or cnt = 0, 0, TRUNCATE((cnt/(
                   select IFNULL(count(ct_istm), 0)
                   from base
               )) * 100, 1))) as per
        from final
 {executed in 1 msec}
2025-04-17 21:51:16.100 DEBUG [http-nio-11040-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
2. with base as (select device_id,
                             (SELECT device_nm
                              FROM tb_device
                              WHERE tb_device.device_id = sl.device_id)      as device,
                             sd_id,
                             (SELECT sd_nm
                              FROM tb_second_device
                              WHERE tb_second_device.sd_id = sl.sd_id)       as sec_device,
                             ct_actv_plan,
                             (SELECT ct_plan_nm
                              FROM tb_ct_plan
                              WHERE tb_ct_plan.ct_plan_id = sl.ct_actv_plan) as actv_plan
                      from tb_sale sl
                      where shop_id = 2 and

                                seller_id='km1104rs' and

                        actv_dt between '2025-04-01' and '2025-04-30'),
             device as (SELECT device                   as name,
                               count(device_id) as count
                        from base
                        where device_id is not null
                        group by device),
             sec_device as (SELECT sec_device                   as name,
                                   count(sec_device) as count
                            from base
                            where sd_id is not null
                            group by sec_device),
             actv_plan as (SELECT actv_plan                   as name,
                                  count(actv_plan) as count
                           from base
                           where ct_actv_plan is not null
                           group by actv_plan),
             total as (select count('device') as cnt
                       from base
                       where 'device' is not null
             )

        select name,
               count,
               (
                   IF((select cnt
                       from total) = 0 or count = 0, 0, TRUNCATE(
                              (count / (
                                  select cnt
                                  from total
                              )
                                  ) * 100, 1))
                   ) as per
        from device
        order by per desc
        limit 5
 {executed in 2 msec}
2025-04-17 21:51:18.755 INFO  [http-nio-11040-exec-2] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/sale/graph/stat/select/1
2025-04-17 21:51:18.756 INFO  [http-nio-11040-exec-2] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDg5NDI2NiwiZXhwIjoxNzQ0ODk0ODY2LCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.9gKPqLpoZUhuBZAxeJMGGl4HxqudLsB5VEB99agO5S8
2025-04-17 21:51:18.756 INFO  [http-nio-11040-exec-2] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/sale/graph/stat/select/1
2025-04-17 21:51:18.760 INFO  [http-nio-11040-exec-2] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-17 21:51:18.762 DEBUG [http-nio-11040-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
4. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 2 msec}
2025-04-17 21:51:18.763 INFO  [http-nio-11040-exec-2] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-17 21:51:18.769 DEBUG [http-nio-11040-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
4. with base as (select device_id,
                             (SELECT device_nm
                              FROM tb_device
                              WHERE tb_device.device_id = sl.device_id)      as device,
                             sd_id,
                             (SELECT sd_nm
                              FROM tb_second_device
                              WHERE tb_second_device.sd_id = sl.sd_id)       as sec_device,
                             ct_actv_plan,
                             (SELECT ct_plan_nm
                              FROM tb_ct_plan
                              WHERE tb_ct_plan.ct_plan_id = sl.ct_actv_plan) as actv_plan
                      from tb_sale sl
                      where shop_id = 2 and

                                seller_id='km1104rs' and

                        actv_dt between '2025-04-01' and '2025-04-30'),
             device as (SELECT device                   as name,
                               count(device_id) as count
                        from base
                        where device_id is not null
                        group by device),
             sec_device as (SELECT sec_device                   as name,
                                   count(sec_device) as count
                            from base
                            where sd_id is not null
                            group by sec_device),
             actv_plan as (SELECT actv_plan                   as name,
                                  count(actv_plan) as count
                           from base
                           where ct_actv_plan is not null
                           group by actv_plan),
             total as (select count('actv_plan') as cnt
                       from base
                       where 'actv_plan' is not null
             )

        select name,
               count,
               (
                   IF((select cnt
                       from total) = 0 or count = 0, 0, TRUNCATE(
                              (count / (
                                  select cnt
                                  from total
                              )
                                  ) * 100, 1))
                   ) as per
        from actv_plan
        order by per desc
        limit 5
 {executed in 2 msec}
2025-04-17 21:51:19.174 INFO  [http-nio-11040-exec-6] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/sale/graph/stat/select/2
2025-04-17 21:51:19.174 INFO  [http-nio-11040-exec-6] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDg5NDI2NiwiZXhwIjoxNzQ0ODk0ODY2LCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.9gKPqLpoZUhuBZAxeJMGGl4HxqudLsB5VEB99agO5S8
2025-04-17 21:51:19.174 INFO  [http-nio-11040-exec-6] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/sale/graph/stat/select/2
2025-04-17 21:51:19.177 INFO  [http-nio-11040-exec-6] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-17 21:51:19.183 DEBUG [http-nio-11040-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
6. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 4 msec}
2025-04-17 21:51:19.184 INFO  [http-nio-11040-exec-6] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-17 21:51:19.192 DEBUG [http-nio-11040-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
6. with base as (select device_id,
                             (SELECT device_nm
                              FROM tb_device
                              WHERE tb_device.device_id = sl.device_id)      as device,
                             sd_id,
                             (SELECT sd_nm
                              FROM tb_second_device
                              WHERE tb_second_device.sd_id = sl.sd_id)       as sec_device,
                             ct_actv_plan,
                             (SELECT ct_plan_nm
                              FROM tb_ct_plan
                              WHERE tb_ct_plan.ct_plan_id = sl.ct_actv_plan) as actv_plan
                      from tb_sale sl
                      where shop_id = 2 and

                                seller_id='km1104rs' and

                        actv_dt between '2025-04-01' and '2025-04-30'),
             device as (SELECT device                   as name,
                               count(device_id) as count
                        from base
                        where device_id is not null
                        group by device),
             sec_device as (SELECT sec_device                   as name,
                                   count(sec_device) as count
                            from base
                            where sd_id is not null
                            group by sec_device),
             actv_plan as (SELECT actv_plan                   as name,
                                  count(actv_plan) as count
                           from base
                           where ct_actv_plan is not null
                           group by actv_plan),
             total as (select count('sec_device') as cnt
                       from base
                       where 'sec_device' is not null
             )

        select name,
               count,
               (
                   IF((select cnt
                       from total) = 0 or count = 0, 0, TRUNCATE(
                              (count / (
                                  select cnt
                                  from total
                              )
                                  ) * 100, 1))
                   ) as per
        from sec_device
        order by per desc
        limit 5
 {executed in 3 msec}
2025-04-17 21:51:21.866 INFO  [http-nio-11040-exec-5] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/sale/graph/ct/select/1
2025-04-17 21:51:21.866 INFO  [http-nio-11040-exec-5] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDg5NDI2NiwiZXhwIjoxNzQ0ODk0ODY2LCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.9gKPqLpoZUhuBZAxeJMGGl4HxqudLsB5VEB99agO5S8
2025-04-17 21:51:21.866 INFO  [http-nio-11040-exec-5] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/sale/graph/ct/select/1
2025-04-17 21:51:21.868 INFO  [http-nio-11040-exec-5] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-17 21:51:21.871 DEBUG [http-nio-11040-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
3. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 2 msec}
2025-04-17 21:51:21.871 INFO  [http-nio-11040-exec-5] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-17 21:51:21.876 DEBUG [http-nio-11040-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
3. with recursive group_generation as (
            select 0 as g
            union all
            select g+1
            from group_generation
            where g < 8
        ), group_weekday as (
            select 0 as g
            union all
            select g+1
            from group_weekday
            where g < 6
        ),  sale as (
            select weekday(actv_dt) as days,
                   device_id,
                   cust_cd,
                   sale_id
            from tb_sale
            where shop_id=2 and

                      seller_id='km1104rs' and

                device_id is not null and
                actv_dt between '2025-04-01' and '2025-04-30'
        ), sale_gene as (
            select sale_id,
                   (
                       case
                           when length(cust_cd) = 6 then floor((year(curdate()) - concat((
                                 case
                                     when substring(cust_cd, 1,2) > '44' then '19'
                                     when substring(cust_cd, 1,2) <= '44' then '20'
                                     end
                                 ),substring(cust_cd,1,2))) / 10)
                           when length(cust_cd) != 6 then null
                           end
                       ) as generation
            from sale
        ), generation as (
            select g,
                   device_id
            from group_generation g
                     left outer join sale_gene sg on g.g=sg.generation
                     left outer join sale s on s.sale_id=sg.sale_id
        ), weekdays as (
            select g,
                   device_id
            from group_weekday w
                     left outer join sale s on s.days=w.g
        )

        select IFNULL(count(device_id),0) as avg
        from weekdays
        group by g
 {executed in 1 msec}
2025-04-17 21:51:22.314 INFO  [http-nio-11040-exec-4] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/sale/graph/ct/select/0
2025-04-17 21:51:22.314 INFO  [http-nio-11040-exec-4] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDg5NDI2NiwiZXhwIjoxNzQ0ODk0ODY2LCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.9gKPqLpoZUhuBZAxeJMGGl4HxqudLsB5VEB99agO5S8
2025-04-17 21:51:22.314 INFO  [http-nio-11040-exec-4] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/sale/graph/ct/select/0
2025-04-17 21:51:22.316 INFO  [http-nio-11040-exec-4] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-17 21:51:22.318 DEBUG [http-nio-11040-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
2. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 1 msec}
2025-04-17 21:51:22.319 INFO  [http-nio-11040-exec-4] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-17 21:51:22.322 DEBUG [http-nio-11040-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
2. with recursive group_generation as (
            select 0 as g
            union all
            select g+1
            from group_generation
            where g < 8
        ), group_weekday as (
            select 0 as g
            union all
            select g+1
            from group_weekday
            where g < 6
        ),  sale as (
            select weekday(actv_dt) as days,
                   device_id,
                   cust_cd,
                   sale_id
            from tb_sale
            where shop_id=2 and

                      seller_id='km1104rs' and

                device_id is not null and
                actv_dt between '2025-04-01' and '2025-04-30'
        ), sale_gene as (
            select sale_id,
                   (
                       case
                           when length(cust_cd) = 6 then floor((year(curdate()) - concat((
                                 case
                                     when substring(cust_cd, 1,2) > '44' then '19'
                                     when substring(cust_cd, 1,2) <= '44' then '20'
                                     end
                                 ),substring(cust_cd,1,2))) / 10)
                           when length(cust_cd) != 6 then null
                           end
                       ) as generation
            from sale
        ), generation as (
            select g,
                   device_id
            from group_generation g
                     left outer join sale_gene sg on g.g=sg.generation
                     left outer join sale s on s.sale_id=sg.sale_id
        ), weekdays as (
            select g,
                   device_id
            from group_weekday w
                     left outer join sale s on s.days=w.g
        )

        select IFNULL(count(device_id),0) as avg
        from generation
        group by g
 {executed in 1 msec}
2025-04-17 21:51:25.243 INFO  [http-nio-11040-exec-7] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/notif/count/unread
2025-04-17 21:51:25.243 INFO  [http-nio-11040-exec-7] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDg5NDI2NiwiZXhwIjoxNzQ0ODk0ODY2LCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.9gKPqLpoZUhuBZAxeJMGGl4HxqudLsB5VEB99agO5S8
2025-04-17 21:51:25.243 INFO  [http-nio-11040-exec-7] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/notif/count/unread
2025-04-17 21:51:25.246 INFO  [http-nio-11040-exec-7] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-17 21:51:25.249 DEBUG [http-nio-11040-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
4. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 2 msec}
2025-04-17 21:51:25.250 INFO  [http-nio-11040-exec-7] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-17 21:51:25.252 INFO  [http-nio-11040-exec-7] [c.momo.common.util.SecurityContextUtil] - principal: UserDetailsImpl(username=km1104rs, password=$2a$10$uXShhwl6ULOkbJe477uDWOfdiUUcu6lOSF/Dhj9xP3U1nUn/gXkc6, authorities=[ROLE_NONE])
2025-04-17 21:51:25.255 DEBUG [http-nio-11040-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
4. SELECT count(*)
        FROM tb_notification
        WHERE receiver_id = 'km1104rs'
          AND read_st = FALSE
 {executed in 1 msec}
2025-04-17 21:51:26.170 INFO  [http-nio-11040-exec-8] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/notif/count/unread
2025-04-17 21:51:26.170 INFO  [http-nio-11040-exec-8] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDg5NDI2NiwiZXhwIjoxNzQ0ODk0ODY2LCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.9gKPqLpoZUhuBZAxeJMGGl4HxqudLsB5VEB99agO5S8
2025-04-17 21:51:26.170 INFO  [http-nio-11040-exec-8] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/notif/count/unread
2025-04-17 21:51:26.172 INFO  [http-nio-11040-exec-8] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-17 21:51:26.175 DEBUG [http-nio-11040-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
3. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 2 msec}
2025-04-17 21:51:26.176 INFO  [http-nio-11040-exec-8] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-17 21:51:26.177 INFO  [http-nio-11040-exec-8] [c.momo.common.util.SecurityContextUtil] - principal: UserDetailsImpl(username=km1104rs, password=$2a$10$uXShhwl6ULOkbJe477uDWOfdiUUcu6lOSF/Dhj9xP3U1nUn/gXkc6, authorities=[ROLE_NONE])
2025-04-17 21:51:26.180 INFO  [http-nio-11040-exec-9] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/sale/graph/ct/select/0
2025-04-17 21:51:26.180 INFO  [http-nio-11040-exec-9] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDg5NDI2NiwiZXhwIjoxNzQ0ODk0ODY2LCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.9gKPqLpoZUhuBZAxeJMGGl4HxqudLsB5VEB99agO5S8
2025-04-17 21:51:26.180 INFO  [http-nio-11040-exec-9] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/sale/graph/ct/select/0
2025-04-17 21:51:26.181 INFO  [http-nio-11040-exec-3] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/sale/graph/ratio/select/0
2025-04-17 21:51:26.181 INFO  [http-nio-11040-exec-3] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDg5NDI2NiwiZXhwIjoxNzQ0ODk0ODY2LCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.9gKPqLpoZUhuBZAxeJMGGl4HxqudLsB5VEB99agO5S8
2025-04-17 21:51:26.181 INFO  [http-nio-11040-exec-3] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/sale/graph/ratio/select/0
2025-04-17 21:51:26.181 INFO  [http-nio-11040-exec-1] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/sale/graph/summary
2025-04-17 21:51:26.181 INFO  [http-nio-11040-exec-1] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDg5NDI2NiwiZXhwIjoxNzQ0ODk0ODY2LCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.9gKPqLpoZUhuBZAxeJMGGl4HxqudLsB5VEB99agO5S8
2025-04-17 21:51:26.181 INFO  [http-nio-11040-exec-1] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/sale/graph/summary
2025-04-17 21:51:26.180 INFO  [http-nio-11040-exec-10] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/sale/graph/stat/select/2
2025-04-17 21:51:26.181 INFO  [http-nio-11040-exec-10] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDg5NDI2NiwiZXhwIjoxNzQ0ODk0ODY2LCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.9gKPqLpoZUhuBZAxeJMGGl4HxqudLsB5VEB99agO5S8
2025-04-17 21:51:26.181 INFO  [http-nio-11040-exec-10] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/sale/graph/stat/select/2
2025-04-17 21:51:26.182 INFO  [http-nio-11040-exec-1] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-17 21:51:26.183 INFO  [http-nio-11040-exec-3] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-17 21:51:26.182 INFO  [http-nio-11040-exec-10] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-17 21:51:26.183 INFO  [http-nio-11040-exec-9] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-17 21:51:26.186 DEBUG [http-nio-11040-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 2 msec}
2025-04-17 21:51:26.186 DEBUG [http-nio-11040-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
3. SELECT count(*)
        FROM tb_notification
        WHERE receiver_id = 'km1104rs'
          AND read_st = FALSE
 {executed in 8 msec}
2025-04-17 21:51:26.186 INFO  [http-nio-11040-exec-10] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-17 21:51:26.186 DEBUG [http-nio-11040-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
5. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 2 msec}
2025-04-17 21:51:26.186 INFO  [http-nio-11040-exec-3] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-17 21:51:26.186 DEBUG [http-nio-11040-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
4. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 2 msec}
2025-04-17 21:51:26.187 INFO  [http-nio-11040-exec-9] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-17 21:51:26.190 DEBUG [http-nio-11040-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
2. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 5 msec}
2025-04-17 21:51:26.190 INFO  [http-nio-11040-exec-1] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-17 21:51:26.190 DEBUG [http-nio-11040-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
5. with recursive istm_range as (
            select 0 as i
            union all
            select i+1
            from istm_range
            where i<5
        ), base as (
            select ct_istm
            from tb_sale
            where shop_id=2 and

                        seller_id='km1104rs' and

                actv_dt between '2025-02-01' and '2025-02-28'
        ), final as (
            select i as istm,
                   IFNULL(count(base.ct_istm),0) as cnt
            from istm_range
                     left outer join base on base.ct_istm=istm_range.i
            group by i
            order by istm desc
        )

        select json_arrayagg(istm) as type,
               json_arrayagg(cnt) as cnt,
               json_arrayagg(IF((
                      select IFNULL(count(ct_istm), 0)
                      from base
                  ) = 0 or cnt = 0, 0, TRUNCATE((cnt/(
                   select IFNULL(count(ct_istm), 0)
                   from base
               )) * 100, 1))) as per
        from final
 {executed in 1 msec}
2025-04-17 21:51:26.190 DEBUG [http-nio-11040-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
4. with recursive group_generation as (
            select 0 as g
            union all
            select g+1
            from group_generation
            where g < 8
        ), group_weekday as (
            select 0 as g
            union all
            select g+1
            from group_weekday
            where g < 6
        ),  sale as (
            select weekday(actv_dt) as days,
                   device_id,
                   cust_cd,
                   sale_id
            from tb_sale
            where shop_id=2 and

                      seller_id='km1104rs' and

                device_id is not null and
                actv_dt between '2025-02-01' and '2025-02-28'
        ), sale_gene as (
            select sale_id,
                   (
                       case
                           when length(cust_cd) = 6 then floor((year(curdate()) - concat((
                                 case
                                     when substring(cust_cd, 1,2) > '44' then '19'
                                     when substring(cust_cd, 1,2) <= '44' then '20'
                                     end
                                 ),substring(cust_cd,1,2))) / 10)
                           when length(cust_cd) != 6 then null
                           end
                       ) as generation
            from sale
        ), generation as (
            select g,
                   device_id
            from group_generation g
                     left outer join sale_gene sg on g.g=sg.generation
                     left outer join sale s on s.sale_id=sg.sale_id
        ), weekdays as (
            select g,
                   device_id
            from group_weekday w
                     left outer join sale s on s.days=w.g
        )

        select IFNULL(count(device_id),0) as avg
        from generation
        group by g
 {executed in 1 msec}
2025-04-17 21:51:26.191 INFO  [http-nio-11040-exec-1] [com.momo.api.SaleController] - summary: CommonVO(provider=null, date=null, year=null, month=null, day=null, selectType=null, range=null, dateType=null, prevFromYmd=null, prevToYmd=null, currFromYmd=null, currToYmd=null, fromYmd=2024-08-01, toYmd=2025-02-01, fromYm=null, toYm=null, prevDate=null, currDate=null)
2025-04-17 21:51:26.192 DEBUG [http-nio-11040-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. with base as (select device_id,
                             (SELECT device_nm
                              FROM tb_device
                              WHERE tb_device.device_id = sl.device_id)      as device,
                             sd_id,
                             (SELECT sd_nm
                              FROM tb_second_device
                              WHERE tb_second_device.sd_id = sl.sd_id)       as sec_device,
                             ct_actv_plan,
                             (SELECT ct_plan_nm
                              FROM tb_ct_plan
                              WHERE tb_ct_plan.ct_plan_id = sl.ct_actv_plan) as actv_plan
                      from tb_sale sl
                      where shop_id = 2 and

                                seller_id='km1104rs' and

                        actv_dt between '2025-02-01' and '2025-02-28'),
             device as (SELECT device                   as name,
                               count(device_id) as count
                        from base
                        where device_id is not null
                        group by device),
             sec_device as (SELECT sec_device                   as name,
                                   count(sec_device) as count
                            from base
                            where sd_id is not null
                            group by sec_device),
             actv_plan as (SELECT actv_plan                   as name,
                                  count(actv_plan) as count
                           from base
                           where ct_actv_plan is not null
                           group by actv_plan),
             total as (select count('sec_device') as cnt
                       from base
                       where 'sec_device' is not null
             )

        select name,
               count,
               (
                   IF((select cnt
                       from total) = 0 or count = 0, 0, TRUNCATE(
                              (count / (
                                  select cnt
                                  from total
                              )
                                  ) * 100, 1))
                   ) as per
        from sec_device
        order by per desc
        limit 5
 {executed in 3 msec}
2025-04-17 21:51:26.196 INFO  [http-nio-11040-exec-2] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/notif/count/unread
2025-04-17 21:51:26.196 INFO  [http-nio-11040-exec-2] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDg5NDI2NiwiZXhwIjoxNzQ0ODk0ODY2LCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.9gKPqLpoZUhuBZAxeJMGGl4HxqudLsB5VEB99agO5S8
2025-04-17 21:51:26.196 INFO  [http-nio-11040-exec-2] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/notif/count/unread
2025-04-17 21:51:26.198 INFO  [http-nio-11040-exec-2] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-17 21:51:26.205 DEBUG [http-nio-11040-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
4. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 1 msec}
2025-04-17 21:51:26.206 INFO  [http-nio-11040-exec-2] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-17 21:51:26.207 INFO  [http-nio-11040-exec-2] [c.momo.common.util.SecurityContextUtil] - principal: UserDetailsImpl(username=km1104rs, password=$2a$10$uXShhwl6ULOkbJe477uDWOfdiUUcu6lOSF/Dhj9xP3U1nUn/gXkc6, authorities=[ROLE_NONE])
2025-04-17 21:51:26.209 DEBUG [http-nio-11040-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
4. SELECT count(*)
        FROM tb_notification
        WHERE receiver_id = 'km1104rs'
          AND read_st = FALSE
 {executed in 1 msec}
2025-04-17 21:51:26.212 DEBUG [http-nio-11040-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
2. #         월별 날짜 구하기
        with recursive month_range as (
            select '2024-08-01' as d
            union all
            select date_add(d, interval 1 month) as d
            from month_range
            where date_add(d, interval 1 month) < '2025-02-01'
        ), months as(
            select month(d) as m
            from month_range
        ), filtered_sale as ( # 판매일보 초벌
            select month(actv_dt) as actv_month,
                   device_id,
                   internet_plan,
                   tv_plan,
                    exsvc_id,
                   total_cms,
                   wt_cms,
                   sale_id,
                   sd_id,
                    shop_id
            from tb_sale
            where shop_id=2 and

                    seller_id='km1104rs' and

                actv_dt between '2024-08-01' and date_add('2025-02-01', interval 1 month)
        ), ct_graph as ( # 무선 그래프 데이터
            SELECT m,
                   count(device_id) as cnt
            FROM months
                     LEFT OUTER JOIN filtered_sale on actv_month = m and
                                                      device_id is not null
            group by m
        ), internet_graph as ( # 인터넷 그래프 데이터
            SELECT m,
                   count(internet_plan) as cnt
            FROM months
                     LEFT OUTER JOIN filtered_sale on actv_month = m  and
                                                      internet_plan is not null
            group by m
        ), tv_graph as ( # TV 그래프 데이터
            SELECT m,
                   count(tv_plan) as cnt
            FROM months
                     LEFT OUTER JOIN filtered_sale on actv_month = m  and
                                                      tv_plan is not null
            group by m
        ), card as ( # 카드 데이터
            SELECT m,
                   (
                    select count(*)
                    from tb_sale_card sc
                    left outer join filtered_sale fs on fs.shop_id = sc.shop_id and
                                                        fs.sale_id = sc.sale_id
                   )  as cnt
            FROM months
                     LEFT OUTER JOIN filtered_sale on actv_month = m
            group by m
        ), exsvc as ( # 부가서비스 데이터
            SELECT m,
                   count(exsvc_id) as cnt
            FROM months
                     LEFT OUTER JOIN filtered_sale on actv_month = m  and
                                                      exsvc_id is not null
            group by m
        ), tc_graph as ( # 총 이익 그래프 데이터
            SELECT m,
                   IFNULL(sum(total_cms), 0) as cnt
            FROM months
                     LEFT OUTER JOIN filtered_sale on actv_month = m
            group by m
        ), avg_margin_graph as ( # 개인 평균 마진 그래프 데이터
            SELECT m,
                   IFNULL(avg(total_cms), 0) as cnt
            FROM months
                     LEFT OUTER JOIN filtered_sale on actv_month = m and
                                                      device_id is not null
            group by m
        ), ud_graph as ( # 중고 개통 그래프 데이터
            SELECT m,
                   count(ud_id) as cnt
            FROM months
                     LEFT OUTER JOIN filtered_sale on actv_month = m
                     LEFT OUTER JOIN tb_sale_used_device sud on sud.sale_id=filtered_sale.sale_id
            group by m
        ), sec_graph as ( # 세컨 그래프 데이터
            SELECT m,
                   count(sd_id) as cnt
            FROM months
                     LEFT OUTER JOIN filtered_sale on actv_month = m and
                                                      sd_id != 0
            group by m
        ), diff_ct as (
            select
                (
                    select cnt
                    from ct_graph
                    limit 4, 1
                ) as prv,
                (
                    select cnt
                    from ct_graph
                    limit 5,1
                ) as curr
            from dual
        ), diff_internet as (
            select
                (
                    select cnt
                    from internet_graph
                    limit 4,1
                ) as prv,
                (
                    select cnt
                    from internet_graph
                    limit 5,1
                ) as curr
            from dual
        ), diff_tv as (
            select
                (
                    select cnt
                    from tv_graph
                    limit 4,1
                ) as prv,
                (
                    select cnt
                    from tv_graph
                    limit 5,1
                ) as curr
            from dual
        ), diff_card as (
            select
                (
                    select cnt
                    from card
                    limit 4,1
                ) as prv,
                (
                    select cnt
                    from card
                    limit 5,1
                ) as curr
            from dual
        ), diff_exsvc as (
            select
                (
                    select cnt
                    from exsvc
                    limit 4,1
                ) as prv,
                (
                    select cnt
                    from exsvc
                    limit 5,1
                ) as curr
            from dual
        ), diff_tc as (
            select
                (
                    select cnt
                    from tc_graph
                    limit 4,1
                ) as prv,
                (
                    select cnt
                    from tc_graph
                    limit 5,1
                ) as curr
            from dual
        ) , diff_margin as (
            select
                (
                    select cnt
                    from avg_margin_graph
                    limit 4,1
                ) as prv,
                (
                    select cnt
                    from avg_margin_graph
                    limit 5,1
                ) as curr
            from dual
        ), diff_ud as (
            select
                (
                    select cnt
                    from ud_graph
                    limit 4,1
                ) as prv,
                (
                    select cnt
                    from ud_graph
                    limit 5,1
                ) as curr
            from dual
        ) , diff_sec as (
            select
                (
                    select cnt
                    from sec_graph
                    limit 4,1
                ) as prv,
                (
                    select cnt
                    from sec_graph
                    limit 5,1
                ) as curr
            from dual
        ), final as (
            select
                curr,
                prv,
                (
                    select json_arrayagg(cnt)
                    from ct_graph
                ) as list
            from diff_ct
            union all
            select
                curr,
                prv,
                (
                    select json_arrayagg(cnt)
                    from internet_graph
                ) as list
            from diff_internet
            union all
            select
                curr,
                prv,
                (
                    select json_arrayagg(cnt)
                    from tv_graph
                ) as list
            from diff_tv
             union all
            select
                curr,
                prv,
                (
                    select json_arrayagg(cnt)
                    from card
                ) as list
            from diff_card
             union all
            select
                curr,
                prv,
                (
                    select json_arrayagg(cnt)
                    from exsvc
                ) as list
            from diff_exsvc
            union all
            select
                curr,
                prv,
                (
                    select json_arrayagg(cnt)
                    from tc_graph
                ) as list
            from diff_tc
            union all
            select
                curr,
                prv,
                (
                    select json_arrayagg(cnt)
                    from avg_margin_graph
                ) as list
            from diff_margin
            union all
            select
                curr,
                prv,
                (
                    select json_arrayagg(cnt)
                    from ud_graph
                ) as list
            from diff_ud
            union all
            select
                curr,
                prv,
                (
                    select json_arrayagg(cnt)
                    from sec_graph
                ) as list
            from diff_sec
        )

        select FLOOR(curr) as value,
               (
                   CASE
                       WHEN curr = 0 and prv = 0 THEN 0
                       WHEN prv != 0 and curr = 0 THEN -100
                       WHEN prv = 0 and curr != 0 THEN 100
                       WHEN curr != 0 and prv != 0 THEN TRUNCATE(((curr/prv)-1)*100, 1)
                       END
                   ) as per,
               list
        from final
 {executed in 16 msec}
2025-04-17 21:51:26.224 INFO  [http-nio-11040-exec-6] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/sale/graph/ct/select/0
2025-04-17 21:51:26.224 INFO  [http-nio-11040-exec-6] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDg5NDI2NiwiZXhwIjoxNzQ0ODk0ODY2LCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.9gKPqLpoZUhuBZAxeJMGGl4HxqudLsB5VEB99agO5S8
2025-04-17 21:51:26.224 INFO  [http-nio-11040-exec-6] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/sale/graph/ct/select/0
2025-04-17 21:51:26.225 INFO  [http-nio-11040-exec-5] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/sale/graph/stat/select/2
2025-04-17 21:51:26.225 INFO  [http-nio-11040-exec-5] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDg5NDI2NiwiZXhwIjoxNzQ0ODk0ODY2LCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.9gKPqLpoZUhuBZAxeJMGGl4HxqudLsB5VEB99agO5S8
2025-04-17 21:51:26.225 INFO  [http-nio-11040-exec-5] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/sale/graph/stat/select/2
2025-04-17 21:51:26.225 INFO  [http-nio-11040-exec-4] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/sale/graph/ratio/select/0
2025-04-17 21:51:26.225 INFO  [http-nio-11040-exec-4] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDg5NDI2NiwiZXhwIjoxNzQ0ODk0ODY2LCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.9gKPqLpoZUhuBZAxeJMGGl4HxqudLsB5VEB99agO5S8
2025-04-17 21:51:26.225 INFO  [http-nio-11040-exec-4] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/sale/graph/ratio/select/0
2025-04-17 21:51:26.226 INFO  [http-nio-11040-exec-6] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-17 21:51:26.226 INFO  [http-nio-11040-exec-5] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-17 21:51:26.226 INFO  [http-nio-11040-exec-4] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-17 21:51:26.227 DEBUG [http-nio-11040-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
3. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 1 msec}
2025-04-17 21:51:26.227 DEBUG [http-nio-11040-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
6. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 1 msec}
2025-04-17 21:51:26.227 DEBUG [http-nio-11040-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
2. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 0 msec}
2025-04-17 21:51:26.227 INFO  [http-nio-11040-exec-5] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-17 21:51:26.227 INFO  [http-nio-11040-exec-4] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-17 21:51:26.227 INFO  [http-nio-11040-exec-6] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-17 21:51:26.230 DEBUG [http-nio-11040-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
6. with recursive group_generation as (
            select 0 as g
            union all
            select g+1
            from group_generation
            where g < 8
        ), group_weekday as (
            select 0 as g
            union all
            select g+1
            from group_weekday
            where g < 6
        ),  sale as (
            select weekday(actv_dt) as days,
                   device_id,
                   cust_cd,
                   sale_id
            from tb_sale
            where shop_id=2 and

                      seller_id='km1104rs' and

                device_id is not null and
                actv_dt between '2025-02-01' and '2025-02-28'
        ), sale_gene as (
            select sale_id,
                   (
                       case
                           when length(cust_cd) = 6 then floor((year(curdate()) - concat((
                                 case
                                     when substring(cust_cd, 1,2) > '44' then '19'
                                     when substring(cust_cd, 1,2) <= '44' then '20'
                                     end
                                 ),substring(cust_cd,1,2))) / 10)
                           when length(cust_cd) != 6 then null
                           end
                       ) as generation
            from sale
        ), generation as (
            select g,
                   device_id
            from group_generation g
                     left outer join sale_gene sg on g.g=sg.generation
                     left outer join sale s on s.sale_id=sg.sale_id
        ), weekdays as (
            select g,
                   device_id
            from group_weekday w
                     left outer join sale s on s.days=w.g
        )

        select IFNULL(count(device_id),0) as avg
        from generation
        group by g
 {executed in 1 msec}
2025-04-17 21:51:26.230 DEBUG [http-nio-11040-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
3. with base as (select device_id,
                             (SELECT device_nm
                              FROM tb_device
                              WHERE tb_device.device_id = sl.device_id)      as device,
                             sd_id,
                             (SELECT sd_nm
                              FROM tb_second_device
                              WHERE tb_second_device.sd_id = sl.sd_id)       as sec_device,
                             ct_actv_plan,
                             (SELECT ct_plan_nm
                              FROM tb_ct_plan
                              WHERE tb_ct_plan.ct_plan_id = sl.ct_actv_plan) as actv_plan
                      from tb_sale sl
                      where shop_id = 2 and

                                seller_id='km1104rs' and

                        actv_dt between '2025-02-01' and '2025-02-28'),
             device as (SELECT device                   as name,
                               count(device_id) as count
                        from base
                        where device_id is not null
                        group by device),
             sec_device as (SELECT sec_device                   as name,
                                   count(sec_device) as count
                            from base
                            where sd_id is not null
                            group by sec_device),
             actv_plan as (SELECT actv_plan                   as name,
                                  count(actv_plan) as count
                           from base
                           where ct_actv_plan is not null
                           group by actv_plan),
             total as (select count('sec_device') as cnt
                       from base
                       where 'sec_device' is not null
             )

        select name,
               count,
               (
                   IF((select cnt
                       from total) = 0 or count = 0, 0, TRUNCATE(
                              (count / (
                                  select cnt
                                  from total
                              )
                                  ) * 100, 1))
                   ) as per
        from sec_device
        order by per desc
        limit 5
 {executed in 1 msec}
2025-04-17 21:51:26.230 DEBUG [http-nio-11040-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
2. with recursive istm_range as (
            select 0 as i
            union all
            select i+1
            from istm_range
            where i<5
        ), base as (
            select ct_istm
            from tb_sale
            where shop_id=2 and

                        seller_id='km1104rs' and

                actv_dt between '2025-02-01' and '2025-02-28'
        ), final as (
            select i as istm,
                   IFNULL(count(base.ct_istm),0) as cnt
            from istm_range
                     left outer join base on base.ct_istm=istm_range.i
            group by i
            order by istm desc
        )

        select json_arrayagg(istm) as type,
               json_arrayagg(cnt) as cnt,
               json_arrayagg(IF((
                      select IFNULL(count(ct_istm), 0)
                      from base
                  ) = 0 or cnt = 0, 0, TRUNCATE((cnt/(
                   select IFNULL(count(ct_istm), 0)
                   from base
               )) * 100, 1))) as per
        from final
 {executed in 2 msec}
2025-04-17 21:51:33.816 INFO  [MessageBroker-1] [o.s.w.s.c.WebSocketMessageBrokerStats] - WebSocketSession[0 current WS(0)-HttpStream(0)-HttpPoll(0), 0 total, 0 closed abnormally (0 connect failure, 0 send limit, 0 transport error)], stompSubProtocol[processed CONNECT(0)-CONNECTED(0)-DISCONNECT(0)], stompBrokerRelay[null], inboundChannel[pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 0], outboundChannel[pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 0], sockJsScheduler[pool size = 1, active threads = 1, queued tasks = 0, completed tasks = 0]
2025-04-17 22:09:09.690 INFO  [http-nio-11040-exec-7] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/sale/graph/ct/select/0
2025-04-17 22:09:09.691 INFO  [http-nio-11040-exec-7] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDg5NDI2NiwiZXhwIjoxNzQ0ODk0ODY2LCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.9gKPqLpoZUhuBZAxeJMGGl4HxqudLsB5VEB99agO5S8
2025-04-17 22:09:09.691 INFO  [http-nio-11040-exec-7] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/sale/graph/ct/select/0
2025-04-17 22:09:09.701 INFO  [http-nio-11040-exec-7] [com.momo.provider.JwtProvider] - Expired JWT Token
io.jsonwebtoken.ExpiredJwtException: JWT expired at 2025-04-17T13:01:06Z. Current time: 2025-04-17T13:09:09Z, a difference of 483695 milliseconds.  Allowed clock skew: 0 milliseconds.
	at io.jsonwebtoken.impl.DefaultJwtParser.parse(DefaultJwtParser.java:427)
	at io.jsonwebtoken.impl.DefaultJwtParser.parse(DefaultJwtParser.java:529)
	at io.jsonwebtoken.impl.DefaultJwtParser.parseClaimsJws(DefaultJwtParser.java:589)
	at io.jsonwebtoken.impl.ImmutableJwtParser.parseClaimsJws(ImmutableJwtParser.java:173)
	at com.momo.provider.JwtProvider.validateToken(JwtProvider.java:145)
	at com.momo.filter.JwtAuthorizationFilter.doFilterInternal(JwtAuthorizationFilter.java:38)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:195)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:225)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:340)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:840)
2025-04-17 22:09:09.707 INFO  [http-nio-11040-exec-7] [com.momo.filter.JwtAuthorizationFilter] - 유효한 JWT 토큰이 없습니다
2025-04-17 22:09:09.827 DEBUG [http-nio-11040-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
4. with recursive group_generation as (
            select 0 as g
            union all
            select g+1
            from group_generation
            where g < 8
        ), group_weekday as (
            select 0 as g
            union all
            select g+1
            from group_weekday
            where g < 6
        ),  sale as (
            select weekday(actv_dt) as days,
                   device_id,
                   cust_cd,
                   sale_id
            from tb_sale
            where shop_id=2 and

                      seller_id='km1104rs' and

                device_id is not null and
                actv_dt between '2025-02-01' and '2025-02-28'
        ), sale_gene as (
            select sale_id,
                   (
                       case
                           when length(cust_cd) = 6 then floor((year(curdate()) - concat((
                                 case
                                     when substring(cust_cd, 1,2) > '44' then '19'
                                     when substring(cust_cd, 1,2) <= '44' then '20'
                                     end
                                 ),substring(cust_cd,1,2))) / 10)
                           when length(cust_cd) != 6 then null
                           end
                       ) as generation
            from sale
        ), generation as (
            select g,
                   device_id
            from group_generation g
                     left outer join sale_gene sg on g.g=sg.generation
                     left outer join sale s on s.sale_id=sg.sale_id
        ), weekdays as (
            select g,
                   device_id
            from group_weekday w
                     left outer join sale s on s.days=w.g
        )

        select IFNULL(count(device_id),0) as avg
        from generation
        group by g
 {executed in 97 msec}
2025-04-17 22:09:10.099 INFO  [http-nio-11040-exec-8] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/sale/graph/ct/select/1
2025-04-17 22:09:10.099 INFO  [http-nio-11040-exec-8] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDg5NDI2NiwiZXhwIjoxNzQ0ODk0ODY2LCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.9gKPqLpoZUhuBZAxeJMGGl4HxqudLsB5VEB99agO5S8
2025-04-17 22:09:10.099 INFO  [http-nio-11040-exec-8] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/sale/graph/ct/select/1
2025-04-17 22:09:10.100 INFO  [http-nio-11040-exec-8] [com.momo.provider.JwtProvider] - Expired JWT Token
io.jsonwebtoken.ExpiredJwtException: JWT expired at 2025-04-17T13:01:06Z. Current time: 2025-04-17T13:09:10Z, a difference of 484100 milliseconds.  Allowed clock skew: 0 milliseconds.
	at io.jsonwebtoken.impl.DefaultJwtParser.parse(DefaultJwtParser.java:427)
	at io.jsonwebtoken.impl.DefaultJwtParser.parse(DefaultJwtParser.java:529)
	at io.jsonwebtoken.impl.DefaultJwtParser.parseClaimsJws(DefaultJwtParser.java:589)
	at io.jsonwebtoken.impl.ImmutableJwtParser.parseClaimsJws(ImmutableJwtParser.java:173)
	at com.momo.provider.JwtProvider.validateToken(JwtProvider.java:145)
	at com.momo.filter.JwtAuthorizationFilter.doFilterInternal(JwtAuthorizationFilter.java:38)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:195)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:225)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:340)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:840)
2025-04-17 22:09:10.100 INFO  [http-nio-11040-exec-8] [com.momo.filter.JwtAuthorizationFilter] - 유효한 JWT 토큰이 없습니다
2025-04-17 22:09:10.105 DEBUG [http-nio-11040-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
3. with recursive group_generation as (
            select 0 as g
            union all
            select g+1
            from group_generation
            where g < 8
        ), group_weekday as (
            select 0 as g
            union all
            select g+1
            from group_weekday
            where g < 6
        ),  sale as (
            select weekday(actv_dt) as days,
                   device_id,
                   cust_cd,
                   sale_id
            from tb_sale
            where shop_id=2 and

                      seller_id='km1104rs' and

                device_id is not null and
                actv_dt between '2025-02-01' and '2025-02-28'
        ), sale_gene as (
            select sale_id,
                   (
                       case
                           when length(cust_cd) = 6 then floor((year(curdate()) - concat((
                                 case
                                     when substring(cust_cd, 1,2) > '44' then '19'
                                     when substring(cust_cd, 1,2) <= '44' then '20'
                                     end
                                 ),substring(cust_cd,1,2))) / 10)
                           when length(cust_cd) != 6 then null
                           end
                       ) as generation
            from sale
        ), generation as (
            select g,
                   device_id
            from group_generation g
                     left outer join sale_gene sg on g.g=sg.generation
                     left outer join sale s on s.sale_id=sg.sale_id
        ), weekdays as (
            select g,
                   device_id
            from group_weekday w
                     left outer join sale s on s.days=w.g
        )

        select IFNULL(count(device_id),0) as avg
        from weekdays
        group by g
 {executed in 1 msec}
2025-04-17 22:09:10.839 INFO  [http-nio-11040-exec-3] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/sale/graph/ct/select/0
2025-04-17 22:09:10.840 INFO  [http-nio-11040-exec-3] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDg5NDI2NiwiZXhwIjoxNzQ0ODk0ODY2LCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.9gKPqLpoZUhuBZAxeJMGGl4HxqudLsB5VEB99agO5S8
2025-04-17 22:09:10.840 INFO  [http-nio-11040-exec-3] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/sale/graph/ct/select/0
2025-04-17 22:09:10.842 INFO  [http-nio-11040-exec-3] [com.momo.provider.JwtProvider] - Expired JWT Token
io.jsonwebtoken.ExpiredJwtException: JWT expired at 2025-04-17T13:01:06Z. Current time: 2025-04-17T13:09:10Z, a difference of 484842 milliseconds.  Allowed clock skew: 0 milliseconds.
	at io.jsonwebtoken.impl.DefaultJwtParser.parse(DefaultJwtParser.java:427)
	at io.jsonwebtoken.impl.DefaultJwtParser.parse(DefaultJwtParser.java:529)
	at io.jsonwebtoken.impl.DefaultJwtParser.parseClaimsJws(DefaultJwtParser.java:589)
	at io.jsonwebtoken.impl.ImmutableJwtParser.parseClaimsJws(ImmutableJwtParser.java:173)
	at com.momo.provider.JwtProvider.validateToken(JwtProvider.java:145)
	at com.momo.filter.JwtAuthorizationFilter.doFilterInternal(JwtAuthorizationFilter.java:38)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:195)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:225)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:340)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:840)
2025-04-17 22:09:10.842 INFO  [http-nio-11040-exec-3] [com.momo.filter.JwtAuthorizationFilter] - 유효한 JWT 토큰이 없습니다
2025-04-17 22:09:10.918 DEBUG [http-nio-11040-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
5. with recursive group_generation as (
            select 0 as g
            union all
            select g+1
            from group_generation
            where g < 8
        ), group_weekday as (
            select 0 as g
            union all
            select g+1
            from group_weekday
            where g < 6
        ),  sale as (
            select weekday(actv_dt) as days,
                   device_id,
                   cust_cd,
                   sale_id
            from tb_sale
            where shop_id=2 and

                      seller_id='km1104rs' and

                device_id is not null and
                actv_dt between '2025-02-01' and '2025-02-28'
        ), sale_gene as (
            select sale_id,
                   (
                       case
                           when length(cust_cd) = 6 then floor((year(curdate()) - concat((
                                 case
                                     when substring(cust_cd, 1,2) > '44' then '19'
                                     when substring(cust_cd, 1,2) <= '44' then '20'
                                     end
                                 ),substring(cust_cd,1,2))) / 10)
                           when length(cust_cd) != 6 then null
                           end
                       ) as generation
            from sale
        ), generation as (
            select g,
                   device_id
            from group_generation g
                     left outer join sale_gene sg on g.g=sg.generation
                     left outer join sale s on s.sale_id=sg.sale_id
        ), weekdays as (
            select g,
                   device_id
            from group_weekday w
                     left outer join sale s on s.days=w.g
        )

        select IFNULL(count(device_id),0) as avg
        from generation
        group by g
 {executed in 41 msec}
2025-04-17 22:09:12.484 INFO  [http-nio-11040-exec-9] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/notif/count/unread
2025-04-17 22:09:12.484 INFO  [http-nio-11040-exec-9] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDg5NDI2NiwiZXhwIjoxNzQ0ODk0ODY2LCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.9gKPqLpoZUhuBZAxeJMGGl4HxqudLsB5VEB99agO5S8
2025-04-17 22:09:12.485 INFO  [http-nio-11040-exec-9] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/notif/count/unread
2025-04-17 22:09:12.486 INFO  [http-nio-11040-exec-9] [com.momo.provider.JwtProvider] - Expired JWT Token
io.jsonwebtoken.ExpiredJwtException: JWT expired at 2025-04-17T13:01:06Z. Current time: 2025-04-17T13:09:12Z, a difference of 486486 milliseconds.  Allowed clock skew: 0 milliseconds.
	at io.jsonwebtoken.impl.DefaultJwtParser.parse(DefaultJwtParser.java:427)
	at io.jsonwebtoken.impl.DefaultJwtParser.parse(DefaultJwtParser.java:529)
	at io.jsonwebtoken.impl.DefaultJwtParser.parseClaimsJws(DefaultJwtParser.java:589)
	at io.jsonwebtoken.impl.ImmutableJwtParser.parseClaimsJws(ImmutableJwtParser.java:173)
	at com.momo.provider.JwtProvider.validateToken(JwtProvider.java:145)
	at com.momo.filter.JwtAuthorizationFilter.doFilterInternal(JwtAuthorizationFilter.java:38)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:195)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:225)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:340)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:840)
2025-04-17 22:09:12.487 INFO  [http-nio-11040-exec-9] [com.momo.filter.JwtAuthorizationFilter] - 유효한 JWT 토큰이 없습니다
2025-04-17 22:09:12.488 INFO  [http-nio-11040-exec-9] [c.momo.common.util.SecurityContextUtil] - principal: UserDetailsImpl(username=km1104rs, password=$2a$10$uXShhwl6ULOkbJe477uDWOfdiUUcu6lOSF/Dhj9xP3U1nUn/gXkc6, authorities=[ROLE_NONE])
2025-04-17 22:09:12.496 DEBUG [http-nio-11040-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
4. SELECT count(*)
        FROM tb_notification
        WHERE receiver_id = 'km1104rs'
          AND read_st = FALSE
 {executed in 3 msec}
2025-04-17 22:09:13.370 INFO  [http-nio-11040-exec-10] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/notif/count/unread
2025-04-17 22:09:13.370 INFO  [http-nio-11040-exec-10] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDg5NDI2NiwiZXhwIjoxNzQ0ODk0ODY2LCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.9gKPqLpoZUhuBZAxeJMGGl4HxqudLsB5VEB99agO5S8
2025-04-17 22:09:13.370 INFO  [http-nio-11040-exec-10] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/notif/count/unread
2025-04-17 22:09:13.373 INFO  [http-nio-11040-exec-10] [com.momo.provider.JwtProvider] - Expired JWT Token
io.jsonwebtoken.ExpiredJwtException: JWT expired at 2025-04-17T13:01:06Z. Current time: 2025-04-17T13:09:13Z, a difference of 487373 milliseconds.  Allowed clock skew: 0 milliseconds.
	at io.jsonwebtoken.impl.DefaultJwtParser.parse(DefaultJwtParser.java:427)
	at io.jsonwebtoken.impl.DefaultJwtParser.parse(DefaultJwtParser.java:529)
	at io.jsonwebtoken.impl.DefaultJwtParser.parseClaimsJws(DefaultJwtParser.java:589)
	at io.jsonwebtoken.impl.ImmutableJwtParser.parseClaimsJws(ImmutableJwtParser.java:173)
	at com.momo.provider.JwtProvider.validateToken(JwtProvider.java:145)
	at com.momo.filter.JwtAuthorizationFilter.doFilterInternal(JwtAuthorizationFilter.java:38)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:195)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:225)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:340)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:840)
2025-04-17 22:09:13.373 INFO  [http-nio-11040-exec-10] [com.momo.filter.JwtAuthorizationFilter] - 유효한 JWT 토큰이 없습니다
2025-04-17 22:09:13.374 INFO  [http-nio-11040-exec-10] [c.momo.common.util.SecurityContextUtil] - principal: UserDetailsImpl(username=km1104rs, password=$2a$10$uXShhwl6ULOkbJe477uDWOfdiUUcu6lOSF/Dhj9xP3U1nUn/gXkc6, authorities=[ROLE_NONE])
2025-04-17 22:09:13.378 INFO  [http-nio-11040-exec-2] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/sale/graph/ct/select/0
2025-04-17 22:09:13.378 INFO  [http-nio-11040-exec-1] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/sale/graph/stat/select/2
2025-04-17 22:09:13.378 INFO  [http-nio-11040-exec-2] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDg5NDI2NiwiZXhwIjoxNzQ0ODk0ODY2LCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.9gKPqLpoZUhuBZAxeJMGGl4HxqudLsB5VEB99agO5S8
2025-04-17 22:09:13.378 INFO  [http-nio-11040-exec-2] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/sale/graph/ct/select/0
2025-04-17 22:09:13.378 INFO  [http-nio-11040-exec-1] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDg5NDI2NiwiZXhwIjoxNzQ0ODk0ODY2LCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.9gKPqLpoZUhuBZAxeJMGGl4HxqudLsB5VEB99agO5S8
2025-04-17 22:09:13.378 INFO  [http-nio-11040-exec-1] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/sale/graph/stat/select/2
2025-04-17 22:09:13.378 DEBUG [http-nio-11040-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT count(*)
        FROM tb_notification
        WHERE receiver_id = 'km1104rs'
          AND read_st = FALSE
 {executed in 2 msec}
2025-04-17 22:09:13.379 INFO  [http-nio-11040-exec-1] [com.momo.provider.JwtProvider] - Expired JWT Token
io.jsonwebtoken.ExpiredJwtException: JWT expired at 2025-04-17T13:01:06Z. Current time: 2025-04-17T13:09:13Z, a difference of 487379 milliseconds.  Allowed clock skew: 0 milliseconds.
	at io.jsonwebtoken.impl.DefaultJwtParser.parse(DefaultJwtParser.java:427)
	at io.jsonwebtoken.impl.DefaultJwtParser.parse(DefaultJwtParser.java:529)
	at io.jsonwebtoken.impl.DefaultJwtParser.parseClaimsJws(DefaultJwtParser.java:589)
	at io.jsonwebtoken.impl.ImmutableJwtParser.parseClaimsJws(ImmutableJwtParser.java:173)
	at com.momo.provider.JwtProvider.validateToken(JwtProvider.java:145)
	at com.momo.filter.JwtAuthorizationFilter.doFilterInternal(JwtAuthorizationFilter.java:38)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:195)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:225)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:340)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:840)
2025-04-17 22:09:13.379 INFO  [http-nio-11040-exec-2] [com.momo.provider.JwtProvider] - Expired JWT Token
io.jsonwebtoken.ExpiredJwtException: JWT expired at 2025-04-17T13:01:06Z. Current time: 2025-04-17T13:09:13Z, a difference of 487379 milliseconds.  Allowed clock skew: 0 milliseconds.
	at io.jsonwebtoken.impl.DefaultJwtParser.parse(DefaultJwtParser.java:427)
	at io.jsonwebtoken.impl.DefaultJwtParser.parse(DefaultJwtParser.java:529)
	at io.jsonwebtoken.impl.DefaultJwtParser.parseClaimsJws(DefaultJwtParser.java:589)
	at io.jsonwebtoken.impl.ImmutableJwtParser.parseClaimsJws(ImmutableJwtParser.java:173)
	at com.momo.provider.JwtProvider.validateToken(JwtProvider.java:145)
	at com.momo.filter.JwtAuthorizationFilter.doFilterInternal(JwtAuthorizationFilter.java:38)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:195)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:225)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:340)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:840)
2025-04-17 22:09:13.380 INFO  [http-nio-11040-exec-2] [com.momo.filter.JwtAuthorizationFilter] - 유효한 JWT 토큰이 없습니다
2025-04-17 22:09:13.380 INFO  [http-nio-11040-exec-6] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/sale/graph/ratio/select/0
2025-04-17 22:09:13.380 INFO  [http-nio-11040-exec-6] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDg5NDI2NiwiZXhwIjoxNzQ0ODk0ODY2LCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.9gKPqLpoZUhuBZAxeJMGGl4HxqudLsB5VEB99agO5S8
2025-04-17 22:09:13.380 INFO  [http-nio-11040-exec-6] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/sale/graph/ratio/select/0
2025-04-17 22:09:13.379 INFO  [http-nio-11040-exec-1] [com.momo.filter.JwtAuthorizationFilter] - 유효한 JWT 토큰이 없습니다
2025-04-17 22:09:13.380 INFO  [http-nio-11040-exec-5] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/sale/graph/summary
2025-04-17 22:09:13.381 INFO  [http-nio-11040-exec-5] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDg5NDI2NiwiZXhwIjoxNzQ0ODk0ODY2LCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.9gKPqLpoZUhuBZAxeJMGGl4HxqudLsB5VEB99agO5S8
2025-04-17 22:09:13.381 INFO  [http-nio-11040-exec-5] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/sale/graph/summary
2025-04-17 22:09:13.382 INFO  [http-nio-11040-exec-5] [com.momo.provider.JwtProvider] - Expired JWT Token
io.jsonwebtoken.ExpiredJwtException: JWT expired at 2025-04-17T13:01:06Z. Current time: 2025-04-17T13:09:13Z, a difference of 487382 milliseconds.  Allowed clock skew: 0 milliseconds.
	at io.jsonwebtoken.impl.DefaultJwtParser.parse(DefaultJwtParser.java:427)
	at io.jsonwebtoken.impl.DefaultJwtParser.parse(DefaultJwtParser.java:529)
	at io.jsonwebtoken.impl.DefaultJwtParser.parseClaimsJws(DefaultJwtParser.java:589)
	at io.jsonwebtoken.impl.ImmutableJwtParser.parseClaimsJws(ImmutableJwtParser.java:173)
	at com.momo.provider.JwtProvider.validateToken(JwtProvider.java:145)
	at com.momo.filter.JwtAuthorizationFilter.doFilterInternal(JwtAuthorizationFilter.java:38)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:195)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:225)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:340)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:840)
2025-04-17 22:09:13.383 INFO  [http-nio-11040-exec-5] [com.momo.filter.JwtAuthorizationFilter] - 유효한 JWT 토큰이 없습니다
2025-04-17 22:09:13.383 INFO  [http-nio-11040-exec-6] [com.momo.provider.JwtProvider] - Expired JWT Token
io.jsonwebtoken.ExpiredJwtException: JWT expired at 2025-04-17T13:01:06Z. Current time: 2025-04-17T13:09:13Z, a difference of 487383 milliseconds.  Allowed clock skew: 0 milliseconds.
	at io.jsonwebtoken.impl.DefaultJwtParser.parse(DefaultJwtParser.java:427)
	at io.jsonwebtoken.impl.DefaultJwtParser.parse(DefaultJwtParser.java:529)
	at io.jsonwebtoken.impl.DefaultJwtParser.parseClaimsJws(DefaultJwtParser.java:589)
	at io.jsonwebtoken.impl.ImmutableJwtParser.parseClaimsJws(ImmutableJwtParser.java:173)
	at com.momo.provider.JwtProvider.validateToken(JwtProvider.java:145)
	at com.momo.filter.JwtAuthorizationFilter.doFilterInternal(JwtAuthorizationFilter.java:38)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:195)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:225)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:340)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:840)
2025-04-17 22:09:13.383 INFO  [http-nio-11040-exec-6] [com.momo.filter.JwtAuthorizationFilter] - 유효한 JWT 토큰이 없습니다
2025-04-17 22:09:13.384 INFO  [http-nio-11040-exec-5] [com.momo.api.SaleController] - summary: CommonVO(provider=null, date=null, year=null, month=null, day=null, selectType=null, range=null, dateType=null, prevFromYmd=null, prevToYmd=null, currFromYmd=null, currToYmd=null, fromYmd=2024-09-01, toYmd=2025-03-01, fromYm=null, toYm=null, prevDate=null, currDate=null)
2025-04-17 22:09:13.387 DEBUG [http-nio-11040-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
4. with recursive group_generation as (
            select 0 as g
            union all
            select g+1
            from group_generation
            where g < 8
        ), group_weekday as (
            select 0 as g
            union all
            select g+1
            from group_weekday
            where g < 6
        ),  sale as (
            select weekday(actv_dt) as days,
                   device_id,
                   cust_cd,
                   sale_id
            from tb_sale
            where shop_id=2 and

                      seller_id='km1104rs' and

                device_id is not null and
                actv_dt between '2025-03-01' and '2025-03-31'
        ), sale_gene as (
            select sale_id,
                   (
                       case
                           when length(cust_cd) = 6 then floor((year(curdate()) - concat((
                                 case
                                     when substring(cust_cd, 1,2) > '44' then '19'
                                     when substring(cust_cd, 1,2) <= '44' then '20'
                                     end
                                 ),substring(cust_cd,1,2))) / 10)
                           when length(cust_cd) != 6 then null
                           end
                       ) as generation
            from sale
        ), generation as (
            select g,
                   device_id
            from group_generation g
                     left outer join sale_gene sg on g.g=sg.generation
                     left outer join sale s on s.sale_id=sg.sale_id
        ), weekdays as (
            select g,
                   device_id
            from group_weekday w
                     left outer join sale s on s.days=w.g
        )

        select IFNULL(count(device_id),0) as avg
        from generation
        group by g
 {executed in 3 msec}
2025-04-17 22:09:13.389 DEBUG [http-nio-11040-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
2. with base as (select device_id,
                             (SELECT device_nm
                              FROM tb_device
                              WHERE tb_device.device_id = sl.device_id)      as device,
                             sd_id,
                             (SELECT sd_nm
                              FROM tb_second_device
                              WHERE tb_second_device.sd_id = sl.sd_id)       as sec_device,
                             ct_actv_plan,
                             (SELECT ct_plan_nm
                              FROM tb_ct_plan
                              WHERE tb_ct_plan.ct_plan_id = sl.ct_actv_plan) as actv_plan
                      from tb_sale sl
                      where shop_id = 2 and

                                seller_id='km1104rs' and

                        actv_dt between '2025-03-01' and '2025-03-31'),
             device as (SELECT device                   as name,
                               count(device_id) as count
                        from base
                        where device_id is not null
                        group by device),
             sec_device as (SELECT sec_device                   as name,
                                   count(sec_device) as count
                            from base
                            where sd_id is not null
                            group by sec_device),
             actv_plan as (SELECT actv_plan                   as name,
                                  count(actv_plan) as count
                           from base
                           where ct_actv_plan is not null
                           group by actv_plan),
             total as (select count('sec_device') as cnt
                       from base
                       where 'sec_device' is not null
             )

        select name,
               count,
               (
                   IF((select cnt
                       from total) = 0 or count = 0, 0, TRUNCATE(
                              (count / (
                                  select cnt
                                  from total
                              )
                                  ) * 100, 1))
                   ) as per
        from sec_device
        order by per desc
        limit 5
 {executed in 5 msec}
2025-04-17 22:09:13.397 INFO  [http-nio-11040-exec-2] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/notif/count/unread
2025-04-17 22:09:13.399 INFO  [http-nio-11040-exec-2] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDg5NDI2NiwiZXhwIjoxNzQ0ODk0ODY2LCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.9gKPqLpoZUhuBZAxeJMGGl4HxqudLsB5VEB99agO5S8
2025-04-17 22:09:13.400 INFO  [http-nio-11040-exec-2] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/notif/count/unread
2025-04-17 22:09:13.399 DEBUG [http-nio-11040-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
6. with recursive istm_range as (
            select 0 as i
            union all
            select i+1
            from istm_range
            where i<5
        ), base as (
            select ct_istm
            from tb_sale
            where shop_id=2 and

                        seller_id='km1104rs' and

                actv_dt between '2025-03-01' and '2025-03-31'
        ), final as (
            select i as istm,
                   IFNULL(count(base.ct_istm),0) as cnt
            from istm_range
                     left outer join base on base.ct_istm=istm_range.i
            group by i
            order by istm desc
        )

        select json_arrayagg(istm) as type,
               json_arrayagg(cnt) as cnt,
               json_arrayagg(IF((
                      select IFNULL(count(ct_istm), 0)
                      from base
                  ) = 0 or cnt = 0, 0, TRUNCATE((cnt/(
                   select IFNULL(count(ct_istm), 0)
                   from base
               )) * 100, 1))) as per
        from final
 {executed in 12 msec}
2025-04-17 22:09:13.404 INFO  [http-nio-11040-exec-2] [com.momo.provider.JwtProvider] - Expired JWT Token
io.jsonwebtoken.ExpiredJwtException: JWT expired at 2025-04-17T13:01:06Z. Current time: 2025-04-17T13:09:13Z, a difference of 487403 milliseconds.  Allowed clock skew: 0 milliseconds.
	at io.jsonwebtoken.impl.DefaultJwtParser.parse(DefaultJwtParser.java:427)
	at io.jsonwebtoken.impl.DefaultJwtParser.parse(DefaultJwtParser.java:529)
	at io.jsonwebtoken.impl.DefaultJwtParser.parseClaimsJws(DefaultJwtParser.java:589)
	at io.jsonwebtoken.impl.ImmutableJwtParser.parseClaimsJws(ImmutableJwtParser.java:173)
	at com.momo.provider.JwtProvider.validateToken(JwtProvider.java:145)
	at com.momo.filter.JwtAuthorizationFilter.doFilterInternal(JwtAuthorizationFilter.java:38)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:195)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:225)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:340)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:840)
2025-04-17 22:09:13.404 INFO  [http-nio-11040-exec-2] [com.momo.filter.JwtAuthorizationFilter] - 유효한 JWT 토큰이 없습니다
2025-04-17 22:09:13.406 INFO  [http-nio-11040-exec-2] [c.momo.common.util.SecurityContextUtil] - principal: UserDetailsImpl(username=km1104rs, password=$2a$10$uXShhwl6ULOkbJe477uDWOfdiUUcu6lOSF/Dhj9xP3U1nUn/gXkc6, authorities=[ROLE_NONE])
2025-04-17 22:09:13.408 DEBUG [http-nio-11040-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
4. SELECT count(*)
        FROM tb_notification
        WHERE receiver_id = 'km1104rs'
          AND read_st = FALSE
 {executed in 1 msec}
2025-04-17 22:09:13.415 DEBUG [http-nio-11040-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
3. #         월별 날짜 구하기
        with recursive month_range as (
            select '2024-09-01' as d
            union all
            select date_add(d, interval 1 month) as d
            from month_range
            where date_add(d, interval 1 month) < '2025-03-01'
        ), months as(
            select month(d) as m
            from month_range
        ), filtered_sale as ( # 판매일보 초벌
            select month(actv_dt) as actv_month,
                   device_id,
                   internet_plan,
                   tv_plan,
                    exsvc_id,
                   total_cms,
                   wt_cms,
                   sale_id,
                   sd_id,
                    shop_id
            from tb_sale
            where shop_id=2 and

                    seller_id='km1104rs' and

                actv_dt between '2024-09-01' and date_add('2025-03-01', interval 1 month)
        ), ct_graph as ( # 무선 그래프 데이터
            SELECT m,
                   count(device_id) as cnt
            FROM months
                     LEFT OUTER JOIN filtered_sale on actv_month = m and
                                                      device_id is not null
            group by m
        ), internet_graph as ( # 인터넷 그래프 데이터
            SELECT m,
                   count(internet_plan) as cnt
            FROM months
                     LEFT OUTER JOIN filtered_sale on actv_month = m  and
                                                      internet_plan is not null
            group by m
        ), tv_graph as ( # TV 그래프 데이터
            SELECT m,
                   count(tv_plan) as cnt
            FROM months
                     LEFT OUTER JOIN filtered_sale on actv_month = m  and
                                                      tv_plan is not null
            group by m
        ), card as ( # 카드 데이터
            SELECT m,
                   (
                    select count(*)
                    from tb_sale_card sc
                    left outer join filtered_sale fs on fs.shop_id = sc.shop_id and
                                                        fs.sale_id = sc.sale_id
                   )  as cnt
            FROM months
                     LEFT OUTER JOIN filtered_sale on actv_month = m
            group by m
        ), exsvc as ( # 부가서비스 데이터
            SELECT m,
                   count(exsvc_id) as cnt
            FROM months
                     LEFT OUTER JOIN filtered_sale on actv_month = m  and
                                                      exsvc_id is not null
            group by m
        ), tc_graph as ( # 총 이익 그래프 데이터
            SELECT m,
                   IFNULL(sum(total_cms), 0) as cnt
            FROM months
                     LEFT OUTER JOIN filtered_sale on actv_month = m
            group by m
        ), avg_margin_graph as ( # 개인 평균 마진 그래프 데이터
            SELECT m,
                   IFNULL(avg(total_cms), 0) as cnt
            FROM months
                     LEFT OUTER JOIN filtered_sale on actv_month = m and
                                                      device_id is not null
            group by m
        ), ud_graph as ( # 중고 개통 그래프 데이터
            SELECT m,
                   count(ud_id) as cnt
            FROM months
                     LEFT OUTER JOIN filtered_sale on actv_month = m
                     LEFT OUTER JOIN tb_sale_used_device sud on sud.sale_id=filtered_sale.sale_id
            group by m
        ), sec_graph as ( # 세컨 그래프 데이터
            SELECT m,
                   count(sd_id) as cnt
            FROM months
                     LEFT OUTER JOIN filtered_sale on actv_month = m and
                                                      sd_id != 0
            group by m
        ), diff_ct as (
            select
                (
                    select cnt
                    from ct_graph
                    limit 4, 1
                ) as prv,
                (
                    select cnt
                    from ct_graph
                    limit 5,1
                ) as curr
            from dual
        ), diff_internet as (
            select
                (
                    select cnt
                    from internet_graph
                    limit 4,1
                ) as prv,
                (
                    select cnt
                    from internet_graph
                    limit 5,1
                ) as curr
            from dual
        ), diff_tv as (
            select
                (
                    select cnt
                    from tv_graph
                    limit 4,1
                ) as prv,
                (
                    select cnt
                    from tv_graph
                    limit 5,1
                ) as curr
            from dual
        ), diff_card as (
            select
                (
                    select cnt
                    from card
                    limit 4,1
                ) as prv,
                (
                    select cnt
                    from card
                    limit 5,1
                ) as curr
            from dual
        ), diff_exsvc as (
            select
                (
                    select cnt
                    from exsvc
                    limit 4,1
                ) as prv,
                (
                    select cnt
                    from exsvc
                    limit 5,1
                ) as curr
            from dual
        ), diff_tc as (
            select
                (
                    select cnt
                    from tc_graph
                    limit 4,1
                ) as prv,
                (
                    select cnt
                    from tc_graph
                    limit 5,1
                ) as curr
            from dual
        ) , diff_margin as (
            select
                (
                    select cnt
                    from avg_margin_graph
                    limit 4,1
                ) as prv,
                (
                    select cnt
                    from avg_margin_graph
                    limit 5,1
                ) as curr
            from dual
        ), diff_ud as (
            select
                (
                    select cnt
                    from ud_graph
                    limit 4,1
                ) as prv,
                (
                    select cnt
                    from ud_graph
                    limit 5,1
                ) as curr
            from dual
        ) , diff_sec as (
            select
                (
                    select cnt
                    from sec_graph
                    limit 4,1
                ) as prv,
                (
                    select cnt
                    from sec_graph
                    limit 5,1
                ) as curr
            from dual
        ), final as (
            select
                curr,
                prv,
                (
                    select json_arrayagg(cnt)
                    from ct_graph
                ) as list
            from diff_ct
            union all
            select
                curr,
                prv,
                (
                    select json_arrayagg(cnt)
                    from internet_graph
                ) as list
            from diff_internet
            union all
            select
                curr,
                prv,
                (
                    select json_arrayagg(cnt)
                    from tv_graph
                ) as list
            from diff_tv
             union all
            select
                curr,
                prv,
                (
                    select json_arrayagg(cnt)
                    from card
                ) as list
            from diff_card
             union all
            select
                curr,
                prv,
                (
                    select json_arrayagg(cnt)
                    from exsvc
                ) as list
            from diff_exsvc
            union all
            select
                curr,
                prv,
                (
                    select json_arrayagg(cnt)
                    from tc_graph
                ) as list
            from diff_tc
            union all
            select
                curr,
                prv,
                (
                    select json_arrayagg(cnt)
                    from avg_margin_graph
                ) as list
            from diff_margin
            union all
            select
                curr,
                prv,
                (
                    select json_arrayagg(cnt)
                    from ud_graph
                ) as list
            from diff_ud
            union all
            select
                curr,
                prv,
                (
                    select json_arrayagg(cnt)
                    from sec_graph
                ) as list
            from diff_sec
        )

        select FLOOR(curr) as value,
               (
                   CASE
                       WHEN curr = 0 and prv = 0 THEN 0
                       WHEN prv != 0 and curr = 0 THEN -100
                       WHEN prv = 0 and curr != 0 THEN 100
                       WHEN curr != 0 and prv != 0 THEN TRUNCATE(((curr/prv)-1)*100, 1)
                       END
                   ) as per,
               list
        from final
 {executed in 25 msec}
2025-04-17 22:09:13.428 INFO  [http-nio-11040-exec-8] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/sale/graph/stat/select/2
2025-04-17 22:09:13.428 INFO  [http-nio-11040-exec-7] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/sale/graph/ct/select/0
2025-04-17 22:09:13.429 INFO  [http-nio-11040-exec-8] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDg5NDI2NiwiZXhwIjoxNzQ0ODk0ODY2LCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.9gKPqLpoZUhuBZAxeJMGGl4HxqudLsB5VEB99agO5S8
2025-04-17 22:09:13.429 INFO  [http-nio-11040-exec-7] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDg5NDI2NiwiZXhwIjoxNzQ0ODk0ODY2LCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.9gKPqLpoZUhuBZAxeJMGGl4HxqudLsB5VEB99agO5S8
2025-04-17 22:09:13.429 INFO  [http-nio-11040-exec-8] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/sale/graph/stat/select/2
2025-04-17 22:09:13.429 INFO  [http-nio-11040-exec-7] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/sale/graph/ct/select/0
2025-04-17 22:09:13.429 INFO  [http-nio-11040-exec-3] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/sale/graph/ratio/select/0
2025-04-17 22:09:13.429 INFO  [http-nio-11040-exec-3] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDg5NDI2NiwiZXhwIjoxNzQ0ODk0ODY2LCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.9gKPqLpoZUhuBZAxeJMGGl4HxqudLsB5VEB99agO5S8
2025-04-17 22:09:13.429 INFO  [http-nio-11040-exec-3] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/sale/graph/ratio/select/0
2025-04-17 22:09:13.430 INFO  [http-nio-11040-exec-7] [com.momo.provider.JwtProvider] - Expired JWT Token
io.jsonwebtoken.ExpiredJwtException: JWT expired at 2025-04-17T13:01:06Z. Current time: 2025-04-17T13:09:13Z, a difference of 487430 milliseconds.  Allowed clock skew: 0 milliseconds.
	at io.jsonwebtoken.impl.DefaultJwtParser.parse(DefaultJwtParser.java:427)
	at io.jsonwebtoken.impl.DefaultJwtParser.parse(DefaultJwtParser.java:529)
	at io.jsonwebtoken.impl.DefaultJwtParser.parseClaimsJws(DefaultJwtParser.java:589)
	at io.jsonwebtoken.impl.ImmutableJwtParser.parseClaimsJws(ImmutableJwtParser.java:173)
	at com.momo.provider.JwtProvider.validateToken(JwtProvider.java:145)
	at com.momo.filter.JwtAuthorizationFilter.doFilterInternal(JwtAuthorizationFilter.java:38)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:195)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:225)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:340)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:840)
2025-04-17 22:09:13.430 INFO  [http-nio-11040-exec-7] [com.momo.filter.JwtAuthorizationFilter] - 유효한 JWT 토큰이 없습니다
2025-04-17 22:09:13.430 INFO  [http-nio-11040-exec-8] [com.momo.provider.JwtProvider] - Expired JWT Token
io.jsonwebtoken.ExpiredJwtException: JWT expired at 2025-04-17T13:01:06Z. Current time: 2025-04-17T13:09:13Z, a difference of 487430 milliseconds.  Allowed clock skew: 0 milliseconds.
	at io.jsonwebtoken.impl.DefaultJwtParser.parse(DefaultJwtParser.java:427)
	at io.jsonwebtoken.impl.DefaultJwtParser.parse(DefaultJwtParser.java:529)
	at io.jsonwebtoken.impl.DefaultJwtParser.parseClaimsJws(DefaultJwtParser.java:589)
	at io.jsonwebtoken.impl.ImmutableJwtParser.parseClaimsJws(ImmutableJwtParser.java:173)
	at com.momo.provider.JwtProvider.validateToken(JwtProvider.java:145)
	at com.momo.filter.JwtAuthorizationFilter.doFilterInternal(JwtAuthorizationFilter.java:38)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:195)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:225)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:340)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:840)
2025-04-17 22:09:13.430 INFO  [http-nio-11040-exec-8] [com.momo.filter.JwtAuthorizationFilter] - 유효한 JWT 토큰이 없습니다
2025-04-17 22:09:13.430 INFO  [http-nio-11040-exec-3] [com.momo.provider.JwtProvider] - Expired JWT Token
io.jsonwebtoken.ExpiredJwtException: JWT expired at 2025-04-17T13:01:06Z. Current time: 2025-04-17T13:09:13Z, a difference of 487430 milliseconds.  Allowed clock skew: 0 milliseconds.
	at io.jsonwebtoken.impl.DefaultJwtParser.parse(DefaultJwtParser.java:427)
	at io.jsonwebtoken.impl.DefaultJwtParser.parse(DefaultJwtParser.java:529)
	at io.jsonwebtoken.impl.DefaultJwtParser.parseClaimsJws(DefaultJwtParser.java:589)
	at io.jsonwebtoken.impl.ImmutableJwtParser.parseClaimsJws(ImmutableJwtParser.java:173)
	at com.momo.provider.JwtProvider.validateToken(JwtProvider.java:145)
	at com.momo.filter.JwtAuthorizationFilter.doFilterInternal(JwtAuthorizationFilter.java:38)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:195)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:225)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:340)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:840)
2025-04-17 22:09:13.431 INFO  [http-nio-11040-exec-3] [com.momo.filter.JwtAuthorizationFilter] - 유효한 JWT 토큰이 없습니다
2025-04-17 22:09:13.433 DEBUG [http-nio-11040-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
3. with base as (select device_id,
                             (SELECT device_nm
                              FROM tb_device
                              WHERE tb_device.device_id = sl.device_id)      as device,
                             sd_id,
                             (SELECT sd_nm
                              FROM tb_second_device
                              WHERE tb_second_device.sd_id = sl.sd_id)       as sec_device,
                             ct_actv_plan,
                             (SELECT ct_plan_nm
                              FROM tb_ct_plan
                              WHERE tb_ct_plan.ct_plan_id = sl.ct_actv_plan) as actv_plan
                      from tb_sale sl
                      where shop_id = 2 and

                                seller_id='km1104rs' and

                        actv_dt between '2025-03-01' and '2025-03-31'),
             device as (SELECT device                   as name,
                               count(device_id) as count
                        from base
                        where device_id is not null
                        group by device),
             sec_device as (SELECT sec_device                   as name,
                                   count(sec_device) as count
                            from base
                            where sd_id is not null
                            group by sec_device),
             actv_plan as (SELECT actv_plan                   as name,
                                  count(actv_plan) as count
                           from base
                           where ct_actv_plan is not null
                           group by actv_plan),
             total as (select count('sec_device') as cnt
                       from base
                       where 'sec_device' is not null
             )

        select name,
               count,
               (
                   IF((select cnt
                       from total) = 0 or count = 0, 0, TRUNCATE(
                              (count / (
                                  select cnt
                                  from total
                              )
                                  ) * 100, 1))
                   ) as per
        from sec_device
        order by per desc
        limit 5
 {executed in 1 msec}
2025-04-17 22:09:13.433 DEBUG [http-nio-11040-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
4. with recursive group_generation as (
            select 0 as g
            union all
            select g+1
            from group_generation
            where g < 8
        ), group_weekday as (
            select 0 as g
            union all
            select g+1
            from group_weekday
            where g < 6
        ),  sale as (
            select weekday(actv_dt) as days,
                   device_id,
                   cust_cd,
                   sale_id
            from tb_sale
            where shop_id=2 and

                      seller_id='km1104rs' and

                device_id is not null and
                actv_dt between '2025-03-01' and '2025-03-31'
        ), sale_gene as (
            select sale_id,
                   (
                       case
                           when length(cust_cd) = 6 then floor((year(curdate()) - concat((
                                 case
                                     when substring(cust_cd, 1,2) > '44' then '19'
                                     when substring(cust_cd, 1,2) <= '44' then '20'
                                     end
                                 ),substring(cust_cd,1,2))) / 10)
                           when length(cust_cd) != 6 then null
                           end
                       ) as generation
            from sale
        ), generation as (
            select g,
                   device_id
            from group_generation g
                     left outer join sale_gene sg on g.g=sg.generation
                     left outer join sale s on s.sale_id=sg.sale_id
        ), weekdays as (
            select g,
                   device_id
            from group_weekday w
                     left outer join sale s on s.days=w.g
        )

        select IFNULL(count(device_id),0) as avg
        from generation
        group by g
 {executed in 1 msec}
2025-04-17 22:09:13.434 DEBUG [http-nio-11040-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
5. with recursive istm_range as (
            select 0 as i
            union all
            select i+1
            from istm_range
            where i<5
        ), base as (
            select ct_istm
            from tb_sale
            where shop_id=2 and

                        seller_id='km1104rs' and

                actv_dt between '2025-03-01' and '2025-03-31'
        ), final as (
            select i as istm,
                   IFNULL(count(base.ct_istm),0) as cnt
            from istm_range
                     left outer join base on base.ct_istm=istm_range.i
            group by i
            order by istm desc
        )

        select json_arrayagg(istm) as type,
               json_arrayagg(cnt) as cnt,
               json_arrayagg(IF((
                      select IFNULL(count(ct_istm), 0)
                      from base
                  ) = 0 or cnt = 0, 0, TRUNCATE((cnt/(
                   select IFNULL(count(ct_istm), 0)
                   from base
               )) * 100, 1))) as per
        from final
 {executed in 0 msec}
2025-04-17 22:09:14.387 INFO  [http-nio-11040-exec-9] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/notif/count/unread
2025-04-17 22:09:14.387 INFO  [http-nio-11040-exec-9] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDg5NDI2NiwiZXhwIjoxNzQ0ODk0ODY2LCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.9gKPqLpoZUhuBZAxeJMGGl4HxqudLsB5VEB99agO5S8
2025-04-17 22:09:14.388 INFO  [http-nio-11040-exec-9] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/notif/count/unread
2025-04-17 22:09:14.392 INFO  [http-nio-11040-exec-9] [com.momo.provider.JwtProvider] - Expired JWT Token
io.jsonwebtoken.ExpiredJwtException: JWT expired at 2025-04-17T13:01:06Z. Current time: 2025-04-17T13:09:14Z, a difference of 488392 milliseconds.  Allowed clock skew: 0 milliseconds.
	at io.jsonwebtoken.impl.DefaultJwtParser.parse(DefaultJwtParser.java:427)
	at io.jsonwebtoken.impl.DefaultJwtParser.parse(DefaultJwtParser.java:529)
	at io.jsonwebtoken.impl.DefaultJwtParser.parseClaimsJws(DefaultJwtParser.java:589)
	at io.jsonwebtoken.impl.ImmutableJwtParser.parseClaimsJws(ImmutableJwtParser.java:173)
	at com.momo.provider.JwtProvider.validateToken(JwtProvider.java:145)
	at com.momo.filter.JwtAuthorizationFilter.doFilterInternal(JwtAuthorizationFilter.java:38)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:195)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:225)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:340)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:840)
2025-04-17 22:09:14.393 INFO  [http-nio-11040-exec-9] [com.momo.filter.JwtAuthorizationFilter] - 유효한 JWT 토큰이 없습니다
2025-04-17 22:09:14.394 INFO  [http-nio-11040-exec-9] [c.momo.common.util.SecurityContextUtil] - principal: UserDetailsImpl(username=km1104rs, password=$2a$10$uXShhwl6ULOkbJe477uDWOfdiUUcu6lOSF/Dhj9xP3U1nUn/gXkc6, authorities=[ROLE_NONE])
2025-04-17 22:09:14.398 DEBUG [http-nio-11040-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
4. SELECT count(*)
        FROM tb_notification
        WHERE receiver_id = 'km1104rs'
          AND read_st = FALSE
 {executed in 2 msec}
2025-04-17 22:09:15.050 INFO  [http-nio-11040-exec-10] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/notif/count/unread
2025-04-17 22:09:15.050 INFO  [http-nio-11040-exec-10] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDg5NDI2NiwiZXhwIjoxNzQ0ODk0ODY2LCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.9gKPqLpoZUhuBZAxeJMGGl4HxqudLsB5VEB99agO5S8
2025-04-17 22:09:15.050 INFO  [http-nio-11040-exec-10] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/notif/count/unread
2025-04-17 22:09:15.053 INFO  [http-nio-11040-exec-10] [com.momo.provider.JwtProvider] - Expired JWT Token
io.jsonwebtoken.ExpiredJwtException: JWT expired at 2025-04-17T13:01:06Z. Current time: 2025-04-17T13:09:15Z, a difference of 489053 milliseconds.  Allowed clock skew: 0 milliseconds.
	at io.jsonwebtoken.impl.DefaultJwtParser.parse(DefaultJwtParser.java:427)
	at io.jsonwebtoken.impl.DefaultJwtParser.parse(DefaultJwtParser.java:529)
	at io.jsonwebtoken.impl.DefaultJwtParser.parseClaimsJws(DefaultJwtParser.java:589)
	at io.jsonwebtoken.impl.ImmutableJwtParser.parseClaimsJws(ImmutableJwtParser.java:173)
	at com.momo.provider.JwtProvider.validateToken(JwtProvider.java:145)
	at com.momo.filter.JwtAuthorizationFilter.doFilterInternal(JwtAuthorizationFilter.java:38)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:195)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:225)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:340)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:840)
2025-04-17 22:09:15.053 INFO  [http-nio-11040-exec-10] [com.momo.filter.JwtAuthorizationFilter] - 유효한 JWT 토큰이 없습니다
2025-04-17 22:09:15.054 INFO  [http-nio-11040-exec-10] [c.momo.common.util.SecurityContextUtil] - principal: UserDetailsImpl(username=km1104rs, password=$2a$10$uXShhwl6ULOkbJe477uDWOfdiUUcu6lOSF/Dhj9xP3U1nUn/gXkc6, authorities=[ROLE_NONE])
2025-04-17 22:09:15.061 INFO  [http-nio-11040-exec-1] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/sale/graph/stat/select/2
2025-04-17 22:09:15.061 INFO  [http-nio-11040-exec-1] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDg5NDI2NiwiZXhwIjoxNzQ0ODk0ODY2LCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.9gKPqLpoZUhuBZAxeJMGGl4HxqudLsB5VEB99agO5S8
2025-04-17 22:09:15.061 INFO  [http-nio-11040-exec-1] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/sale/graph/stat/select/2
2025-04-17 22:09:15.062 INFO  [http-nio-11040-exec-6] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/sale/graph/ratio/select/0
2025-04-17 22:09:15.062 INFO  [http-nio-11040-exec-6] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDg5NDI2NiwiZXhwIjoxNzQ0ODk0ODY2LCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.9gKPqLpoZUhuBZAxeJMGGl4HxqudLsB5VEB99agO5S8
2025-04-17 22:09:15.062 INFO  [http-nio-11040-exec-6] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/sale/graph/ratio/select/0
2025-04-17 22:09:15.062 INFO  [http-nio-11040-exec-4] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/sale/graph/ct/select/0
2025-04-17 22:09:15.063 INFO  [http-nio-11040-exec-4] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDg5NDI2NiwiZXhwIjoxNzQ0ODk0ODY2LCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.9gKPqLpoZUhuBZAxeJMGGl4HxqudLsB5VEB99agO5S8
2025-04-17 22:09:15.063 INFO  [http-nio-11040-exec-4] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/sale/graph/ct/select/0
2025-04-17 22:09:15.063 INFO  [http-nio-11040-exec-6] [com.momo.provider.JwtProvider] - Expired JWT Token
io.jsonwebtoken.ExpiredJwtException: JWT expired at 2025-04-17T13:01:06Z. Current time: 2025-04-17T13:09:15Z, a difference of 489063 milliseconds.  Allowed clock skew: 0 milliseconds.
	at io.jsonwebtoken.impl.DefaultJwtParser.parse(DefaultJwtParser.java:427)
	at io.jsonwebtoken.impl.DefaultJwtParser.parse(DefaultJwtParser.java:529)
	at io.jsonwebtoken.impl.DefaultJwtParser.parseClaimsJws(DefaultJwtParser.java:589)
	at io.jsonwebtoken.impl.ImmutableJwtParser.parseClaimsJws(ImmutableJwtParser.java:173)
	at com.momo.provider.JwtProvider.validateToken(JwtProvider.java:145)
	at com.momo.filter.JwtAuthorizationFilter.doFilterInternal(JwtAuthorizationFilter.java:38)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:195)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:225)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:340)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:840)
2025-04-17 22:09:15.063 INFO  [http-nio-11040-exec-4] [com.momo.provider.JwtProvider] - Expired JWT Token
io.jsonwebtoken.ExpiredJwtException: JWT expired at 2025-04-17T13:01:06Z. Current time: 2025-04-17T13:09:15Z, a difference of 489063 milliseconds.  Allowed clock skew: 0 milliseconds.
	at io.jsonwebtoken.impl.DefaultJwtParser.parse(DefaultJwtParser.java:427)
	at io.jsonwebtoken.impl.DefaultJwtParser.parse(DefaultJwtParser.java:529)
	at io.jsonwebtoken.impl.DefaultJwtParser.parseClaimsJws(DefaultJwtParser.java:589)
	at io.jsonwebtoken.impl.ImmutableJwtParser.parseClaimsJws(ImmutableJwtParser.java:173)
	at com.momo.provider.JwtProvider.validateToken(JwtProvider.java:145)
	at com.momo.filter.JwtAuthorizationFilter.doFilterInternal(JwtAuthorizationFilter.java:38)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:195)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:225)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:340)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:840)
2025-04-17 22:09:15.063 INFO  [http-nio-11040-exec-4] [com.momo.filter.JwtAuthorizationFilter] - 유효한 JWT 토큰이 없습니다
2025-04-17 22:09:15.063 INFO  [http-nio-11040-exec-1] [com.momo.provider.JwtProvider] - Expired JWT Token
io.jsonwebtoken.ExpiredJwtException: JWT expired at 2025-04-17T13:01:06Z. Current time: 2025-04-17T13:09:15Z, a difference of 489063 milliseconds.  Allowed clock skew: 0 milliseconds.
	at io.jsonwebtoken.impl.DefaultJwtParser.parse(DefaultJwtParser.java:427)
	at io.jsonwebtoken.impl.DefaultJwtParser.parse(DefaultJwtParser.java:529)
	at io.jsonwebtoken.impl.DefaultJwtParser.parseClaimsJws(DefaultJwtParser.java:589)
	at io.jsonwebtoken.impl.ImmutableJwtParser.parseClaimsJws(ImmutableJwtParser.java:173)
	at com.momo.provider.JwtProvider.validateToken(JwtProvider.java:145)
	at com.momo.filter.JwtAuthorizationFilter.doFilterInternal(JwtAuthorizationFilter.java:38)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:195)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:225)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:340)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:840)
2025-04-17 22:09:15.064 INFO  [http-nio-11040-exec-1] [com.momo.filter.JwtAuthorizationFilter] - 유효한 JWT 토큰이 없습니다
2025-04-17 22:09:15.063 INFO  [http-nio-11040-exec-6] [com.momo.filter.JwtAuthorizationFilter] - 유효한 JWT 토큰이 없습니다
2025-04-17 22:09:15.064 INFO  [http-nio-11040-exec-2] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/sale/graph/summary
2025-04-17 22:09:15.065 INFO  [http-nio-11040-exec-2] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDg5NDI2NiwiZXhwIjoxNzQ0ODk0ODY2LCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.9gKPqLpoZUhuBZAxeJMGGl4HxqudLsB5VEB99agO5S8
2025-04-17 22:09:15.065 INFO  [http-nio-11040-exec-2] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/sale/graph/summary
2025-04-17 22:09:15.066 INFO  [http-nio-11040-exec-2] [com.momo.provider.JwtProvider] - Expired JWT Token
io.jsonwebtoken.ExpiredJwtException: JWT expired at 2025-04-17T13:01:06Z. Current time: 2025-04-17T13:09:15Z, a difference of 489066 milliseconds.  Allowed clock skew: 0 milliseconds.
	at io.jsonwebtoken.impl.DefaultJwtParser.parse(DefaultJwtParser.java:427)
	at io.jsonwebtoken.impl.DefaultJwtParser.parse(DefaultJwtParser.java:529)
	at io.jsonwebtoken.impl.DefaultJwtParser.parseClaimsJws(DefaultJwtParser.java:589)
	at io.jsonwebtoken.impl.ImmutableJwtParser.parseClaimsJws(ImmutableJwtParser.java:173)
	at com.momo.provider.JwtProvider.validateToken(JwtProvider.java:145)
	at com.momo.filter.JwtAuthorizationFilter.doFilterInternal(JwtAuthorizationFilter.java:38)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:195)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:225)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:340)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:840)
2025-04-17 22:09:15.067 INFO  [http-nio-11040-exec-2] [com.momo.filter.JwtAuthorizationFilter] - 유효한 JWT 토큰이 없습니다
2025-04-17 22:09:15.074 INFO  [http-nio-11040-exec-2] [com.momo.api.SaleController] - summary: CommonVO(provider=null, date=null, year=null, month=null, day=null, selectType=null, range=null, dateType=null, prevFromYmd=null, prevToYmd=null, currFromYmd=null, currToYmd=null, fromYmd=2024-10-01, toYmd=2025-04-01, fromYm=null, toYm=null, prevDate=null, currDate=null)
2025-04-17 22:09:15.077 DEBUG [http-nio-11040-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT count(*)
        FROM tb_notification
        WHERE receiver_id = 'km1104rs'
          AND read_st = FALSE
 {executed in 20 msec}
2025-04-17 22:09:15.078 DEBUG [http-nio-11040-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
3. with base as (select device_id,
                             (SELECT device_nm
                              FROM tb_device
                              WHERE tb_device.device_id = sl.device_id)      as device,
                             sd_id,
                             (SELECT sd_nm
                              FROM tb_second_device
                              WHERE tb_second_device.sd_id = sl.sd_id)       as sec_device,
                             ct_actv_plan,
                             (SELECT ct_plan_nm
                              FROM tb_ct_plan
                              WHERE tb_ct_plan.ct_plan_id = sl.ct_actv_plan) as actv_plan
                      from tb_sale sl
                      where shop_id = 2 and

                                seller_id='km1104rs' and

                        actv_dt between '2025-04-01' and '2025-04-30'),
             device as (SELECT device                   as name,
                               count(device_id) as count
                        from base
                        where device_id is not null
                        group by device),
             sec_device as (SELECT sec_device                   as name,
                                   count(sec_device) as count
                            from base
                            where sd_id is not null
                            group by sec_device),
             actv_plan as (SELECT actv_plan                   as name,
                                  count(actv_plan) as count
                           from base
                           where ct_actv_plan is not null
                           group by actv_plan),
             total as (select count('sec_device') as cnt
                       from base
                       where 'sec_device' is not null
             )

        select name,
               count,
               (
                   IF((select cnt
                       from total) = 0 or count = 0, 0, TRUNCATE(
                              (count / (
                                  select cnt
                                  from total
                              )
                                  ) * 100, 1))
                   ) as per
        from sec_device
        order by per desc
        limit 5
 {executed in 2 msec}
2025-04-17 22:09:15.078 DEBUG [http-nio-11040-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
2. with recursive group_generation as (
            select 0 as g
            union all
            select g+1
            from group_generation
            where g < 8
        ), group_weekday as (
            select 0 as g
            union all
            select g+1
            from group_weekday
            where g < 6
        ),  sale as (
            select weekday(actv_dt) as days,
                   device_id,
                   cust_cd,
                   sale_id
            from tb_sale
            where shop_id=2 and

                      seller_id='km1104rs' and

                device_id is not null and
                actv_dt between '2025-04-01' and '2025-04-30'
        ), sale_gene as (
            select sale_id,
                   (
                       case
                           when length(cust_cd) = 6 then floor((year(curdate()) - concat((
                                 case
                                     when substring(cust_cd, 1,2) > '44' then '19'
                                     when substring(cust_cd, 1,2) <= '44' then '20'
                                     end
                                 ),substring(cust_cd,1,2))) / 10)
                           when length(cust_cd) != 6 then null
                           end
                       ) as generation
            from sale
        ), generation as (
            select g,
                   device_id
            from group_generation g
                     left outer join sale_gene sg on g.g=sg.generation
                     left outer join sale s on s.sale_id=sg.sale_id
        ), weekdays as (
            select g,
                   device_id
            from group_weekday w
                     left outer join sale s on s.days=w.g
        )

        select IFNULL(count(device_id),0) as avg
        from generation
        group by g
 {executed in 2 msec}
2025-04-17 22:09:15.078 DEBUG [http-nio-11040-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
6. with recursive istm_range as (
            select 0 as i
            union all
            select i+1
            from istm_range
            where i<5
        ), base as (
            select ct_istm
            from tb_sale
            where shop_id=2 and

                        seller_id='km1104rs' and

                actv_dt between '2025-04-01' and '2025-04-30'
        ), final as (
            select i as istm,
                   IFNULL(count(base.ct_istm),0) as cnt
            from istm_range
                     left outer join base on base.ct_istm=istm_range.i
            group by i
            order by istm desc
        )

        select json_arrayagg(istm) as type,
               json_arrayagg(cnt) as cnt,
               json_arrayagg(IF((
                      select IFNULL(count(ct_istm), 0)
                      from base
                  ) = 0 or cnt = 0, 0, TRUNCATE((cnt/(
                   select IFNULL(count(ct_istm), 0)
                   from base
               )) * 100, 1))) as per
        from final
 {executed in 2 msec}
2025-04-17 22:09:15.084 INFO  [http-nio-11040-exec-5] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/notif/count/unread
2025-04-17 22:09:15.084 INFO  [http-nio-11040-exec-5] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDg5NDI2NiwiZXhwIjoxNzQ0ODk0ODY2LCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.9gKPqLpoZUhuBZAxeJMGGl4HxqudLsB5VEB99agO5S8
2025-04-17 22:09:15.084 INFO  [http-nio-11040-exec-5] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/notif/count/unread
2025-04-17 22:09:15.085 INFO  [http-nio-11040-exec-5] [com.momo.provider.JwtProvider] - Expired JWT Token
io.jsonwebtoken.ExpiredJwtException: JWT expired at 2025-04-17T13:01:06Z. Current time: 2025-04-17T13:09:15Z, a difference of 489085 milliseconds.  Allowed clock skew: 0 milliseconds.
	at io.jsonwebtoken.impl.DefaultJwtParser.parse(DefaultJwtParser.java:427)
	at io.jsonwebtoken.impl.DefaultJwtParser.parse(DefaultJwtParser.java:529)
	at io.jsonwebtoken.impl.DefaultJwtParser.parseClaimsJws(DefaultJwtParser.java:589)
	at io.jsonwebtoken.impl.ImmutableJwtParser.parseClaimsJws(ImmutableJwtParser.java:173)
	at com.momo.provider.JwtProvider.validateToken(JwtProvider.java:145)
	at com.momo.filter.JwtAuthorizationFilter.doFilterInternal(JwtAuthorizationFilter.java:38)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:195)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:225)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:340)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:840)
2025-04-17 22:09:15.085 INFO  [http-nio-11040-exec-5] [com.momo.filter.JwtAuthorizationFilter] - 유효한 JWT 토큰이 없습니다
2025-04-17 22:09:15.085 INFO  [http-nio-11040-exec-5] [c.momo.common.util.SecurityContextUtil] - principal: UserDetailsImpl(username=km1104rs, password=$2a$10$uXShhwl6ULOkbJe477uDWOfdiUUcu6lOSF/Dhj9xP3U1nUn/gXkc6, authorities=[ROLE_NONE])
2025-04-17 22:09:15.087 DEBUG [http-nio-11040-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
3. SELECT count(*)
        FROM tb_notification
        WHERE receiver_id = 'km1104rs'
          AND read_st = FALSE
 {executed in 1 msec}
2025-04-17 22:09:15.105 DEBUG [http-nio-11040-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
4. #         월별 날짜 구하기
        with recursive month_range as (
            select '2024-10-01' as d
            union all
            select date_add(d, interval 1 month) as d
            from month_range
            where date_add(d, interval 1 month) < '2025-04-01'
        ), months as(
            select month(d) as m
            from month_range
        ), filtered_sale as ( # 판매일보 초벌
            select month(actv_dt) as actv_month,
                   device_id,
                   internet_plan,
                   tv_plan,
                    exsvc_id,
                   total_cms,
                   wt_cms,
                   sale_id,
                   sd_id,
                    shop_id
            from tb_sale
            where shop_id=2 and

                    seller_id='km1104rs' and

                actv_dt between '2024-10-01' and date_add('2025-04-01', interval 1 month)
        ), ct_graph as ( # 무선 그래프 데이터
            SELECT m,
                   count(device_id) as cnt
            FROM months
                     LEFT OUTER JOIN filtered_sale on actv_month = m and
                                                      device_id is not null
            group by m
        ), internet_graph as ( # 인터넷 그래프 데이터
            SELECT m,
                   count(internet_plan) as cnt
            FROM months
                     LEFT OUTER JOIN filtered_sale on actv_month = m  and
                                                      internet_plan is not null
            group by m
        ), tv_graph as ( # TV 그래프 데이터
            SELECT m,
                   count(tv_plan) as cnt
            FROM months
                     LEFT OUTER JOIN filtered_sale on actv_month = m  and
                                                      tv_plan is not null
            group by m
        ), card as ( # 카드 데이터
            SELECT m,
                   (
                    select count(*)
                    from tb_sale_card sc
                    left outer join filtered_sale fs on fs.shop_id = sc.shop_id and
                                                        fs.sale_id = sc.sale_id
                   )  as cnt
            FROM months
                     LEFT OUTER JOIN filtered_sale on actv_month = m
            group by m
        ), exsvc as ( # 부가서비스 데이터
            SELECT m,
                   count(exsvc_id) as cnt
            FROM months
                     LEFT OUTER JOIN filtered_sale on actv_month = m  and
                                                      exsvc_id is not null
            group by m
        ), tc_graph as ( # 총 이익 그래프 데이터
            SELECT m,
                   IFNULL(sum(total_cms), 0) as cnt
            FROM months
                     LEFT OUTER JOIN filtered_sale on actv_month = m
            group by m
        ), avg_margin_graph as ( # 개인 평균 마진 그래프 데이터
            SELECT m,
                   IFNULL(avg(total_cms), 0) as cnt
            FROM months
                     LEFT OUTER JOIN filtered_sale on actv_month = m and
                                                      device_id is not null
            group by m
        ), ud_graph as ( # 중고 개통 그래프 데이터
            SELECT m,
                   count(ud_id) as cnt
            FROM months
                     LEFT OUTER JOIN filtered_sale on actv_month = m
                     LEFT OUTER JOIN tb_sale_used_device sud on sud.sale_id=filtered_sale.sale_id
            group by m
        ), sec_graph as ( # 세컨 그래프 데이터
            SELECT m,
                   count(sd_id) as cnt
            FROM months
                     LEFT OUTER JOIN filtered_sale on actv_month = m and
                                                      sd_id != 0
            group by m
        ), diff_ct as (
            select
                (
                    select cnt
                    from ct_graph
                    limit 4, 1
                ) as prv,
                (
                    select cnt
                    from ct_graph
                    limit 5,1
                ) as curr
            from dual
        ), diff_internet as (
            select
                (
                    select cnt
                    from internet_graph
                    limit 4,1
                ) as prv,
                (
                    select cnt
                    from internet_graph
                    limit 5,1
                ) as curr
            from dual
        ), diff_tv as (
            select
                (
                    select cnt
                    from tv_graph
                    limit 4,1
                ) as prv,
                (
                    select cnt
                    from tv_graph
                    limit 5,1
                ) as curr
            from dual
        ), diff_card as (
            select
                (
                    select cnt
                    from card
                    limit 4,1
                ) as prv,
                (
                    select cnt
                    from card
                    limit 5,1
                ) as curr
            from dual
        ), diff_exsvc as (
            select
                (
                    select cnt
                    from exsvc
                    limit 4,1
                ) as prv,
                (
                    select cnt
                    from exsvc
                    limit 5,1
                ) as curr
            from dual
        ), diff_tc as (
            select
                (
                    select cnt
                    from tc_graph
                    limit 4,1
                ) as prv,
                (
                    select cnt
                    from tc_graph
                    limit 5,1
                ) as curr
            from dual
        ) , diff_margin as (
            select
                (
                    select cnt
                    from avg_margin_graph
                    limit 4,1
                ) as prv,
                (
                    select cnt
                    from avg_margin_graph
                    limit 5,1
                ) as curr
            from dual
        ), diff_ud as (
            select
                (
                    select cnt
                    from ud_graph
                    limit 4,1
                ) as prv,
                (
                    select cnt
                    from ud_graph
                    limit 5,1
                ) as curr
            from dual
        ) , diff_sec as (
            select
                (
                    select cnt
                    from sec_graph
                    limit 4,1
                ) as prv,
                (
                    select cnt
                    from sec_graph
                    limit 5,1
                ) as curr
            from dual
        ), final as (
            select
                curr,
                prv,
                (
                    select json_arrayagg(cnt)
                    from ct_graph
                ) as list
            from diff_ct
            union all
            select
                curr,
                prv,
                (
                    select json_arrayagg(cnt)
                    from internet_graph
                ) as list
            from diff_internet
            union all
            select
                curr,
                prv,
                (
                    select json_arrayagg(cnt)
                    from tv_graph
                ) as list
            from diff_tv
             union all
            select
                curr,
                prv,
                (
                    select json_arrayagg(cnt)
                    from card
                ) as list
            from diff_card
             union all
            select
                curr,
                prv,
                (
                    select json_arrayagg(cnt)
                    from exsvc
                ) as list
            from diff_exsvc
            union all
            select
                curr,
                prv,
                (
                    select json_arrayagg(cnt)
                    from tc_graph
                ) as list
            from diff_tc
            union all
            select
                curr,
                prv,
                (
                    select json_arrayagg(cnt)
                    from avg_margin_graph
                ) as list
            from diff_margin
            union all
            select
                curr,
                prv,
                (
                    select json_arrayagg(cnt)
                    from ud_graph
                ) as list
            from diff_ud
            union all
            select
                curr,
                prv,
                (
                    select json_arrayagg(cnt)
                    from sec_graph
                ) as list
            from diff_sec
        )

        select FLOOR(curr) as value,
               (
                   CASE
                       WHEN curr = 0 and prv = 0 THEN 0
                       WHEN prv != 0 and curr = 0 THEN -100
                       WHEN prv = 0 and curr != 0 THEN 100
                       WHEN curr != 0 and prv != 0 THEN TRUNCATE(((curr/prv)-1)*100, 1)
                       END
                   ) as per,
               list
        from final
 {executed in 26 msec}
2025-04-17 22:09:15.126 INFO  [http-nio-11040-exec-8] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/sale/graph/stat/select/2
2025-04-17 22:09:15.126 INFO  [http-nio-11040-exec-8] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDg5NDI2NiwiZXhwIjoxNzQ0ODk0ODY2LCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.9gKPqLpoZUhuBZAxeJMGGl4HxqudLsB5VEB99agO5S8
2025-04-17 22:09:15.126 INFO  [http-nio-11040-exec-8] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/sale/graph/stat/select/2
2025-04-17 22:09:15.126 INFO  [http-nio-11040-exec-7] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/sale/graph/ct/select/0
2025-04-17 22:09:15.126 INFO  [http-nio-11040-exec-7] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDg5NDI2NiwiZXhwIjoxNzQ0ODk0ODY2LCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.9gKPqLpoZUhuBZAxeJMGGl4HxqudLsB5VEB99agO5S8
2025-04-17 22:09:15.126 INFO  [http-nio-11040-exec-7] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/sale/graph/ct/select/0
2025-04-17 22:09:15.128 INFO  [http-nio-11040-exec-7] [com.momo.provider.JwtProvider] - Expired JWT Token
io.jsonwebtoken.ExpiredJwtException: JWT expired at 2025-04-17T13:01:06Z. Current time: 2025-04-17T13:09:15Z, a difference of 489128 milliseconds.  Allowed clock skew: 0 milliseconds.
	at io.jsonwebtoken.impl.DefaultJwtParser.parse(DefaultJwtParser.java:427)
	at io.jsonwebtoken.impl.DefaultJwtParser.parse(DefaultJwtParser.java:529)
	at io.jsonwebtoken.impl.DefaultJwtParser.parseClaimsJws(DefaultJwtParser.java:589)
	at io.jsonwebtoken.impl.ImmutableJwtParser.parseClaimsJws(ImmutableJwtParser.java:173)
	at com.momo.provider.JwtProvider.validateToken(JwtProvider.java:145)
	at com.momo.filter.JwtAuthorizationFilter.doFilterInternal(JwtAuthorizationFilter.java:38)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:195)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:225)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:340)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:840)
2025-04-17 22:09:15.128 INFO  [http-nio-11040-exec-7] [com.momo.filter.JwtAuthorizationFilter] - 유효한 JWT 토큰이 없습니다
2025-04-17 22:09:15.128 INFO  [http-nio-11040-exec-8] [com.momo.provider.JwtProvider] - Expired JWT Token
io.jsonwebtoken.ExpiredJwtException: JWT expired at 2025-04-17T13:01:06Z. Current time: 2025-04-17T13:09:15Z, a difference of 489128 milliseconds.  Allowed clock skew: 0 milliseconds.
	at io.jsonwebtoken.impl.DefaultJwtParser.parse(DefaultJwtParser.java:427)
	at io.jsonwebtoken.impl.DefaultJwtParser.parse(DefaultJwtParser.java:529)
	at io.jsonwebtoken.impl.DefaultJwtParser.parseClaimsJws(DefaultJwtParser.java:589)
	at io.jsonwebtoken.impl.ImmutableJwtParser.parseClaimsJws(ImmutableJwtParser.java:173)
	at com.momo.provider.JwtProvider.validateToken(JwtProvider.java:145)
	at com.momo.filter.JwtAuthorizationFilter.doFilterInternal(JwtAuthorizationFilter.java:38)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:195)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:225)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:340)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:840)
2025-04-17 22:09:15.128 INFO  [http-nio-11040-exec-8] [com.momo.filter.JwtAuthorizationFilter] - 유효한 JWT 토큰이 없습니다
2025-04-17 22:09:15.129 INFO  [http-nio-11040-exec-3] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/sale/graph/ratio/select/0
2025-04-17 22:09:15.129 INFO  [http-nio-11040-exec-3] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDg5NDI2NiwiZXhwIjoxNzQ0ODk0ODY2LCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.9gKPqLpoZUhuBZAxeJMGGl4HxqudLsB5VEB99agO5S8
2025-04-17 22:09:15.129 INFO  [http-nio-11040-exec-3] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/sale/graph/ratio/select/0
2025-04-17 22:09:15.129 INFO  [http-nio-11040-exec-3] [com.momo.provider.JwtProvider] - Expired JWT Token
io.jsonwebtoken.ExpiredJwtException: JWT expired at 2025-04-17T13:01:06Z. Current time: 2025-04-17T13:09:15Z, a difference of 489129 milliseconds.  Allowed clock skew: 0 milliseconds.
	at io.jsonwebtoken.impl.DefaultJwtParser.parse(DefaultJwtParser.java:427)
	at io.jsonwebtoken.impl.DefaultJwtParser.parse(DefaultJwtParser.java:529)
	at io.jsonwebtoken.impl.DefaultJwtParser.parseClaimsJws(DefaultJwtParser.java:589)
	at io.jsonwebtoken.impl.ImmutableJwtParser.parseClaimsJws(ImmutableJwtParser.java:173)
	at com.momo.provider.JwtProvider.validateToken(JwtProvider.java:145)
	at com.momo.filter.JwtAuthorizationFilter.doFilterInternal(JwtAuthorizationFilter.java:38)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:195)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:225)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:340)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:840)
2025-04-17 22:09:15.130 INFO  [http-nio-11040-exec-3] [com.momo.filter.JwtAuthorizationFilter] - 유효한 JWT 토큰이 없습니다
2025-04-17 22:09:15.132 DEBUG [http-nio-11040-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
3. with base as (select device_id,
                             (SELECT device_nm
                              FROM tb_device
                              WHERE tb_device.device_id = sl.device_id)      as device,
                             sd_id,
                             (SELECT sd_nm
                              FROM tb_second_device
                              WHERE tb_second_device.sd_id = sl.sd_id)       as sec_device,
                             ct_actv_plan,
                             (SELECT ct_plan_nm
                              FROM tb_ct_plan
                              WHERE tb_ct_plan.ct_plan_id = sl.ct_actv_plan) as actv_plan
                      from tb_sale sl
                      where shop_id = 2 and

                                seller_id='km1104rs' and

                        actv_dt between '2025-04-01' and '2025-04-30'),
             device as (SELECT device                   as name,
                               count(device_id) as count
                        from base
                        where device_id is not null
                        group by device),
             sec_device as (SELECT sec_device                   as name,
                                   count(sec_device) as count
                            from base
                            where sd_id is not null
                            group by sec_device),
             actv_plan as (SELECT actv_plan                   as name,
                                  count(actv_plan) as count
                           from base
                           where ct_actv_plan is not null
                           group by actv_plan),
             total as (select count('sec_device') as cnt
                       from base
                       where 'sec_device' is not null
             )

        select name,
               count,
               (
                   IF((select cnt
                       from total) = 0 or count = 0, 0, TRUNCATE(
                              (count / (
                                  select cnt
                                  from total
                              )
                                  ) * 100, 1))
                   ) as per
        from sec_device
        order by per desc
        limit 5
 {executed in 2 msec}
2025-04-17 22:09:15.132 DEBUG [http-nio-11040-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
4. with recursive group_generation as (
            select 0 as g
            union all
            select g+1
            from group_generation
            where g < 8
        ), group_weekday as (
            select 0 as g
            union all
            select g+1
            from group_weekday
            where g < 6
        ),  sale as (
            select weekday(actv_dt) as days,
                   device_id,
                   cust_cd,
                   sale_id
            from tb_sale
            where shop_id=2 and

                      seller_id='km1104rs' and

                device_id is not null and
                actv_dt between '2025-04-01' and '2025-04-30'
        ), sale_gene as (
            select sale_id,
                   (
                       case
                           when length(cust_cd) = 6 then floor((year(curdate()) - concat((
                                 case
                                     when substring(cust_cd, 1,2) > '44' then '19'
                                     when substring(cust_cd, 1,2) <= '44' then '20'
                                     end
                                 ),substring(cust_cd,1,2))) / 10)
                           when length(cust_cd) != 6 then null
                           end
                       ) as generation
            from sale
        ), generation as (
            select g,
                   device_id
            from group_generation g
                     left outer join sale_gene sg on g.g=sg.generation
                     left outer join sale s on s.sale_id=sg.sale_id
        ), weekdays as (
            select g,
                   device_id
            from group_weekday w
                     left outer join sale s on s.days=w.g
        )

        select IFNULL(count(device_id),0) as avg
        from generation
        group by g
 {executed in 2 msec}
2025-04-17 22:09:15.133 DEBUG [http-nio-11040-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
5. with recursive istm_range as (
            select 0 as i
            union all
            select i+1
            from istm_range
            where i<5
        ), base as (
            select ct_istm
            from tb_sale
            where shop_id=2 and

                        seller_id='km1104rs' and

                actv_dt between '2025-04-01' and '2025-04-30'
        ), final as (
            select i as istm,
                   IFNULL(count(base.ct_istm),0) as cnt
            from istm_range
                     left outer join base on base.ct_istm=istm_range.i
            group by i
            order by istm desc
        )

        select json_arrayagg(istm) as type,
               json_arrayagg(cnt) as cnt,
               json_arrayagg(IF((
                      select IFNULL(count(ct_istm), 0)
                      from base
                  ) = 0 or cnt = 0, 0, TRUNCATE((cnt/(
                   select IFNULL(count(ct_istm), 0)
                   from base
               )) * 100, 1))) as per
        from final
 {executed in 2 msec}
2025-04-17 22:09:16.353 INFO  [http-nio-11040-exec-9] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/notif/count/unread
2025-04-17 22:09:16.353 INFO  [http-nio-11040-exec-9] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDg5NDI2NiwiZXhwIjoxNzQ0ODk0ODY2LCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.9gKPqLpoZUhuBZAxeJMGGl4HxqudLsB5VEB99agO5S8
2025-04-17 22:09:16.353 INFO  [http-nio-11040-exec-9] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/notif/count/unread
2025-04-17 22:09:16.355 INFO  [http-nio-11040-exec-9] [com.momo.provider.JwtProvider] - Expired JWT Token
io.jsonwebtoken.ExpiredJwtException: JWT expired at 2025-04-17T13:01:06Z. Current time: 2025-04-17T13:09:16Z, a difference of 490355 milliseconds.  Allowed clock skew: 0 milliseconds.
	at io.jsonwebtoken.impl.DefaultJwtParser.parse(DefaultJwtParser.java:427)
	at io.jsonwebtoken.impl.DefaultJwtParser.parse(DefaultJwtParser.java:529)
	at io.jsonwebtoken.impl.DefaultJwtParser.parseClaimsJws(DefaultJwtParser.java:589)
	at io.jsonwebtoken.impl.ImmutableJwtParser.parseClaimsJws(ImmutableJwtParser.java:173)
	at com.momo.provider.JwtProvider.validateToken(JwtProvider.java:145)
	at com.momo.filter.JwtAuthorizationFilter.doFilterInternal(JwtAuthorizationFilter.java:38)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:195)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:225)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:340)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:840)
2025-04-17 22:09:16.356 INFO  [http-nio-11040-exec-9] [com.momo.filter.JwtAuthorizationFilter] - 유효한 JWT 토큰이 없습니다
2025-04-17 22:09:16.359 INFO  [http-nio-11040-exec-9] [c.momo.common.util.SecurityContextUtil] - principal: UserDetailsImpl(username=km1104rs, password=$2a$10$uXShhwl6ULOkbJe477uDWOfdiUUcu6lOSF/Dhj9xP3U1nUn/gXkc6, authorities=[ROLE_NONE])
2025-04-17 22:09:16.362 DEBUG [http-nio-11040-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
4. SELECT count(*)
        FROM tb_notification
        WHERE receiver_id = 'km1104rs'
          AND read_st = FALSE
 {executed in 2 msec}
2025-04-17 22:09:17.481 INFO  [http-nio-11040-exec-10] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/notif/count/unread
2025-04-17 22:09:17.482 INFO  [http-nio-11040-exec-10] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDg5NDI2NiwiZXhwIjoxNzQ0ODk0ODY2LCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.9gKPqLpoZUhuBZAxeJMGGl4HxqudLsB5VEB99agO5S8
2025-04-17 22:09:17.482 INFO  [http-nio-11040-exec-10] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/notif/count/unread
2025-04-17 22:09:17.483 INFO  [http-nio-11040-exec-10] [com.momo.provider.JwtProvider] - Expired JWT Token
io.jsonwebtoken.ExpiredJwtException: JWT expired at 2025-04-17T13:01:06Z. Current time: 2025-04-17T13:09:17Z, a difference of 491483 milliseconds.  Allowed clock skew: 0 milliseconds.
	at io.jsonwebtoken.impl.DefaultJwtParser.parse(DefaultJwtParser.java:427)
	at io.jsonwebtoken.impl.DefaultJwtParser.parse(DefaultJwtParser.java:529)
	at io.jsonwebtoken.impl.DefaultJwtParser.parseClaimsJws(DefaultJwtParser.java:589)
	at io.jsonwebtoken.impl.ImmutableJwtParser.parseClaimsJws(ImmutableJwtParser.java:173)
	at com.momo.provider.JwtProvider.validateToken(JwtProvider.java:145)
	at com.momo.filter.JwtAuthorizationFilter.doFilterInternal(JwtAuthorizationFilter.java:38)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:195)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:225)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:340)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:840)
2025-04-17 22:09:17.483 INFO  [http-nio-11040-exec-10] [com.momo.filter.JwtAuthorizationFilter] - 유효한 JWT 토큰이 없습니다
2025-04-17 22:09:17.484 INFO  [http-nio-11040-exec-10] [c.momo.common.util.SecurityContextUtil] - principal: UserDetailsImpl(username=km1104rs, password=$2a$10$uXShhwl6ULOkbJe477uDWOfdiUUcu6lOSF/Dhj9xP3U1nUn/gXkc6, authorities=[ROLE_NONE])
2025-04-17 22:09:17.487 DEBUG [http-nio-11040-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT count(*)
        FROM tb_notification
        WHERE receiver_id = 'km1104rs'
          AND read_st = FALSE
 {executed in 2 msec}
2025-04-17 22:09:17.489 INFO  [http-nio-11040-exec-1] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/sale/graph/ct/select/0
2025-04-17 22:09:17.489 INFO  [http-nio-11040-exec-1] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDg5NDI2NiwiZXhwIjoxNzQ0ODk0ODY2LCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.9gKPqLpoZUhuBZAxeJMGGl4HxqudLsB5VEB99agO5S8
2025-04-17 22:09:17.489 INFO  [http-nio-11040-exec-1] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/sale/graph/ct/select/0
2025-04-17 22:09:17.490 INFO  [http-nio-11040-exec-6] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/sale/graph/stat/select/2
2025-04-17 22:09:17.491 INFO  [http-nio-11040-exec-6] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDg5NDI2NiwiZXhwIjoxNzQ0ODk0ODY2LCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.9gKPqLpoZUhuBZAxeJMGGl4HxqudLsB5VEB99agO5S8
2025-04-17 22:09:17.491 INFO  [http-nio-11040-exec-6] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/sale/graph/stat/select/2
2025-04-17 22:09:17.490 INFO  [http-nio-11040-exec-1] [com.momo.provider.JwtProvider] - Expired JWT Token
io.jsonwebtoken.ExpiredJwtException: JWT expired at 2025-04-17T13:01:06Z. Current time: 2025-04-17T13:09:17Z, a difference of 491490 milliseconds.  Allowed clock skew: 0 milliseconds.
	at io.jsonwebtoken.impl.DefaultJwtParser.parse(DefaultJwtParser.java:427)
	at io.jsonwebtoken.impl.DefaultJwtParser.parse(DefaultJwtParser.java:529)
	at io.jsonwebtoken.impl.DefaultJwtParser.parseClaimsJws(DefaultJwtParser.java:589)
	at io.jsonwebtoken.impl.ImmutableJwtParser.parseClaimsJws(ImmutableJwtParser.java:173)
	at com.momo.provider.JwtProvider.validateToken(JwtProvider.java:145)
	at com.momo.filter.JwtAuthorizationFilter.doFilterInternal(JwtAuthorizationFilter.java:38)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:195)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:225)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:340)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:840)
2025-04-17 22:09:17.491 INFO  [http-nio-11040-exec-1] [com.momo.filter.JwtAuthorizationFilter] - 유효한 JWT 토큰이 없습니다
2025-04-17 22:09:17.491 INFO  [http-nio-11040-exec-4] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/sale/graph/ratio/select/0
2025-04-17 22:09:17.491 INFO  [http-nio-11040-exec-4] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDg5NDI2NiwiZXhwIjoxNzQ0ODk0ODY2LCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.9gKPqLpoZUhuBZAxeJMGGl4HxqudLsB5VEB99agO5S8
2025-04-17 22:09:17.491 INFO  [http-nio-11040-exec-4] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/sale/graph/ratio/select/0
2025-04-17 22:09:17.492 INFO  [http-nio-11040-exec-6] [com.momo.provider.JwtProvider] - Expired JWT Token
io.jsonwebtoken.ExpiredJwtException: JWT expired at 2025-04-17T13:01:06Z. Current time: 2025-04-17T13:09:17Z, a difference of 491492 milliseconds.  Allowed clock skew: 0 milliseconds.
	at io.jsonwebtoken.impl.DefaultJwtParser.parse(DefaultJwtParser.java:427)
	at io.jsonwebtoken.impl.DefaultJwtParser.parse(DefaultJwtParser.java:529)
	at io.jsonwebtoken.impl.DefaultJwtParser.parseClaimsJws(DefaultJwtParser.java:589)
	at io.jsonwebtoken.impl.ImmutableJwtParser.parseClaimsJws(ImmutableJwtParser.java:173)
	at com.momo.provider.JwtProvider.validateToken(JwtProvider.java:145)
	at com.momo.filter.JwtAuthorizationFilter.doFilterInternal(JwtAuthorizationFilter.java:38)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:195)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:225)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:340)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:840)
2025-04-17 22:09:17.492 INFO  [http-nio-11040-exec-4] [com.momo.provider.JwtProvider] - Expired JWT Token
io.jsonwebtoken.ExpiredJwtException: JWT expired at 2025-04-17T13:01:06Z. Current time: 2025-04-17T13:09:17Z, a difference of 491492 milliseconds.  Allowed clock skew: 0 milliseconds.
	at io.jsonwebtoken.impl.DefaultJwtParser.parse(DefaultJwtParser.java:427)
	at io.jsonwebtoken.impl.DefaultJwtParser.parse(DefaultJwtParser.java:529)
	at io.jsonwebtoken.impl.DefaultJwtParser.parseClaimsJws(DefaultJwtParser.java:589)
	at io.jsonwebtoken.impl.ImmutableJwtParser.parseClaimsJws(ImmutableJwtParser.java:173)
	at com.momo.provider.JwtProvider.validateToken(JwtProvider.java:145)
	at com.momo.filter.JwtAuthorizationFilter.doFilterInternal(JwtAuthorizationFilter.java:38)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:195)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:225)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:340)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:840)
2025-04-17 22:09:17.492 INFO  [http-nio-11040-exec-4] [com.momo.filter.JwtAuthorizationFilter] - 유효한 JWT 토큰이 없습니다
2025-04-17 22:09:17.492 INFO  [http-nio-11040-exec-6] [com.momo.filter.JwtAuthorizationFilter] - 유효한 JWT 토큰이 없습니다
2025-04-17 22:09:17.494 INFO  [http-nio-11040-exec-5] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/sale/graph/summary
2025-04-17 22:09:17.494 INFO  [http-nio-11040-exec-5] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDg5NDI2NiwiZXhwIjoxNzQ0ODk0ODY2LCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.9gKPqLpoZUhuBZAxeJMGGl4HxqudLsB5VEB99agO5S8
2025-04-17 22:09:17.494 INFO  [http-nio-11040-exec-5] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/sale/graph/summary
2025-04-17 22:09:17.498 INFO  [http-nio-11040-exec-5] [com.momo.provider.JwtProvider] - Expired JWT Token
io.jsonwebtoken.ExpiredJwtException: JWT expired at 2025-04-17T13:01:06Z. Current time: 2025-04-17T13:09:17Z, a difference of 491497 milliseconds.  Allowed clock skew: 0 milliseconds.
	at io.jsonwebtoken.impl.DefaultJwtParser.parse(DefaultJwtParser.java:427)
	at io.jsonwebtoken.impl.DefaultJwtParser.parse(DefaultJwtParser.java:529)
	at io.jsonwebtoken.impl.DefaultJwtParser.parseClaimsJws(DefaultJwtParser.java:589)
	at io.jsonwebtoken.impl.ImmutableJwtParser.parseClaimsJws(ImmutableJwtParser.java:173)
	at com.momo.provider.JwtProvider.validateToken(JwtProvider.java:145)
	at com.momo.filter.JwtAuthorizationFilter.doFilterInternal(JwtAuthorizationFilter.java:38)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:195)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:225)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:340)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:840)
2025-04-17 22:09:17.499 INFO  [http-nio-11040-exec-5] [com.momo.filter.JwtAuthorizationFilter] - 유효한 JWT 토큰이 없습니다
2025-04-17 22:09:17.500 INFO  [http-nio-11040-exec-5] [com.momo.api.SaleController] - summary: CommonVO(provider=null, date=null, year=null, month=null, day=null, selectType=null, range=null, dateType=null, prevFromYmd=null, prevToYmd=null, currFromYmd=null, currToYmd=null, fromYmd=2024-07-01, toYmd=2025-01-01, fromYm=null, toYm=null, prevDate=null, currDate=null)
2025-04-17 22:09:17.508 DEBUG [http-nio-11040-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
3. with recursive group_generation as (
            select 0 as g
            union all
            select g+1
            from group_generation
            where g < 8
        ), group_weekday as (
            select 0 as g
            union all
            select g+1
            from group_weekday
            where g < 6
        ),  sale as (
            select weekday(actv_dt) as days,
                   device_id,
                   cust_cd,
                   sale_id
            from tb_sale
            where shop_id=2 and

                      seller_id='km1104rs' and

                device_id is not null and
                actv_dt between '2025-01-01' and '2025-01-31'
        ), sale_gene as (
            select sale_id,
                   (
                       case
                           when length(cust_cd) = 6 then floor((year(curdate()) - concat((
                                 case
                                     when substring(cust_cd, 1,2) > '44' then '19'
                                     when substring(cust_cd, 1,2) <= '44' then '20'
                                     end
                                 ),substring(cust_cd,1,2))) / 10)
                           when length(cust_cd) != 6 then null
                           end
                       ) as generation
            from sale
        ), generation as (
            select g,
                   device_id
            from group_generation g
                     left outer join sale_gene sg on g.g=sg.generation
                     left outer join sale s on s.sale_id=sg.sale_id
        ), weekdays as (
            select g,
                   device_id
            from group_weekday w
                     left outer join sale s on s.days=w.g
        )

        select IFNULL(count(device_id),0) as avg
        from generation
        group by g
 {executed in 10 msec}
2025-04-17 22:09:17.508 DEBUG [http-nio-11040-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
6. with base as (select device_id,
                             (SELECT device_nm
                              FROM tb_device
                              WHERE tb_device.device_id = sl.device_id)      as device,
                             sd_id,
                             (SELECT sd_nm
                              FROM tb_second_device
                              WHERE tb_second_device.sd_id = sl.sd_id)       as sec_device,
                             ct_actv_plan,
                             (SELECT ct_plan_nm
                              FROM tb_ct_plan
                              WHERE tb_ct_plan.ct_plan_id = sl.ct_actv_plan) as actv_plan
                      from tb_sale sl
                      where shop_id = 2 and

                                seller_id='km1104rs' and

                        actv_dt between '2025-01-01' and '2025-01-31'),
             device as (SELECT device                   as name,
                               count(device_id) as count
                        from base
                        where device_id is not null
                        group by device),
             sec_device as (SELECT sec_device                   as name,
                                   count(sec_device) as count
                            from base
                            where sd_id is not null
                            group by sec_device),
             actv_plan as (SELECT actv_plan                   as name,
                                  count(actv_plan) as count
                           from base
                           where ct_actv_plan is not null
                           group by actv_plan),
             total as (select count('sec_device') as cnt
                       from base
                       where 'sec_device' is not null
             )

        select name,
               count,
               (
                   IF((select cnt
                       from total) = 0 or count = 0, 0, TRUNCATE(
                              (count / (
                                  select cnt
                                  from total
                              )
                                  ) * 100, 1))
                   ) as per
        from sec_device
        order by per desc
        limit 5
 {executed in 4 msec}
2025-04-17 22:09:17.509 INFO  [http-nio-11040-exec-2] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/notif/count/unread
2025-04-17 22:09:17.509 INFO  [http-nio-11040-exec-2] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDg5NDI2NiwiZXhwIjoxNzQ0ODk0ODY2LCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.9gKPqLpoZUhuBZAxeJMGGl4HxqudLsB5VEB99agO5S8
2025-04-17 22:09:17.509 INFO  [http-nio-11040-exec-2] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/notif/count/unread
2025-04-17 22:09:17.509 DEBUG [http-nio-11040-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
2. with recursive istm_range as (
            select 0 as i
            union all
            select i+1
            from istm_range
            where i<5
        ), base as (
            select ct_istm
            from tb_sale
            where shop_id=2 and

                        seller_id='km1104rs' and

                actv_dt between '2025-01-01' and '2025-01-31'
        ), final as (
            select i as istm,
                   IFNULL(count(base.ct_istm),0) as cnt
            from istm_range
                     left outer join base on base.ct_istm=istm_range.i
            group by i
            order by istm desc
        )

        select json_arrayagg(istm) as type,
               json_arrayagg(cnt) as cnt,
               json_arrayagg(IF((
                      select IFNULL(count(ct_istm), 0)
                      from base
                  ) = 0 or cnt = 0, 0, TRUNCATE((cnt/(
                   select IFNULL(count(ct_istm), 0)
                   from base
               )) * 100, 1))) as per
        from final
 {executed in 1 msec}
2025-04-17 22:09:17.510 INFO  [http-nio-11040-exec-2] [com.momo.provider.JwtProvider] - Expired JWT Token
io.jsonwebtoken.ExpiredJwtException: JWT expired at 2025-04-17T13:01:06Z. Current time: 2025-04-17T13:09:17Z, a difference of 491510 milliseconds.  Allowed clock skew: 0 milliseconds.
	at io.jsonwebtoken.impl.DefaultJwtParser.parse(DefaultJwtParser.java:427)
	at io.jsonwebtoken.impl.DefaultJwtParser.parse(DefaultJwtParser.java:529)
	at io.jsonwebtoken.impl.DefaultJwtParser.parseClaimsJws(DefaultJwtParser.java:589)
	at io.jsonwebtoken.impl.ImmutableJwtParser.parseClaimsJws(ImmutableJwtParser.java:173)
	at com.momo.provider.JwtProvider.validateToken(JwtProvider.java:145)
	at com.momo.filter.JwtAuthorizationFilter.doFilterInternal(JwtAuthorizationFilter.java:38)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:195)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:225)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:340)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:840)
2025-04-17 22:09:17.510 INFO  [http-nio-11040-exec-2] [com.momo.filter.JwtAuthorizationFilter] - 유효한 JWT 토큰이 없습니다
2025-04-17 22:09:17.510 INFO  [http-nio-11040-exec-2] [c.momo.common.util.SecurityContextUtil] - principal: UserDetailsImpl(username=km1104rs, password=$2a$10$uXShhwl6ULOkbJe477uDWOfdiUUcu6lOSF/Dhj9xP3U1nUn/gXkc6, authorities=[ROLE_NONE])
2025-04-17 22:09:17.513 DEBUG [http-nio-11040-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
4. SELECT count(*)
        FROM tb_notification
        WHERE receiver_id = 'km1104rs'
          AND read_st = FALSE
 {executed in 1 msec}
2025-04-17 22:09:17.536 DEBUG [http-nio-11040-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. #         월별 날짜 구하기
        with recursive month_range as (
            select '2024-07-01' as d
            union all
            select date_add(d, interval 1 month) as d
            from month_range
            where date_add(d, interval 1 month) < '2025-01-01'
        ), months as(
            select month(d) as m
            from month_range
        ), filtered_sale as ( # 판매일보 초벌
            select month(actv_dt) as actv_month,
                   device_id,
                   internet_plan,
                   tv_plan,
                    exsvc_id,
                   total_cms,
                   wt_cms,
                   sale_id,
                   sd_id,
                    shop_id
            from tb_sale
            where shop_id=2 and

                    seller_id='km1104rs' and

                actv_dt between '2024-07-01' and date_add('2025-01-01', interval 1 month)
        ), ct_graph as ( # 무선 그래프 데이터
            SELECT m,
                   count(device_id) as cnt
            FROM months
                     LEFT OUTER JOIN filtered_sale on actv_month = m and
                                                      device_id is not null
            group by m
        ), internet_graph as ( # 인터넷 그래프 데이터
            SELECT m,
                   count(internet_plan) as cnt
            FROM months
                     LEFT OUTER JOIN filtered_sale on actv_month = m  and
                                                      internet_plan is not null
            group by m
        ), tv_graph as ( # TV 그래프 데이터
            SELECT m,
                   count(tv_plan) as cnt
            FROM months
                     LEFT OUTER JOIN filtered_sale on actv_month = m  and
                                                      tv_plan is not null
            group by m
        ), card as ( # 카드 데이터
            SELECT m,
                   (
                    select count(*)
                    from tb_sale_card sc
                    left outer join filtered_sale fs on fs.shop_id = sc.shop_id and
                                                        fs.sale_id = sc.sale_id
                   )  as cnt
            FROM months
                     LEFT OUTER JOIN filtered_sale on actv_month = m
            group by m
        ), exsvc as ( # 부가서비스 데이터
            SELECT m,
                   count(exsvc_id) as cnt
            FROM months
                     LEFT OUTER JOIN filtered_sale on actv_month = m  and
                                                      exsvc_id is not null
            group by m
        ), tc_graph as ( # 총 이익 그래프 데이터
            SELECT m,
                   IFNULL(sum(total_cms), 0) as cnt
            FROM months
                     LEFT OUTER JOIN filtered_sale on actv_month = m
            group by m
        ), avg_margin_graph as ( # 개인 평균 마진 그래프 데이터
            SELECT m,
                   IFNULL(avg(total_cms), 0) as cnt
            FROM months
                     LEFT OUTER JOIN filtered_sale on actv_month = m and
                                                      device_id is not null
            group by m
        ), ud_graph as ( # 중고 개통 그래프 데이터
            SELECT m,
                   count(ud_id) as cnt
            FROM months
                     LEFT OUTER JOIN filtered_sale on actv_month = m
                     LEFT OUTER JOIN tb_sale_used_device sud on sud.sale_id=filtered_sale.sale_id
            group by m
        ), sec_graph as ( # 세컨 그래프 데이터
            SELECT m,
                   count(sd_id) as cnt
            FROM months
                     LEFT OUTER JOIN filtered_sale on actv_month = m and
                                                      sd_id != 0
            group by m
        ), diff_ct as (
            select
                (
                    select cnt
                    from ct_graph
                    limit 4, 1
                ) as prv,
                (
                    select cnt
                    from ct_graph
                    limit 5,1
                ) as curr
            from dual
        ), diff_internet as (
            select
                (
                    select cnt
                    from internet_graph
                    limit 4,1
                ) as prv,
                (
                    select cnt
                    from internet_graph
                    limit 5,1
                ) as curr
            from dual
        ), diff_tv as (
            select
                (
                    select cnt
                    from tv_graph
                    limit 4,1
                ) as prv,
                (
                    select cnt
                    from tv_graph
                    limit 5,1
                ) as curr
            from dual
        ), diff_card as (
            select
                (
                    select cnt
                    from card
                    limit 4,1
                ) as prv,
                (
                    select cnt
                    from card
                    limit 5,1
                ) as curr
            from dual
        ), diff_exsvc as (
            select
                (
                    select cnt
                    from exsvc
                    limit 4,1
                ) as prv,
                (
                    select cnt
                    from exsvc
                    limit 5,1
                ) as curr
            from dual
        ), diff_tc as (
            select
                (
                    select cnt
                    from tc_graph
                    limit 4,1
                ) as prv,
                (
                    select cnt
                    from tc_graph
                    limit 5,1
                ) as curr
            from dual
        ) , diff_margin as (
            select
                (
                    select cnt
                    from avg_margin_graph
                    limit 4,1
                ) as prv,
                (
                    select cnt
                    from avg_margin_graph
                    limit 5,1
                ) as curr
            from dual
        ), diff_ud as (
            select
                (
                    select cnt
                    from ud_graph
                    limit 4,1
                ) as prv,
                (
                    select cnt
                    from ud_graph
                    limit 5,1
                ) as curr
            from dual
        ) , diff_sec as (
            select
                (
                    select cnt
                    from sec_graph
                    limit 4,1
                ) as prv,
                (
                    select cnt
                    from sec_graph
                    limit 5,1
                ) as curr
            from dual
        ), final as (
            select
                curr,
                prv,
                (
                    select json_arrayagg(cnt)
                    from ct_graph
                ) as list
            from diff_ct
            union all
            select
                curr,
                prv,
                (
                    select json_arrayagg(cnt)
                    from internet_graph
                ) as list
            from diff_internet
            union all
            select
                curr,
                prv,
                (
                    select json_arrayagg(cnt)
                    from tv_graph
                ) as list
            from diff_tv
             union all
            select
                curr,
                prv,
                (
                    select json_arrayagg(cnt)
                    from card
                ) as list
            from diff_card
             union all
            select
                curr,
                prv,
                (
                    select json_arrayagg(cnt)
                    from exsvc
                ) as list
            from diff_exsvc
            union all
            select
                curr,
                prv,
                (
                    select json_arrayagg(cnt)
                    from tc_graph
                ) as list
            from diff_tc
            union all
            select
                curr,
                prv,
                (
                    select json_arrayagg(cnt)
                    from avg_margin_graph
                ) as list
            from diff_margin
            union all
            select
                curr,
                prv,
                (
                    select json_arrayagg(cnt)
                    from ud_graph
                ) as list
            from diff_ud
            union all
            select
                curr,
                prv,
                (
                    select json_arrayagg(cnt)
                    from sec_graph
                ) as list
            from diff_sec
        )

        select FLOOR(curr) as value,
               (
                   CASE
                       WHEN curr = 0 and prv = 0 THEN 0
                       WHEN prv != 0 and curr = 0 THEN -100
                       WHEN prv = 0 and curr != 0 THEN 100
                       WHEN curr != 0 and prv != 0 THEN TRUNCATE(((curr/prv)-1)*100, 1)
                       END
                   ) as per,
               list
        from final
 {executed in 32 msec}
2025-04-17 22:09:17.550 INFO  [http-nio-11040-exec-7] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/sale/graph/stat/select/2
2025-04-17 22:09:17.550 INFO  [http-nio-11040-exec-8] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/sale/graph/ct/select/0
2025-04-17 22:09:17.550 INFO  [http-nio-11040-exec-3] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/sale/graph/ratio/select/0
2025-04-17 22:09:17.550 INFO  [http-nio-11040-exec-7] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDg5NDI2NiwiZXhwIjoxNzQ0ODk0ODY2LCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.9gKPqLpoZUhuBZAxeJMGGl4HxqudLsB5VEB99agO5S8
2025-04-17 22:09:17.550 INFO  [http-nio-11040-exec-8] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDg5NDI2NiwiZXhwIjoxNzQ0ODk0ODY2LCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.9gKPqLpoZUhuBZAxeJMGGl4HxqudLsB5VEB99agO5S8
2025-04-17 22:09:17.550 INFO  [http-nio-11040-exec-3] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDg5NDI2NiwiZXhwIjoxNzQ0ODk0ODY2LCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.9gKPqLpoZUhuBZAxeJMGGl4HxqudLsB5VEB99agO5S8
2025-04-17 22:09:17.550 INFO  [http-nio-11040-exec-3] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/sale/graph/ratio/select/0
2025-04-17 22:09:17.550 INFO  [http-nio-11040-exec-7] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/sale/graph/stat/select/2
2025-04-17 22:09:17.550 INFO  [http-nio-11040-exec-8] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/sale/graph/ct/select/0
2025-04-17 22:09:17.552 INFO  [http-nio-11040-exec-7] [com.momo.provider.JwtProvider] - Expired JWT Token
io.jsonwebtoken.ExpiredJwtException: JWT expired at 2025-04-17T13:01:06Z. Current time: 2025-04-17T13:09:17Z, a difference of 491552 milliseconds.  Allowed clock skew: 0 milliseconds.
	at io.jsonwebtoken.impl.DefaultJwtParser.parse(DefaultJwtParser.java:427)
	at io.jsonwebtoken.impl.DefaultJwtParser.parse(DefaultJwtParser.java:529)
	at io.jsonwebtoken.impl.DefaultJwtParser.parseClaimsJws(DefaultJwtParser.java:589)
	at io.jsonwebtoken.impl.ImmutableJwtParser.parseClaimsJws(ImmutableJwtParser.java:173)
	at com.momo.provider.JwtProvider.validateToken(JwtProvider.java:145)
	at com.momo.filter.JwtAuthorizationFilter.doFilterInternal(JwtAuthorizationFilter.java:38)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:195)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:225)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:340)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:840)
2025-04-17 22:09:17.552 INFO  [http-nio-11040-exec-7] [com.momo.filter.JwtAuthorizationFilter] - 유효한 JWT 토큰이 없습니다
2025-04-17 22:09:17.552 INFO  [http-nio-11040-exec-8] [com.momo.provider.JwtProvider] - Expired JWT Token
io.jsonwebtoken.ExpiredJwtException: JWT expired at 2025-04-17T13:01:06Z. Current time: 2025-04-17T13:09:17Z, a difference of 491552 milliseconds.  Allowed clock skew: 0 milliseconds.
	at io.jsonwebtoken.impl.DefaultJwtParser.parse(DefaultJwtParser.java:427)
	at io.jsonwebtoken.impl.DefaultJwtParser.parse(DefaultJwtParser.java:529)
	at io.jsonwebtoken.impl.DefaultJwtParser.parseClaimsJws(DefaultJwtParser.java:589)
	at io.jsonwebtoken.impl.ImmutableJwtParser.parseClaimsJws(ImmutableJwtParser.java:173)
	at com.momo.provider.JwtProvider.validateToken(JwtProvider.java:145)
	at com.momo.filter.JwtAuthorizationFilter.doFilterInternal(JwtAuthorizationFilter.java:38)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:195)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:225)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:340)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:840)
2025-04-17 22:09:17.552 INFO  [http-nio-11040-exec-3] [com.momo.provider.JwtProvider] - Expired JWT Token
io.jsonwebtoken.ExpiredJwtException: JWT expired at 2025-04-17T13:01:06Z. Current time: 2025-04-17T13:09:17Z, a difference of 491552 milliseconds.  Allowed clock skew: 0 milliseconds.
	at io.jsonwebtoken.impl.DefaultJwtParser.parse(DefaultJwtParser.java:427)
	at io.jsonwebtoken.impl.DefaultJwtParser.parse(DefaultJwtParser.java:529)
	at io.jsonwebtoken.impl.DefaultJwtParser.parseClaimsJws(DefaultJwtParser.java:589)
	at io.jsonwebtoken.impl.ImmutableJwtParser.parseClaimsJws(ImmutableJwtParser.java:173)
	at com.momo.provider.JwtProvider.validateToken(JwtProvider.java:145)
	at com.momo.filter.JwtAuthorizationFilter.doFilterInternal(JwtAuthorizationFilter.java:38)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:195)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:225)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:340)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:840)
2025-04-17 22:09:17.552 INFO  [http-nio-11040-exec-8] [com.momo.filter.JwtAuthorizationFilter] - 유효한 JWT 토큰이 없습니다
2025-04-17 22:09:17.552 INFO  [http-nio-11040-exec-3] [com.momo.filter.JwtAuthorizationFilter] - 유효한 JWT 토큰이 없습니다
2025-04-17 22:09:17.555 DEBUG [http-nio-11040-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
3. with recursive group_generation as (
            select 0 as g
            union all
            select g+1
            from group_generation
            where g < 8
        ), group_weekday as (
            select 0 as g
            union all
            select g+1
            from group_weekday
            where g < 6
        ),  sale as (
            select weekday(actv_dt) as days,
                   device_id,
                   cust_cd,
                   sale_id
            from tb_sale
            where shop_id=2 and

                      seller_id='km1104rs' and

                device_id is not null and
                actv_dt between '2025-01-01' and '2025-01-31'
        ), sale_gene as (
            select sale_id,
                   (
                       case
                           when length(cust_cd) = 6 then floor((year(curdate()) - concat((
                                 case
                                     when substring(cust_cd, 1,2) > '44' then '19'
                                     when substring(cust_cd, 1,2) <= '44' then '20'
                                     end
                                 ),substring(cust_cd,1,2))) / 10)
                           when length(cust_cd) != 6 then null
                           end
                       ) as generation
            from sale
        ), generation as (
            select g,
                   device_id
            from group_generation g
                     left outer join sale_gene sg on g.g=sg.generation
                     left outer join sale s on s.sale_id=sg.sale_id
        ), weekdays as (
            select g,
                   device_id
            from group_weekday w
                     left outer join sale s on s.days=w.g
        )

        select IFNULL(count(device_id),0) as avg
        from generation
        group by g
 {executed in 1 msec}
2025-04-17 22:09:17.555 DEBUG [http-nio-11040-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
4. with base as (select device_id,
                             (SELECT device_nm
                              FROM tb_device
                              WHERE tb_device.device_id = sl.device_id)      as device,
                             sd_id,
                             (SELECT sd_nm
                              FROM tb_second_device
                              WHERE tb_second_device.sd_id = sl.sd_id)       as sec_device,
                             ct_actv_plan,
                             (SELECT ct_plan_nm
                              FROM tb_ct_plan
                              WHERE tb_ct_plan.ct_plan_id = sl.ct_actv_plan) as actv_plan
                      from tb_sale sl
                      where shop_id = 2 and

                                seller_id='km1104rs' and

                        actv_dt between '2025-01-01' and '2025-01-31'),
             device as (SELECT device                   as name,
                               count(device_id) as count
                        from base
                        where device_id is not null
                        group by device),
             sec_device as (SELECT sec_device                   as name,
                                   count(sec_device) as count
                            from base
                            where sd_id is not null
                            group by sec_device),
             actv_plan as (SELECT actv_plan                   as name,
                                  count(actv_plan) as count
                           from base
                           where ct_actv_plan is not null
                           group by actv_plan),
             total as (select count('sec_device') as cnt
                       from base
                       where 'sec_device' is not null
             )

        select name,
               count,
               (
                   IF((select cnt
                       from total) = 0 or count = 0, 0, TRUNCATE(
                              (count / (
                                  select cnt
                                  from total
                              )
                                  ) * 100, 1))
                   ) as per
        from sec_device
        order by per desc
        limit 5
 {executed in 1 msec}
2025-04-17 22:09:17.555 DEBUG [http-nio-11040-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
5. with recursive istm_range as (
            select 0 as i
            union all
            select i+1
            from istm_range
            where i<5
        ), base as (
            select ct_istm
            from tb_sale
            where shop_id=2 and

                        seller_id='km1104rs' and

                actv_dt between '2025-01-01' and '2025-01-31'
        ), final as (
            select i as istm,
                   IFNULL(count(base.ct_istm),0) as cnt
            from istm_range
                     left outer join base on base.ct_istm=istm_range.i
            group by i
            order by istm desc
        )

        select json_arrayagg(istm) as type,
               json_arrayagg(cnt) as cnt,
               json_arrayagg(IF((
                      select IFNULL(count(ct_istm), 0)
                      from base
                  ) = 0 or cnt = 0, 0, TRUNCATE((cnt/(
                   select IFNULL(count(ct_istm), 0)
                   from base
               )) * 100, 1))) as per
        from final
 {executed in 1 msec}
2025-04-17 22:10:07.873 INFO  [http-nio-11040-exec-9] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/sale/graph/stat/select/2
2025-04-17 22:10:07.874 INFO  [http-nio-11040-exec-9] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDg5NDI2NiwiZXhwIjoxNzQ0ODk0ODY2LCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.9gKPqLpoZUhuBZAxeJMGGl4HxqudLsB5VEB99agO5S8
2025-04-17 22:10:07.874 INFO  [http-nio-11040-exec-9] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/sale/graph/stat/select/2
2025-04-17 22:10:07.885 INFO  [http-nio-11040-exec-9] [com.momo.provider.JwtProvider] - Expired JWT Token
io.jsonwebtoken.ExpiredJwtException: JWT expired at 2025-04-17T13:01:06Z. Current time: 2025-04-17T13:10:07Z, a difference of 541885 milliseconds.  Allowed clock skew: 0 milliseconds.
	at io.jsonwebtoken.impl.DefaultJwtParser.parse(DefaultJwtParser.java:427)
	at io.jsonwebtoken.impl.DefaultJwtParser.parse(DefaultJwtParser.java:529)
	at io.jsonwebtoken.impl.DefaultJwtParser.parseClaimsJws(DefaultJwtParser.java:589)
	at io.jsonwebtoken.impl.ImmutableJwtParser.parseClaimsJws(ImmutableJwtParser.java:173)
	at com.momo.provider.JwtProvider.validateToken(JwtProvider.java:145)
	at com.momo.filter.JwtAuthorizationFilter.doFilterInternal(JwtAuthorizationFilter.java:38)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:195)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:225)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:340)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:840)
2025-04-17 22:10:07.885 INFO  [http-nio-11040-exec-9] [com.momo.filter.JwtAuthorizationFilter] - 유효한 JWT 토큰이 없습니다
2025-04-17 22:10:07.893 DEBUG [http-nio-11040-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
4. with base as (select device_id,
                             (SELECT device_nm
                              FROM tb_device
                              WHERE tb_device.device_id = sl.device_id)      as device,
                             sd_id,
                             (SELECT sd_nm
                              FROM tb_second_device
                              WHERE tb_second_device.sd_id = sl.sd_id)       as sec_device,
                             ct_actv_plan,
                             (SELECT ct_plan_nm
                              FROM tb_ct_plan
                              WHERE tb_ct_plan.ct_plan_id = sl.ct_actv_plan) as actv_plan
                      from tb_sale sl
                      where shop_id = 2 and

                                seller_id='km1104rs' and

                        actv_dt between '2025-01-01' and '2025-01-31'),
             device as (SELECT device                   as name,
                               count(device_id) as count
                        from base
                        where device_id is not null
                        group by device),
             sec_device as (SELECT sec_device                   as name,
                                   count(sec_device) as count
                            from base
                            where sd_id is not null
                            group by sec_device),
             actv_plan as (SELECT actv_plan                   as name,
                                  count(actv_plan) as count
                           from base
                           where ct_actv_plan is not null
                           group by actv_plan),
             total as (select count('sec_device') as cnt
                       from base
                       where 'sec_device' is not null
             )

        select name,
               count,
               (
                   IF((select cnt
                       from total) = 0 or count = 0, 0, TRUNCATE(
                              (count / (
                                  select cnt
                                  from total
                              )
                                  ) * 100, 1))
                   ) as per
        from sec_device
        order by per desc
        limit 5
 {executed in 2 msec}
2025-04-17 22:10:15.792 INFO  [http-nio-11040-exec-10] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/sale/graph/stat/select/2
2025-04-17 22:10:15.792 INFO  [http-nio-11040-exec-10] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDg5NDI2NiwiZXhwIjoxNzQ0ODk0ODY2LCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.9gKPqLpoZUhuBZAxeJMGGl4HxqudLsB5VEB99agO5S8
2025-04-17 22:10:15.793 INFO  [http-nio-11040-exec-10] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/sale/graph/stat/select/2
2025-04-17 22:10:15.794 INFO  [http-nio-11040-exec-10] [com.momo.provider.JwtProvider] - Expired JWT Token
io.jsonwebtoken.ExpiredJwtException: JWT expired at 2025-04-17T13:01:06Z. Current time: 2025-04-17T13:10:15Z, a difference of 549794 milliseconds.  Allowed clock skew: 0 milliseconds.
	at io.jsonwebtoken.impl.DefaultJwtParser.parse(DefaultJwtParser.java:427)
	at io.jsonwebtoken.impl.DefaultJwtParser.parse(DefaultJwtParser.java:529)
	at io.jsonwebtoken.impl.DefaultJwtParser.parseClaimsJws(DefaultJwtParser.java:589)
	at io.jsonwebtoken.impl.ImmutableJwtParser.parseClaimsJws(ImmutableJwtParser.java:173)
	at com.momo.provider.JwtProvider.validateToken(JwtProvider.java:145)
	at com.momo.filter.JwtAuthorizationFilter.doFilterInternal(JwtAuthorizationFilter.java:38)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:195)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:225)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:340)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:840)
2025-04-17 22:10:15.795 INFO  [http-nio-11040-exec-10] [com.momo.filter.JwtAuthorizationFilter] - 유효한 JWT 토큰이 없습니다
2025-04-17 22:10:15.812 DEBUG [http-nio-11040-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. with base as (select device_id,
                             (SELECT device_nm
                              FROM tb_device
                              WHERE tb_device.device_id = sl.device_id)      as device,
                             sd_id,
                             (SELECT sd_nm
                              FROM tb_second_device
                              WHERE tb_second_device.sd_id = sl.sd_id)       as sec_device,
                             ct_actv_plan,
                             (SELECT ct_plan_nm
                              FROM tb_ct_plan
                              WHERE tb_ct_plan.ct_plan_id = sl.ct_actv_plan) as actv_plan
                      from tb_sale sl
                      where shop_id = 2 and

                                seller_id='km1104rs' and

                        actv_dt between '2025-01-01' and '2025-01-31'),
             device as (SELECT device                   as name,
                               count(device_id) as count
                        from base
                        where device_id is not null
                        group by device),
             sec_device as (SELECT sec_device                   as name,
                                   count(sec_device) as count
                            from base
                            where sd_id is not null
                            group by sec_device),
             actv_plan as (SELECT actv_plan                   as name,
                                  count(actv_plan) as count
                           from base
                           where ct_actv_plan is not null
                           group by actv_plan),
             total as (select count('sec_device') as cnt
                       from base
                       where 'sec_device' is not null
             )

        select name,
               count,
               (
                   IF((select cnt
                       from total) = 0 or count = 0, 0, TRUNCATE(
                              (count / (
                                  select cnt
                                  from total
                              )
                                  ) * 100, 1))
                   ) as per
        from sec_device
        order by per desc
        limit 5
 {executed in 2 msec}
2025-04-17 22:11:59.303 INFO  [http-nio-11040-exec-6] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/sale/graph/stat/select/2
2025-04-17 22:11:59.304 INFO  [http-nio-11040-exec-6] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDg5NDI2NiwiZXhwIjoxNzQ0ODk0ODY2LCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.9gKPqLpoZUhuBZAxeJMGGl4HxqudLsB5VEB99agO5S8
2025-04-17 22:11:59.304 INFO  [http-nio-11040-exec-6] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/sale/graph/stat/select/2
2025-04-17 22:11:59.308 INFO  [http-nio-11040-exec-6] [com.momo.provider.JwtProvider] - Expired JWT Token
io.jsonwebtoken.ExpiredJwtException: JWT expired at 2025-04-17T13:01:06Z. Current time: 2025-04-17T13:11:59Z, a difference of 653308 milliseconds.  Allowed clock skew: 0 milliseconds.
	at io.jsonwebtoken.impl.DefaultJwtParser.parse(DefaultJwtParser.java:427)
	at io.jsonwebtoken.impl.DefaultJwtParser.parse(DefaultJwtParser.java:529)
	at io.jsonwebtoken.impl.DefaultJwtParser.parseClaimsJws(DefaultJwtParser.java:589)
	at io.jsonwebtoken.impl.ImmutableJwtParser.parseClaimsJws(ImmutableJwtParser.java:173)
	at com.momo.provider.JwtProvider.validateToken(JwtProvider.java:145)
	at com.momo.filter.JwtAuthorizationFilter.doFilterInternal(JwtAuthorizationFilter.java:38)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:195)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:225)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:340)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:840)
2025-04-17 22:11:59.309 INFO  [http-nio-11040-exec-6] [com.momo.filter.JwtAuthorizationFilter] - 유효한 JWT 토큰이 없습니다
2025-04-17 22:11:59.320 DEBUG [http-nio-11040-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
6. with base as (select device_id,
                             (SELECT device_nm
                              FROM tb_device
                              WHERE tb_device.device_id = sl.device_id)      as device,
                             sd_id,
                             (SELECT sd_nm
                              FROM tb_second_device
                              WHERE tb_second_device.sd_id = sl.sd_id)       as sec_device,
                             ct_actv_plan,
                             (SELECT ct_plan_nm
                              FROM tb_ct_plan
                              WHERE tb_ct_plan.ct_plan_id = sl.ct_actv_plan) as actv_plan
                      from tb_sale sl
                      where shop_id = 2 and

                                seller_id='km1104rs' and

                        actv_dt between '2025-01-01' and '2025-01-31'),
             device as (SELECT device                   as name,
                               count(device_id) as count
                        from base
                        where device_id is not null
                        group by device),
             sec_device as (SELECT sec_device                   as name,
                                   count(sec_device) as count
                            from base
                            where sd_id is not null
                            group by sec_device),
             actv_plan as (SELECT actv_plan                   as name,
                                  count(actv_plan) as count
                           from base
                           where ct_actv_plan is not null
                           group by actv_plan),
             total as (select count('sec_device') as cnt
                       from base
                       where 'sec_device' is not null
             )

        select name,
               count,
               (
                   IF((select cnt
                       from total) = 0 or count = 0, 0, TRUNCATE(
                              (count / (
                                  select cnt
                                  from total
                              )
                                  ) * 100, 1))
                   ) as per
        from sec_device
        order by per desc
        limit 5
 {executed in 3 msec}
2025-04-17 22:13:16.732 INFO  [http-nio-11040-exec-1] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/auth/refresh
2025-04-17 22:13:16.733 INFO  [http-nio-11040-exec-1] [com.momo.filter.JwtAuthorizationFilter] - access token: null
2025-04-17 22:13:16.733 INFO  [http-nio-11040-exec-1] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/auth/refresh
2025-04-17 22:13:16.733 INFO  [http-nio-11040-exec-1] [com.momo.filter.JwtAuthorizationFilter] - 유효한 JWT 토큰이 없습니다
2025-04-17 22:13:16.742 INFO  [http-nio-11040-exec-1] [com.momo.api.AuthController] - refresh
2025-04-17 22:13:16.755 DEBUG [http-nio-11040-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
3. SELECT  *
        FROM    tb_refresh_token
        WHERE   refresh_token='eyJhbGciOiJIUzI1NiJ9.eyJleHAiOjE3NDQ4OTc4NjZ9.kSmR1vpvfQZO8aI4TS_cDu3QOCVvhBkgahzUvCXVn7o'
 {executed in 3 msec}
2025-04-17 22:13:16.759 DEBUG [http-nio-11040-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
3. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 3 msec}
2025-04-17 22:13:16.761 INFO  [http-nio-11040-exec-1] [com.momo.api.AuthController] - jwt: JwtVO(grantType=Bearer , username=km1104rs, accessToken=eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDg5NTU5NiwiZXhwIjoxNzQ0ODk2MTk2LCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.rHdmauJIT62MXeIPy7ygWZrnBfGj4Ef-1GveY_MCeSY, refreshToken=null, expireTime=null, revoked=false, expired=false)
2025-04-17 22:13:16.796 INFO  [http-nio-11040-exec-4] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/notif/all
2025-04-17 22:13:16.796 INFO  [http-nio-11040-exec-4] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDg5NTU5NiwiZXhwIjoxNzQ0ODk2MTk2LCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.rHdmauJIT62MXeIPy7ygWZrnBfGj4Ef-1GveY_MCeSY
2025-04-17 22:13:16.796 INFO  [http-nio-11040-exec-4] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/notif/all
2025-04-17 22:13:16.798 INFO  [http-nio-11040-exec-2] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/notif/read/all
2025-04-17 22:13:16.798 INFO  [http-nio-11040-exec-2] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDg5NTU5NiwiZXhwIjoxNzQ0ODk2MTk2LCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.rHdmauJIT62MXeIPy7ygWZrnBfGj4Ef-1GveY_MCeSY
2025-04-17 22:13:16.798 INFO  [http-nio-11040-exec-2] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/notif/read/all
2025-04-17 22:13:16.798 INFO  [http-nio-11040-exec-4] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-17 22:13:16.799 INFO  [http-nio-11040-exec-2] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-17 22:13:16.802 DEBUG [http-nio-11040-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
4. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 2 msec}
2025-04-17 22:13:16.802 DEBUG [http-nio-11040-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
2. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 3 msec}
2025-04-17 22:13:16.802 INFO  [http-nio-11040-exec-5] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/notif/count/unread
2025-04-17 22:13:16.802 INFO  [http-nio-11040-exec-5] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDg5NTU5NiwiZXhwIjoxNzQ0ODk2MTk2LCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.rHdmauJIT62MXeIPy7ygWZrnBfGj4Ef-1GveY_MCeSY
2025-04-17 22:13:16.802 INFO  [http-nio-11040-exec-5] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/notif/count/unread
2025-04-17 22:13:16.803 INFO  [http-nio-11040-exec-2] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-17 22:13:16.803 INFO  [http-nio-11040-exec-4] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-17 22:13:16.803 INFO  [http-nio-11040-exec-2] [c.momo.common.util.SecurityContextUtil] - principal: UserDetailsImpl(username=km1104rs, password=$2a$10$uXShhwl6ULOkbJe477uDWOfdiUUcu6lOSF/Dhj9xP3U1nUn/gXkc6, authorities=[ROLE_NONE])
2025-04-17 22:13:16.804 INFO  [http-nio-11040-exec-4] [c.momo.common.util.SecurityContextUtil] - principal: UserDetailsImpl(username=km1104rs, password=$2a$10$uXShhwl6ULOkbJe477uDWOfdiUUcu6lOSF/Dhj9xP3U1nUn/gXkc6, authorities=[ROLE_NONE])
2025-04-17 22:13:16.805 INFO  [http-nio-11040-exec-5] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-17 22:13:16.806 INFO  [http-nio-11040-exec-3] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/user/info
2025-04-17 22:13:16.807 INFO  [http-nio-11040-exec-3] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDg5NTU5NiwiZXhwIjoxNzQ0ODk2MTk2LCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.rHdmauJIT62MXeIPy7ygWZrnBfGj4Ef-1GveY_MCeSY
2025-04-17 22:13:16.807 INFO  [http-nio-11040-exec-3] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/user/info
2025-04-17 22:13:16.809 INFO  [http-nio-11040-exec-3] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-17 22:13:16.819 DEBUG [http-nio-11040-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 14 msec}
2025-04-17 22:13:16.820 INFO  [http-nio-11040-exec-5] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-17 22:13:16.820 DEBUG [http-nio-11040-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
2. SELECT content,
               notif_id,
               read_st,
               notif_tp as type,
               IF(date(send_dt) = current_date,true,false) as today,
            (
               TIMESTAMPDIFF(MINUTE, send_dt, current_timestamp)
            ) as ago
        FROM tb_notification
        WHERE receiver_id='km1104rs'
        ORDER BY send_dt DESC
 {executed in 15 msec}
2025-04-17 22:13:16.820 INFO  [http-nio-11040-exec-5] [c.momo.common.util.SecurityContextUtil] - principal: UserDetailsImpl(username=km1104rs, password=$2a$10$uXShhwl6ULOkbJe477uDWOfdiUUcu6lOSF/Dhj9xP3U1nUn/gXkc6, authorities=[ROLE_NONE])
2025-04-17 22:13:16.822 DEBUG [http-nio-11040-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
4. UPDATE tb_notification
        SET read_st = TRUE
        WHERE receiver_id = 'km1104rs'
          AND read_st = FALSE
 {executed in 17 msec}
2025-04-17 22:13:16.823 DEBUG [http-nio-11040-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT count(*)
        FROM tb_notification
        WHERE receiver_id = 'km1104rs'
          AND read_st = FALSE
 {executed in 2 msec}
2025-04-17 22:13:16.825 DEBUG [http-nio-11040-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
5. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 3 msec}
2025-04-17 22:13:16.826 INFO  [http-nio-11040-exec-3] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-17 22:13:16.827 INFO  [http-nio-11040-exec-3] [c.momo.common.util.SecurityContextUtil] - principal: UserDetailsImpl(username=km1104rs, password=$2a$10$uXShhwl6ULOkbJe477uDWOfdiUUcu6lOSF/Dhj9xP3U1nUn/gXkc6, authorities=[ROLE_NONE])
2025-04-17 22:13:16.836 DEBUG [http-nio-11040-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
5. SELECT ac.id,
               ac.name,
               ac.tel,
               ac.nickname,
               ac.pfp,
               ac.curr_shop_id,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where sf.shop_id = ac.curr_shop_id and
                         sf.staff_id = ac.id
                   ) as role,
               sh.shop_nm,
               sh.shop_addr,
               sh.provider,
               (
                   IFNULL((
                       select sf2.approval_st
                       from tb_staff sf2
                       where sf2.shop_id=ac.curr_shop_id and
                           sf2.staff_id=ac.id
                       ), -1)
                ) as approval_st,
                ac.corp_nm,
                ac.br_no
        FROM tb_account ac
        LEFT OUTER JOIN tb_shop sh on sh.shop_id=ac.curr_shop_id
        WHERE id = 'km1104rs'
 {executed in 8 msec}
2025-04-17 22:13:16.838 INFO  [http-nio-11040-exec-3] [com.momo.api.UserController] - User: {role=0, approval_st=1, shop_addr=충청남도 천안시 병천면 충절로 1600 한국기술교육대학교 다산정보관 102, br_no=5218702490, provider=2, name=박희찬, nickname=대표, corp_nm=123, tel=010-4524-0636, id=km1104rs, pfp=1921fc01-e573-4243-9365-6b905389f4fc.png, curr_shop_id=2, shop_nm=한기대점 }
2025-04-17 22:13:16.843 INFO  [http-nio-11040-exec-8] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/notif/count/unread
2025-04-17 22:13:16.843 INFO  [http-nio-11040-exec-8] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDg5NTU5NiwiZXhwIjoxNzQ0ODk2MTk2LCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.rHdmauJIT62MXeIPy7ygWZrnBfGj4Ef-1GveY_MCeSY
2025-04-17 22:13:16.843 INFO  [http-nio-11040-exec-8] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/notif/count/unread
2025-04-17 22:13:16.846 INFO  [http-nio-11040-exec-8] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-17 22:13:16.848 DEBUG [http-nio-11040-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
3. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 2 msec}
2025-04-17 22:13:16.849 INFO  [http-nio-11040-exec-8] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-17 22:13:16.850 INFO  [http-nio-11040-exec-8] [c.momo.common.util.SecurityContextUtil] - principal: UserDetailsImpl(username=km1104rs, password=$2a$10$uXShhwl6ULOkbJe477uDWOfdiUUcu6lOSF/Dhj9xP3U1nUn/gXkc6, authorities=[ROLE_NONE])
2025-04-17 22:13:16.870 DEBUG [http-nio-11040-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
3. SELECT count(*)
        FROM tb_notification
        WHERE receiver_id = 'km1104rs'
          AND read_st = FALSE
 {executed in 2 msec}
2025-04-17 22:13:16.882 INFO  [http-nio-11040-exec-9] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/notif/count/unread
2025-04-17 22:13:16.882 INFO  [http-nio-11040-exec-9] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDg5NTU5NiwiZXhwIjoxNzQ0ODk2MTk2LCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.rHdmauJIT62MXeIPy7ygWZrnBfGj4Ef-1GveY_MCeSY
2025-04-17 22:13:16.882 INFO  [http-nio-11040-exec-9] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/notif/count/unread
2025-04-17 22:13:16.883 INFO  [http-nio-11040-exec-7] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/sale/graph/ct/d
2025-04-17 22:13:16.883 INFO  [http-nio-11040-exec-7] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDg5NTU5NiwiZXhwIjoxNzQ0ODk2MTk2LCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.rHdmauJIT62MXeIPy7ygWZrnBfGj4Ef-1GveY_MCeSY
2025-04-17 22:13:16.883 INFO  [http-nio-11040-exec-7] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/sale/graph/ct/d
2025-04-17 22:13:16.885 INFO  [http-nio-11040-exec-7] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-17 22:13:16.885 INFO  [http-nio-11040-exec-9] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-17 22:13:16.887 DEBUG [http-nio-11040-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
4. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 2 msec}
2025-04-17 22:13:16.888 DEBUG [http-nio-11040-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 2 msec}
2025-04-17 22:13:16.888 INFO  [http-nio-11040-exec-9] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-17 22:13:16.888 INFO  [http-nio-11040-exec-7] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-17 22:13:16.889 INFO  [http-nio-11040-exec-9] [c.momo.common.util.SecurityContextUtil] - principal: UserDetailsImpl(username=km1104rs, password=$2a$10$uXShhwl6ULOkbJe477uDWOfdiUUcu6lOSF/Dhj9xP3U1nUn/gXkc6, authorities=[ROLE_NONE])
2025-04-17 22:13:16.892 INFO  [http-nio-11040-exec-10] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/sale/graph/ct/d
2025-04-17 22:13:16.892 INFO  [http-nio-11040-exec-10] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDg5NTU5NiwiZXhwIjoxNzQ0ODk2MTk2LCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.rHdmauJIT62MXeIPy7ygWZrnBfGj4Ef-1GveY_MCeSY
2025-04-17 22:13:16.892 INFO  [http-nio-11040-exec-10] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/sale/graph/ct/d
2025-04-17 22:13:16.893 DEBUG [http-nio-11040-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT count(*)
        FROM tb_notification
        WHERE receiver_id = 'km1104rs'
          AND read_st = FALSE
 {executed in 1 msec}
2025-04-17 22:13:16.894 INFO  [http-nio-11040-exec-10] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-17 22:13:16.896 DEBUG [http-nio-11040-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 2 msec}
2025-04-17 22:13:16.897 DEBUG [http-nio-11040-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
4. set @limit_cond := (
               case 'd'
                   when 'h' then '2000-01-24'
                   when 'd' then '2025-04-17'
                   when 'w' then '2025-04-17'
                   when 'm' then date_sub('2025-04-17', interval 1 month)
               end
        );

        with recursive org_date_table as (
            select (
                       case
                           when 'd' = 'h' then '2000-01-01'
                           when 'd' != 'h' then '2025-01-17'
                           end
                       ) as it
            union all
            select (
                       case 'd'
                           when 'h' then date_add(it, interval 1 day)
                           when 'd' then date_add(it, interval 1 day)
                           when 'w' then date_add(it, interval 1 week)
                           when 'm' then date_add(it, interval 1 month)
                           end
                       ) as it
            from org_date_table
            where it < @limit_cond
        ), date_table as (
            select
                year(it) as _year,
                (
                    case 'd'
                        when 'h' then day(it)
                        when 'd' then it
                        when 'w' then week(it)
                        when 'm' then month(it)
                        end
                    ) as dt
            from org_date_table
        ),  date_sale as (
            select year(actv_dt) _year,
                   month(actv_dt) as m,
                   week(actv_dt) as w,
                   actv_dt as d,
                   hour(regi_dt) as h,
                   tb_sale.*
            from tb_sale
            where shop_id=2 and

                actv_dt between '2025-01-17' and (
                    case
                        when 'd' = 'h' then '2025-01-17'
                        when 'd' != 'h' then '2025-04-17'
                        end
                    )
        ), final as (
            select count(device_id) as cnt
            from date_table dd
                     left outer join date_sale ds on dd._year=ds._year and
                                                     d = dt
            group by dd._year, dd.dt
        )

        select
            (
                select json_arrayagg(cnt)
                from final
            ) as value,
            (
                select json_arrayagg(date_format(it, '%Y-%m-%d'))
                from org_date_table
            ) as date
 {executed in 4 msec}
2025-04-17 22:13:16.897 INFO  [http-nio-11040-exec-10] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-17 22:13:16.902 DEBUG [http-nio-11040-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. set @limit_cond := (
               case 'd'
                   when 'h' then '2000-01-24'
                   when 'd' then '2025-04-16'
                   when 'w' then '2025-04-16'
                   when 'm' then date_sub('2025-04-16', interval 1 month)
               end
        );

        with recursive org_date_table as (
            select (
                       case
                           when 'd' = 'h' then '2000-01-01'
                           when 'd' != 'h' then '2025-04-10'
                           end
                       ) as it
            union all
            select (
                       case 'd'
                           when 'h' then date_add(it, interval 1 day)
                           when 'd' then date_add(it, interval 1 day)
                           when 'w' then date_add(it, interval 1 week)
                           when 'm' then date_add(it, interval 1 month)
                           end
                       ) as it
            from org_date_table
            where it < @limit_cond
        ), date_table as (
            select
                year(it) as _year,
                (
                    case 'd'
                        when 'h' then day(it)
                        when 'd' then it
                        when 'w' then week(it)
                        when 'm' then month(it)
                        end
                    ) as dt
            from org_date_table
        ),  date_sale as (
            select year(actv_dt) _year,
                   month(actv_dt) as m,
                   week(actv_dt) as w,
                   actv_dt as d,
                   hour(regi_dt) as h,
                   tb_sale.*
            from tb_sale
            where shop_id=2 and

                actv_dt between '2025-04-10' and (
                    case
                        when 'd' = 'h' then '2025-04-10'
                        when 'd' != 'h' then '2025-04-16'
                        end
                    )
        ), final as (
            select count(device_id) as cnt
            from date_table dd
                     left outer join date_sale ds on dd._year=ds._year and
                                                     d = dt
            group by dd._year, dd.dt
        )

        select
            (
                select json_arrayagg(cnt)
                from final
            ) as value,
            (
                select json_arrayagg(date_format(it, '%Y-%m-%d'))
                from org_date_table
            ) as date
 {executed in 1 msec}
2025-04-17 22:13:16.904 INFO  [http-nio-11040-exec-6] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/sale/graph/ct/select/0
2025-04-17 22:13:16.904 INFO  [http-nio-11040-exec-6] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDg5NTU5NiwiZXhwIjoxNzQ0ODk2MTk2LCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.rHdmauJIT62MXeIPy7ygWZrnBfGj4Ef-1GveY_MCeSY
2025-04-17 22:13:16.904 INFO  [http-nio-11040-exec-6] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/sale/graph/ct/select/0
2025-04-17 22:13:16.907 INFO  [http-nio-11040-exec-6] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-17 22:13:16.909 DEBUG [http-nio-11040-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
6. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 1 msec}
2025-04-17 22:13:16.910 INFO  [http-nio-11040-exec-6] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-17 22:13:16.915 DEBUG [http-nio-11040-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
6. with recursive group_generation as (
            select 0 as g
            union all
            select g+1
            from group_generation
            where g < 8
        ), group_weekday as (
            select 0 as g
            union all
            select g+1
            from group_weekday
            where g < 6
        ),  sale as (
            select weekday(actv_dt) as days,
                   device_id,
                   cust_cd,
                   sale_id
            from tb_sale
            where shop_id=2 and

                device_id is not null and
                actv_dt between '2025-04-01' and '2025-04-30'
        ), sale_gene as (
            select sale_id,
                   (
                       case
                           when length(cust_cd) = 6 then floor((year(curdate()) - concat((
                                 case
                                     when substring(cust_cd, 1,2) > '44' then '19'
                                     when substring(cust_cd, 1,2) <= '44' then '20'
                                     end
                                 ),substring(cust_cd,1,2))) / 10)
                           when length(cust_cd) != 6 then null
                           end
                       ) as generation
            from sale
        ), generation as (
            select g,
                   device_id
            from group_generation g
                     left outer join sale_gene sg on g.g=sg.generation
                     left outer join sale s on s.sale_id=sg.sale_id
        ), weekdays as (
            select g,
                   device_id
            from group_weekday w
                     left outer join sale s on s.days=w.g
        )

        select IFNULL(count(device_id),0) as avg
        from generation
        group by g
 {executed in 2 msec}
2025-04-17 22:13:16.915 INFO  [http-nio-11040-exec-1] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/sale/graph/stat/select/0
2025-04-17 22:13:16.915 INFO  [http-nio-11040-exec-1] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDg5NTU5NiwiZXhwIjoxNzQ0ODk2MTk2LCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.rHdmauJIT62MXeIPy7ygWZrnBfGj4Ef-1GveY_MCeSY
2025-04-17 22:13:16.915 INFO  [http-nio-11040-exec-1] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/sale/graph/stat/select/0
2025-04-17 22:13:16.918 INFO  [http-nio-11040-exec-1] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-17 22:13:16.920 DEBUG [http-nio-11040-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
3. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 1 msec}
2025-04-17 22:13:16.920 INFO  [http-nio-11040-exec-1] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-17 22:13:16.928 INFO  [http-nio-11040-exec-4] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/sale/graph/ratio/select/0
2025-04-17 22:13:16.928 INFO  [http-nio-11040-exec-4] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDg5NTU5NiwiZXhwIjoxNzQ0ODk2MTk2LCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.rHdmauJIT62MXeIPy7ygWZrnBfGj4Ef-1GveY_MCeSY
2025-04-17 22:13:16.928 INFO  [http-nio-11040-exec-4] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/sale/graph/ratio/select/0
2025-04-17 22:13:16.929 DEBUG [http-nio-11040-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
3. with base as (select device_id,
                             (SELECT device_nm
                              FROM tb_device
                              WHERE tb_device.device_id = sl.device_id)      as device,
                             sd_id,
                             (SELECT sd_nm
                              FROM tb_second_device
                              WHERE tb_second_device.sd_id = sl.sd_id)       as sec_device,
                             ct_actv_plan,
                             (SELECT ct_plan_nm
                              FROM tb_ct_plan
                              WHERE tb_ct_plan.ct_plan_id = sl.ct_actv_plan) as actv_plan
                      from tb_sale sl
                      where shop_id = 2 and

                        actv_dt between '2025-04-01' and '2025-04-30'),
             device as (SELECT device                   as name,
                               count(device_id) as count
                        from base
                        where device_id is not null
                        group by device),
             sec_device as (SELECT sec_device                   as name,
                                   count(sec_device) as count
                            from base
                            where sd_id is not null
                            group by sec_device),
             actv_plan as (SELECT actv_plan                   as name,
                                  count(actv_plan) as count
                           from base
                           where ct_actv_plan is not null
                           group by actv_plan),
             total as (select count('device') as cnt
                       from base
                       where 'device' is not null
             )

        select name,
               count,
               (
                   IF((select cnt
                       from total) = 0 or count = 0, 0, TRUNCATE(
                              (count / (
                                  select cnt
                                  from total
                              )
                                  ) * 100, 1))
                   ) as per
        from device
        order by per desc
        limit 5
 {executed in 4 msec}
2025-04-17 22:13:16.930 INFO  [http-nio-11040-exec-4] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-17 22:13:16.933 DEBUG [http-nio-11040-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
2. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 2 msec}
2025-04-17 22:13:16.933 INFO  [http-nio-11040-exec-4] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-17 22:13:16.940 DEBUG [http-nio-11040-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
2. with recursive istm_range as (
            select 0 as i
            union all
            select i+1
            from istm_range
            where i<5
        ), base as (
            select ct_istm
            from tb_sale
            where shop_id=2 and

                actv_dt between '2025-04-01' and '2025-04-30'
        ), final as (
            select i as istm,
                   IFNULL(count(base.ct_istm),0) as cnt
            from istm_range
                     left outer join base on base.ct_istm=istm_range.i
            group by i
            order by istm desc
        )

        select json_arrayagg(istm) as type,
               json_arrayagg(cnt) as cnt,
               json_arrayagg(IF((
                      select IFNULL(count(ct_istm), 0)
                      from base
                  ) = 0 or cnt = 0, 0, TRUNCATE((cnt/(
                   select IFNULL(count(ct_istm), 0)
                   from base
               )) * 100, 1))) as per
        from final
 {executed in 4 msec}
2025-04-17 22:13:16.941 INFO  [http-nio-11040-exec-2] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/sale/graph/summary
2025-04-17 22:13:16.941 INFO  [http-nio-11040-exec-2] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDg5NTU5NiwiZXhwIjoxNzQ0ODk2MTk2LCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.rHdmauJIT62MXeIPy7ygWZrnBfGj4Ef-1GveY_MCeSY
2025-04-17 22:13:16.941 INFO  [http-nio-11040-exec-2] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/sale/graph/summary
2025-04-17 22:13:16.943 INFO  [http-nio-11040-exec-2] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-17 22:13:16.945 DEBUG [http-nio-11040-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
4. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 1 msec}
2025-04-17 22:13:16.946 INFO  [http-nio-11040-exec-2] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-17 22:13:16.953 INFO  [http-nio-11040-exec-2] [com.momo.api.SaleController] - summary: CommonVO(provider=null, date=null, year=null, month=null, day=null, selectType=null, range=null, dateType=null, prevFromYmd=null, prevToYmd=null, currFromYmd=null, currToYmd=null, fromYmd=2024-10-01, toYmd=2025-04-01, fromYm=null, toYm=null, prevDate=null, currDate=null)
2025-04-17 22:13:17.007 INFO  [http-nio-11040-exec-5] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/sale/graph/ct/d
2025-04-17 22:13:17.007 INFO  [http-nio-11040-exec-5] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDg5NTU5NiwiZXhwIjoxNzQ0ODk2MTk2LCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.rHdmauJIT62MXeIPy7ygWZrnBfGj4Ef-1GveY_MCeSY
2025-04-17 22:13:17.007 INFO  [http-nio-11040-exec-5] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/sale/graph/ct/d
2025-04-17 22:13:17.010 INFO  [http-nio-11040-exec-5] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-17 22:13:17.015 INFO  [http-nio-11040-exec-3] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/sale/graph/ct/d
2025-04-17 22:13:17.015 INFO  [http-nio-11040-exec-3] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDg5NTU5NiwiZXhwIjoxNzQ0ODk2MTk2LCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.rHdmauJIT62MXeIPy7ygWZrnBfGj4Ef-1GveY_MCeSY
2025-04-17 22:13:17.015 INFO  [http-nio-11040-exec-3] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/sale/graph/ct/d
2025-04-17 22:13:17.020 INFO  [http-nio-11040-exec-3] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-17 22:13:17.032 INFO  [http-nio-11040-exec-8] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/sale/graph/ct/select/0
2025-04-17 22:13:17.032 INFO  [http-nio-11040-exec-8] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDg5NTU5NiwiZXhwIjoxNzQ0ODk2MTk2LCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.rHdmauJIT62MXeIPy7ygWZrnBfGj4Ef-1GveY_MCeSY
2025-04-17 22:13:17.032 INFO  [http-nio-11040-exec-8] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/sale/graph/ct/select/0
2025-04-17 22:13:17.038 INFO  [http-nio-11040-exec-8] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-17 22:13:17.053 INFO  [http-nio-11040-exec-9] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/sale/graph/stat/select/0
2025-04-17 22:13:17.054 INFO  [http-nio-11040-exec-9] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDg5NTU5NiwiZXhwIjoxNzQ0ODk2MTk2LCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.rHdmauJIT62MXeIPy7ygWZrnBfGj4Ef-1GveY_MCeSY
2025-04-17 22:13:17.054 INFO  [http-nio-11040-exec-9] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/sale/graph/stat/select/0
2025-04-17 22:13:17.061 DEBUG [http-nio-11040-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
3. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 18 msec}
2025-04-17 22:13:17.062 INFO  [http-nio-11040-exec-8] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-17 22:13:17.062 INFO  [http-nio-11040-exec-9] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-17 22:13:17.063 DEBUG [http-nio-11040-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
5. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 41 msec}
2025-04-17 22:13:17.063 INFO  [http-nio-11040-exec-3] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-17 22:13:17.068 DEBUG [http-nio-11040-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 57 msec}
2025-04-17 22:13:17.068 INFO  [http-nio-11040-exec-5] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-17 22:13:17.074 DEBUG [http-nio-11040-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
2. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 10 msec}
2025-04-17 22:13:17.074 INFO  [http-nio-11040-exec-9] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-17 22:13:17.077 DEBUG [http-nio-11040-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
5. set @limit_cond := (
               case 'd'
                   when 'h' then '2000-01-24'
                   when 'd' then '2025-04-16'
                   when 'w' then '2025-04-16'
                   when 'm' then date_sub('2025-04-16', interval 1 month)
               end
        );

        with recursive org_date_table as (
            select (
                       case
                           when 'd' = 'h' then '2000-01-01'
                           when 'd' != 'h' then '2025-04-10'
                           end
                       ) as it
            union all
            select (
                       case 'd'
                           when 'h' then date_add(it, interval 1 day)
                           when 'd' then date_add(it, interval 1 day)
                           when 'w' then date_add(it, interval 1 week)
                           when 'm' then date_add(it, interval 1 month)
                           end
                       ) as it
            from org_date_table
            where it < @limit_cond
        ), date_table as (
            select
                year(it) as _year,
                (
                    case 'd'
                        when 'h' then day(it)
                        when 'd' then it
                        when 'w' then week(it)
                        when 'm' then month(it)
                        end
                    ) as dt
            from org_date_table
        ),  date_sale as (
            select year(actv_dt) _year,
                   month(actv_dt) as m,
                   week(actv_dt) as w,
                   actv_dt as d,
                   hour(regi_dt) as h,
                   tb_sale.*
            from tb_sale
            where shop_id=2 and

                    seller_id='km1104rs' and

                actv_dt between '2025-04-10' and (
                    case
                        when 'd' = 'h' then '2025-04-10'
                        when 'd' != 'h' then '2025-04-16'
                        end
                    )
        ), final as (
            select count(device_id) as cnt
            from date_table dd
                     left outer join date_sale ds on dd._year=ds._year and
                                                     d = dt
            group by dd._year, dd.dt
        )

        select
            (
                select json_arrayagg(cnt)
                from final
            ) as value,
            (
                select json_arrayagg(date_format(it, '%Y-%m-%d'))
                from org_date_table
            ) as date
 {executed in 8 msec}
2025-04-17 22:13:17.081 DEBUG [http-nio-11040-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
3. with recursive group_generation as (
            select 0 as g
            union all
            select g+1
            from group_generation
            where g < 8
        ), group_weekday as (
            select 0 as g
            union all
            select g+1
            from group_weekday
            where g < 6
        ),  sale as (
            select weekday(actv_dt) as days,
                   device_id,
                   cust_cd,
                   sale_id
            from tb_sale
            where shop_id=2 and

                      seller_id='km1104rs' and

                device_id is not null and
                actv_dt between '2025-04-01' and '2025-04-30'
        ), sale_gene as (
            select sale_id,
                   (
                       case
                           when length(cust_cd) = 6 then floor((year(curdate()) - concat((
                                 case
                                     when substring(cust_cd, 1,2) > '44' then '19'
                                     when substring(cust_cd, 1,2) <= '44' then '20'
                                     end
                                 ),substring(cust_cd,1,2))) / 10)
                           when length(cust_cd) != 6 then null
                           end
                       ) as generation
            from sale
        ), generation as (
            select g,
                   device_id
            from group_generation g
                     left outer join sale_gene sg on g.g=sg.generation
                     left outer join sale s on s.sale_id=sg.sale_id
        ), weekdays as (
            select g,
                   device_id
            from group_weekday w
                     left outer join sale s on s.days=w.g
        )

        select IFNULL(count(device_id),0) as avg
        from generation
        group by g
 {executed in 15 msec}
2025-04-17 22:13:17.085 INFO  [http-nio-11040-exec-7] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/sale/graph/ratio/select/0
2025-04-17 22:13:17.086 INFO  [http-nio-11040-exec-7] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDg5NTU5NiwiZXhwIjoxNzQ0ODk2MTk2LCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.rHdmauJIT62MXeIPy7ygWZrnBfGj4Ef-1GveY_MCeSY
2025-04-17 22:13:17.086 INFO  [http-nio-11040-exec-7] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/sale/graph/ratio/select/0
2025-04-17 22:13:17.088 INFO  [http-nio-11040-exec-7] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-17 22:13:17.092 DEBUG [http-nio-11040-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. set @limit_cond := (
               case 'd'
                   when 'h' then '2000-01-24'
                   when 'd' then '2025-04-17'
                   when 'w' then '2025-04-17'
                   when 'm' then date_sub('2025-04-17', interval 1 month)
               end
        );

        with recursive org_date_table as (
            select (
                       case
                           when 'd' = 'h' then '2000-01-01'
                           when 'd' != 'h' then '2025-01-17'
                           end
                       ) as it
            union all
            select (
                       case 'd'
                           when 'h' then date_add(it, interval 1 day)
                           when 'd' then date_add(it, interval 1 day)
                           when 'w' then date_add(it, interval 1 week)
                           when 'm' then date_add(it, interval 1 month)
                           end
                       ) as it
            from org_date_table
            where it < @limit_cond
        ), date_table as (
            select
                year(it) as _year,
                (
                    case 'd'
                        when 'h' then day(it)
                        when 'd' then it
                        when 'w' then week(it)
                        when 'm' then month(it)
                        end
                    ) as dt
            from org_date_table
        ),  date_sale as (
            select year(actv_dt) _year,
                   month(actv_dt) as m,
                   week(actv_dt) as w,
                   actv_dt as d,
                   hour(regi_dt) as h,
                   tb_sale.*
            from tb_sale
            where shop_id=2 and

                    seller_id='km1104rs' and

                actv_dt between '2025-01-17' and (
                    case
                        when 'd' = 'h' then '2025-01-17'
                        when 'd' != 'h' then '2025-04-17'
                        end
                    )
        ), final as (
            select count(device_id) as cnt
            from date_table dd
                     left outer join date_sale ds on dd._year=ds._year and
                                                     d = dt
            group by dd._year, dd.dt
        )

        select
            (
                select json_arrayagg(cnt)
                from final
            ) as value,
            (
                select json_arrayagg(date_format(it, '%Y-%m-%d'))
                from org_date_table
            ) as date
 {executed in 20 msec}
2025-04-17 22:13:17.092 DEBUG [http-nio-11040-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
2. with base as (select device_id,
                             (SELECT device_nm
                              FROM tb_device
                              WHERE tb_device.device_id = sl.device_id)      as device,
                             sd_id,
                             (SELECT sd_nm
                              FROM tb_second_device
                              WHERE tb_second_device.sd_id = sl.sd_id)       as sec_device,
                             ct_actv_plan,
                             (SELECT ct_plan_nm
                              FROM tb_ct_plan
                              WHERE tb_ct_plan.ct_plan_id = sl.ct_actv_plan) as actv_plan
                      from tb_sale sl
                      where shop_id = 2 and

                                seller_id='km1104rs' and

                        actv_dt between '2025-04-01' and '2025-04-30'),
             device as (SELECT device                   as name,
                               count(device_id) as count
                        from base
                        where device_id is not null
                        group by device),
             sec_device as (SELECT sec_device                   as name,
                                   count(sec_device) as count
                            from base
                            where sd_id is not null
                            group by sec_device),
             actv_plan as (SELECT actv_plan                   as name,
                                  count(actv_plan) as count
                           from base
                           where ct_actv_plan is not null
                           group by actv_plan),
             total as (select count('device') as cnt
                       from base
                       where 'device' is not null
             )

        select name,
               count,
               (
                   IF((select cnt
                       from total) = 0 or count = 0, 0, TRUNCATE(
                              (count / (
                                  select cnt
                                  from total
                              )
                                  ) * 100, 1))
                   ) as per
        from device
        order by per desc
        limit 5
 {executed in 15 msec}
2025-04-17 22:13:17.092 INFO  [http-nio-11040-exec-10] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/sale/graph/summary
2025-04-17 22:13:17.092 INFO  [http-nio-11040-exec-10] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDg5NTU5NiwiZXhwIjoxNzQ0ODk2MTk2LCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.rHdmauJIT62MXeIPy7ygWZrnBfGj4Ef-1GveY_MCeSY
2025-04-17 22:13:17.092 INFO  [http-nio-11040-exec-10] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/sale/graph/summary
2025-04-17 22:13:17.094 DEBUG [http-nio-11040-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
3. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 4 msec}
2025-04-17 22:13:17.094 INFO  [http-nio-11040-exec-10] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-17 22:13:17.095 INFO  [http-nio-11040-exec-7] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-17 22:13:17.097 DEBUG [http-nio-11040-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 1 msec}
2025-04-17 22:13:17.097 INFO  [http-nio-11040-exec-10] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-17 22:13:17.098 DEBUG [http-nio-11040-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
4. #         월별 날짜 구하기
        with recursive month_range as (
            select '2024-10-01' as d
            union all
            select date_add(d, interval 1 month) as d
            from month_range
            where date_add(d, interval 1 month) < '2025-04-01'
        ), months as(
            select month(d) as m
            from month_range
        ), filtered_sale as ( # 판매일보 초벌
            select month(actv_dt) as actv_month,
                   device_id,
                   internet_plan,
                   tv_plan,
                    exsvc_id,
                   total_cms,
                   wt_cms,
                   sale_id,
                   sd_id,
                    shop_id
            from tb_sale
            where shop_id=2 and

                actv_dt between '2024-10-01' and date_add('2025-04-01', interval 1 month)
        ), ct_graph as ( # 무선 그래프 데이터
            SELECT m,
                   count(device_id) as cnt
            FROM months
                     LEFT OUTER JOIN filtered_sale on actv_month = m and
                                                      device_id is not null
            group by m
        ), internet_graph as ( # 인터넷 그래프 데이터
            SELECT m,
                   count(internet_plan) as cnt
            FROM months
                     LEFT OUTER JOIN filtered_sale on actv_month = m  and
                                                      internet_plan is not null
            group by m
        ), tv_graph as ( # TV 그래프 데이터
            SELECT m,
                   count(tv_plan) as cnt
            FROM months
                     LEFT OUTER JOIN filtered_sale on actv_month = m  and
                                                      tv_plan is not null
            group by m
        ), card as ( # 카드 데이터
            SELECT m,
                   (
                    select count(*)
                    from tb_sale_card sc
                    left outer join filtered_sale fs on fs.shop_id = sc.shop_id and
                                                        fs.sale_id = sc.sale_id
                   )  as cnt
            FROM months
                     LEFT OUTER JOIN filtered_sale on actv_month = m
            group by m
        ), exsvc as ( # 부가서비스 데이터
            SELECT m,
                   count(exsvc_id) as cnt
            FROM months
                     LEFT OUTER JOIN filtered_sale on actv_month = m  and
                                                      exsvc_id is not null
            group by m
        ), tc_graph as ( # 총 이익 그래프 데이터
            SELECT m,
                   IFNULL(sum(total_cms), 0) as cnt
            FROM months
                     LEFT OUTER JOIN filtered_sale on actv_month = m
            group by m
        ), avg_margin_graph as ( # 개인 평균 마진 그래프 데이터
            SELECT m,
                   IFNULL(avg(total_cms), 0) as cnt
            FROM months
                     LEFT OUTER JOIN filtered_sale on actv_month = m and
                                                      device_id is not null
            group by m
        ), ud_graph as ( # 중고 개통 그래프 데이터
            SELECT m,
                   count(ud_id) as cnt
            FROM months
                     LEFT OUTER JOIN filtered_sale on actv_month = m
                     LEFT OUTER JOIN tb_sale_used_device sud on sud.sale_id=filtered_sale.sale_id
            group by m
        ), sec_graph as ( # 세컨 그래프 데이터
            SELECT m,
                   count(sd_id) as cnt
            FROM months
                     LEFT OUTER JOIN filtered_sale on actv_month = m and
                                                      sd_id != 0
            group by m
        ), diff_ct as (
            select
                (
                    select cnt
                    from ct_graph
                    limit 4, 1
                ) as prv,
                (
                    select cnt
                    from ct_graph
                    limit 5,1
                ) as curr
            from dual
        ), diff_internet as (
            select
                (
                    select cnt
                    from internet_graph
                    limit 4,1
                ) as prv,
                (
                    select cnt
                    from internet_graph
                    limit 5,1
                ) as curr
            from dual
        ), diff_tv as (
            select
                (
                    select cnt
                    from tv_graph
                    limit 4,1
                ) as prv,
                (
                    select cnt
                    from tv_graph
                    limit 5,1
                ) as curr
            from dual
        ), diff_card as (
            select
                (
                    select cnt
                    from card
                    limit 4,1
                ) as prv,
                (
                    select cnt
                    from card
                    limit 5,1
                ) as curr
            from dual
        ), diff_exsvc as (
            select
                (
                    select cnt
                    from exsvc
                    limit 4,1
                ) as prv,
                (
                    select cnt
                    from exsvc
                    limit 5,1
                ) as curr
            from dual
        ), diff_tc as (
            select
                (
                    select cnt
                    from tc_graph
                    limit 4,1
                ) as prv,
                (
                    select cnt
                    from tc_graph
                    limit 5,1
                ) as curr
            from dual
        ) , diff_margin as (
            select
                (
                    select cnt
                    from avg_margin_graph
                    limit 4,1
                ) as prv,
                (
                    select cnt
                    from avg_margin_graph
                    limit 5,1
                ) as curr
            from dual
        ), diff_ud as (
            select
                (
                    select cnt
                    from ud_graph
                    limit 4,1
                ) as prv,
                (
                    select cnt
                    from ud_graph
                    limit 5,1
                ) as curr
            from dual
        ) , diff_sec as (
            select
                (
                    select cnt
                    from sec_graph
                    limit 4,1
                ) as prv,
                (
                    select cnt
                    from sec_graph
                    limit 5,1
                ) as curr
            from dual
        ), final as (
            select
                curr,
                prv,
                (
                    select json_arrayagg(cnt)
                    from ct_graph
                ) as list
            from diff_ct
            union all
            select
                curr,
                prv,
                (
                    select json_arrayagg(cnt)
                    from internet_graph
                ) as list
            from diff_internet
            union all
            select
                curr,
                prv,
                (
                    select json_arrayagg(cnt)
                    from tv_graph
                ) as list
            from diff_tv
             union all
            select
                curr,
                prv,
                (
                    select json_arrayagg(cnt)
                    from card
                ) as list
            from diff_card
             union all
            select
                curr,
                prv,
                (
                    select json_arrayagg(cnt)
                    from exsvc
                ) as list
            from diff_exsvc
            union all
            select
                curr,
                prv,
                (
                    select json_arrayagg(cnt)
                    from tc_graph
                ) as list
            from diff_tc
            union all
            select
                curr,
                prv,
                (
                    select json_arrayagg(cnt)
                    from avg_margin_graph
                ) as list
            from diff_margin
            union all
            select
                curr,
                prv,
                (
                    select json_arrayagg(cnt)
                    from ud_graph
                ) as list
            from diff_ud
            union all
            select
                curr,
                prv,
                (
                    select json_arrayagg(cnt)
                    from sec_graph
                ) as list
            from diff_sec
        )

        select FLOOR(curr) as value,
               (
                   CASE
                       WHEN curr = 0 and prv = 0 THEN 0
                       WHEN prv != 0 and curr = 0 THEN -100
                       WHEN prv = 0 and curr != 0 THEN 100
                       WHEN curr != 0 and prv != 0 THEN TRUNCATE(((curr/prv)-1)*100, 1)
                       END
                   ) as per,
               list
        from final
 {executed in 138 msec}
2025-04-17 22:13:17.098 INFO  [http-nio-11040-exec-10] [com.momo.api.SaleController] - summary: CommonVO(provider=null, date=null, year=null, month=null, day=null, selectType=null, range=null, dateType=null, prevFromYmd=null, prevToYmd=null, currFromYmd=null, currToYmd=null, fromYmd=2024-10-01, toYmd=2025-04-01, fromYm=null, toYm=null, prevDate=null, currDate=null)
2025-04-17 22:13:17.100 DEBUG [http-nio-11040-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
3. with recursive istm_range as (
            select 0 as i
            union all
            select i+1
            from istm_range
            where i<5
        ), base as (
            select ct_istm
            from tb_sale
            where shop_id=2 and

                        seller_id='km1104rs' and

                actv_dt between '2025-04-01' and '2025-04-30'
        ), final as (
            select i as istm,
                   IFNULL(count(base.ct_istm),0) as cnt
            from istm_range
                     left outer join base on base.ct_istm=istm_range.i
            group by i
            order by istm desc
        )

        select json_arrayagg(istm) as type,
               json_arrayagg(cnt) as cnt,
               json_arrayagg(IF((
                      select IFNULL(count(ct_istm), 0)
                      from base
                  ) = 0 or cnt = 0, 0, TRUNCATE((cnt/(
                   select IFNULL(count(ct_istm), 0)
                   from base
               )) * 100, 1))) as per
        from final
 {executed in 1 msec}
2025-04-17 22:13:17.137 DEBUG [http-nio-11040-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. #         월별 날짜 구하기
        with recursive month_range as (
            select '2024-10-01' as d
            union all
            select date_add(d, interval 1 month) as d
            from month_range
            where date_add(d, interval 1 month) < '2025-04-01'
        ), months as(
            select month(d) as m
            from month_range
        ), filtered_sale as ( # 판매일보 초벌
            select month(actv_dt) as actv_month,
                   device_id,
                   internet_plan,
                   tv_plan,
                    exsvc_id,
                   total_cms,
                   wt_cms,
                   sale_id,
                   sd_id,
                    shop_id
            from tb_sale
            where shop_id=2 and

                    seller_id='km1104rs' and

                actv_dt between '2024-10-01' and date_add('2025-04-01', interval 1 month)
        ), ct_graph as ( # 무선 그래프 데이터
            SELECT m,
                   count(device_id) as cnt
            FROM months
                     LEFT OUTER JOIN filtered_sale on actv_month = m and
                                                      device_id is not null
            group by m
        ), internet_graph as ( # 인터넷 그래프 데이터
            SELECT m,
                   count(internet_plan) as cnt
            FROM months
                     LEFT OUTER JOIN filtered_sale on actv_month = m  and
                                                      internet_plan is not null
            group by m
        ), tv_graph as ( # TV 그래프 데이터
            SELECT m,
                   count(tv_plan) as cnt
            FROM months
                     LEFT OUTER JOIN filtered_sale on actv_month = m  and
                                                      tv_plan is not null
            group by m
        ), card as ( # 카드 데이터
            SELECT m,
                   (
                    select count(*)
                    from tb_sale_card sc
                    left outer join filtered_sale fs on fs.shop_id = sc.shop_id and
                                                        fs.sale_id = sc.sale_id
                   )  as cnt
            FROM months
                     LEFT OUTER JOIN filtered_sale on actv_month = m
            group by m
        ), exsvc as ( # 부가서비스 데이터
            SELECT m,
                   count(exsvc_id) as cnt
            FROM months
                     LEFT OUTER JOIN filtered_sale on actv_month = m  and
                                                      exsvc_id is not null
            group by m
        ), tc_graph as ( # 총 이익 그래프 데이터
            SELECT m,
                   IFNULL(sum(total_cms), 0) as cnt
            FROM months
                     LEFT OUTER JOIN filtered_sale on actv_month = m
            group by m
        ), avg_margin_graph as ( # 개인 평균 마진 그래프 데이터
            SELECT m,
                   IFNULL(avg(total_cms), 0) as cnt
            FROM months
                     LEFT OUTER JOIN filtered_sale on actv_month = m and
                                                      device_id is not null
            group by m
        ), ud_graph as ( # 중고 개통 그래프 데이터
            SELECT m,
                   count(ud_id) as cnt
            FROM months
                     LEFT OUTER JOIN filtered_sale on actv_month = m
                     LEFT OUTER JOIN tb_sale_used_device sud on sud.sale_id=filtered_sale.sale_id
            group by m
        ), sec_graph as ( # 세컨 그래프 데이터
            SELECT m,
                   count(sd_id) as cnt
            FROM months
                     LEFT OUTER JOIN filtered_sale on actv_month = m and
                                                      sd_id != 0
            group by m
        ), diff_ct as (
            select
                (
                    select cnt
                    from ct_graph
                    limit 4, 1
                ) as prv,
                (
                    select cnt
                    from ct_graph
                    limit 5,1
                ) as curr
            from dual
        ), diff_internet as (
            select
                (
                    select cnt
                    from internet_graph
                    limit 4,1
                ) as prv,
                (
                    select cnt
                    from internet_graph
                    limit 5,1
                ) as curr
            from dual
        ), diff_tv as (
            select
                (
                    select cnt
                    from tv_graph
                    limit 4,1
                ) as prv,
                (
                    select cnt
                    from tv_graph
                    limit 5,1
                ) as curr
            from dual
        ), diff_card as (
            select
                (
                    select cnt
                    from card
                    limit 4,1
                ) as prv,
                (
                    select cnt
                    from card
                    limit 5,1
                ) as curr
            from dual
        ), diff_exsvc as (
            select
                (
                    select cnt
                    from exsvc
                    limit 4,1
                ) as prv,
                (
                    select cnt
                    from exsvc
                    limit 5,1
                ) as curr
            from dual
        ), diff_tc as (
            select
                (
                    select cnt
                    from tc_graph
                    limit 4,1
                ) as prv,
                (
                    select cnt
                    from tc_graph
                    limit 5,1
                ) as curr
            from dual
        ) , diff_margin as (
            select
                (
                    select cnt
                    from avg_margin_graph
                    limit 4,1
                ) as prv,
                (
                    select cnt
                    from avg_margin_graph
                    limit 5,1
                ) as curr
            from dual
        ), diff_ud as (
            select
                (
                    select cnt
                    from ud_graph
                    limit 4,1
                ) as prv,
                (
                    select cnt
                    from ud_graph
                    limit 5,1
                ) as curr
            from dual
        ) , diff_sec as (
            select
                (
                    select cnt
                    from sec_graph
                    limit 4,1
                ) as prv,
                (
                    select cnt
                    from sec_graph
                    limit 5,1
                ) as curr
            from dual
        ), final as (
            select
                curr,
                prv,
                (
                    select json_arrayagg(cnt)
                    from ct_graph
                ) as list
            from diff_ct
            union all
            select
                curr,
                prv,
                (
                    select json_arrayagg(cnt)
                    from internet_graph
                ) as list
            from diff_internet
            union all
            select
                curr,
                prv,
                (
                    select json_arrayagg(cnt)
                    from tv_graph
                ) as list
            from diff_tv
             union all
            select
                curr,
                prv,
                (
                    select json_arrayagg(cnt)
                    from card
                ) as list
            from diff_card
             union all
            select
                curr,
                prv,
                (
                    select json_arrayagg(cnt)
                    from exsvc
                ) as list
            from diff_exsvc
            union all
            select
                curr,
                prv,
                (
                    select json_arrayagg(cnt)
                    from tc_graph
                ) as list
            from diff_tc
            union all
            select
                curr,
                prv,
                (
                    select json_arrayagg(cnt)
                    from avg_margin_graph
                ) as list
            from diff_margin
            union all
            select
                curr,
                prv,
                (
                    select json_arrayagg(cnt)
                    from ud_graph
                ) as list
            from diff_ud
            union all
            select
                curr,
                prv,
                (
                    select json_arrayagg(cnt)
                    from sec_graph
                ) as list
            from diff_sec
        )

        select FLOOR(curr) as value,
               (
                   CASE
                       WHEN curr = 0 and prv = 0 THEN 0
                       WHEN prv != 0 and curr = 0 THEN -100
                       WHEN prv = 0 and curr != 0 THEN 100
                       WHEN curr != 0 and prv != 0 THEN TRUNCATE(((curr/prv)-1)*100, 1)
                       END
                   ) as per,
               list
        from final
 {executed in 33 msec}
2025-04-17 22:13:17.176 INFO  [http-nio-11040-exec-6] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/sale/graph/ct/select/0
2025-04-17 22:13:17.176 INFO  [http-nio-11040-exec-6] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDg5NTU5NiwiZXhwIjoxNzQ0ODk2MTk2LCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.rHdmauJIT62MXeIPy7ygWZrnBfGj4Ef-1GveY_MCeSY
2025-04-17 22:13:17.176 INFO  [http-nio-11040-exec-6] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/sale/graph/ct/select/0
2025-04-17 22:13:17.178 INFO  [http-nio-11040-exec-6] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-17 22:13:17.180 DEBUG [http-nio-11040-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
6. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 2 msec}
2025-04-17 22:13:17.181 INFO  [http-nio-11040-exec-6] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-17 22:13:17.187 DEBUG [http-nio-11040-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
6. with recursive group_generation as (
            select 0 as g
            union all
            select g+1
            from group_generation
            where g < 8
        ), group_weekday as (
            select 0 as g
            union all
            select g+1
            from group_weekday
            where g < 6
        ),  sale as (
            select weekday(actv_dt) as days,
                   device_id,
                   cust_cd,
                   sale_id
            from tb_sale
            where shop_id=2 and

                      seller_id='km1104rs' and

                device_id is not null and
                actv_dt between '2025-04-01' and '2025-04-30'
        ), sale_gene as (
            select sale_id,
                   (
                       case
                           when length(cust_cd) = 6 then floor((year(curdate()) - concat((
                                 case
                                     when substring(cust_cd, 1,2) > '44' then '19'
                                     when substring(cust_cd, 1,2) <= '44' then '20'
                                     end
                                 ),substring(cust_cd,1,2))) / 10)
                           when length(cust_cd) != 6 then null
                           end
                       ) as generation
            from sale
        ), generation as (
            select g,
                   device_id
            from group_generation g
                     left outer join sale_gene sg on g.g=sg.generation
                     left outer join sale s on s.sale_id=sg.sale_id
        ), weekdays as (
            select g,
                   device_id
            from group_weekday w
                     left outer join sale s on s.days=w.g
        )

        select IFNULL(count(device_id),0) as avg
        from generation
        group by g
 {executed in 3 msec}
2025-04-17 22:13:17.196 INFO  [http-nio-11040-exec-1] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/sale/graph/stat/select/0
2025-04-17 22:13:17.197 INFO  [http-nio-11040-exec-1] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDg5NTU5NiwiZXhwIjoxNzQ0ODk2MTk2LCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.rHdmauJIT62MXeIPy7ygWZrnBfGj4Ef-1GveY_MCeSY
2025-04-17 22:13:17.197 INFO  [http-nio-11040-exec-1] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/sale/graph/stat/select/0
2025-04-17 22:13:17.199 INFO  [http-nio-11040-exec-1] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-17 22:13:17.202 DEBUG [http-nio-11040-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
3. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 3 msec}
2025-04-17 22:13:17.203 INFO  [http-nio-11040-exec-1] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-17 22:13:17.217 DEBUG [http-nio-11040-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
3. with base as (select device_id,
                             (SELECT device_nm
                              FROM tb_device
                              WHERE tb_device.device_id = sl.device_id)      as device,
                             sd_id,
                             (SELECT sd_nm
                              FROM tb_second_device
                              WHERE tb_second_device.sd_id = sl.sd_id)       as sec_device,
                             ct_actv_plan,
                             (SELECT ct_plan_nm
                              FROM tb_ct_plan
                              WHERE tb_ct_plan.ct_plan_id = sl.ct_actv_plan) as actv_plan
                      from tb_sale sl
                      where shop_id = 2 and

                                seller_id='km1104rs' and

                        actv_dt between '2025-04-01' and '2025-04-30'),
             device as (SELECT device                   as name,
                               count(device_id) as count
                        from base
                        where device_id is not null
                        group by device),
             sec_device as (SELECT sec_device                   as name,
                                   count(sec_device) as count
                            from base
                            where sd_id is not null
                            group by sec_device),
             actv_plan as (SELECT actv_plan                   as name,
                                  count(actv_plan) as count
                           from base
                           where ct_actv_plan is not null
                           group by actv_plan),
             total as (select count('device') as cnt
                       from base
                       where 'device' is not null
             )

        select name,
               count,
               (
                   IF((select cnt
                       from total) = 0 or count = 0, 0, TRUNCATE(
                              (count / (
                                  select cnt
                                  from total
                              )
                                  ) * 100, 1))
                   ) as per
        from device
        order by per desc
        limit 5
 {executed in 12 msec}
2025-04-17 22:13:17.233 INFO  [http-nio-11040-exec-4] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/sale/graph/ratio/select/0
2025-04-17 22:13:17.233 INFO  [http-nio-11040-exec-4] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDg5NTU5NiwiZXhwIjoxNzQ0ODk2MTk2LCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.rHdmauJIT62MXeIPy7ygWZrnBfGj4Ef-1GveY_MCeSY
2025-04-17 22:13:17.233 INFO  [http-nio-11040-exec-4] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/sale/graph/ratio/select/0
2025-04-17 22:13:17.236 INFO  [http-nio-11040-exec-4] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-17 22:13:17.238 DEBUG [http-nio-11040-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
2. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 2 msec}
2025-04-17 22:13:17.239 INFO  [http-nio-11040-exec-4] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-17 22:13:17.243 DEBUG [http-nio-11040-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
2. with recursive istm_range as (
            select 0 as i
            union all
            select i+1
            from istm_range
            where i<5
        ), base as (
            select ct_istm
            from tb_sale
            where shop_id=2 and

                        seller_id='km1104rs' and

                actv_dt between '2025-04-01' and '2025-04-30'
        ), final as (
            select i as istm,
                   IFNULL(count(base.ct_istm),0) as cnt
            from istm_range
                     left outer join base on base.ct_istm=istm_range.i
            group by i
            order by istm desc
        )

        select json_arrayagg(istm) as type,
               json_arrayagg(cnt) as cnt,
               json_arrayagg(IF((
                      select IFNULL(count(ct_istm), 0)
                      from base
                  ) = 0 or cnt = 0, 0, TRUNCATE((cnt/(
                   select IFNULL(count(ct_istm), 0)
                   from base
               )) * 100, 1))) as per
        from final
 {executed in 1 msec}
2025-04-17 22:13:17.298 INFO  [http-nio-11040-exec-3] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/sale/graph/ct/select/0
2025-04-17 22:13:17.298 INFO  [http-nio-11040-exec-3] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDg5NTU5NiwiZXhwIjoxNzQ0ODk2MTk2LCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.rHdmauJIT62MXeIPy7ygWZrnBfGj4Ef-1GveY_MCeSY
2025-04-17 22:13:17.298 INFO  [http-nio-11040-exec-3] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/sale/graph/ct/select/0
2025-04-17 22:13:17.299 INFO  [http-nio-11040-exec-3] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-17 22:13:17.301 DEBUG [http-nio-11040-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
5. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 1 msec}
2025-04-17 22:13:17.301 INFO  [http-nio-11040-exec-3] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-17 22:13:17.304 DEBUG [http-nio-11040-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
5. with recursive group_generation as (
            select 0 as g
            union all
            select g+1
            from group_generation
            where g < 8
        ), group_weekday as (
            select 0 as g
            union all
            select g+1
            from group_weekday
            where g < 6
        ),  sale as (
            select weekday(actv_dt) as days,
                   device_id,
                   cust_cd,
                   sale_id
            from tb_sale
            where shop_id=2 and

                      seller_id='km1104rs' and

                device_id is not null and
                actv_dt between '2025-04-01' and '2025-04-30'
        ), sale_gene as (
            select sale_id,
                   (
                       case
                           when length(cust_cd) = 6 then floor((year(curdate()) - concat((
                                 case
                                     when substring(cust_cd, 1,2) > '44' then '19'
                                     when substring(cust_cd, 1,2) <= '44' then '20'
                                     end
                                 ),substring(cust_cd,1,2))) / 10)
                           when length(cust_cd) != 6 then null
                           end
                       ) as generation
            from sale
        ), generation as (
            select g,
                   device_id
            from group_generation g
                     left outer join sale_gene sg on g.g=sg.generation
                     left outer join sale s on s.sale_id=sg.sale_id
        ), weekdays as (
            select g,
                   device_id
            from group_weekday w
                     left outer join sale s on s.days=w.g
        )

        select IFNULL(count(device_id),0) as avg
        from generation
        group by g
 {executed in 1 msec}
2025-04-17 22:13:17.320 INFO  [http-nio-11040-exec-8] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/sale/graph/stat/select/0
2025-04-17 22:13:17.320 INFO  [http-nio-11040-exec-8] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDg5NTU5NiwiZXhwIjoxNzQ0ODk2MTk2LCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.rHdmauJIT62MXeIPy7ygWZrnBfGj4Ef-1GveY_MCeSY
2025-04-17 22:13:17.320 INFO  [http-nio-11040-exec-8] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/sale/graph/stat/select/0
2025-04-17 22:13:17.322 INFO  [http-nio-11040-exec-8] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-17 22:13:17.324 DEBUG [http-nio-11040-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
3. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 2 msec}
2025-04-17 22:13:17.325 INFO  [http-nio-11040-exec-8] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-17 22:13:17.330 DEBUG [http-nio-11040-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
3. with base as (select device_id,
                             (SELECT device_nm
                              FROM tb_device
                              WHERE tb_device.device_id = sl.device_id)      as device,
                             sd_id,
                             (SELECT sd_nm
                              FROM tb_second_device
                              WHERE tb_second_device.sd_id = sl.sd_id)       as sec_device,
                             ct_actv_plan,
                             (SELECT ct_plan_nm
                              FROM tb_ct_plan
                              WHERE tb_ct_plan.ct_plan_id = sl.ct_actv_plan) as actv_plan
                      from tb_sale sl
                      where shop_id = 2 and

                                seller_id='km1104rs' and

                        actv_dt between '2025-04-01' and '2025-04-30'),
             device as (SELECT device                   as name,
                               count(device_id) as count
                        from base
                        where device_id is not null
                        group by device),
             sec_device as (SELECT sec_device                   as name,
                                   count(sec_device) as count
                            from base
                            where sd_id is not null
                            group by sec_device),
             actv_plan as (SELECT actv_plan                   as name,
                                  count(actv_plan) as count
                           from base
                           where ct_actv_plan is not null
                           group by actv_plan),
             total as (select count('device') as cnt
                       from base
                       where 'device' is not null
             )

        select name,
               count,
               (
                   IF((select cnt
                       from total) = 0 or count = 0, 0, TRUNCATE(
                              (count / (
                                  select cnt
                                  from total
                              )
                                  ) * 100, 1))
                   ) as per
        from device
        order by per desc
        limit 5
 {executed in 1 msec}
2025-04-17 22:13:17.348 INFO  [http-nio-11040-exec-5] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/sale/graph/ratio/select/0
2025-04-17 22:13:17.348 INFO  [http-nio-11040-exec-5] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDg5NTU5NiwiZXhwIjoxNzQ0ODk2MTk2LCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.rHdmauJIT62MXeIPy7ygWZrnBfGj4Ef-1GveY_MCeSY
2025-04-17 22:13:17.348 INFO  [http-nio-11040-exec-5] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/sale/graph/ratio/select/0
2025-04-17 22:13:17.349 INFO  [http-nio-11040-exec-5] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-17 22:13:17.350 DEBUG [http-nio-11040-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 1 msec}
2025-04-17 22:13:17.351 INFO  [http-nio-11040-exec-5] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-17 22:13:17.355 DEBUG [http-nio-11040-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. with recursive istm_range as (
            select 0 as i
            union all
            select i+1
            from istm_range
            where i<5
        ), base as (
            select ct_istm
            from tb_sale
            where shop_id=2 and

                        seller_id='km1104rs' and

                actv_dt between '2025-04-01' and '2025-04-30'
        ), final as (
            select i as istm,
                   IFNULL(count(base.ct_istm),0) as cnt
            from istm_range
                     left outer join base on base.ct_istm=istm_range.i
            group by i
            order by istm desc
        )

        select json_arrayagg(istm) as type,
               json_arrayagg(cnt) as cnt,
               json_arrayagg(IF((
                      select IFNULL(count(ct_istm), 0)
                      from base
                  ) = 0 or cnt = 0, 0, TRUNCATE((cnt/(
                   select IFNULL(count(ct_istm), 0)
                   from base
               )) * 100, 1))) as per
        from final
 {executed in 1 msec}
2025-04-17 22:13:19.559 INFO  [http-nio-11040-exec-9] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/notif/count/unread
2025-04-17 22:13:19.559 INFO  [http-nio-11040-exec-9] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDg5NTU5NiwiZXhwIjoxNzQ0ODk2MTk2LCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.rHdmauJIT62MXeIPy7ygWZrnBfGj4Ef-1GveY_MCeSY
2025-04-17 22:13:19.559 INFO  [http-nio-11040-exec-9] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/notif/count/unread
2025-04-17 22:13:19.561 INFO  [http-nio-11040-exec-9] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-17 22:13:19.564 DEBUG [http-nio-11040-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
2. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 1 msec}
2025-04-17 22:13:19.564 INFO  [http-nio-11040-exec-9] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-17 22:13:19.565 INFO  [http-nio-11040-exec-9] [c.momo.common.util.SecurityContextUtil] - principal: UserDetailsImpl(username=km1104rs, password=$2a$10$uXShhwl6ULOkbJe477uDWOfdiUUcu6lOSF/Dhj9xP3U1nUn/gXkc6, authorities=[ROLE_NONE])
2025-04-17 22:13:19.567 DEBUG [http-nio-11040-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
2. SELECT count(*)
        FROM tb_notification
        WHERE receiver_id = 'km1104rs'
          AND read_st = FALSE
 {executed in 2 msec}
2025-04-17 22:13:20.222 INFO  [http-nio-11040-exec-2] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/notif/count/unread
2025-04-17 22:13:20.222 INFO  [http-nio-11040-exec-2] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDg5NTU5NiwiZXhwIjoxNzQ0ODk2MTk2LCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.rHdmauJIT62MXeIPy7ygWZrnBfGj4Ef-1GveY_MCeSY
2025-04-17 22:13:20.222 INFO  [http-nio-11040-exec-2] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/notif/count/unread
2025-04-17 22:13:20.224 INFO  [http-nio-11040-exec-2] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-17 22:13:20.227 DEBUG [http-nio-11040-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
4. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 3 msec}
2025-04-17 22:13:20.228 INFO  [http-nio-11040-exec-2] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-17 22:13:20.229 INFO  [http-nio-11040-exec-2] [c.momo.common.util.SecurityContextUtil] - principal: UserDetailsImpl(username=km1104rs, password=$2a$10$uXShhwl6ULOkbJe477uDWOfdiUUcu6lOSF/Dhj9xP3U1nUn/gXkc6, authorities=[ROLE_NONE])
2025-04-17 22:13:20.232 DEBUG [http-nio-11040-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
4. SELECT count(*)
        FROM tb_notification
        WHERE receiver_id = 'km1104rs'
          AND read_st = FALSE
 {executed in 1 msec}
2025-04-17 22:13:20.257 INFO  [http-nio-11040-exec-7] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/sale/graph/ct/select/0
2025-04-17 22:13:20.257 INFO  [http-nio-11040-exec-7] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDg5NTU5NiwiZXhwIjoxNzQ0ODk2MTk2LCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.rHdmauJIT62MXeIPy7ygWZrnBfGj4Ef-1GveY_MCeSY
2025-04-17 22:13:20.257 INFO  [http-nio-11040-exec-7] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/sale/graph/ct/select/0
2025-04-17 22:13:20.259 INFO  [http-nio-11040-exec-7] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-17 22:13:20.261 DEBUG [http-nio-11040-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
3. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 1 msec}
2025-04-17 22:13:20.262 INFO  [http-nio-11040-exec-7] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-17 22:13:20.267 DEBUG [http-nio-11040-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
3. with recursive group_generation as (
            select 0 as g
            union all
            select g+1
            from group_generation
            where g < 8
        ), group_weekday as (
            select 0 as g
            union all
            select g+1
            from group_weekday
            where g < 6
        ),  sale as (
            select weekday(actv_dt) as days,
                   device_id,
                   cust_cd,
                   sale_id
            from tb_sale
            where shop_id=2 and

                      seller_id='km1104rs' and

                device_id is not null and
                actv_dt between '2025-01-01' and '2025-01-31'
        ), sale_gene as (
            select sale_id,
                   (
                       case
                           when length(cust_cd) = 6 then floor((year(curdate()) - concat((
                                 case
                                     when substring(cust_cd, 1,2) > '44' then '19'
                                     when substring(cust_cd, 1,2) <= '44' then '20'
                                     end
                                 ),substring(cust_cd,1,2))) / 10)
                           when length(cust_cd) != 6 then null
                           end
                       ) as generation
            from sale
        ), generation as (
            select g,
                   device_id
            from group_generation g
                     left outer join sale_gene sg on g.g=sg.generation
                     left outer join sale s on s.sale_id=sg.sale_id
        ), weekdays as (
            select g,
                   device_id
            from group_weekday w
                     left outer join sale s on s.days=w.g
        )

        select IFNULL(count(device_id),0) as avg
        from generation
        group by g
 {executed in 2 msec}
2025-04-17 22:13:20.280 INFO  [http-nio-11040-exec-10] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/sale/graph/stat/select/0
2025-04-17 22:13:20.280 INFO  [http-nio-11040-exec-10] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDg5NTU5NiwiZXhwIjoxNzQ0ODk2MTk2LCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.rHdmauJIT62MXeIPy7ygWZrnBfGj4Ef-1GveY_MCeSY
2025-04-17 22:13:20.280 INFO  [http-nio-11040-exec-10] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/sale/graph/stat/select/0
2025-04-17 22:13:20.282 INFO  [http-nio-11040-exec-10] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-17 22:13:20.284 DEBUG [http-nio-11040-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 2 msec}
2025-04-17 22:13:20.284 INFO  [http-nio-11040-exec-10] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-17 22:13:20.289 DEBUG [http-nio-11040-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. with base as (select device_id,
                             (SELECT device_nm
                              FROM tb_device
                              WHERE tb_device.device_id = sl.device_id)      as device,
                             sd_id,
                             (SELECT sd_nm
                              FROM tb_second_device
                              WHERE tb_second_device.sd_id = sl.sd_id)       as sec_device,
                             ct_actv_plan,
                             (SELECT ct_plan_nm
                              FROM tb_ct_plan
                              WHERE tb_ct_plan.ct_plan_id = sl.ct_actv_plan) as actv_plan
                      from tb_sale sl
                      where shop_id = 2 and

                                seller_id='km1104rs' and

                        actv_dt between '2025-01-01' and '2025-01-31'),
             device as (SELECT device                   as name,
                               count(device_id) as count
                        from base
                        where device_id is not null
                        group by device),
             sec_device as (SELECT sec_device                   as name,
                                   count(sec_device) as count
                            from base
                            where sd_id is not null
                            group by sec_device),
             actv_plan as (SELECT actv_plan                   as name,
                                  count(actv_plan) as count
                           from base
                           where ct_actv_plan is not null
                           group by actv_plan),
             total as (select count('device') as cnt
                       from base
                       where 'device' is not null
             )

        select name,
               count,
               (
                   IF((select cnt
                       from total) = 0 or count = 0, 0, TRUNCATE(
                              (count / (
                                  select cnt
                                  from total
                              )
                                  ) * 100, 1))
                   ) as per
        from device
        order by per desc
        limit 5
 {executed in 2 msec}
2025-04-17 22:13:20.303 INFO  [http-nio-11040-exec-6] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/sale/graph/ratio/select/0
2025-04-17 22:13:20.303 INFO  [http-nio-11040-exec-6] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDg5NTU5NiwiZXhwIjoxNzQ0ODk2MTk2LCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.rHdmauJIT62MXeIPy7ygWZrnBfGj4Ef-1GveY_MCeSY
2025-04-17 22:13:20.303 INFO  [http-nio-11040-exec-6] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/sale/graph/ratio/select/0
2025-04-17 22:13:20.305 INFO  [http-nio-11040-exec-6] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-17 22:13:20.307 DEBUG [http-nio-11040-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
6. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 2 msec}
2025-04-17 22:13:20.307 INFO  [http-nio-11040-exec-6] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-17 22:13:20.315 DEBUG [http-nio-11040-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
6. with recursive istm_range as (
            select 0 as i
            union all
            select i+1
            from istm_range
            where i<5
        ), base as (
            select ct_istm
            from tb_sale
            where shop_id=2 and

                        seller_id='km1104rs' and

                actv_dt between '2025-01-01' and '2025-01-31'
        ), final as (
            select i as istm,
                   IFNULL(count(base.ct_istm),0) as cnt
            from istm_range
                     left outer join base on base.ct_istm=istm_range.i
            group by i
            order by istm desc
        )

        select json_arrayagg(istm) as type,
               json_arrayagg(cnt) as cnt,
               json_arrayagg(IF((
                      select IFNULL(count(ct_istm), 0)
                      from base
                  ) = 0 or cnt = 0, 0, TRUNCATE((cnt/(
                   select IFNULL(count(ct_istm), 0)
                   from base
               )) * 100, 1))) as per
        from final
 {executed in 5 msec}
2025-04-17 22:13:20.323 INFO  [http-nio-11040-exec-1] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/sale/graph/summary
2025-04-17 22:13:20.323 INFO  [http-nio-11040-exec-1] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDg5NTU5NiwiZXhwIjoxNzQ0ODk2MTk2LCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.rHdmauJIT62MXeIPy7ygWZrnBfGj4Ef-1GveY_MCeSY
2025-04-17 22:13:20.323 INFO  [http-nio-11040-exec-1] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/sale/graph/summary
2025-04-17 22:13:20.331 INFO  [http-nio-11040-exec-1] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-17 22:13:20.332 DEBUG [http-nio-11040-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
3. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 1 msec}
2025-04-17 22:13:20.332 INFO  [http-nio-11040-exec-1] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-17 22:13:20.333 INFO  [http-nio-11040-exec-1] [com.momo.api.SaleController] - summary: CommonVO(provider=null, date=null, year=null, month=null, day=null, selectType=null, range=null, dateType=null, prevFromYmd=null, prevToYmd=null, currFromYmd=null, currToYmd=null, fromYmd=2024-07-01, toYmd=2025-01-01, fromYm=null, toYm=null, prevDate=null, currDate=null)
2025-04-17 22:13:20.350 DEBUG [http-nio-11040-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
3. #         월별 날짜 구하기
        with recursive month_range as (
            select '2024-07-01' as d
            union all
            select date_add(d, interval 1 month) as d
            from month_range
            where date_add(d, interval 1 month) < '2025-01-01'
        ), months as(
            select month(d) as m
            from month_range
        ), filtered_sale as ( # 판매일보 초벌
            select month(actv_dt) as actv_month,
                   device_id,
                   internet_plan,
                   tv_plan,
                    exsvc_id,
                   total_cms,
                   wt_cms,
                   sale_id,
                   sd_id,
                    shop_id
            from tb_sale
            where shop_id=2 and

                    seller_id='km1104rs' and

                actv_dt between '2024-07-01' and date_add('2025-01-01', interval 1 month)
        ), ct_graph as ( # 무선 그래프 데이터
            SELECT m,
                   count(device_id) as cnt
            FROM months
                     LEFT OUTER JOIN filtered_sale on actv_month = m and
                                                      device_id is not null
            group by m
        ), internet_graph as ( # 인터넷 그래프 데이터
            SELECT m,
                   count(internet_plan) as cnt
            FROM months
                     LEFT OUTER JOIN filtered_sale on actv_month = m  and
                                                      internet_plan is not null
            group by m
        ), tv_graph as ( # TV 그래프 데이터
            SELECT m,
                   count(tv_plan) as cnt
            FROM months
                     LEFT OUTER JOIN filtered_sale on actv_month = m  and
                                                      tv_plan is not null
            group by m
        ), card as ( # 카드 데이터
            SELECT m,
                   (
                    select count(*)
                    from tb_sale_card sc
                    left outer join filtered_sale fs on fs.shop_id = sc.shop_id and
                                                        fs.sale_id = sc.sale_id
                   )  as cnt
            FROM months
                     LEFT OUTER JOIN filtered_sale on actv_month = m
            group by m
        ), exsvc as ( # 부가서비스 데이터
            SELECT m,
                   count(exsvc_id) as cnt
            FROM months
                     LEFT OUTER JOIN filtered_sale on actv_month = m  and
                                                      exsvc_id is not null
            group by m
        ), tc_graph as ( # 총 이익 그래프 데이터
            SELECT m,
                   IFNULL(sum(total_cms), 0) as cnt
            FROM months
                     LEFT OUTER JOIN filtered_sale on actv_month = m
            group by m
        ), avg_margin_graph as ( # 개인 평균 마진 그래프 데이터
            SELECT m,
                   IFNULL(avg(total_cms), 0) as cnt
            FROM months
                     LEFT OUTER JOIN filtered_sale on actv_month = m and
                                                      device_id is not null
            group by m
        ), ud_graph as ( # 중고 개통 그래프 데이터
            SELECT m,
                   count(ud_id) as cnt
            FROM months
                     LEFT OUTER JOIN filtered_sale on actv_month = m
                     LEFT OUTER JOIN tb_sale_used_device sud on sud.sale_id=filtered_sale.sale_id
            group by m
        ), sec_graph as ( # 세컨 그래프 데이터
            SELECT m,
                   count(sd_id) as cnt
            FROM months
                     LEFT OUTER JOIN filtered_sale on actv_month = m and
                                                      sd_id != 0
            group by m
        ), diff_ct as (
            select
                (
                    select cnt
                    from ct_graph
                    limit 4, 1
                ) as prv,
                (
                    select cnt
                    from ct_graph
                    limit 5,1
                ) as curr
            from dual
        ), diff_internet as (
            select
                (
                    select cnt
                    from internet_graph
                    limit 4,1
                ) as prv,
                (
                    select cnt
                    from internet_graph
                    limit 5,1
                ) as curr
            from dual
        ), diff_tv as (
            select
                (
                    select cnt
                    from tv_graph
                    limit 4,1
                ) as prv,
                (
                    select cnt
                    from tv_graph
                    limit 5,1
                ) as curr
            from dual
        ), diff_card as (
            select
                (
                    select cnt
                    from card
                    limit 4,1
                ) as prv,
                (
                    select cnt
                    from card
                    limit 5,1
                ) as curr
            from dual
        ), diff_exsvc as (
            select
                (
                    select cnt
                    from exsvc
                    limit 4,1
                ) as prv,
                (
                    select cnt
                    from exsvc
                    limit 5,1
                ) as curr
            from dual
        ), diff_tc as (
            select
                (
                    select cnt
                    from tc_graph
                    limit 4,1
                ) as prv,
                (
                    select cnt
                    from tc_graph
                    limit 5,1
                ) as curr
            from dual
        ) , diff_margin as (
            select
                (
                    select cnt
                    from avg_margin_graph
                    limit 4,1
                ) as prv,
                (
                    select cnt
                    from avg_margin_graph
                    limit 5,1
                ) as curr
            from dual
        ), diff_ud as (
            select
                (
                    select cnt
                    from ud_graph
                    limit 4,1
                ) as prv,
                (
                    select cnt
                    from ud_graph
                    limit 5,1
                ) as curr
            from dual
        ) , diff_sec as (
            select
                (
                    select cnt
                    from sec_graph
                    limit 4,1
                ) as prv,
                (
                    select cnt
                    from sec_graph
                    limit 5,1
                ) as curr
            from dual
        ), final as (
            select
                curr,
                prv,
                (
                    select json_arrayagg(cnt)
                    from ct_graph
                ) as list
            from diff_ct
            union all
            select
                curr,
                prv,
                (
                    select json_arrayagg(cnt)
                    from internet_graph
                ) as list
            from diff_internet
            union all
            select
                curr,
                prv,
                (
                    select json_arrayagg(cnt)
                    from tv_graph
                ) as list
            from diff_tv
             union all
            select
                curr,
                prv,
                (
                    select json_arrayagg(cnt)
                    from card
                ) as list
            from diff_card
             union all
            select
                curr,
                prv,
                (
                    select json_arrayagg(cnt)
                    from exsvc
                ) as list
            from diff_exsvc
            union all
            select
                curr,
                prv,
                (
                    select json_arrayagg(cnt)
                    from tc_graph
                ) as list
            from diff_tc
            union all
            select
                curr,
                prv,
                (
                    select json_arrayagg(cnt)
                    from avg_margin_graph
                ) as list
            from diff_margin
            union all
            select
                curr,
                prv,
                (
                    select json_arrayagg(cnt)
                    from ud_graph
                ) as list
            from diff_ud
            union all
            select
                curr,
                prv,
                (
                    select json_arrayagg(cnt)
                    from sec_graph
                ) as list
            from diff_sec
        )

        select FLOOR(curr) as value,
               (
                   CASE
                       WHEN curr = 0 and prv = 0 THEN 0
                       WHEN prv != 0 and curr = 0 THEN -100
                       WHEN prv = 0 and curr != 0 THEN 100
                       WHEN curr != 0 and prv != 0 THEN TRUNCATE(((curr/prv)-1)*100, 1)
                       END
                   ) as per,
               list
        from final
 {executed in 13 msec}
2025-04-17 22:13:20.360 INFO  [http-nio-11040-exec-4] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/notif/count/unread
2025-04-17 22:13:20.360 INFO  [http-nio-11040-exec-4] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDg5NTU5NiwiZXhwIjoxNzQ0ODk2MTk2LCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.rHdmauJIT62MXeIPy7ygWZrnBfGj4Ef-1GveY_MCeSY
2025-04-17 22:13:20.360 INFO  [http-nio-11040-exec-4] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/notif/count/unread
2025-04-17 22:13:20.361 INFO  [http-nio-11040-exec-4] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-17 22:13:20.362 DEBUG [http-nio-11040-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
2. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 1 msec}
2025-04-17 22:13:20.362 INFO  [http-nio-11040-exec-4] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-17 22:13:20.363 INFO  [http-nio-11040-exec-4] [c.momo.common.util.SecurityContextUtil] - principal: UserDetailsImpl(username=km1104rs, password=$2a$10$uXShhwl6ULOkbJe477uDWOfdiUUcu6lOSF/Dhj9xP3U1nUn/gXkc6, authorities=[ROLE_NONE])
2025-04-17 22:13:20.364 DEBUG [http-nio-11040-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
2. SELECT count(*)
        FROM tb_notification
        WHERE receiver_id = 'km1104rs'
          AND read_st = FALSE
 {executed in 1 msec}
2025-04-17 22:13:20.400 INFO  [http-nio-11040-exec-3] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/sale/graph/ct/select/0
2025-04-17 22:13:20.400 INFO  [http-nio-11040-exec-3] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDg5NTU5NiwiZXhwIjoxNzQ0ODk2MTk2LCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.rHdmauJIT62MXeIPy7ygWZrnBfGj4Ef-1GveY_MCeSY
2025-04-17 22:13:20.400 INFO  [http-nio-11040-exec-3] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/sale/graph/ct/select/0
2025-04-17 22:13:20.401 INFO  [http-nio-11040-exec-3] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-17 22:13:20.402 DEBUG [http-nio-11040-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
5. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 1 msec}
2025-04-17 22:13:20.402 INFO  [http-nio-11040-exec-3] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-17 22:13:20.405 DEBUG [http-nio-11040-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
5. with recursive group_generation as (
            select 0 as g
            union all
            select g+1
            from group_generation
            where g < 8
        ), group_weekday as (
            select 0 as g
            union all
            select g+1
            from group_weekday
            where g < 6
        ),  sale as (
            select weekday(actv_dt) as days,
                   device_id,
                   cust_cd,
                   sale_id
            from tb_sale
            where shop_id=2 and

                      seller_id='km1104rs' and

                device_id is not null and
                actv_dt between '2025-01-01' and '2025-01-31'
        ), sale_gene as (
            select sale_id,
                   (
                       case
                           when length(cust_cd) = 6 then floor((year(curdate()) - concat((
                                 case
                                     when substring(cust_cd, 1,2) > '44' then '19'
                                     when substring(cust_cd, 1,2) <= '44' then '20'
                                     end
                                 ),substring(cust_cd,1,2))) / 10)
                           when length(cust_cd) != 6 then null
                           end
                       ) as generation
            from sale
        ), generation as (
            select g,
                   device_id
            from group_generation g
                     left outer join sale_gene sg on g.g=sg.generation
                     left outer join sale s on s.sale_id=sg.sale_id
        ), weekdays as (
            select g,
                   device_id
            from group_weekday w
                     left outer join sale s on s.days=w.g
        )

        select IFNULL(count(device_id),0) as avg
        from generation
        group by g
 {executed in 1 msec}
2025-04-17 22:13:20.422 INFO  [http-nio-11040-exec-8] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/sale/graph/stat/select/0
2025-04-17 22:13:20.422 INFO  [http-nio-11040-exec-8] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDg5NTU5NiwiZXhwIjoxNzQ0ODk2MTk2LCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.rHdmauJIT62MXeIPy7ygWZrnBfGj4Ef-1GveY_MCeSY
2025-04-17 22:13:20.422 INFO  [http-nio-11040-exec-8] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/sale/graph/stat/select/0
2025-04-17 22:13:20.423 INFO  [http-nio-11040-exec-8] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-17 22:13:20.438 DEBUG [http-nio-11040-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
3. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 13 msec}
2025-04-17 22:13:20.440 INFO  [http-nio-11040-exec-8] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-17 22:13:20.446 DEBUG [http-nio-11040-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
3. with base as (select device_id,
                             (SELECT device_nm
                              FROM tb_device
                              WHERE tb_device.device_id = sl.device_id)      as device,
                             sd_id,
                             (SELECT sd_nm
                              FROM tb_second_device
                              WHERE tb_second_device.sd_id = sl.sd_id)       as sec_device,
                             ct_actv_plan,
                             (SELECT ct_plan_nm
                              FROM tb_ct_plan
                              WHERE tb_ct_plan.ct_plan_id = sl.ct_actv_plan) as actv_plan
                      from tb_sale sl
                      where shop_id = 2 and

                                seller_id='km1104rs' and

                        actv_dt between '2025-01-01' and '2025-01-31'),
             device as (SELECT device                   as name,
                               count(device_id) as count
                        from base
                        where device_id is not null
                        group by device),
             sec_device as (SELECT sec_device                   as name,
                                   count(sec_device) as count
                            from base
                            where sd_id is not null
                            group by sec_device),
             actv_plan as (SELECT actv_plan                   as name,
                                  count(actv_plan) as count
                           from base
                           where ct_actv_plan is not null
                           group by actv_plan),
             total as (select count('device') as cnt
                       from base
                       where 'device' is not null
             )

        select name,
               count,
               (
                   IF((select cnt
                       from total) = 0 or count = 0, 0, TRUNCATE(
                              (count / (
                                  select cnt
                                  from total
                              )
                                  ) * 100, 1))
                   ) as per
        from device
        order by per desc
        limit 5
 {executed in 2 msec}
2025-04-17 22:13:20.450 INFO  [http-nio-11040-exec-5] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/sale/graph/ratio/select/0
2025-04-17 22:13:20.450 INFO  [http-nio-11040-exec-5] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDg5NTU5NiwiZXhwIjoxNzQ0ODk2MTk2LCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.rHdmauJIT62MXeIPy7ygWZrnBfGj4Ef-1GveY_MCeSY
2025-04-17 22:13:20.450 INFO  [http-nio-11040-exec-5] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/sale/graph/ratio/select/0
2025-04-17 22:13:20.451 INFO  [http-nio-11040-exec-5] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-17 22:13:20.453 DEBUG [http-nio-11040-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 1 msec}
2025-04-17 22:13:20.454 INFO  [http-nio-11040-exec-5] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-17 22:13:20.457 DEBUG [http-nio-11040-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. with recursive istm_range as (
            select 0 as i
            union all
            select i+1
            from istm_range
            where i<5
        ), base as (
            select ct_istm
            from tb_sale
            where shop_id=2 and

                        seller_id='km1104rs' and

                actv_dt between '2025-01-01' and '2025-01-31'
        ), final as (
            select i as istm,
                   IFNULL(count(base.ct_istm),0) as cnt
            from istm_range
                     left outer join base on base.ct_istm=istm_range.i
            group by i
            order by istm desc
        )

        select json_arrayagg(istm) as type,
               json_arrayagg(cnt) as cnt,
               json_arrayagg(IF((
                      select IFNULL(count(ct_istm), 0)
                      from base
                  ) = 0 or cnt = 0, 0, TRUNCATE((cnt/(
                   select IFNULL(count(ct_istm), 0)
                   from base
               )) * 100, 1))) as per
        from final
 {executed in 2 msec}
2025-04-17 22:13:35.411 INFO  [http-nio-11040-exec-9] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/sale/graph/stat/select/0
2025-04-17 22:13:35.411 INFO  [http-nio-11040-exec-9] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDg5NTU5NiwiZXhwIjoxNzQ0ODk2MTk2LCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.rHdmauJIT62MXeIPy7ygWZrnBfGj4Ef-1GveY_MCeSY
2025-04-17 22:13:35.411 INFO  [http-nio-11040-exec-9] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/sale/graph/stat/select/0
2025-04-17 22:13:35.412 INFO  [http-nio-11040-exec-9] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-17 22:13:35.414 DEBUG [http-nio-11040-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
2. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 1 msec}
2025-04-17 22:13:35.414 INFO  [http-nio-11040-exec-9] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-17 22:13:35.417 DEBUG [http-nio-11040-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
2. with base as (select device_id,
                             (SELECT device_nm
                              FROM tb_device
                              WHERE tb_device.device_id = sl.device_id)      as device,
                             sd_id,
                             (SELECT sd_nm
                              FROM tb_second_device
                              WHERE tb_second_device.sd_id = sl.sd_id)       as sec_device,
                             ct_actv_plan,
                             (SELECT ct_plan_nm
                              FROM tb_ct_plan
                              WHERE tb_ct_plan.ct_plan_id = sl.ct_actv_plan) as actv_plan
                      from tb_sale sl
                      where shop_id = 2 and

                                seller_id='km1104rs' and

                        actv_dt between '2025-01-01' and '2025-01-31'),
             device as (SELECT device                   as name,
                               count(device_id) as count
                        from base
                        where device_id is not null
                        group by device),
             sec_device as (SELECT sec_device                   as name,
                                   count(sec_device) as count
                            from base
                            where sd_id is not null
                            group by sec_device),
             actv_plan as (SELECT actv_plan                   as name,
                                  count(actv_plan) as count
                           from base
                           where ct_actv_plan is not null
                           group by actv_plan),
             total as (select count('device') as cnt
                       from base
                       where 'device' is not null
             )

        select name,
               count,
               (
                   IF((select cnt
                       from total) = 0 or count = 0, 0, TRUNCATE(
                              (count / (
                                  select cnt
                                  from total
                              )
                                  ) * 100, 1))
                   ) as per
        from device
        order by per desc
        limit 5
 {executed in 1 msec}
2025-04-17 22:16:34.784 INFO  [http-nio-11040-exec-2] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/sale/graph/ct/d
2025-04-17 22:16:34.785 INFO  [http-nio-11040-exec-2] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDg5NTU5NiwiZXhwIjoxNzQ0ODk2MTk2LCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.rHdmauJIT62MXeIPy7ygWZrnBfGj4Ef-1GveY_MCeSY
2025-04-17 22:16:34.785 INFO  [http-nio-11040-exec-2] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/sale/graph/ct/d
2025-04-17 22:16:34.788 INFO  [http-nio-11040-exec-2] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-17 22:16:34.796 DEBUG [http-nio-11040-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
4. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 4 msec}
2025-04-17 22:16:34.796 INFO  [http-nio-11040-exec-2] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-17 22:16:34.817 INFO  [http-nio-11040-exec-7] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/sale/graph/ct/d
2025-04-17 22:16:34.817 INFO  [http-nio-11040-exec-7] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDg5NTU5NiwiZXhwIjoxNzQ0ODk2MTk2LCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.rHdmauJIT62MXeIPy7ygWZrnBfGj4Ef-1GveY_MCeSY
2025-04-17 22:16:34.817 INFO  [http-nio-11040-exec-7] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/sale/graph/ct/d
2025-04-17 22:16:34.819 DEBUG [http-nio-11040-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
4. set @limit_cond := (
               case 'd'
                   when 'h' then '2000-01-24'
                   when 'd' then '2025-04-17'
                   when 'w' then '2025-04-17'
                   when 'm' then date_sub('2025-04-17', interval 1 month)
               end
        );

        with recursive org_date_table as (
            select (
                       case
                           when 'd' = 'h' then '2000-01-01'
                           when 'd' != 'h' then '2025-01-17'
                           end
                       ) as it
            union all
            select (
                       case 'd'
                           when 'h' then date_add(it, interval 1 day)
                           when 'd' then date_add(it, interval 1 day)
                           when 'w' then date_add(it, interval 1 week)
                           when 'm' then date_add(it, interval 1 month)
                           end
                       ) as it
            from org_date_table
            where it < @limit_cond
        ), date_table as (
            select
                year(it) as _year,
                (
                    case 'd'
                        when 'h' then day(it)
                        when 'd' then it
                        when 'w' then week(it)
                        when 'm' then month(it)
                        end
                    ) as dt
            from org_date_table
        ),  date_sale as (
            select year(actv_dt) _year,
                   month(actv_dt) as m,
                   week(actv_dt) as w,
                   actv_dt as d,
                   hour(regi_dt) as h,
                   tb_sale.*
            from tb_sale
            where shop_id=2 and

                    seller_id='km1104rs' and

                actv_dt between '2025-01-17' and (
                    case
                        when 'd' = 'h' then '2025-01-17'
                        when 'd' != 'h' then '2025-04-17'
                        end
                    )
        ), final as (
            select count(device_id) as cnt
            from date_table dd
                     left outer join date_sale ds on dd._year=ds._year and
                                                     d = dt
            group by dd._year, dd.dt
        )

        select
            (
                select json_arrayagg(cnt)
                from final
            ) as value,
            (
                select json_arrayagg(date_format(it, '%Y-%m-%d'))
                from org_date_table
            ) as date
 {executed in 16 msec}
2025-04-17 22:16:34.821 INFO  [http-nio-11040-exec-7] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-17 22:16:34.827 DEBUG [http-nio-11040-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
3. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 4 msec}
2025-04-17 22:16:34.827 INFO  [http-nio-11040-exec-7] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-17 22:16:34.831 DEBUG [http-nio-11040-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
3. set @limit_cond := (
               case 'd'
                   when 'h' then '2000-01-24'
                   when 'd' then '2025-04-16'
                   when 'w' then '2025-04-16'
                   when 'm' then date_sub('2025-04-16', interval 1 month)
               end
        );

        with recursive org_date_table as (
            select (
                       case
                           when 'd' = 'h' then '2000-01-01'
                           when 'd' != 'h' then '2025-04-10'
                           end
                       ) as it
            union all
            select (
                       case 'd'
                           when 'h' then date_add(it, interval 1 day)
                           when 'd' then date_add(it, interval 1 day)
                           when 'w' then date_add(it, interval 1 week)
                           when 'm' then date_add(it, interval 1 month)
                           end
                       ) as it
            from org_date_table
            where it < @limit_cond
        ), date_table as (
            select
                year(it) as _year,
                (
                    case 'd'
                        when 'h' then day(it)
                        when 'd' then it
                        when 'w' then week(it)
                        when 'm' then month(it)
                        end
                    ) as dt
            from org_date_table
        ),  date_sale as (
            select year(actv_dt) _year,
                   month(actv_dt) as m,
                   week(actv_dt) as w,
                   actv_dt as d,
                   hour(regi_dt) as h,
                   tb_sale.*
            from tb_sale
            where shop_id=2 and

                    seller_id='km1104rs' and

                actv_dt between '2025-04-10' and (
                    case
                        when 'd' = 'h' then '2025-04-10'
                        when 'd' != 'h' then '2025-04-16'
                        end
                    )
        ), final as (
            select count(device_id) as cnt
            from date_table dd
                     left outer join date_sale ds on dd._year=ds._year and
                                                     d = dt
            group by dd._year, dd.dt
        )

        select
            (
                select json_arrayagg(cnt)
                from final
            ) as value,
            (
                select json_arrayagg(date_format(it, '%Y-%m-%d'))
                from org_date_table
            ) as date
 {executed in 2 msec}
2025-04-17 22:16:34.860 INFO  [http-nio-11040-exec-10] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/sale/graph/ct/select/0
2025-04-17 22:16:34.860 INFO  [http-nio-11040-exec-10] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDg5NTU5NiwiZXhwIjoxNzQ0ODk2MTk2LCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.rHdmauJIT62MXeIPy7ygWZrnBfGj4Ef-1GveY_MCeSY
2025-04-17 22:16:34.860 INFO  [http-nio-11040-exec-10] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/sale/graph/ct/select/0
2025-04-17 22:16:34.861 INFO  [http-nio-11040-exec-10] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-17 22:16:34.864 DEBUG [http-nio-11040-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 2 msec}
2025-04-17 22:16:34.864 INFO  [http-nio-11040-exec-10] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-17 22:16:34.868 DEBUG [http-nio-11040-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. with recursive group_generation as (
            select 0 as g
            union all
            select g+1
            from group_generation
            where g < 8
        ), group_weekday as (
            select 0 as g
            union all
            select g+1
            from group_weekday
            where g < 6
        ),  sale as (
            select weekday(actv_dt) as days,
                   device_id,
                   cust_cd,
                   sale_id
            from tb_sale
            where shop_id=2 and

                      seller_id='km1104rs' and

                device_id is not null and
                actv_dt between '2025-01-01' and '2025-01-31'
        ), sale_gene as (
            select sale_id,
                   (
                       case
                           when length(cust_cd) = 6 then floor((year(curdate()) - concat((
                                 case
                                     when substring(cust_cd, 1,2) > '44' then '19'
                                     when substring(cust_cd, 1,2) <= '44' then '20'
                                     end
                                 ),substring(cust_cd,1,2))) / 10)
                           when length(cust_cd) != 6 then null
                           end
                       ) as generation
            from sale
        ), generation as (
            select g,
                   device_id
            from group_generation g
                     left outer join sale_gene sg on g.g=sg.generation
                     left outer join sale s on s.sale_id=sg.sale_id
        ), weekdays as (
            select g,
                   device_id
            from group_weekday w
                     left outer join sale s on s.days=w.g
        )

        select IFNULL(count(device_id),0) as avg
        from generation
        group by g
 {executed in 2 msec}
2025-04-17 22:16:34.916 INFO  [http-nio-11040-exec-6] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/sale/graph/stat/select/0
2025-04-17 22:16:34.916 INFO  [http-nio-11040-exec-6] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDg5NTU5NiwiZXhwIjoxNzQ0ODk2MTk2LCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.rHdmauJIT62MXeIPy7ygWZrnBfGj4Ef-1GveY_MCeSY
2025-04-17 22:16:34.916 INFO  [http-nio-11040-exec-6] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/sale/graph/stat/select/0
2025-04-17 22:16:34.918 INFO  [http-nio-11040-exec-6] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-17 22:16:34.925 DEBUG [http-nio-11040-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
6. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 3 msec}
2025-04-17 22:16:34.926 INFO  [http-nio-11040-exec-6] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-17 22:16:34.937 DEBUG [http-nio-11040-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
6. with base as (select device_id,
                             (SELECT device_nm
                              FROM tb_device
                              WHERE tb_device.device_id = sl.device_id)      as device,
                             sd_id,
                             (SELECT sd_nm
                              FROM tb_second_device
                              WHERE tb_second_device.sd_id = sl.sd_id)       as sec_device,
                             ct_actv_plan,
                             (SELECT ct_plan_nm
                              FROM tb_ct_plan
                              WHERE tb_ct_plan.ct_plan_id = sl.ct_actv_plan) as actv_plan
                      from tb_sale sl
                      where shop_id = 2 and

                                seller_id='km1104rs' and

                        actv_dt between '2025-01-01' and '2025-01-31'),
             device as (SELECT device                   as name,
                               count(device_id) as count
                        from base
                        where device_id is not null
                        group by device),
             sec_device as (SELECT sec_device                   as name,
                                   count(sec_device) as count
                            from base
                            where sd_id is not null
                            group by sec_device),
             actv_plan as (SELECT actv_plan                   as name,
                                  count(actv_plan) as count
                           from base
                           where ct_actv_plan is not null
                           group by actv_plan),
             total as (select count('device') as cnt
                       from base
                       where 'device' is not null
             )

        select name,
               count,
               (
                   IF((select cnt
                       from total) = 0 or count = 0, 0, TRUNCATE(
                              (count / (
                                  select cnt
                                  from total
                              )
                                  ) * 100, 1))
                   ) as per
        from device
        order by per desc
        limit 5
 {executed in 6 msec}
2025-04-17 22:16:34.982 INFO  [http-nio-11040-exec-1] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/sale/graph/ratio/select/0
2025-04-17 22:16:34.982 INFO  [http-nio-11040-exec-1] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDg5NTU5NiwiZXhwIjoxNzQ0ODk2MTk2LCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.rHdmauJIT62MXeIPy7ygWZrnBfGj4Ef-1GveY_MCeSY
2025-04-17 22:16:34.983 INFO  [http-nio-11040-exec-1] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/sale/graph/ratio/select/0
2025-04-17 22:16:34.987 INFO  [http-nio-11040-exec-1] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-17 22:16:34.996 DEBUG [http-nio-11040-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
3. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 7 msec}
2025-04-17 22:16:34.997 INFO  [http-nio-11040-exec-1] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-17 22:16:35.009 DEBUG [http-nio-11040-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
3. with recursive istm_range as (
            select 0 as i
            union all
            select i+1
            from istm_range
            where i<5
        ), base as (
            select ct_istm
            from tb_sale
            where shop_id=2 and

                        seller_id='km1104rs' and

                actv_dt between '2025-01-01' and '2025-01-31'
        ), final as (
            select i as istm,
                   IFNULL(count(base.ct_istm),0) as cnt
            from istm_range
                     left outer join base on base.ct_istm=istm_range.i
            group by i
            order by istm desc
        )

        select json_arrayagg(istm) as type,
               json_arrayagg(cnt) as cnt,
               json_arrayagg(IF((
                      select IFNULL(count(ct_istm), 0)
                      from base
                  ) = 0 or cnt = 0, 0, TRUNCATE((cnt/(
                   select IFNULL(count(ct_istm), 0)
                   from base
               )) * 100, 1))) as per
        from final
 {executed in 6 msec}
2025-04-17 22:16:35.057 INFO  [http-nio-11040-exec-4] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/sale/graph/summary
2025-04-17 22:16:35.058 INFO  [http-nio-11040-exec-4] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDg5NTU5NiwiZXhwIjoxNzQ0ODk2MTk2LCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.rHdmauJIT62MXeIPy7ygWZrnBfGj4Ef-1GveY_MCeSY
2025-04-17 22:16:35.058 INFO  [http-nio-11040-exec-4] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/sale/graph/summary
2025-04-17 22:16:35.059 INFO  [http-nio-11040-exec-4] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-17 22:16:35.090 DEBUG [http-nio-11040-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
2. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 8 msec}
2025-04-17 22:16:35.092 INFO  [http-nio-11040-exec-4] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-17 22:16:35.094 INFO  [http-nio-11040-exec-4] [com.momo.api.SaleController] - summary: CommonVO(provider=null, date=null, year=null, month=null, day=null, selectType=null, range=null, dateType=null, prevFromYmd=null, prevToYmd=null, currFromYmd=null, currToYmd=null, fromYmd=2024-07-01, toYmd=2025-01-01, fromYm=null, toYm=null, prevDate=null, currDate=null)
2025-04-17 22:16:35.101 INFO  [http-nio-11040-exec-3] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/sale/graph/ct/select/0
2025-04-17 22:16:35.101 INFO  [http-nio-11040-exec-3] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDg5NTU5NiwiZXhwIjoxNzQ0ODk2MTk2LCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.rHdmauJIT62MXeIPy7ygWZrnBfGj4Ef-1GveY_MCeSY
2025-04-17 22:16:35.101 INFO  [http-nio-11040-exec-3] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/sale/graph/ct/select/0
2025-04-17 22:16:35.104 INFO  [http-nio-11040-exec-3] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-17 22:16:35.113 DEBUG [http-nio-11040-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
5. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 3 msec}
2025-04-17 22:16:35.115 INFO  [http-nio-11040-exec-3] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-17 22:16:35.134 DEBUG [http-nio-11040-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
5. with recursive group_generation as (
            select 0 as g
            union all
            select g+1
            from group_generation
            where g < 8
        ), group_weekday as (
            select 0 as g
            union all
            select g+1
            from group_weekday
            where g < 6
        ),  sale as (
            select weekday(actv_dt) as days,
                   device_id,
                   cust_cd,
                   sale_id
            from tb_sale
            where shop_id=2 and

                      seller_id='km1104rs' and

                device_id is not null and
                actv_dt between '2025-01-01' and '2025-01-31'
        ), sale_gene as (
            select sale_id,
                   (
                       case
                           when length(cust_cd) = 6 then floor((year(curdate()) - concat((
                                 case
                                     when substring(cust_cd, 1,2) > '44' then '19'
                                     when substring(cust_cd, 1,2) <= '44' then '20'
                                     end
                                 ),substring(cust_cd,1,2))) / 10)
                           when length(cust_cd) != 6 then null
                           end
                       ) as generation
            from sale
        ), generation as (
            select g,
                   device_id
            from group_generation g
                     left outer join sale_gene sg on g.g=sg.generation
                     left outer join sale s on s.sale_id=sg.sale_id
        ), weekdays as (
            select g,
                   device_id
            from group_weekday w
                     left outer join sale s on s.days=w.g
        )

        select IFNULL(count(device_id),0) as avg
        from generation
        group by g
 {executed in 15 msec}
2025-04-17 22:16:35.145 INFO  [http-nio-11040-exec-8] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/sale/graph/stat/select/0
2025-04-17 22:16:35.145 INFO  [http-nio-11040-exec-8] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDg5NTU5NiwiZXhwIjoxNzQ0ODk2MTk2LCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.rHdmauJIT62MXeIPy7ygWZrnBfGj4Ef-1GveY_MCeSY
2025-04-17 22:16:35.145 INFO  [http-nio-11040-exec-8] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/sale/graph/stat/select/0
2025-04-17 22:16:35.148 INFO  [http-nio-11040-exec-8] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-17 22:16:35.172 DEBUG [http-nio-11040-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
3. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 23 msec}
2025-04-17 22:16:35.172 INFO  [http-nio-11040-exec-8] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-17 22:16:35.202 INFO  [http-nio-11040-exec-5] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/sale/graph/ratio/select/0
2025-04-17 22:16:35.202 INFO  [http-nio-11040-exec-5] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDg5NTU5NiwiZXhwIjoxNzQ0ODk2MTk2LCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.rHdmauJIT62MXeIPy7ygWZrnBfGj4Ef-1GveY_MCeSY
2025-04-17 22:16:35.202 INFO  [http-nio-11040-exec-5] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/sale/graph/ratio/select/0
2025-04-17 22:16:35.204 INFO  [http-nio-11040-exec-5] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-17 22:16:35.204 DEBUG [http-nio-11040-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
3. with base as (select device_id,
                             (SELECT device_nm
                              FROM tb_device
                              WHERE tb_device.device_id = sl.device_id)      as device,
                             sd_id,
                             (SELECT sd_nm
                              FROM tb_second_device
                              WHERE tb_second_device.sd_id = sl.sd_id)       as sec_device,
                             ct_actv_plan,
                             (SELECT ct_plan_nm
                              FROM tb_ct_plan
                              WHERE tb_ct_plan.ct_plan_id = sl.ct_actv_plan) as actv_plan
                      from tb_sale sl
                      where shop_id = 2 and

                                seller_id='km1104rs' and

                        actv_dt between '2025-01-01' and '2025-01-31'),
             device as (SELECT device                   as name,
                               count(device_id) as count
                        from base
                        where device_id is not null
                        group by device),
             sec_device as (SELECT sec_device                   as name,
                                   count(sec_device) as count
                            from base
                            where sd_id is not null
                            group by sec_device),
             actv_plan as (SELECT actv_plan                   as name,
                                  count(actv_plan) as count
                           from base
                           where ct_actv_plan is not null
                           group by actv_plan),
             total as (select count('device') as cnt
                       from base
                       where 'device' is not null
             )

        select name,
               count,
               (
                   IF((select cnt
                       from total) = 0 or count = 0, 0, TRUNCATE(
                              (count / (
                                  select cnt
                                  from total
                              )
                                  ) * 100, 1))
                   ) as per
        from device
        order by per desc
        limit 5
 {executed in 10 msec}
2025-04-17 22:16:35.214 DEBUG [http-nio-11040-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
2. #         월별 날짜 구하기
        with recursive month_range as (
            select '2024-07-01' as d
            union all
            select date_add(d, interval 1 month) as d
            from month_range
            where date_add(d, interval 1 month) < '2025-01-01'
        ), months as(
            select month(d) as m
            from month_range
        ), filtered_sale as ( # 판매일보 초벌
            select month(actv_dt) as actv_month,
                   device_id,
                   internet_plan,
                   tv_plan,
                    exsvc_id,
                   total_cms,
                   wt_cms,
                   sale_id,
                   sd_id,
                    shop_id
            from tb_sale
            where shop_id=2 and

                    seller_id='km1104rs' and

                actv_dt between '2024-07-01' and date_add('2025-01-01', interval 1 month)
        ), ct_graph as ( # 무선 그래프 데이터
            SELECT m,
                   count(device_id) as cnt
            FROM months
                     LEFT OUTER JOIN filtered_sale on actv_month = m and
                                                      device_id is not null
            group by m
        ), internet_graph as ( # 인터넷 그래프 데이터
            SELECT m,
                   count(internet_plan) as cnt
            FROM months
                     LEFT OUTER JOIN filtered_sale on actv_month = m  and
                                                      internet_plan is not null
            group by m
        ), tv_graph as ( # TV 그래프 데이터
            SELECT m,
                   count(tv_plan) as cnt
            FROM months
                     LEFT OUTER JOIN filtered_sale on actv_month = m  and
                                                      tv_plan is not null
            group by m
        ), card as ( # 카드 데이터
            SELECT m,
                   (
                    select count(*)
                    from tb_sale_card sc
                    left outer join filtered_sale fs on fs.shop_id = sc.shop_id and
                                                        fs.sale_id = sc.sale_id
                   )  as cnt
            FROM months
                     LEFT OUTER JOIN filtered_sale on actv_month = m
            group by m
        ), exsvc as ( # 부가서비스 데이터
            SELECT m,
                   count(exsvc_id) as cnt
            FROM months
                     LEFT OUTER JOIN filtered_sale on actv_month = m  and
                                                      exsvc_id is not null
            group by m
        ), tc_graph as ( # 총 이익 그래프 데이터
            SELECT m,
                   IFNULL(sum(total_cms), 0) as cnt
            FROM months
                     LEFT OUTER JOIN filtered_sale on actv_month = m
            group by m
        ), avg_margin_graph as ( # 개인 평균 마진 그래프 데이터
            SELECT m,
                   IFNULL(avg(total_cms), 0) as cnt
            FROM months
                     LEFT OUTER JOIN filtered_sale on actv_month = m and
                                                      device_id is not null
            group by m
        ), ud_graph as ( # 중고 개통 그래프 데이터
            SELECT m,
                   count(ud_id) as cnt
            FROM months
                     LEFT OUTER JOIN filtered_sale on actv_month = m
                     LEFT OUTER JOIN tb_sale_used_device sud on sud.sale_id=filtered_sale.sale_id
            group by m
        ), sec_graph as ( # 세컨 그래프 데이터
            SELECT m,
                   count(sd_id) as cnt
            FROM months
                     LEFT OUTER JOIN filtered_sale on actv_month = m and
                                                      sd_id != 0
            group by m
        ), diff_ct as (
            select
                (
                    select cnt
                    from ct_graph
                    limit 4, 1
                ) as prv,
                (
                    select cnt
                    from ct_graph
                    limit 5,1
                ) as curr
            from dual
        ), diff_internet as (
            select
                (
                    select cnt
                    from internet_graph
                    limit 4,1
                ) as prv,
                (
                    select cnt
                    from internet_graph
                    limit 5,1
                ) as curr
            from dual
        ), diff_tv as (
            select
                (
                    select cnt
                    from tv_graph
                    limit 4,1
                ) as prv,
                (
                    select cnt
                    from tv_graph
                    limit 5,1
                ) as curr
            from dual
        ), diff_card as (
            select
                (
                    select cnt
                    from card
                    limit 4,1
                ) as prv,
                (
                    select cnt
                    from card
                    limit 5,1
                ) as curr
            from dual
        ), diff_exsvc as (
            select
                (
                    select cnt
                    from exsvc
                    limit 4,1
                ) as prv,
                (
                    select cnt
                    from exsvc
                    limit 5,1
                ) as curr
            from dual
        ), diff_tc as (
            select
                (
                    select cnt
                    from tc_graph
                    limit 4,1
                ) as prv,
                (
                    select cnt
                    from tc_graph
                    limit 5,1
                ) as curr
            from dual
        ) , diff_margin as (
            select
                (
                    select cnt
                    from avg_margin_graph
                    limit 4,1
                ) as prv,
                (
                    select cnt
                    from avg_margin_graph
                    limit 5,1
                ) as curr
            from dual
        ), diff_ud as (
            select
                (
                    select cnt
                    from ud_graph
                    limit 4,1
                ) as prv,
                (
                    select cnt
                    from ud_graph
                    limit 5,1
                ) as curr
            from dual
        ) , diff_sec as (
            select
                (
                    select cnt
                    from sec_graph
                    limit 4,1
                ) as prv,
                (
                    select cnt
                    from sec_graph
                    limit 5,1
                ) as curr
            from dual
        ), final as (
            select
                curr,
                prv,
                (
                    select json_arrayagg(cnt)
                    from ct_graph
                ) as list
            from diff_ct
            union all
            select
                curr,
                prv,
                (
                    select json_arrayagg(cnt)
                    from internet_graph
                ) as list
            from diff_internet
            union all
            select
                curr,
                prv,
                (
                    select json_arrayagg(cnt)
                    from tv_graph
                ) as list
            from diff_tv
             union all
            select
                curr,
                prv,
                (
                    select json_arrayagg(cnt)
                    from card
                ) as list
            from diff_card
             union all
            select
                curr,
                prv,
                (
                    select json_arrayagg(cnt)
                    from exsvc
                ) as list
            from diff_exsvc
            union all
            select
                curr,
                prv,
                (
                    select json_arrayagg(cnt)
                    from tc_graph
                ) as list
            from diff_tc
            union all
            select
                curr,
                prv,
                (
                    select json_arrayagg(cnt)
                    from avg_margin_graph
                ) as list
            from diff_margin
            union all
            select
                curr,
                prv,
                (
                    select json_arrayagg(cnt)
                    from ud_graph
                ) as list
            from diff_ud
            union all
            select
                curr,
                prv,
                (
                    select json_arrayagg(cnt)
                    from sec_graph
                ) as list
            from diff_sec
        )

        select FLOOR(curr) as value,
               (
                   CASE
                       WHEN curr = 0 and prv = 0 THEN 0
                       WHEN prv != 0 and curr = 0 THEN -100
                       WHEN prv = 0 and curr != 0 THEN 100
                       WHEN curr != 0 and prv != 0 THEN TRUNCATE(((curr/prv)-1)*100, 1)
                       END
                   ) as per,
               list
        from final
 {executed in 117 msec}
2025-04-17 22:16:35.216 DEBUG [http-nio-11040-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 12 msec}
2025-04-17 22:16:35.217 INFO  [http-nio-11040-exec-5] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-17 22:16:35.223 DEBUG [http-nio-11040-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. with recursive istm_range as (
            select 0 as i
            union all
            select i+1
            from istm_range
            where i<5
        ), base as (
            select ct_istm
            from tb_sale
            where shop_id=2 and

                        seller_id='km1104rs' and

                actv_dt between '2025-01-01' and '2025-01-31'
        ), final as (
            select i as istm,
                   IFNULL(count(base.ct_istm),0) as cnt
            from istm_range
                     left outer join base on base.ct_istm=istm_range.i
            group by i
            order by istm desc
        )

        select json_arrayagg(istm) as type,
               json_arrayagg(cnt) as cnt,
               json_arrayagg(IF((
                      select IFNULL(count(ct_istm), 0)
                      from base
                  ) = 0 or cnt = 0, 0, TRUNCATE((cnt/(
                   select IFNULL(count(ct_istm), 0)
                   from base
               )) * 100, 1))) as per
        from final
 {executed in 2 msec}
2025-04-17 22:16:35.328 INFO  [http-nio-11040-exec-9] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/sale/graph/ct/select/0
2025-04-17 22:16:35.328 INFO  [http-nio-11040-exec-9] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDg5NTU5NiwiZXhwIjoxNzQ0ODk2MTk2LCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.rHdmauJIT62MXeIPy7ygWZrnBfGj4Ef-1GveY_MCeSY
2025-04-17 22:16:35.328 INFO  [http-nio-11040-exec-9] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/sale/graph/ct/select/0
2025-04-17 22:16:35.336 INFO  [http-nio-11040-exec-9] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-17 22:16:35.339 DEBUG [http-nio-11040-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
2. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 2 msec}
2025-04-17 22:16:35.340 INFO  [http-nio-11040-exec-9] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-17 22:16:35.348 DEBUG [http-nio-11040-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
2. with recursive group_generation as (
            select 0 as g
            union all
            select g+1
            from group_generation
            where g < 8
        ), group_weekday as (
            select 0 as g
            union all
            select g+1
            from group_weekday
            where g < 6
        ),  sale as (
            select weekday(actv_dt) as days,
                   device_id,
                   cust_cd,
                   sale_id
            from tb_sale
            where shop_id=2 and

                      seller_id='km1104rs' and

                device_id is not null and
                actv_dt between '2025-01-01' and '2025-01-31'
        ), sale_gene as (
            select sale_id,
                   (
                       case
                           when length(cust_cd) = 6 then floor((year(curdate()) - concat((
                                 case
                                     when substring(cust_cd, 1,2) > '44' then '19'
                                     when substring(cust_cd, 1,2) <= '44' then '20'
                                     end
                                 ),substring(cust_cd,1,2))) / 10)
                           when length(cust_cd) != 6 then null
                           end
                       ) as generation
            from sale
        ), generation as (
            select g,
                   device_id
            from group_generation g
                     left outer join sale_gene sg on g.g=sg.generation
                     left outer join sale s on s.sale_id=sg.sale_id
        ), weekdays as (
            select g,
                   device_id
            from group_weekday w
                     left outer join sale s on s.days=w.g
        )

        select IFNULL(count(device_id),0) as avg
        from generation
        group by g
 {executed in 4 msec}
2025-04-17 22:16:35.372 INFO  [http-nio-11040-exec-2] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/sale/graph/stat/select/0
2025-04-17 22:16:35.372 INFO  [http-nio-11040-exec-2] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDg5NTU5NiwiZXhwIjoxNzQ0ODk2MTk2LCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.rHdmauJIT62MXeIPy7ygWZrnBfGj4Ef-1GveY_MCeSY
2025-04-17 22:16:35.372 INFO  [http-nio-11040-exec-2] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/sale/graph/stat/select/0
2025-04-17 22:16:35.374 INFO  [http-nio-11040-exec-2] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-17 22:16:35.383 DEBUG [http-nio-11040-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
4. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 6 msec}
2025-04-17 22:16:35.383 INFO  [http-nio-11040-exec-2] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-17 22:16:35.401 DEBUG [http-nio-11040-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
4. with base as (select device_id,
                             (SELECT device_nm
                              FROM tb_device
                              WHERE tb_device.device_id = sl.device_id)      as device,
                             sd_id,
                             (SELECT sd_nm
                              FROM tb_second_device
                              WHERE tb_second_device.sd_id = sl.sd_id)       as sec_device,
                             ct_actv_plan,
                             (SELECT ct_plan_nm
                              FROM tb_ct_plan
                              WHERE tb_ct_plan.ct_plan_id = sl.ct_actv_plan) as actv_plan
                      from tb_sale sl
                      where shop_id = 2 and

                                seller_id='km1104rs' and

                        actv_dt between '2025-01-01' and '2025-01-31'),
             device as (SELECT device                   as name,
                               count(device_id) as count
                        from base
                        where device_id is not null
                        group by device),
             sec_device as (SELECT sec_device                   as name,
                                   count(sec_device) as count
                            from base
                            where sd_id is not null
                            group by sec_device),
             actv_plan as (SELECT actv_plan                   as name,
                                  count(actv_plan) as count
                           from base
                           where ct_actv_plan is not null
                           group by actv_plan),
             total as (select count('device') as cnt
                       from base
                       where 'device' is not null
             )

        select name,
               count,
               (
                   IF((select cnt
                       from total) = 0 or count = 0, 0, TRUNCATE(
                              (count / (
                                  select cnt
                                  from total
                              )
                                  ) * 100, 1))
                   ) as per
        from device
        order by per desc
        limit 5
 {executed in 12 msec}
2025-04-17 22:16:35.447 INFO  [http-nio-11040-exec-7] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/sale/graph/ratio/select/0
2025-04-17 22:16:35.447 INFO  [http-nio-11040-exec-7] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDg5NTU5NiwiZXhwIjoxNzQ0ODk2MTk2LCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.rHdmauJIT62MXeIPy7ygWZrnBfGj4Ef-1GveY_MCeSY
2025-04-17 22:16:35.447 INFO  [http-nio-11040-exec-7] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/sale/graph/ratio/select/0
2025-04-17 22:16:35.450 INFO  [http-nio-11040-exec-7] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-17 22:16:35.453 DEBUG [http-nio-11040-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
3. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 3 msec}
2025-04-17 22:16:35.454 INFO  [http-nio-11040-exec-7] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-17 22:16:35.459 DEBUG [http-nio-11040-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
3. with recursive istm_range as (
            select 0 as i
            union all
            select i+1
            from istm_range
            where i<5
        ), base as (
            select ct_istm
            from tb_sale
            where shop_id=2 and

                        seller_id='km1104rs' and

                actv_dt between '2025-01-01' and '2025-01-31'
        ), final as (
            select i as istm,
                   IFNULL(count(base.ct_istm),0) as cnt
            from istm_range
                     left outer join base on base.ct_istm=istm_range.i
            group by i
            order by istm desc
        )

        select json_arrayagg(istm) as type,
               json_arrayagg(cnt) as cnt,
               json_arrayagg(IF((
                      select IFNULL(count(ct_istm), 0)
                      from base
                  ) = 0 or cnt = 0, 0, TRUNCATE((cnt/(
                   select IFNULL(count(ct_istm), 0)
                   from base
               )) * 100, 1))) as per
        from final
 {executed in 2 msec}
2025-04-17 22:16:40.773 INFO  [http-nio-11040-exec-10] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/sale/graph/ct/select/0
2025-04-17 22:16:40.774 INFO  [http-nio-11040-exec-10] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDg5NTU5NiwiZXhwIjoxNzQ0ODk2MTk2LCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.rHdmauJIT62MXeIPy7ygWZrnBfGj4Ef-1GveY_MCeSY
2025-04-17 22:16:40.774 INFO  [http-nio-11040-exec-10] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/sale/graph/ct/select/0
2025-04-17 22:16:40.776 INFO  [http-nio-11040-exec-10] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-17 22:16:40.777 DEBUG [http-nio-11040-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 1 msec}
2025-04-17 22:16:40.777 INFO  [http-nio-11040-exec-10] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-17 22:16:40.780 DEBUG [http-nio-11040-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. with recursive group_generation as (
            select 0 as g
            union all
            select g+1
            from group_generation
            where g < 8
        ), group_weekday as (
            select 0 as g
            union all
            select g+1
            from group_weekday
            where g < 6
        ),  sale as (
            select weekday(actv_dt) as days,
                   device_id,
                   cust_cd,
                   sale_id
            from tb_sale
            where shop_id=2 and

                      seller_id='km1104rs' and

                device_id is not null and
                actv_dt between '2025-01-01' and '2025-01-31'
        ), sale_gene as (
            select sale_id,
                   (
                       case
                           when length(cust_cd) = 6 then floor((year(curdate()) - concat((
                                 case
                                     when substring(cust_cd, 1,2) > '44' then '19'
                                     when substring(cust_cd, 1,2) <= '44' then '20'
                                     end
                                 ),substring(cust_cd,1,2))) / 10)
                           when length(cust_cd) != 6 then null
                           end
                       ) as generation
            from sale
        ), generation as (
            select g,
                   device_id
            from group_generation g
                     left outer join sale_gene sg on g.g=sg.generation
                     left outer join sale s on s.sale_id=sg.sale_id
        ), weekdays as (
            select g,
                   device_id
            from group_weekday w
                     left outer join sale s on s.days=w.g
        )

        select IFNULL(count(device_id),0) as avg
        from generation
        group by g
 {executed in 1 msec}
2025-04-17 22:16:40.816 INFO  [http-nio-11040-exec-6] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/sale/graph/stat/select/0
2025-04-17 22:16:40.817 INFO  [http-nio-11040-exec-6] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDg5NTU5NiwiZXhwIjoxNzQ0ODk2MTk2LCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.rHdmauJIT62MXeIPy7ygWZrnBfGj4Ef-1GveY_MCeSY
2025-04-17 22:16:40.817 INFO  [http-nio-11040-exec-6] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/sale/graph/stat/select/0
2025-04-17 22:16:40.817 INFO  [http-nio-11040-exec-6] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-17 22:16:40.819 DEBUG [http-nio-11040-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
6. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 1 msec}
2025-04-17 22:16:40.819 INFO  [http-nio-11040-exec-6] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-17 22:16:40.822 DEBUG [http-nio-11040-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
6. with base as (select device_id,
                             (SELECT device_nm
                              FROM tb_device
                              WHERE tb_device.device_id = sl.device_id)      as device,
                             sd_id,
                             (SELECT sd_nm
                              FROM tb_second_device
                              WHERE tb_second_device.sd_id = sl.sd_id)       as sec_device,
                             ct_actv_plan,
                             (SELECT ct_plan_nm
                              FROM tb_ct_plan
                              WHERE tb_ct_plan.ct_plan_id = sl.ct_actv_plan) as actv_plan
                      from tb_sale sl
                      where shop_id = 2 and

                                seller_id='km1104rs' and

                        actv_dt between '2025-01-01' and '2025-01-31'),
             device as (SELECT device                   as name,
                               count(device_id) as count
                        from base
                        where device_id is not null
                        group by device),
             sec_device as (SELECT sec_device                   as name,
                                   count(sec_device) as count
                            from base
                            where sd_id is not null
                            group by sec_device),
             actv_plan as (SELECT actv_plan                   as name,
                                  count(actv_plan) as count
                           from base
                           where ct_actv_plan is not null
                           group by actv_plan),
             total as (select count('device') as cnt
                       from base
                       where 'device' is not null
             )

        select name,
               count,
               (
                   IF((select cnt
                       from total) = 0 or count = 0, 0, TRUNCATE(
                              (count / (
                                  select cnt
                                  from total
                              )
                                  ) * 100, 1))
                   ) as per
        from device
        order by per desc
        limit 5
 {executed in 1 msec}
2025-04-17 22:17:39.568 INFO  [http-nio-11040-exec-1] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/sale/graph/stat/select/0
2025-04-17 22:17:39.568 INFO  [http-nio-11040-exec-1] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDg5NTU5NiwiZXhwIjoxNzQ0ODk2MTk2LCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.rHdmauJIT62MXeIPy7ygWZrnBfGj4Ef-1GveY_MCeSY
2025-04-17 22:17:39.568 INFO  [http-nio-11040-exec-1] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/sale/graph/stat/select/0
2025-04-17 22:17:39.574 INFO  [http-nio-11040-exec-1] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-17 22:17:39.582 DEBUG [http-nio-11040-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
3. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 3 msec}
2025-04-17 22:17:39.582 INFO  [http-nio-11040-exec-1] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-17 22:17:39.588 DEBUG [http-nio-11040-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
3. with base as (select device_id,
                             (SELECT device_nm
                              FROM tb_device
                              WHERE tb_device.device_id = sl.device_id)      as device,
                             sd_id,
                             (SELECT sd_nm
                              FROM tb_second_device
                              WHERE tb_second_device.sd_id = sl.sd_id)       as sec_device,
                             ct_actv_plan,
                             (SELECT ct_plan_nm
                              FROM tb_ct_plan
                              WHERE tb_ct_plan.ct_plan_id = sl.ct_actv_plan) as actv_plan
                      from tb_sale sl
                      where shop_id = 2 and

                                seller_id='km1104rs' and

                        actv_dt between '2025-01-01' and '2025-01-31'),
             device as (SELECT device                   as name,
                               count(device_id) as count
                        from base
                        where device_id is not null
                        group by device),
             sec_device as (SELECT sec_device                   as name,
                                   count(sec_device) as count
                            from base
                            where sd_id is not null
                            group by sec_device),
             actv_plan as (SELECT actv_plan                   as name,
                                  count(actv_plan) as count
                           from base
                           where ct_actv_plan is not null
                           group by actv_plan),
             total as (select count('device') as cnt
                       from base
                       where 'device' is not null
             )

        select name,
               count,
               (
                   IF((select cnt
                       from total) = 0 or count = 0, 0, TRUNCATE(
                              (count / (
                                  select cnt
                                  from total
                              )
                                  ) * 100, 1))
                   ) as per
        from device
        order by per desc
        limit 5
 {executed in 2 msec}
2025-04-17 22:17:45.714 INFO  [http-nio-11040-exec-3] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/sale/graph/ct/select/0
2025-04-17 22:17:45.714 INFO  [http-nio-11040-exec-3] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDg5NTU5NiwiZXhwIjoxNzQ0ODk2MTk2LCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.rHdmauJIT62MXeIPy7ygWZrnBfGj4Ef-1GveY_MCeSY
2025-04-17 22:17:45.714 INFO  [http-nio-11040-exec-3] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/sale/graph/ct/select/0
2025-04-17 22:17:45.716 INFO  [http-nio-11040-exec-3] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-17 22:17:45.723 DEBUG [http-nio-11040-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
5. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 5 msec}
2025-04-17 22:17:45.724 INFO  [http-nio-11040-exec-3] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-17 22:17:45.728 DEBUG [http-nio-11040-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
5. with recursive group_generation as (
            select 0 as g
            union all
            select g+1
            from group_generation
            where g < 8
        ), group_weekday as (
            select 0 as g
            union all
            select g+1
            from group_weekday
            where g < 6
        ),  sale as (
            select weekday(actv_dt) as days,
                   device_id,
                   cust_cd,
                   sale_id
            from tb_sale
            where shop_id=2 and

                      seller_id='km1104rs' and

                device_id is not null and
                actv_dt between '2025-01-01' and '2025-01-31'
        ), sale_gene as (
            select sale_id,
                   (
                       case
                           when length(cust_cd) = 6 then floor((year(curdate()) - concat((
                                 case
                                     when substring(cust_cd, 1,2) > '44' then '19'
                                     when substring(cust_cd, 1,2) <= '44' then '20'
                                     end
                                 ),substring(cust_cd,1,2))) / 10)
                           when length(cust_cd) != 6 then null
                           end
                       ) as generation
            from sale
        ), generation as (
            select g,
                   device_id
            from group_generation g
                     left outer join sale_gene sg on g.g=sg.generation
                     left outer join sale s on s.sale_id=sg.sale_id
        ), weekdays as (
            select g,
                   device_id
            from group_weekday w
                     left outer join sale s on s.days=w.g
        )

        select IFNULL(count(device_id),0) as avg
        from generation
        group by g
 {executed in 2 msec}
2025-04-17 22:17:51.795 INFO  [http-nio-11040-exec-8] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/sale/graph/ct/select/0
2025-04-17 22:17:51.796 INFO  [http-nio-11040-exec-8] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDg5NTU5NiwiZXhwIjoxNzQ0ODk2MTk2LCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.rHdmauJIT62MXeIPy7ygWZrnBfGj4Ef-1GveY_MCeSY
2025-04-17 22:17:51.796 INFO  [http-nio-11040-exec-8] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/sale/graph/ct/select/0
2025-04-17 22:17:51.797 INFO  [http-nio-11040-exec-8] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-17 22:17:51.799 DEBUG [http-nio-11040-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
3. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 0 msec}
2025-04-17 22:17:51.799 INFO  [http-nio-11040-exec-8] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-17 22:17:51.801 DEBUG [http-nio-11040-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
3. with recursive group_generation as (
            select 0 as g
            union all
            select g+1
            from group_generation
            where g < 8
        ), group_weekday as (
            select 0 as g
            union all
            select g+1
            from group_weekday
            where g < 6
        ),  sale as (
            select weekday(actv_dt) as days,
                   device_id,
                   cust_cd,
                   sale_id
            from tb_sale
            where shop_id=2 and

                      seller_id='km1104rs' and

                device_id is not null and
                actv_dt between '2025-01-01' and '2025-01-31'
        ), sale_gene as (
            select sale_id,
                   (
                       case
                           when length(cust_cd) = 6 then floor((year(curdate()) - concat((
                                 case
                                     when substring(cust_cd, 1,2) > '44' then '19'
                                     when substring(cust_cd, 1,2) <= '44' then '20'
                                     end
                                 ),substring(cust_cd,1,2))) / 10)
                           when length(cust_cd) != 6 then null
                           end
                       ) as generation
            from sale
        ), generation as (
            select g,
                   device_id
            from group_generation g
                     left outer join sale_gene sg on g.g=sg.generation
                     left outer join sale s on s.sale_id=sg.sale_id
        ), weekdays as (
            select g,
                   device_id
            from group_weekday w
                     left outer join sale s on s.days=w.g
        )

        select IFNULL(count(device_id),0) as avg
        from generation
        group by g
 {executed in 1 msec}
2025-04-17 22:18:01.460 INFO  [http-nio-11040-exec-4] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/sale/graph/ct/select/0
2025-04-17 22:18:01.460 INFO  [http-nio-11040-exec-4] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDg5NTU5NiwiZXhwIjoxNzQ0ODk2MTk2LCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.rHdmauJIT62MXeIPy7ygWZrnBfGj4Ef-1GveY_MCeSY
2025-04-17 22:18:01.460 INFO  [http-nio-11040-exec-4] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/sale/graph/ct/select/0
2025-04-17 22:18:01.462 INFO  [http-nio-11040-exec-4] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-17 22:18:01.464 DEBUG [http-nio-11040-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
2. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 1 msec}
2025-04-17 22:18:01.465 INFO  [http-nio-11040-exec-4] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-17 22:18:01.467 DEBUG [http-nio-11040-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
2. with recursive group_generation as (
            select 0 as g
            union all
            select g+1
            from group_generation
            where g < 8
        ), group_weekday as (
            select 0 as g
            union all
            select g+1
            from group_weekday
            where g < 6
        ),  sale as (
            select weekday(actv_dt) as days,
                   device_id,
                   cust_cd,
                   sale_id
            from tb_sale
            where shop_id=2 and

                      seller_id='km1104rs' and

                device_id is not null and
                actv_dt between '2025-01-01' and '2025-01-31'
        ), sale_gene as (
            select sale_id,
                   (
                       case
                           when length(cust_cd) = 6 then floor((year(curdate()) - concat((
                                 case
                                     when substring(cust_cd, 1,2) > '44' then '19'
                                     when substring(cust_cd, 1,2) <= '44' then '20'
                                     end
                                 ),substring(cust_cd,1,2))) / 10)
                           when length(cust_cd) != 6 then null
                           end
                       ) as generation
            from sale
        ), generation as (
            select g,
                   device_id
            from group_generation g
                     left outer join sale_gene sg on g.g=sg.generation
                     left outer join sale s on s.sale_id=sg.sale_id
        ), weekdays as (
            select g,
                   device_id
            from group_weekday w
                     left outer join sale s on s.days=w.g
        )

        select IFNULL(count(device_id),0) as avg
        from generation
        group by g
 {executed in 1 msec}
2025-04-17 22:18:11.217 INFO  [http-nio-11040-exec-5] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/sale/graph/stat/select/0
2025-04-17 22:18:11.217 INFO  [http-nio-11040-exec-5] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDg5NTU5NiwiZXhwIjoxNzQ0ODk2MTk2LCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.rHdmauJIT62MXeIPy7ygWZrnBfGj4Ef-1GveY_MCeSY
2025-04-17 22:18:11.217 INFO  [http-nio-11040-exec-5] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/sale/graph/stat/select/0
2025-04-17 22:18:11.219 INFO  [http-nio-11040-exec-5] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-17 22:18:11.221 DEBUG [http-nio-11040-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 2 msec}
2025-04-17 22:18:11.221 INFO  [http-nio-11040-exec-5] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-17 22:18:11.224 DEBUG [http-nio-11040-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. with base as (select device_id,
                             (SELECT device_nm
                              FROM tb_device
                              WHERE tb_device.device_id = sl.device_id)      as device,
                             sd_id,
                             (SELECT sd_nm
                              FROM tb_second_device
                              WHERE tb_second_device.sd_id = sl.sd_id)       as sec_device,
                             ct_actv_plan,
                             (SELECT ct_plan_nm
                              FROM tb_ct_plan
                              WHERE tb_ct_plan.ct_plan_id = sl.ct_actv_plan) as actv_plan
                      from tb_sale sl
                      where shop_id = 2 and

                                seller_id='km1104rs' and

                        actv_dt between '2025-01-01' and '2025-01-31'),
             device as (SELECT device                   as name,
                               count(device_id) as count
                        from base
                        where device_id is not null
                        group by device),
             sec_device as (SELECT sec_device                   as name,
                                   count(sec_device) as count
                            from base
                            where sd_id is not null
                            group by sec_device),
             actv_plan as (SELECT actv_plan                   as name,
                                  count(actv_plan) as count
                           from base
                           where ct_actv_plan is not null
                           group by actv_plan),
             total as (select count('device') as cnt
                       from base
                       where 'device' is not null
             )

        select name,
               count,
               (
                   IF((select cnt
                       from total) = 0 or count = 0, 0, TRUNCATE(
                              (count / (
                                  select cnt
                                  from total
                              )
                                  ) * 100, 1))
                   ) as per
        from device
        order by per desc
        limit 5
 {executed in 1 msec}
2025-04-17 22:25:11.407 INFO  [MessageBroker-1] [o.s.w.s.c.WebSocketMessageBrokerStats] - WebSocketSession[0 current WS(0)-HttpStream(0)-HttpPoll(0), 0 total, 0 closed abnormally (0 connect failure, 0 send limit, 0 transport error)], stompSubProtocol[processed CONNECT(0)-CONNECTED(0)-DISCONNECT(0)], stompBrokerRelay[null], inboundChannel[pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 0], outboundChannel[pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 0], sockJsScheduler[pool size = 2, active threads = 1, queued tasks = 0, completed tasks = 1]
2025-04-17 22:25:44.847 INFO  [http-nio-11040-exec-9] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/notif/count/unread
2025-04-17 22:25:44.848 INFO  [http-nio-11040-exec-9] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDg5NTU5NiwiZXhwIjoxNzQ0ODk2MTk2LCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.rHdmauJIT62MXeIPy7ygWZrnBfGj4Ef-1GveY_MCeSY
2025-04-17 22:25:44.848 INFO  [http-nio-11040-exec-9] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/notif/count/unread
2025-04-17 22:25:44.853 INFO  [http-nio-11040-exec-9] [com.momo.provider.JwtProvider] - Expired JWT Token
io.jsonwebtoken.ExpiredJwtException: JWT expired at 2025-04-17T13:23:16Z. Current time: 2025-04-17T13:25:44Z, a difference of 148853 milliseconds.  Allowed clock skew: 0 milliseconds.
	at io.jsonwebtoken.impl.DefaultJwtParser.parse(DefaultJwtParser.java:427)
	at io.jsonwebtoken.impl.DefaultJwtParser.parse(DefaultJwtParser.java:529)
	at io.jsonwebtoken.impl.DefaultJwtParser.parseClaimsJws(DefaultJwtParser.java:589)
	at io.jsonwebtoken.impl.ImmutableJwtParser.parseClaimsJws(ImmutableJwtParser.java:173)
	at com.momo.provider.JwtProvider.validateToken(JwtProvider.java:145)
	at com.momo.filter.JwtAuthorizationFilter.doFilterInternal(JwtAuthorizationFilter.java:38)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:195)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:225)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:340)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:840)
2025-04-17 22:25:44.854 INFO  [http-nio-11040-exec-9] [com.momo.filter.JwtAuthorizationFilter] - 유효한 JWT 토큰이 없습니다
2025-04-17 22:25:44.856 INFO  [http-nio-11040-exec-9] [c.momo.common.util.SecurityContextUtil] - principal: UserDetailsImpl(username=km1104rs, password=$2a$10$uXShhwl6ULOkbJe477uDWOfdiUUcu6lOSF/Dhj9xP3U1nUn/gXkc6, authorities=[ROLE_NONE])
2025-04-17 22:25:44.863 DEBUG [http-nio-11040-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
11. SELECT count(*)
        FROM tb_notification
        WHERE receiver_id = 'km1104rs'
          AND read_st = FALSE
 {executed in 4 msec}
2025-04-17 22:25:46.477 INFO  [http-nio-11040-exec-2] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/notif/count/unread
2025-04-17 22:25:46.478 INFO  [http-nio-11040-exec-2] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDg5NTU5NiwiZXhwIjoxNzQ0ODk2MTk2LCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.rHdmauJIT62MXeIPy7ygWZrnBfGj4Ef-1GveY_MCeSY
2025-04-17 22:25:46.478 INFO  [http-nio-11040-exec-2] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/notif/count/unread
2025-04-17 22:25:46.479 INFO  [http-nio-11040-exec-2] [com.momo.provider.JwtProvider] - Expired JWT Token
io.jsonwebtoken.ExpiredJwtException: JWT expired at 2025-04-17T13:23:16Z. Current time: 2025-04-17T13:25:46Z, a difference of 150479 milliseconds.  Allowed clock skew: 0 milliseconds.
	at io.jsonwebtoken.impl.DefaultJwtParser.parse(DefaultJwtParser.java:427)
	at io.jsonwebtoken.impl.DefaultJwtParser.parse(DefaultJwtParser.java:529)
	at io.jsonwebtoken.impl.DefaultJwtParser.parseClaimsJws(DefaultJwtParser.java:589)
	at io.jsonwebtoken.impl.ImmutableJwtParser.parseClaimsJws(ImmutableJwtParser.java:173)
	at com.momo.provider.JwtProvider.validateToken(JwtProvider.java:145)
	at com.momo.filter.JwtAuthorizationFilter.doFilterInternal(JwtAuthorizationFilter.java:38)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:195)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:225)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:340)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:840)
2025-04-17 22:25:46.479 INFO  [http-nio-11040-exec-2] [com.momo.filter.JwtAuthorizationFilter] - 유효한 JWT 토큰이 없습니다
2025-04-17 22:25:46.480 INFO  [http-nio-11040-exec-2] [c.momo.common.util.SecurityContextUtil] - principal: UserDetailsImpl(username=km1104rs, password=$2a$10$uXShhwl6ULOkbJe477uDWOfdiUUcu6lOSF/Dhj9xP3U1nUn/gXkc6, authorities=[ROLE_NONE])
2025-04-17 22:25:46.483 DEBUG [http-nio-11040-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
11. SELECT count(*)
        FROM tb_notification
        WHERE receiver_id = 'km1104rs'
          AND read_st = FALSE
 {executed in 2 msec}
2025-04-17 22:25:46.530 INFO  [http-nio-11040-exec-7] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/sale/graph/ct/select/0
2025-04-17 22:25:46.531 INFO  [http-nio-11040-exec-7] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDg5NTU5NiwiZXhwIjoxNzQ0ODk2MTk2LCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.rHdmauJIT62MXeIPy7ygWZrnBfGj4Ef-1GveY_MCeSY
2025-04-17 22:25:46.531 INFO  [http-nio-11040-exec-7] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/sale/graph/ct/select/0
2025-04-17 22:25:46.532 INFO  [http-nio-11040-exec-7] [com.momo.provider.JwtProvider] - Expired JWT Token
io.jsonwebtoken.ExpiredJwtException: JWT expired at 2025-04-17T13:23:16Z. Current time: 2025-04-17T13:25:46Z, a difference of 150532 milliseconds.  Allowed clock skew: 0 milliseconds.
	at io.jsonwebtoken.impl.DefaultJwtParser.parse(DefaultJwtParser.java:427)
	at io.jsonwebtoken.impl.DefaultJwtParser.parse(DefaultJwtParser.java:529)
	at io.jsonwebtoken.impl.DefaultJwtParser.parseClaimsJws(DefaultJwtParser.java:589)
	at io.jsonwebtoken.impl.ImmutableJwtParser.parseClaimsJws(ImmutableJwtParser.java:173)
	at com.momo.provider.JwtProvider.validateToken(JwtProvider.java:145)
	at com.momo.filter.JwtAuthorizationFilter.doFilterInternal(JwtAuthorizationFilter.java:38)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:195)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:225)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:340)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:840)
2025-04-17 22:25:46.532 INFO  [http-nio-11040-exec-7] [com.momo.filter.JwtAuthorizationFilter] - 유효한 JWT 토큰이 없습니다
2025-04-17 22:25:46.543 DEBUG [http-nio-11040-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
11. with recursive group_generation as (
            select 0 as g
            union all
            select g+1
            from group_generation
            where g < 8
        ), group_weekday as (
            select 0 as g
            union all
            select g+1
            from group_weekday
            where g < 6
        ),  sale as (
            select weekday(actv_dt) as days,
                   device_id,
                   cust_cd,
                   sale_id
            from tb_sale
            where shop_id=2 and

                      seller_id='km1104rs' and

                device_id is not null and
                actv_dt between '2025-04-01' and '2025-04-30'
        ), sale_gene as (
            select sale_id,
                   (
                       case
                           when length(cust_cd) = 6 then floor((year(curdate()) - concat((
                                 case
                                     when substring(cust_cd, 1,2) > '44' then '19'
                                     when substring(cust_cd, 1,2) <= '44' then '20'
                                     end
                                 ),substring(cust_cd,1,2))) / 10)
                           when length(cust_cd) != 6 then null
                           end
                       ) as generation
            from sale
        ), generation as (
            select g,
                   device_id
            from group_generation g
                     left outer join sale_gene sg on g.g=sg.generation
                     left outer join sale s on s.sale_id=sg.sale_id
        ), weekdays as (
            select g,
                   device_id
            from group_weekday w
                     left outer join sale s on s.days=w.g
        )

        select IFNULL(count(device_id),0) as avg
        from generation
        group by g
 {executed in 5 msec}
2025-04-17 22:25:46.578 INFO  [http-nio-11040-exec-10] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/sale/graph/stat/select/0
2025-04-17 22:25:46.578 INFO  [http-nio-11040-exec-10] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDg5NTU5NiwiZXhwIjoxNzQ0ODk2MTk2LCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.rHdmauJIT62MXeIPy7ygWZrnBfGj4Ef-1GveY_MCeSY
2025-04-17 22:25:46.578 INFO  [http-nio-11040-exec-10] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/sale/graph/stat/select/0
2025-04-17 22:25:46.580 INFO  [http-nio-11040-exec-10] [com.momo.provider.JwtProvider] - Expired JWT Token
io.jsonwebtoken.ExpiredJwtException: JWT expired at 2025-04-17T13:23:16Z. Current time: 2025-04-17T13:25:46Z, a difference of 150579 milliseconds.  Allowed clock skew: 0 milliseconds.
	at io.jsonwebtoken.impl.DefaultJwtParser.parse(DefaultJwtParser.java:427)
	at io.jsonwebtoken.impl.DefaultJwtParser.parse(DefaultJwtParser.java:529)
	at io.jsonwebtoken.impl.DefaultJwtParser.parseClaimsJws(DefaultJwtParser.java:589)
	at io.jsonwebtoken.impl.ImmutableJwtParser.parseClaimsJws(ImmutableJwtParser.java:173)
	at com.momo.provider.JwtProvider.validateToken(JwtProvider.java:145)
	at com.momo.filter.JwtAuthorizationFilter.doFilterInternal(JwtAuthorizationFilter.java:38)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:195)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:225)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:340)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:840)
2025-04-17 22:25:46.580 INFO  [http-nio-11040-exec-10] [com.momo.filter.JwtAuthorizationFilter] - 유효한 JWT 토큰이 없습니다
2025-04-17 22:25:46.591 DEBUG [http-nio-11040-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
11. with base as (select device_id,
                             (SELECT device_nm
                              FROM tb_device
                              WHERE tb_device.device_id = sl.device_id)      as device,
                             sd_id,
                             (SELECT sd_nm
                              FROM tb_second_device
                              WHERE tb_second_device.sd_id = sl.sd_id)       as sec_device,
                             ct_actv_plan,
                             (SELECT ct_plan_nm
                              FROM tb_ct_plan
                              WHERE tb_ct_plan.ct_plan_id = sl.ct_actv_plan) as actv_plan
                      from tb_sale sl
                      where shop_id = 2 and

                                seller_id='km1104rs' and

                        actv_dt between '2025-04-01' and '2025-04-30'),
             device as (SELECT device                   as name,
                               count(device_id) as count
                        from base
                        where device_id is not null
                        group by device),
             sec_device as (SELECT sec_device                   as name,
                                   count(sec_device) as count
                            from base
                            where sd_id is not null
                            group by sec_device),
             actv_plan as (SELECT actv_plan                   as name,
                                  count(actv_plan) as count
                           from base
                           where ct_actv_plan is not null
                           group by actv_plan),
             total as (select count('device') as cnt
                       from base
                       where 'device' is not null
             )

        select name,
               count,
               (
                   IF((select cnt
                       from total) = 0 or count = 0, 0, TRUNCATE(
                              (count / (
                                  select cnt
                                  from total
                              )
                                  ) * 100, 1))
                   ) as per
        from device
        order by per desc
        limit 5
 {executed in 6 msec}
2025-04-17 22:25:46.622 INFO  [http-nio-11040-exec-6] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/sale/graph/ratio/select/0
2025-04-17 22:25:46.622 INFO  [http-nio-11040-exec-6] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDg5NTU5NiwiZXhwIjoxNzQ0ODk2MTk2LCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.rHdmauJIT62MXeIPy7ygWZrnBfGj4Ef-1GveY_MCeSY
2025-04-17 22:25:46.622 INFO  [http-nio-11040-exec-6] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/sale/graph/ratio/select/0
2025-04-17 22:25:46.624 INFO  [http-nio-11040-exec-6] [com.momo.provider.JwtProvider] - Expired JWT Token
io.jsonwebtoken.ExpiredJwtException: JWT expired at 2025-04-17T13:23:16Z. Current time: 2025-04-17T13:25:46Z, a difference of 150624 milliseconds.  Allowed clock skew: 0 milliseconds.
	at io.jsonwebtoken.impl.DefaultJwtParser.parse(DefaultJwtParser.java:427)
	at io.jsonwebtoken.impl.DefaultJwtParser.parse(DefaultJwtParser.java:529)
	at io.jsonwebtoken.impl.DefaultJwtParser.parseClaimsJws(DefaultJwtParser.java:589)
	at io.jsonwebtoken.impl.ImmutableJwtParser.parseClaimsJws(ImmutableJwtParser.java:173)
	at com.momo.provider.JwtProvider.validateToken(JwtProvider.java:145)
	at com.momo.filter.JwtAuthorizationFilter.doFilterInternal(JwtAuthorizationFilter.java:38)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:195)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:225)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:340)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:840)
2025-04-17 22:25:46.625 INFO  [http-nio-11040-exec-6] [com.momo.filter.JwtAuthorizationFilter] - 유효한 JWT 토큰이 없습니다
2025-04-17 22:25:46.630 DEBUG [http-nio-11040-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
11. with recursive istm_range as (
            select 0 as i
            union all
            select i+1
            from istm_range
            where i<5
        ), base as (
            select ct_istm
            from tb_sale
            where shop_id=2 and

                        seller_id='km1104rs' and

                actv_dt between '2025-04-01' and '2025-04-30'
        ), final as (
            select i as istm,
                   IFNULL(count(base.ct_istm),0) as cnt
            from istm_range
                     left outer join base on base.ct_istm=istm_range.i
            group by i
            order by istm desc
        )

        select json_arrayagg(istm) as type,
               json_arrayagg(cnt) as cnt,
               json_arrayagg(IF((
                      select IFNULL(count(ct_istm), 0)
                      from base
                  ) = 0 or cnt = 0, 0, TRUNCATE((cnt/(
                   select IFNULL(count(ct_istm), 0)
                   from base
               )) * 100, 1))) as per
        from final
 {executed in 3 msec}
2025-04-17 22:25:46.668 INFO  [http-nio-11040-exec-1] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/sale/graph/summary
2025-04-17 22:25:46.669 INFO  [http-nio-11040-exec-1] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDg5NTU5NiwiZXhwIjoxNzQ0ODk2MTk2LCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.rHdmauJIT62MXeIPy7ygWZrnBfGj4Ef-1GveY_MCeSY
2025-04-17 22:25:46.669 INFO  [http-nio-11040-exec-1] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/sale/graph/summary
2025-04-17 22:25:46.670 INFO  [http-nio-11040-exec-1] [com.momo.provider.JwtProvider] - Expired JWT Token
io.jsonwebtoken.ExpiredJwtException: JWT expired at 2025-04-17T13:23:16Z. Current time: 2025-04-17T13:25:46Z, a difference of 150670 milliseconds.  Allowed clock skew: 0 milliseconds.
	at io.jsonwebtoken.impl.DefaultJwtParser.parse(DefaultJwtParser.java:427)
	at io.jsonwebtoken.impl.DefaultJwtParser.parse(DefaultJwtParser.java:529)
	at io.jsonwebtoken.impl.DefaultJwtParser.parseClaimsJws(DefaultJwtParser.java:589)
	at io.jsonwebtoken.impl.ImmutableJwtParser.parseClaimsJws(ImmutableJwtParser.java:173)
	at com.momo.provider.JwtProvider.validateToken(JwtProvider.java:145)
	at com.momo.filter.JwtAuthorizationFilter.doFilterInternal(JwtAuthorizationFilter.java:38)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:195)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:225)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:340)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:840)
2025-04-17 22:25:46.670 INFO  [http-nio-11040-exec-1] [com.momo.filter.JwtAuthorizationFilter] - 유효한 JWT 토큰이 없습니다
2025-04-17 22:25:46.672 INFO  [http-nio-11040-exec-1] [com.momo.api.SaleController] - summary: CommonVO(provider=null, date=null, year=null, month=null, day=null, selectType=null, range=null, dateType=null, prevFromYmd=null, prevToYmd=null, currFromYmd=null, currToYmd=null, fromYmd=2024-10-01, toYmd=2025-04-01, fromYm=null, toYm=null, prevDate=null, currDate=null)
2025-04-17 22:25:46.694 DEBUG [http-nio-11040-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
11. #         월별 날짜 구하기
        with recursive month_range as (
            select '2024-10-01' as d
            union all
            select date_add(d, interval 1 month) as d
            from month_range
            where date_add(d, interval 1 month) < '2025-04-01'
        ), months as(
            select month(d) as m
            from month_range
        ), filtered_sale as ( # 판매일보 초벌
            select month(actv_dt) as actv_month,
                   device_id,
                   internet_plan,
                   tv_plan,
                    exsvc_id,
                   total_cms,
                   wt_cms,
                   sale_id,
                   sd_id,
                    shop_id
            from tb_sale
            where shop_id=2 and

                    seller_id='km1104rs' and

                actv_dt between '2024-10-01' and date_add('2025-04-01', interval 1 month)
        ), ct_graph as ( # 무선 그래프 데이터
            SELECT m,
                   count(device_id) as cnt
            FROM months
                     LEFT OUTER JOIN filtered_sale on actv_month = m and
                                                      device_id is not null
            group by m
        ), internet_graph as ( # 인터넷 그래프 데이터
            SELECT m,
                   count(internet_plan) as cnt
            FROM months
                     LEFT OUTER JOIN filtered_sale on actv_month = m  and
                                                      internet_plan is not null
            group by m
        ), tv_graph as ( # TV 그래프 데이터
            SELECT m,
                   count(tv_plan) as cnt
            FROM months
                     LEFT OUTER JOIN filtered_sale on actv_month = m  and
                                                      tv_plan is not null
            group by m
        ), card as ( # 카드 데이터
            SELECT m,
                   (
                    select count(*)
                    from tb_sale_card sc
                    left outer join filtered_sale fs on fs.shop_id = sc.shop_id and
                                                        fs.sale_id = sc.sale_id
                   )  as cnt
            FROM months
                     LEFT OUTER JOIN filtered_sale on actv_month = m
            group by m
        ), exsvc as ( # 부가서비스 데이터
            SELECT m,
                   count(exsvc_id) as cnt
            FROM months
                     LEFT OUTER JOIN filtered_sale on actv_month = m  and
                                                      exsvc_id is not null
            group by m
        ), tc_graph as ( # 총 이익 그래프 데이터
            SELECT m,
                   IFNULL(sum(total_cms), 0) as cnt
            FROM months
                     LEFT OUTER JOIN filtered_sale on actv_month = m
            group by m
        ), avg_margin_graph as ( # 개인 평균 마진 그래프 데이터
            SELECT m,
                   IFNULL(avg(total_cms), 0) as cnt
            FROM months
                     LEFT OUTER JOIN filtered_sale on actv_month = m and
                                                      device_id is not null
            group by m
        ), ud_graph as ( # 중고 개통 그래프 데이터
            SELECT m,
                   count(ud_id) as cnt
            FROM months
                     LEFT OUTER JOIN filtered_sale on actv_month = m
                     LEFT OUTER JOIN tb_sale_used_device sud on sud.sale_id=filtered_sale.sale_id
            group by m
        ), sec_graph as ( # 세컨 그래프 데이터
            SELECT m,
                   count(sd_id) as cnt
            FROM months
                     LEFT OUTER JOIN filtered_sale on actv_month = m and
                                                      sd_id != 0
            group by m
        ), diff_ct as (
            select
                (
                    select cnt
                    from ct_graph
                    limit 4, 1
                ) as prv,
                (
                    select cnt
                    from ct_graph
                    limit 5,1
                ) as curr
            from dual
        ), diff_internet as (
            select
                (
                    select cnt
                    from internet_graph
                    limit 4,1
                ) as prv,
                (
                    select cnt
                    from internet_graph
                    limit 5,1
                ) as curr
            from dual
        ), diff_tv as (
            select
                (
                    select cnt
                    from tv_graph
                    limit 4,1
                ) as prv,
                (
                    select cnt
                    from tv_graph
                    limit 5,1
                ) as curr
            from dual
        ), diff_card as (
            select
                (
                    select cnt
                    from card
                    limit 4,1
                ) as prv,
                (
                    select cnt
                    from card
                    limit 5,1
                ) as curr
            from dual
        ), diff_exsvc as (
            select
                (
                    select cnt
                    from exsvc
                    limit 4,1
                ) as prv,
                (
                    select cnt
                    from exsvc
                    limit 5,1
                ) as curr
            from dual
        ), diff_tc as (
            select
                (
                    select cnt
                    from tc_graph
                    limit 4,1
                ) as prv,
                (
                    select cnt
                    from tc_graph
                    limit 5,1
                ) as curr
            from dual
        ) , diff_margin as (
            select
                (
                    select cnt
                    from avg_margin_graph
                    limit 4,1
                ) as prv,
                (
                    select cnt
                    from avg_margin_graph
                    limit 5,1
                ) as curr
            from dual
        ), diff_ud as (
            select
                (
                    select cnt
                    from ud_graph
                    limit 4,1
                ) as prv,
                (
                    select cnt
                    from ud_graph
                    limit 5,1
                ) as curr
            from dual
        ) , diff_sec as (
            select
                (
                    select cnt
                    from sec_graph
                    limit 4,1
                ) as prv,
                (
                    select cnt
                    from sec_graph
                    limit 5,1
                ) as curr
            from dual
        ), final as (
            select
                curr,
                prv,
                (
                    select json_arrayagg(cnt)
                    from ct_graph
                ) as list
            from diff_ct
            union all
            select
                curr,
                prv,
                (
                    select json_arrayagg(cnt)
                    from internet_graph
                ) as list
            from diff_internet
            union all
            select
                curr,
                prv,
                (
                    select json_arrayagg(cnt)
                    from tv_graph
                ) as list
            from diff_tv
             union all
            select
                curr,
                prv,
                (
                    select json_arrayagg(cnt)
                    from card
                ) as list
            from diff_card
             union all
            select
                curr,
                prv,
                (
                    select json_arrayagg(cnt)
                    from exsvc
                ) as list
            from diff_exsvc
            union all
            select
                curr,
                prv,
                (
                    select json_arrayagg(cnt)
                    from tc_graph
                ) as list
            from diff_tc
            union all
            select
                curr,
                prv,
                (
                    select json_arrayagg(cnt)
                    from avg_margin_graph
                ) as list
            from diff_margin
            union all
            select
                curr,
                prv,
                (
                    select json_arrayagg(cnt)
                    from ud_graph
                ) as list
            from diff_ud
            union all
            select
                curr,
                prv,
                (
                    select json_arrayagg(cnt)
                    from sec_graph
                ) as list
            from diff_sec
        )

        select FLOOR(curr) as value,
               (
                   CASE
                       WHEN curr = 0 and prv = 0 THEN 0
                       WHEN prv != 0 and curr = 0 THEN -100
                       WHEN prv = 0 and curr != 0 THEN 100
                       WHEN curr != 0 and prv != 0 THEN TRUNCATE(((curr/prv)-1)*100, 1)
                       END
                   ) as per,
               list
        from final
 {executed in 16 msec}
2025-04-17 22:25:46.714 INFO  [http-nio-11040-exec-3] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/notif/count/unread
2025-04-17 22:25:46.714 INFO  [http-nio-11040-exec-3] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDg5NTU5NiwiZXhwIjoxNzQ0ODk2MTk2LCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.rHdmauJIT62MXeIPy7ygWZrnBfGj4Ef-1GveY_MCeSY
2025-04-17 22:25:46.714 INFO  [http-nio-11040-exec-3] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/notif/count/unread
2025-04-17 22:25:46.715 INFO  [http-nio-11040-exec-3] [com.momo.provider.JwtProvider] - Expired JWT Token
io.jsonwebtoken.ExpiredJwtException: JWT expired at 2025-04-17T13:23:16Z. Current time: 2025-04-17T13:25:46Z, a difference of 150715 milliseconds.  Allowed clock skew: 0 milliseconds.
	at io.jsonwebtoken.impl.DefaultJwtParser.parse(DefaultJwtParser.java:427)
	at io.jsonwebtoken.impl.DefaultJwtParser.parse(DefaultJwtParser.java:529)
	at io.jsonwebtoken.impl.DefaultJwtParser.parseClaimsJws(DefaultJwtParser.java:589)
	at io.jsonwebtoken.impl.ImmutableJwtParser.parseClaimsJws(ImmutableJwtParser.java:173)
	at com.momo.provider.JwtProvider.validateToken(JwtProvider.java:145)
	at com.momo.filter.JwtAuthorizationFilter.doFilterInternal(JwtAuthorizationFilter.java:38)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:195)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:225)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:340)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:840)
2025-04-17 22:25:46.715 INFO  [http-nio-11040-exec-3] [com.momo.filter.JwtAuthorizationFilter] - 유효한 JWT 토큰이 없습니다
2025-04-17 22:25:46.716 INFO  [http-nio-11040-exec-3] [c.momo.common.util.SecurityContextUtil] - principal: UserDetailsImpl(username=km1104rs, password=$2a$10$uXShhwl6ULOkbJe477uDWOfdiUUcu6lOSF/Dhj9xP3U1nUn/gXkc6, authorities=[ROLE_NONE])
2025-04-17 22:25:46.718 DEBUG [http-nio-11040-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
11. SELECT count(*)
        FROM tb_notification
        WHERE receiver_id = 'km1104rs'
          AND read_st = FALSE
 {executed in 1 msec}
2025-04-17 22:25:46.790 INFO  [http-nio-11040-exec-8] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/sale/graph/ct/select/0
2025-04-17 22:25:46.790 INFO  [http-nio-11040-exec-8] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDg5NTU5NiwiZXhwIjoxNzQ0ODk2MTk2LCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.rHdmauJIT62MXeIPy7ygWZrnBfGj4Ef-1GveY_MCeSY
2025-04-17 22:25:46.790 INFO  [http-nio-11040-exec-8] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/sale/graph/ct/select/0
2025-04-17 22:25:46.791 INFO  [http-nio-11040-exec-8] [com.momo.provider.JwtProvider] - Expired JWT Token
io.jsonwebtoken.ExpiredJwtException: JWT expired at 2025-04-17T13:23:16Z. Current time: 2025-04-17T13:25:46Z, a difference of 150791 milliseconds.  Allowed clock skew: 0 milliseconds.
	at io.jsonwebtoken.impl.DefaultJwtParser.parse(DefaultJwtParser.java:427)
	at io.jsonwebtoken.impl.DefaultJwtParser.parse(DefaultJwtParser.java:529)
	at io.jsonwebtoken.impl.DefaultJwtParser.parseClaimsJws(DefaultJwtParser.java:589)
	at io.jsonwebtoken.impl.ImmutableJwtParser.parseClaimsJws(ImmutableJwtParser.java:173)
	at com.momo.provider.JwtProvider.validateToken(JwtProvider.java:145)
	at com.momo.filter.JwtAuthorizationFilter.doFilterInternal(JwtAuthorizationFilter.java:38)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:195)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:225)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:340)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:840)
2025-04-17 22:25:46.791 INFO  [http-nio-11040-exec-8] [com.momo.filter.JwtAuthorizationFilter] - 유효한 JWT 토큰이 없습니다
2025-04-17 22:25:46.796 DEBUG [http-nio-11040-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
11. with recursive group_generation as (
            select 0 as g
            union all
            select g+1
            from group_generation
            where g < 8
        ), group_weekday as (
            select 0 as g
            union all
            select g+1
            from group_weekday
            where g < 6
        ),  sale as (
            select weekday(actv_dt) as days,
                   device_id,
                   cust_cd,
                   sale_id
            from tb_sale
            where shop_id=2 and

                      seller_id='km1104rs' and

                device_id is not null and
                actv_dt between '2025-04-01' and '2025-04-30'
        ), sale_gene as (
            select sale_id,
                   (
                       case
                           when length(cust_cd) = 6 then floor((year(curdate()) - concat((
                                 case
                                     when substring(cust_cd, 1,2) > '44' then '19'
                                     when substring(cust_cd, 1,2) <= '44' then '20'
                                     end
                                 ),substring(cust_cd,1,2))) / 10)
                           when length(cust_cd) != 6 then null
                           end
                       ) as generation
            from sale
        ), generation as (
            select g,
                   device_id
            from group_generation g
                     left outer join sale_gene sg on g.g=sg.generation
                     left outer join sale s on s.sale_id=sg.sale_id
        ), weekdays as (
            select g,
                   device_id
            from group_weekday w
                     left outer join sale s on s.days=w.g
        )

        select IFNULL(count(device_id),0) as avg
        from generation
        group by g
 {executed in 2 msec}
2025-04-17 22:25:46.840 INFO  [http-nio-11040-exec-4] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/sale/graph/stat/select/0
2025-04-17 22:25:46.840 INFO  [http-nio-11040-exec-4] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDg5NTU5NiwiZXhwIjoxNzQ0ODk2MTk2LCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.rHdmauJIT62MXeIPy7ygWZrnBfGj4Ef-1GveY_MCeSY
2025-04-17 22:25:46.840 INFO  [http-nio-11040-exec-4] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/sale/graph/stat/select/0
2025-04-17 22:25:46.841 INFO  [http-nio-11040-exec-4] [com.momo.provider.JwtProvider] - Expired JWT Token
io.jsonwebtoken.ExpiredJwtException: JWT expired at 2025-04-17T13:23:16Z. Current time: 2025-04-17T13:25:46Z, a difference of 150841 milliseconds.  Allowed clock skew: 0 milliseconds.
	at io.jsonwebtoken.impl.DefaultJwtParser.parse(DefaultJwtParser.java:427)
	at io.jsonwebtoken.impl.DefaultJwtParser.parse(DefaultJwtParser.java:529)
	at io.jsonwebtoken.impl.DefaultJwtParser.parseClaimsJws(DefaultJwtParser.java:589)
	at io.jsonwebtoken.impl.ImmutableJwtParser.parseClaimsJws(ImmutableJwtParser.java:173)
	at com.momo.provider.JwtProvider.validateToken(JwtProvider.java:145)
	at com.momo.filter.JwtAuthorizationFilter.doFilterInternal(JwtAuthorizationFilter.java:38)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:195)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:225)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:340)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:840)
2025-04-17 22:25:46.841 INFO  [http-nio-11040-exec-4] [com.momo.filter.JwtAuthorizationFilter] - 유효한 JWT 토큰이 없습니다
2025-04-17 22:25:46.846 DEBUG [http-nio-11040-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
11. with base as (select device_id,
                             (SELECT device_nm
                              FROM tb_device
                              WHERE tb_device.device_id = sl.device_id)      as device,
                             sd_id,
                             (SELECT sd_nm
                              FROM tb_second_device
                              WHERE tb_second_device.sd_id = sl.sd_id)       as sec_device,
                             ct_actv_plan,
                             (SELECT ct_plan_nm
                              FROM tb_ct_plan
                              WHERE tb_ct_plan.ct_plan_id = sl.ct_actv_plan) as actv_plan
                      from tb_sale sl
                      where shop_id = 2 and

                                seller_id='km1104rs' and

                        actv_dt between '2025-04-01' and '2025-04-30'),
             device as (SELECT device                   as name,
                               count(device_id) as count
                        from base
                        where device_id is not null
                        group by device),
             sec_device as (SELECT sec_device                   as name,
                                   count(sec_device) as count
                            from base
                            where sd_id is not null
                            group by sec_device),
             actv_plan as (SELECT actv_plan                   as name,
                                  count(actv_plan) as count
                           from base
                           where ct_actv_plan is not null
                           group by actv_plan),
             total as (select count('device') as cnt
                       from base
                       where 'device' is not null
             )

        select name,
               count,
               (
                   IF((select cnt
                       from total) = 0 or count = 0, 0, TRUNCATE(
                              (count / (
                                  select cnt
                                  from total
                              )
                                  ) * 100, 1))
                   ) as per
        from device
        order by per desc
        limit 5
 {executed in 2 msec}
2025-04-17 22:25:46.916 INFO  [http-nio-11040-exec-5] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/sale/graph/ratio/select/0
2025-04-17 22:25:46.917 INFO  [http-nio-11040-exec-5] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDg5NTU5NiwiZXhwIjoxNzQ0ODk2MTk2LCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.rHdmauJIT62MXeIPy7ygWZrnBfGj4Ef-1GveY_MCeSY
2025-04-17 22:25:46.917 INFO  [http-nio-11040-exec-5] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/sale/graph/ratio/select/0
2025-04-17 22:25:46.918 INFO  [http-nio-11040-exec-5] [com.momo.provider.JwtProvider] - Expired JWT Token
io.jsonwebtoken.ExpiredJwtException: JWT expired at 2025-04-17T13:23:16Z. Current time: 2025-04-17T13:25:46Z, a difference of 150918 milliseconds.  Allowed clock skew: 0 milliseconds.
	at io.jsonwebtoken.impl.DefaultJwtParser.parse(DefaultJwtParser.java:427)
	at io.jsonwebtoken.impl.DefaultJwtParser.parse(DefaultJwtParser.java:529)
	at io.jsonwebtoken.impl.DefaultJwtParser.parseClaimsJws(DefaultJwtParser.java:589)
	at io.jsonwebtoken.impl.ImmutableJwtParser.parseClaimsJws(ImmutableJwtParser.java:173)
	at com.momo.provider.JwtProvider.validateToken(JwtProvider.java:145)
	at com.momo.filter.JwtAuthorizationFilter.doFilterInternal(JwtAuthorizationFilter.java:38)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:195)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:225)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:340)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:840)
2025-04-17 22:25:46.918 INFO  [http-nio-11040-exec-5] [com.momo.filter.JwtAuthorizationFilter] - 유효한 JWT 토큰이 없습니다
2025-04-17 22:25:46.924 DEBUG [http-nio-11040-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
11. with recursive istm_range as (
            select 0 as i
            union all
            select i+1
            from istm_range
            where i<5
        ), base as (
            select ct_istm
            from tb_sale
            where shop_id=2 and

                        seller_id='km1104rs' and

                actv_dt between '2025-04-01' and '2025-04-30'
        ), final as (
            select i as istm,
                   IFNULL(count(base.ct_istm),0) as cnt
            from istm_range
                     left outer join base on base.ct_istm=istm_range.i
            group by i
            order by istm desc
        )

        select json_arrayagg(istm) as type,
               json_arrayagg(cnt) as cnt,
               json_arrayagg(IF((
                      select IFNULL(count(ct_istm), 0)
                      from base
                  ) = 0 or cnt = 0, 0, TRUNCATE((cnt/(
                   select IFNULL(count(ct_istm), 0)
                   from base
               )) * 100, 1))) as per
        from final
 {executed in 2 msec}
2025-04-17 22:25:49.447 INFO  [http-nio-11040-exec-9] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/notif/count/unread
2025-04-17 22:25:49.447 INFO  [http-nio-11040-exec-9] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDg5NTU5NiwiZXhwIjoxNzQ0ODk2MTk2LCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.rHdmauJIT62MXeIPy7ygWZrnBfGj4Ef-1GveY_MCeSY
2025-04-17 22:25:49.447 INFO  [http-nio-11040-exec-9] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/notif/count/unread
2025-04-17 22:25:49.448 INFO  [http-nio-11040-exec-9] [com.momo.provider.JwtProvider] - Expired JWT Token
io.jsonwebtoken.ExpiredJwtException: JWT expired at 2025-04-17T13:23:16Z. Current time: 2025-04-17T13:25:49Z, a difference of 153448 milliseconds.  Allowed clock skew: 0 milliseconds.
	at io.jsonwebtoken.impl.DefaultJwtParser.parse(DefaultJwtParser.java:427)
	at io.jsonwebtoken.impl.DefaultJwtParser.parse(DefaultJwtParser.java:529)
	at io.jsonwebtoken.impl.DefaultJwtParser.parseClaimsJws(DefaultJwtParser.java:589)
	at io.jsonwebtoken.impl.ImmutableJwtParser.parseClaimsJws(ImmutableJwtParser.java:173)
	at com.momo.provider.JwtProvider.validateToken(JwtProvider.java:145)
	at com.momo.filter.JwtAuthorizationFilter.doFilterInternal(JwtAuthorizationFilter.java:38)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:195)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:225)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:340)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:840)
2025-04-17 22:25:49.448 INFO  [http-nio-11040-exec-9] [com.momo.filter.JwtAuthorizationFilter] - 유효한 JWT 토큰이 없습니다
2025-04-17 22:25:49.449 INFO  [http-nio-11040-exec-9] [c.momo.common.util.SecurityContextUtil] - principal: UserDetailsImpl(username=km1104rs, password=$2a$10$uXShhwl6ULOkbJe477uDWOfdiUUcu6lOSF/Dhj9xP3U1nUn/gXkc6, authorities=[ROLE_NONE])
2025-04-17 22:25:49.451 DEBUG [http-nio-11040-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
11. SELECT count(*)
        FROM tb_notification
        WHERE receiver_id = 'km1104rs'
          AND read_st = FALSE
 {executed in 1 msec}
2025-04-17 22:25:50.512 INFO  [http-nio-11040-exec-2] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/notif/count/unread
2025-04-17 22:25:50.512 INFO  [http-nio-11040-exec-2] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDg5NTU5NiwiZXhwIjoxNzQ0ODk2MTk2LCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.rHdmauJIT62MXeIPy7ygWZrnBfGj4Ef-1GveY_MCeSY
2025-04-17 22:25:50.512 INFO  [http-nio-11040-exec-2] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/notif/count/unread
2025-04-17 22:25:50.513 INFO  [http-nio-11040-exec-2] [com.momo.provider.JwtProvider] - Expired JWT Token
io.jsonwebtoken.ExpiredJwtException: JWT expired at 2025-04-17T13:23:16Z. Current time: 2025-04-17T13:25:50Z, a difference of 154513 milliseconds.  Allowed clock skew: 0 milliseconds.
	at io.jsonwebtoken.impl.DefaultJwtParser.parse(DefaultJwtParser.java:427)
	at io.jsonwebtoken.impl.DefaultJwtParser.parse(DefaultJwtParser.java:529)
	at io.jsonwebtoken.impl.DefaultJwtParser.parseClaimsJws(DefaultJwtParser.java:589)
	at io.jsonwebtoken.impl.ImmutableJwtParser.parseClaimsJws(ImmutableJwtParser.java:173)
	at com.momo.provider.JwtProvider.validateToken(JwtProvider.java:145)
	at com.momo.filter.JwtAuthorizationFilter.doFilterInternal(JwtAuthorizationFilter.java:38)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:195)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:225)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:340)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:840)
2025-04-17 22:25:50.514 INFO  [http-nio-11040-exec-2] [com.momo.filter.JwtAuthorizationFilter] - 유효한 JWT 토큰이 없습니다
2025-04-17 22:25:50.514 INFO  [http-nio-11040-exec-2] [c.momo.common.util.SecurityContextUtil] - principal: UserDetailsImpl(username=km1104rs, password=$2a$10$uXShhwl6ULOkbJe477uDWOfdiUUcu6lOSF/Dhj9xP3U1nUn/gXkc6, authorities=[ROLE_NONE])
2025-04-17 22:25:50.516 DEBUG [http-nio-11040-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
11. SELECT count(*)
        FROM tb_notification
        WHERE receiver_id = 'km1104rs'
          AND read_st = FALSE
 {executed in 1 msec}
2025-04-17 22:25:50.582 INFO  [http-nio-11040-exec-7] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/sale/graph/ct/select/0
2025-04-17 22:25:50.582 INFO  [http-nio-11040-exec-7] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDg5NTU5NiwiZXhwIjoxNzQ0ODk2MTk2LCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.rHdmauJIT62MXeIPy7ygWZrnBfGj4Ef-1GveY_MCeSY
2025-04-17 22:25:50.582 INFO  [http-nio-11040-exec-7] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/sale/graph/ct/select/0
2025-04-17 22:25:50.583 INFO  [http-nio-11040-exec-7] [com.momo.provider.JwtProvider] - Expired JWT Token
io.jsonwebtoken.ExpiredJwtException: JWT expired at 2025-04-17T13:23:16Z. Current time: 2025-04-17T13:25:50Z, a difference of 154583 milliseconds.  Allowed clock skew: 0 milliseconds.
	at io.jsonwebtoken.impl.DefaultJwtParser.parse(DefaultJwtParser.java:427)
	at io.jsonwebtoken.impl.DefaultJwtParser.parse(DefaultJwtParser.java:529)
	at io.jsonwebtoken.impl.DefaultJwtParser.parseClaimsJws(DefaultJwtParser.java:589)
	at io.jsonwebtoken.impl.ImmutableJwtParser.parseClaimsJws(ImmutableJwtParser.java:173)
	at com.momo.provider.JwtProvider.validateToken(JwtProvider.java:145)
	at com.momo.filter.JwtAuthorizationFilter.doFilterInternal(JwtAuthorizationFilter.java:38)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:195)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:225)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:340)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:840)
2025-04-17 22:25:50.584 INFO  [http-nio-11040-exec-7] [com.momo.filter.JwtAuthorizationFilter] - 유효한 JWT 토큰이 없습니다
2025-04-17 22:25:50.588 DEBUG [http-nio-11040-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
11. with recursive group_generation as (
            select 0 as g
            union all
            select g+1
            from group_generation
            where g < 8
        ), group_weekday as (
            select 0 as g
            union all
            select g+1
            from group_weekday
            where g < 6
        ),  sale as (
            select weekday(actv_dt) as days,
                   device_id,
                   cust_cd,
                   sale_id
            from tb_sale
            where shop_id=2 and

                      seller_id='km1104rs' and

                device_id is not null and
                actv_dt between '2025-01-01' and '2025-01-31'
        ), sale_gene as (
            select sale_id,
                   (
                       case
                           when length(cust_cd) = 6 then floor((year(curdate()) - concat((
                                 case
                                     when substring(cust_cd, 1,2) > '44' then '19'
                                     when substring(cust_cd, 1,2) <= '44' then '20'
                                     end
                                 ),substring(cust_cd,1,2))) / 10)
                           when length(cust_cd) != 6 then null
                           end
                       ) as generation
            from sale
        ), generation as (
            select g,
                   device_id
            from group_generation g
                     left outer join sale_gene sg on g.g=sg.generation
                     left outer join sale s on s.sale_id=sg.sale_id
        ), weekdays as (
            select g,
                   device_id
            from group_weekday w
                     left outer join sale s on s.days=w.g
        )

        select IFNULL(count(device_id),0) as avg
        from generation
        group by g
 {executed in 1 msec}
2025-04-17 22:25:50.636 INFO  [http-nio-11040-exec-10] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/sale/graph/stat/select/0
2025-04-17 22:25:50.636 INFO  [http-nio-11040-exec-10] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDg5NTU5NiwiZXhwIjoxNzQ0ODk2MTk2LCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.rHdmauJIT62MXeIPy7ygWZrnBfGj4Ef-1GveY_MCeSY
2025-04-17 22:25:50.636 INFO  [http-nio-11040-exec-10] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/sale/graph/stat/select/0
2025-04-17 22:25:50.637 INFO  [http-nio-11040-exec-10] [com.momo.provider.JwtProvider] - Expired JWT Token
io.jsonwebtoken.ExpiredJwtException: JWT expired at 2025-04-17T13:23:16Z. Current time: 2025-04-17T13:25:50Z, a difference of 154637 milliseconds.  Allowed clock skew: 0 milliseconds.
	at io.jsonwebtoken.impl.DefaultJwtParser.parse(DefaultJwtParser.java:427)
	at io.jsonwebtoken.impl.DefaultJwtParser.parse(DefaultJwtParser.java:529)
	at io.jsonwebtoken.impl.DefaultJwtParser.parseClaimsJws(DefaultJwtParser.java:589)
	at io.jsonwebtoken.impl.ImmutableJwtParser.parseClaimsJws(ImmutableJwtParser.java:173)
	at com.momo.provider.JwtProvider.validateToken(JwtProvider.java:145)
	at com.momo.filter.JwtAuthorizationFilter.doFilterInternal(JwtAuthorizationFilter.java:38)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:195)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:225)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:340)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:840)
2025-04-17 22:25:50.638 INFO  [http-nio-11040-exec-10] [com.momo.filter.JwtAuthorizationFilter] - 유효한 JWT 토큰이 없습니다
2025-04-17 22:25:50.643 DEBUG [http-nio-11040-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
11. with base as (select device_id,
                             (SELECT device_nm
                              FROM tb_device
                              WHERE tb_device.device_id = sl.device_id)      as device,
                             sd_id,
                             (SELECT sd_nm
                              FROM tb_second_device
                              WHERE tb_second_device.sd_id = sl.sd_id)       as sec_device,
                             ct_actv_plan,
                             (SELECT ct_plan_nm
                              FROM tb_ct_plan
                              WHERE tb_ct_plan.ct_plan_id = sl.ct_actv_plan) as actv_plan
                      from tb_sale sl
                      where shop_id = 2 and

                                seller_id='km1104rs' and

                        actv_dt between '2025-01-01' and '2025-01-31'),
             device as (SELECT device                   as name,
                               count(device_id) as count
                        from base
                        where device_id is not null
                        group by device),
             sec_device as (SELECT sec_device                   as name,
                                   count(sec_device) as count
                            from base
                            where sd_id is not null
                            group by sec_device),
             actv_plan as (SELECT actv_plan                   as name,
                                  count(actv_plan) as count
                           from base
                           where ct_actv_plan is not null
                           group by actv_plan),
             total as (select count('device') as cnt
                       from base
                       where 'device' is not null
             )

        select name,
               count,
               (
                   IF((select cnt
                       from total) = 0 or count = 0, 0, TRUNCATE(
                              (count / (
                                  select cnt
                                  from total
                              )
                                  ) * 100, 1))
                   ) as per
        from device
        order by per desc
        limit 5
 {executed in 2 msec}
2025-04-17 22:25:50.694 INFO  [http-nio-11040-exec-6] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/sale/graph/ratio/select/0
2025-04-17 22:25:50.694 INFO  [http-nio-11040-exec-6] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDg5NTU5NiwiZXhwIjoxNzQ0ODk2MTk2LCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.rHdmauJIT62MXeIPy7ygWZrnBfGj4Ef-1GveY_MCeSY
2025-04-17 22:25:50.694 INFO  [http-nio-11040-exec-6] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/sale/graph/ratio/select/0
2025-04-17 22:25:50.695 INFO  [http-nio-11040-exec-6] [com.momo.provider.JwtProvider] - Expired JWT Token
io.jsonwebtoken.ExpiredJwtException: JWT expired at 2025-04-17T13:23:16Z. Current time: 2025-04-17T13:25:50Z, a difference of 154695 milliseconds.  Allowed clock skew: 0 milliseconds.
	at io.jsonwebtoken.impl.DefaultJwtParser.parse(DefaultJwtParser.java:427)
	at io.jsonwebtoken.impl.DefaultJwtParser.parse(DefaultJwtParser.java:529)
	at io.jsonwebtoken.impl.DefaultJwtParser.parseClaimsJws(DefaultJwtParser.java:589)
	at io.jsonwebtoken.impl.ImmutableJwtParser.parseClaimsJws(ImmutableJwtParser.java:173)
	at com.momo.provider.JwtProvider.validateToken(JwtProvider.java:145)
	at com.momo.filter.JwtAuthorizationFilter.doFilterInternal(JwtAuthorizationFilter.java:38)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:195)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:225)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:340)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:840)
2025-04-17 22:25:50.696 INFO  [http-nio-11040-exec-6] [com.momo.filter.JwtAuthorizationFilter] - 유효한 JWT 토큰이 없습니다
2025-04-17 22:25:50.701 DEBUG [http-nio-11040-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
11. with recursive istm_range as (
            select 0 as i
            union all
            select i+1
            from istm_range
            where i<5
        ), base as (
            select ct_istm
            from tb_sale
            where shop_id=2 and

                        seller_id='km1104rs' and

                actv_dt between '2025-01-01' and '2025-01-31'
        ), final as (
            select i as istm,
                   IFNULL(count(base.ct_istm),0) as cnt
            from istm_range
                     left outer join base on base.ct_istm=istm_range.i
            group by i
            order by istm desc
        )

        select json_arrayagg(istm) as type,
               json_arrayagg(cnt) as cnt,
               json_arrayagg(IF((
                      select IFNULL(count(ct_istm), 0)
                      from base
                  ) = 0 or cnt = 0, 0, TRUNCATE((cnt/(
                   select IFNULL(count(ct_istm), 0)
                   from base
               )) * 100, 1))) as per
        from final
 {executed in 2 msec}
2025-04-17 22:25:50.748 INFO  [http-nio-11040-exec-1] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/sale/graph/summary
2025-04-17 22:25:50.748 INFO  [http-nio-11040-exec-1] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDg5NTU5NiwiZXhwIjoxNzQ0ODk2MTk2LCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.rHdmauJIT62MXeIPy7ygWZrnBfGj4Ef-1GveY_MCeSY
2025-04-17 22:25:50.748 INFO  [http-nio-11040-exec-1] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/sale/graph/summary
2025-04-17 22:25:50.749 INFO  [http-nio-11040-exec-1] [com.momo.provider.JwtProvider] - Expired JWT Token
io.jsonwebtoken.ExpiredJwtException: JWT expired at 2025-04-17T13:23:16Z. Current time: 2025-04-17T13:25:50Z, a difference of 154749 milliseconds.  Allowed clock skew: 0 milliseconds.
	at io.jsonwebtoken.impl.DefaultJwtParser.parse(DefaultJwtParser.java:427)
	at io.jsonwebtoken.impl.DefaultJwtParser.parse(DefaultJwtParser.java:529)
	at io.jsonwebtoken.impl.DefaultJwtParser.parseClaimsJws(DefaultJwtParser.java:589)
	at io.jsonwebtoken.impl.ImmutableJwtParser.parseClaimsJws(ImmutableJwtParser.java:173)
	at com.momo.provider.JwtProvider.validateToken(JwtProvider.java:145)
	at com.momo.filter.JwtAuthorizationFilter.doFilterInternal(JwtAuthorizationFilter.java:38)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:195)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:225)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:340)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:840)
2025-04-17 22:25:50.749 INFO  [http-nio-11040-exec-1] [com.momo.filter.JwtAuthorizationFilter] - 유효한 JWT 토큰이 없습니다
2025-04-17 22:25:50.750 INFO  [http-nio-11040-exec-1] [com.momo.api.SaleController] - summary: CommonVO(provider=null, date=null, year=null, month=null, day=null, selectType=null, range=null, dateType=null, prevFromYmd=null, prevToYmd=null, currFromYmd=null, currToYmd=null, fromYmd=2024-07-01, toYmd=2025-01-01, fromYm=null, toYm=null, prevDate=null, currDate=null)
2025-04-17 22:25:50.763 DEBUG [http-nio-11040-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
11. #         월별 날짜 구하기
        with recursive month_range as (
            select '2024-07-01' as d
            union all
            select date_add(d, interval 1 month) as d
            from month_range
            where date_add(d, interval 1 month) < '2025-01-01'
        ), months as(
            select month(d) as m
            from month_range
        ), filtered_sale as ( # 판매일보 초벌
            select month(actv_dt) as actv_month,
                   device_id,
                   internet_plan,
                   tv_plan,
                    exsvc_id,
                   total_cms,
                   wt_cms,
                   sale_id,
                   sd_id,
                    shop_id
            from tb_sale
            where shop_id=2 and

                    seller_id='km1104rs' and

                actv_dt between '2024-07-01' and date_add('2025-01-01', interval 1 month)
        ), ct_graph as ( # 무선 그래프 데이터
            SELECT m,
                   count(device_id) as cnt
            FROM months
                     LEFT OUTER JOIN filtered_sale on actv_month = m and
                                                      device_id is not null
            group by m
        ), internet_graph as ( # 인터넷 그래프 데이터
            SELECT m,
                   count(internet_plan) as cnt
            FROM months
                     LEFT OUTER JOIN filtered_sale on actv_month = m  and
                                                      internet_plan is not null
            group by m
        ), tv_graph as ( # TV 그래프 데이터
            SELECT m,
                   count(tv_plan) as cnt
            FROM months
                     LEFT OUTER JOIN filtered_sale on actv_month = m  and
                                                      tv_plan is not null
            group by m
        ), card as ( # 카드 데이터
            SELECT m,
                   (
                    select count(*)
                    from tb_sale_card sc
                    left outer join filtered_sale fs on fs.shop_id = sc.shop_id and
                                                        fs.sale_id = sc.sale_id
                   )  as cnt
            FROM months
                     LEFT OUTER JOIN filtered_sale on actv_month = m
            group by m
        ), exsvc as ( # 부가서비스 데이터
            SELECT m,
                   count(exsvc_id) as cnt
            FROM months
                     LEFT OUTER JOIN filtered_sale on actv_month = m  and
                                                      exsvc_id is not null
            group by m
        ), tc_graph as ( # 총 이익 그래프 데이터
            SELECT m,
                   IFNULL(sum(total_cms), 0) as cnt
            FROM months
                     LEFT OUTER JOIN filtered_sale on actv_month = m
            group by m
        ), avg_margin_graph as ( # 개인 평균 마진 그래프 데이터
            SELECT m,
                   IFNULL(avg(total_cms), 0) as cnt
            FROM months
                     LEFT OUTER JOIN filtered_sale on actv_month = m and
                                                      device_id is not null
            group by m
        ), ud_graph as ( # 중고 개통 그래프 데이터
            SELECT m,
                   count(ud_id) as cnt
            FROM months
                     LEFT OUTER JOIN filtered_sale on actv_month = m
                     LEFT OUTER JOIN tb_sale_used_device sud on sud.sale_id=filtered_sale.sale_id
            group by m
        ), sec_graph as ( # 세컨 그래프 데이터
            SELECT m,
                   count(sd_id) as cnt
            FROM months
                     LEFT OUTER JOIN filtered_sale on actv_month = m and
                                                      sd_id != 0
            group by m
        ), diff_ct as (
            select
                (
                    select cnt
                    from ct_graph
                    limit 4, 1
                ) as prv,
                (
                    select cnt
                    from ct_graph
                    limit 5,1
                ) as curr
            from dual
        ), diff_internet as (
            select
                (
                    select cnt
                    from internet_graph
                    limit 4,1
                ) as prv,
                (
                    select cnt
                    from internet_graph
                    limit 5,1
                ) as curr
            from dual
        ), diff_tv as (
            select
                (
                    select cnt
                    from tv_graph
                    limit 4,1
                ) as prv,
                (
                    select cnt
                    from tv_graph
                    limit 5,1
                ) as curr
            from dual
        ), diff_card as (
            select
                (
                    select cnt
                    from card
                    limit 4,1
                ) as prv,
                (
                    select cnt
                    from card
                    limit 5,1
                ) as curr
            from dual
        ), diff_exsvc as (
            select
                (
                    select cnt
                    from exsvc
                    limit 4,1
                ) as prv,
                (
                    select cnt
                    from exsvc
                    limit 5,1
                ) as curr
            from dual
        ), diff_tc as (
            select
                (
                    select cnt
                    from tc_graph
                    limit 4,1
                ) as prv,
                (
                    select cnt
                    from tc_graph
                    limit 5,1
                ) as curr
            from dual
        ) , diff_margin as (
            select
                (
                    select cnt
                    from avg_margin_graph
                    limit 4,1
                ) as prv,
                (
                    select cnt
                    from avg_margin_graph
                    limit 5,1
                ) as curr
            from dual
        ), diff_ud as (
            select
                (
                    select cnt
                    from ud_graph
                    limit 4,1
                ) as prv,
                (
                    select cnt
                    from ud_graph
                    limit 5,1
                ) as curr
            from dual
        ) , diff_sec as (
            select
                (
                    select cnt
                    from sec_graph
                    limit 4,1
                ) as prv,
                (
                    select cnt
                    from sec_graph
                    limit 5,1
                ) as curr
            from dual
        ), final as (
            select
                curr,
                prv,
                (
                    select json_arrayagg(cnt)
                    from ct_graph
                ) as list
            from diff_ct
            union all
            select
                curr,
                prv,
                (
                    select json_arrayagg(cnt)
                    from internet_graph
                ) as list
            from diff_internet
            union all
            select
                curr,
                prv,
                (
                    select json_arrayagg(cnt)
                    from tv_graph
                ) as list
            from diff_tv
             union all
            select
                curr,
                prv,
                (
                    select json_arrayagg(cnt)
                    from card
                ) as list
            from diff_card
             union all
            select
                curr,
                prv,
                (
                    select json_arrayagg(cnt)
                    from exsvc
                ) as list
            from diff_exsvc
            union all
            select
                curr,
                prv,
                (
                    select json_arrayagg(cnt)
                    from tc_graph
                ) as list
            from diff_tc
            union all
            select
                curr,
                prv,
                (
                    select json_arrayagg(cnt)
                    from avg_margin_graph
                ) as list
            from diff_margin
            union all
            select
                curr,
                prv,
                (
                    select json_arrayagg(cnt)
                    from ud_graph
                ) as list
            from diff_ud
            union all
            select
                curr,
                prv,
                (
                    select json_arrayagg(cnt)
                    from sec_graph
                ) as list
            from diff_sec
        )

        select FLOOR(curr) as value,
               (
                   CASE
                       WHEN curr = 0 and prv = 0 THEN 0
                       WHEN prv != 0 and curr = 0 THEN -100
                       WHEN prv = 0 and curr != 0 THEN 100
                       WHEN curr != 0 and prv != 0 THEN TRUNCATE(((curr/prv)-1)*100, 1)
                       END
                   ) as per,
               list
        from final
 {executed in 10 msec}
2025-04-17 22:25:50.809 INFO  [http-nio-11040-exec-3] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/notif/count/unread
2025-04-17 22:25:50.809 INFO  [http-nio-11040-exec-3] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDg5NTU5NiwiZXhwIjoxNzQ0ODk2MTk2LCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.rHdmauJIT62MXeIPy7ygWZrnBfGj4Ef-1GveY_MCeSY
2025-04-17 22:25:50.809 INFO  [http-nio-11040-exec-3] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/notif/count/unread
2025-04-17 22:25:50.810 INFO  [http-nio-11040-exec-3] [com.momo.provider.JwtProvider] - Expired JWT Token
io.jsonwebtoken.ExpiredJwtException: JWT expired at 2025-04-17T13:23:16Z. Current time: 2025-04-17T13:25:50Z, a difference of 154810 milliseconds.  Allowed clock skew: 0 milliseconds.
	at io.jsonwebtoken.impl.DefaultJwtParser.parse(DefaultJwtParser.java:427)
	at io.jsonwebtoken.impl.DefaultJwtParser.parse(DefaultJwtParser.java:529)
	at io.jsonwebtoken.impl.DefaultJwtParser.parseClaimsJws(DefaultJwtParser.java:589)
	at io.jsonwebtoken.impl.ImmutableJwtParser.parseClaimsJws(ImmutableJwtParser.java:173)
	at com.momo.provider.JwtProvider.validateToken(JwtProvider.java:145)
	at com.momo.filter.JwtAuthorizationFilter.doFilterInternal(JwtAuthorizationFilter.java:38)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:195)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:225)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:340)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:840)
2025-04-17 22:25:50.810 INFO  [http-nio-11040-exec-3] [com.momo.filter.JwtAuthorizationFilter] - 유효한 JWT 토큰이 없습니다
2025-04-17 22:25:50.829 INFO  [http-nio-11040-exec-3] [c.momo.common.util.SecurityContextUtil] - principal: UserDetailsImpl(username=km1104rs, password=$2a$10$uXShhwl6ULOkbJe477uDWOfdiUUcu6lOSF/Dhj9xP3U1nUn/gXkc6, authorities=[ROLE_NONE])
2025-04-17 22:25:50.834 DEBUG [http-nio-11040-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
11. SELECT count(*)
        FROM tb_notification
        WHERE receiver_id = 'km1104rs'
          AND read_st = FALSE
 {executed in 2 msec}
2025-04-17 22:25:50.890 INFO  [http-nio-11040-exec-8] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/sale/graph/ct/select/0
2025-04-17 22:25:50.890 INFO  [http-nio-11040-exec-8] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDg5NTU5NiwiZXhwIjoxNzQ0ODk2MTk2LCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.rHdmauJIT62MXeIPy7ygWZrnBfGj4Ef-1GveY_MCeSY
2025-04-17 22:25:50.890 INFO  [http-nio-11040-exec-8] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/sale/graph/ct/select/0
2025-04-17 22:25:50.891 INFO  [http-nio-11040-exec-8] [com.momo.provider.JwtProvider] - Expired JWT Token
io.jsonwebtoken.ExpiredJwtException: JWT expired at 2025-04-17T13:23:16Z. Current time: 2025-04-17T13:25:50Z, a difference of 154891 milliseconds.  Allowed clock skew: 0 milliseconds.
	at io.jsonwebtoken.impl.DefaultJwtParser.parse(DefaultJwtParser.java:427)
	at io.jsonwebtoken.impl.DefaultJwtParser.parse(DefaultJwtParser.java:529)
	at io.jsonwebtoken.impl.DefaultJwtParser.parseClaimsJws(DefaultJwtParser.java:589)
	at io.jsonwebtoken.impl.ImmutableJwtParser.parseClaimsJws(ImmutableJwtParser.java:173)
	at com.momo.provider.JwtProvider.validateToken(JwtProvider.java:145)
	at com.momo.filter.JwtAuthorizationFilter.doFilterInternal(JwtAuthorizationFilter.java:38)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:195)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:225)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:340)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:840)
2025-04-17 22:25:50.891 INFO  [http-nio-11040-exec-8] [com.momo.filter.JwtAuthorizationFilter] - 유효한 JWT 토큰이 없습니다
2025-04-17 22:25:50.894 DEBUG [http-nio-11040-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
11. with recursive group_generation as (
            select 0 as g
            union all
            select g+1
            from group_generation
            where g < 8
        ), group_weekday as (
            select 0 as g
            union all
            select g+1
            from group_weekday
            where g < 6
        ),  sale as (
            select weekday(actv_dt) as days,
                   device_id,
                   cust_cd,
                   sale_id
            from tb_sale
            where shop_id=2 and

                      seller_id='km1104rs' and

                device_id is not null and
                actv_dt between '2025-01-01' and '2025-01-31'
        ), sale_gene as (
            select sale_id,
                   (
                       case
                           when length(cust_cd) = 6 then floor((year(curdate()) - concat((
                                 case
                                     when substring(cust_cd, 1,2) > '44' then '19'
                                     when substring(cust_cd, 1,2) <= '44' then '20'
                                     end
                                 ),substring(cust_cd,1,2))) / 10)
                           when length(cust_cd) != 6 then null
                           end
                       ) as generation
            from sale
        ), generation as (
            select g,
                   device_id
            from group_generation g
                     left outer join sale_gene sg on g.g=sg.generation
                     left outer join sale s on s.sale_id=sg.sale_id
        ), weekdays as (
            select g,
                   device_id
            from group_weekday w
                     left outer join sale s on s.days=w.g
        )

        select IFNULL(count(device_id),0) as avg
        from generation
        group by g
 {executed in 1 msec}
2025-04-17 22:25:50.946 INFO  [http-nio-11040-exec-4] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/sale/graph/stat/select/0
2025-04-17 22:25:50.946 INFO  [http-nio-11040-exec-4] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDg5NTU5NiwiZXhwIjoxNzQ0ODk2MTk2LCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.rHdmauJIT62MXeIPy7ygWZrnBfGj4Ef-1GveY_MCeSY
2025-04-17 22:25:50.946 INFO  [http-nio-11040-exec-4] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/sale/graph/stat/select/0
2025-04-17 22:25:50.946 INFO  [http-nio-11040-exec-4] [com.momo.provider.JwtProvider] - Expired JWT Token
io.jsonwebtoken.ExpiredJwtException: JWT expired at 2025-04-17T13:23:16Z. Current time: 2025-04-17T13:25:50Z, a difference of 154946 milliseconds.  Allowed clock skew: 0 milliseconds.
	at io.jsonwebtoken.impl.DefaultJwtParser.parse(DefaultJwtParser.java:427)
	at io.jsonwebtoken.impl.DefaultJwtParser.parse(DefaultJwtParser.java:529)
	at io.jsonwebtoken.impl.DefaultJwtParser.parseClaimsJws(DefaultJwtParser.java:589)
	at io.jsonwebtoken.impl.ImmutableJwtParser.parseClaimsJws(ImmutableJwtParser.java:173)
	at com.momo.provider.JwtProvider.validateToken(JwtProvider.java:145)
	at com.momo.filter.JwtAuthorizationFilter.doFilterInternal(JwtAuthorizationFilter.java:38)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:195)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:225)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:340)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:840)
2025-04-17 22:25:50.946 INFO  [http-nio-11040-exec-4] [com.momo.filter.JwtAuthorizationFilter] - 유효한 JWT 토큰이 없습니다
2025-04-17 22:25:50.949 DEBUG [http-nio-11040-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
11. with base as (select device_id,
                             (SELECT device_nm
                              FROM tb_device
                              WHERE tb_device.device_id = sl.device_id)      as device,
                             sd_id,
                             (SELECT sd_nm
                              FROM tb_second_device
                              WHERE tb_second_device.sd_id = sl.sd_id)       as sec_device,
                             ct_actv_plan,
                             (SELECT ct_plan_nm
                              FROM tb_ct_plan
                              WHERE tb_ct_plan.ct_plan_id = sl.ct_actv_plan) as actv_plan
                      from tb_sale sl
                      where shop_id = 2 and

                                seller_id='km1104rs' and

                        actv_dt between '2025-01-01' and '2025-01-31'),
             device as (SELECT device                   as name,
                               count(device_id) as count
                        from base
                        where device_id is not null
                        group by device),
             sec_device as (SELECT sec_device                   as name,
                                   count(sec_device) as count
                            from base
                            where sd_id is not null
                            group by sec_device),
             actv_plan as (SELECT actv_plan                   as name,
                                  count(actv_plan) as count
                           from base
                           where ct_actv_plan is not null
                           group by actv_plan),
             total as (select count('device') as cnt
                       from base
                       where 'device' is not null
             )

        select name,
               count,
               (
                   IF((select cnt
                       from total) = 0 or count = 0, 0, TRUNCATE(
                              (count / (
                                  select cnt
                                  from total
                              )
                                  ) * 100, 1))
                   ) as per
        from device
        order by per desc
        limit 5
 {executed in 1 msec}
2025-04-17 22:25:51.014 INFO  [http-nio-11040-exec-5] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/sale/graph/ratio/select/0
2025-04-17 22:25:51.014 INFO  [http-nio-11040-exec-5] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDg5NTU5NiwiZXhwIjoxNzQ0ODk2MTk2LCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.rHdmauJIT62MXeIPy7ygWZrnBfGj4Ef-1GveY_MCeSY
2025-04-17 22:25:51.014 INFO  [http-nio-11040-exec-5] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/sale/graph/ratio/select/0
2025-04-17 22:25:51.014 INFO  [http-nio-11040-exec-5] [com.momo.provider.JwtProvider] - Expired JWT Token
io.jsonwebtoken.ExpiredJwtException: JWT expired at 2025-04-17T13:23:16Z. Current time: 2025-04-17T13:25:51Z, a difference of 155014 milliseconds.  Allowed clock skew: 0 milliseconds.
	at io.jsonwebtoken.impl.DefaultJwtParser.parse(DefaultJwtParser.java:427)
	at io.jsonwebtoken.impl.DefaultJwtParser.parse(DefaultJwtParser.java:529)
	at io.jsonwebtoken.impl.DefaultJwtParser.parseClaimsJws(DefaultJwtParser.java:589)
	at io.jsonwebtoken.impl.ImmutableJwtParser.parseClaimsJws(ImmutableJwtParser.java:173)
	at com.momo.provider.JwtProvider.validateToken(JwtProvider.java:145)
	at com.momo.filter.JwtAuthorizationFilter.doFilterInternal(JwtAuthorizationFilter.java:38)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:195)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:225)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:340)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:840)
2025-04-17 22:25:51.015 INFO  [http-nio-11040-exec-5] [com.momo.filter.JwtAuthorizationFilter] - 유효한 JWT 토큰이 없습니다
2025-04-17 22:25:51.017 DEBUG [http-nio-11040-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
11. with recursive istm_range as (
            select 0 as i
            union all
            select i+1
            from istm_range
            where i<5
        ), base as (
            select ct_istm
            from tb_sale
            where shop_id=2 and

                        seller_id='km1104rs' and

                actv_dt between '2025-01-01' and '2025-01-31'
        ), final as (
            select i as istm,
                   IFNULL(count(base.ct_istm),0) as cnt
            from istm_range
                     left outer join base on base.ct_istm=istm_range.i
            group by i
            order by istm desc
        )

        select json_arrayagg(istm) as type,
               json_arrayagg(cnt) as cnt,
               json_arrayagg(IF((
                      select IFNULL(count(ct_istm), 0)
                      from base
                  ) = 0 or cnt = 0, 0, TRUNCATE((cnt/(
                   select IFNULL(count(ct_istm), 0)
                   from base
               )) * 100, 1))) as per
        from final
 {executed in 1 msec}
2025-04-17 22:26:56.120 INFO  [http-nio-11040-exec-9] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/sale/graph/ratio/select/0
2025-04-17 22:26:56.121 INFO  [http-nio-11040-exec-9] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDg5NTU5NiwiZXhwIjoxNzQ0ODk2MTk2LCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.rHdmauJIT62MXeIPy7ygWZrnBfGj4Ef-1GveY_MCeSY
2025-04-17 22:26:56.121 INFO  [http-nio-11040-exec-9] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/sale/graph/ratio/select/0
2025-04-17 22:26:56.123 INFO  [http-nio-11040-exec-9] [com.momo.provider.JwtProvider] - Expired JWT Token
io.jsonwebtoken.ExpiredJwtException: JWT expired at 2025-04-17T13:23:16Z. Current time: 2025-04-17T13:26:56Z, a difference of 220123 milliseconds.  Allowed clock skew: 0 milliseconds.
	at io.jsonwebtoken.impl.DefaultJwtParser.parse(DefaultJwtParser.java:427)
	at io.jsonwebtoken.impl.DefaultJwtParser.parse(DefaultJwtParser.java:529)
	at io.jsonwebtoken.impl.DefaultJwtParser.parseClaimsJws(DefaultJwtParser.java:589)
	at io.jsonwebtoken.impl.ImmutableJwtParser.parseClaimsJws(ImmutableJwtParser.java:173)
	at com.momo.provider.JwtProvider.validateToken(JwtProvider.java:145)
	at com.momo.filter.JwtAuthorizationFilter.doFilterInternal(JwtAuthorizationFilter.java:38)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:195)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:225)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:340)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:840)
2025-04-17 22:26:56.123 INFO  [http-nio-11040-exec-9] [com.momo.filter.JwtAuthorizationFilter] - 유효한 JWT 토큰이 없습니다
2025-04-17 22:26:56.128 DEBUG [http-nio-11040-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
11. with recursive istm_range as (
            select 0 as i
            union all
            select i+1
            from istm_range
            where i<5
        ), base as (
            select ct_istm
            from tb_sale
            where shop_id=2 and

                        seller_id='km1104rs' and

                actv_dt between '2025-01-01' and '2025-01-31'
        ), final as (
            select i as istm,
                   IFNULL(count(base.ct_istm),0) as cnt
            from istm_range
                     left outer join base on base.ct_istm=istm_range.i
            group by i
            order by istm desc
        )

        select json_arrayagg(istm) as type,
               json_arrayagg(cnt) as cnt,
               json_arrayagg(IF((
                      select IFNULL(count(ct_istm), 0)
                      from base
                  ) = 0 or cnt = 0, 0, TRUNCATE((cnt/(
                   select IFNULL(count(ct_istm), 0)
                   from base
               )) * 100, 1))) as per
        from final
 {executed in 2 msec}
2025-04-17 22:27:05.891 INFO  [http-nio-11040-exec-2] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/sale/graph/ratio/select/1
2025-04-17 22:27:05.891 INFO  [http-nio-11040-exec-2] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDg5NTU5NiwiZXhwIjoxNzQ0ODk2MTk2LCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.rHdmauJIT62MXeIPy7ygWZrnBfGj4Ef-1GveY_MCeSY
2025-04-17 22:27:05.891 INFO  [http-nio-11040-exec-2] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/sale/graph/ratio/select/1
2025-04-17 22:27:05.893 INFO  [http-nio-11040-exec-2] [com.momo.provider.JwtProvider] - Expired JWT Token
io.jsonwebtoken.ExpiredJwtException: JWT expired at 2025-04-17T13:23:16Z. Current time: 2025-04-17T13:27:05Z, a difference of 229893 milliseconds.  Allowed clock skew: 0 milliseconds.
	at io.jsonwebtoken.impl.DefaultJwtParser.parse(DefaultJwtParser.java:427)
	at io.jsonwebtoken.impl.DefaultJwtParser.parse(DefaultJwtParser.java:529)
	at io.jsonwebtoken.impl.DefaultJwtParser.parseClaimsJws(DefaultJwtParser.java:589)
	at io.jsonwebtoken.impl.ImmutableJwtParser.parseClaimsJws(ImmutableJwtParser.java:173)
	at com.momo.provider.JwtProvider.validateToken(JwtProvider.java:145)
	at com.momo.filter.JwtAuthorizationFilter.doFilterInternal(JwtAuthorizationFilter.java:38)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:195)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:225)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:340)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:840)
2025-04-17 22:27:05.894 INFO  [http-nio-11040-exec-2] [com.momo.filter.JwtAuthorizationFilter] - 유효한 JWT 토큰이 없습니다
2025-04-17 22:27:05.900 DEBUG [http-nio-11040-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
11. with recursive maker_range as (
            select 0 as i
            union all
            select i+1
            from maker_range
            where i<2
        ), base as (
            select dc.maker
            from tb_sale sl
            left outer join tb_device dc on sl.device_id=dc.device_id
            where shop_id=2 and

            seller_id='km1104rs' and

                actv_dt between '2025-01-01' and '2025-01-31'
        ), final as (
            select i as maker,
                   IFNULL(count(base.maker),0) as cnt
            from maker_range
                     left outer join base on base.maker=maker_range.i
            group by i
            order by maker asc
        )

        select json_arrayagg(maker) as type,
               json_arrayagg(cnt) as cnt,
               json_arrayagg(IF((
                      select IFNULL(count(maker), 0)
                      from base
                  ) = 0 or cnt = 0, 0, TRUNCATE((cnt/(
                   select IFNULL(count(maker), 0)
                   from base
               )) * 100, 1))) as per
        from final;
 {executed in 2 msec}
2025-04-17 22:27:06.398 INFO  [http-nio-11040-exec-7] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/sale/graph/ratio/select/0
2025-04-17 22:27:06.398 INFO  [http-nio-11040-exec-7] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDg5NTU5NiwiZXhwIjoxNzQ0ODk2MTk2LCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.rHdmauJIT62MXeIPy7ygWZrnBfGj4Ef-1GveY_MCeSY
2025-04-17 22:27:06.398 INFO  [http-nio-11040-exec-7] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/sale/graph/ratio/select/0
2025-04-17 22:27:06.400 INFO  [http-nio-11040-exec-7] [com.momo.provider.JwtProvider] - Expired JWT Token
io.jsonwebtoken.ExpiredJwtException: JWT expired at 2025-04-17T13:23:16Z. Current time: 2025-04-17T13:27:06Z, a difference of 230400 milliseconds.  Allowed clock skew: 0 milliseconds.
	at io.jsonwebtoken.impl.DefaultJwtParser.parse(DefaultJwtParser.java:427)
	at io.jsonwebtoken.impl.DefaultJwtParser.parse(DefaultJwtParser.java:529)
	at io.jsonwebtoken.impl.DefaultJwtParser.parseClaimsJws(DefaultJwtParser.java:589)
	at io.jsonwebtoken.impl.ImmutableJwtParser.parseClaimsJws(ImmutableJwtParser.java:173)
	at com.momo.provider.JwtProvider.validateToken(JwtProvider.java:145)
	at com.momo.filter.JwtAuthorizationFilter.doFilterInternal(JwtAuthorizationFilter.java:38)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:195)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:225)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:340)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:840)
2025-04-17 22:27:06.401 INFO  [http-nio-11040-exec-7] [com.momo.filter.JwtAuthorizationFilter] - 유효한 JWT 토큰이 없습니다
2025-04-17 22:27:06.406 DEBUG [http-nio-11040-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
11. with recursive istm_range as (
            select 0 as i
            union all
            select i+1
            from istm_range
            where i<5
        ), base as (
            select ct_istm
            from tb_sale
            where shop_id=2 and

                        seller_id='km1104rs' and

                actv_dt between '2025-01-01' and '2025-01-31'
        ), final as (
            select i as istm,
                   IFNULL(count(base.ct_istm),0) as cnt
            from istm_range
                     left outer join base on base.ct_istm=istm_range.i
            group by i
            order by istm desc
        )

        select json_arrayagg(istm) as type,
               json_arrayagg(cnt) as cnt,
               json_arrayagg(IF((
                      select IFNULL(count(ct_istm), 0)
                      from base
                  ) = 0 or cnt = 0, 0, TRUNCATE((cnt/(
                   select IFNULL(count(ct_istm), 0)
                   from base
               )) * 100, 1))) as per
        from final
 {executed in 2 msec}
2025-04-17 22:27:37.058 INFO  [http-nio-11040-exec-10] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/sale/graph/ratio/select/0
2025-04-17 22:27:37.059 INFO  [http-nio-11040-exec-10] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDg5NTU5NiwiZXhwIjoxNzQ0ODk2MTk2LCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.rHdmauJIT62MXeIPy7ygWZrnBfGj4Ef-1GveY_MCeSY
2025-04-17 22:27:37.059 INFO  [http-nio-11040-exec-10] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/sale/graph/ratio/select/0
2025-04-17 22:27:37.064 INFO  [http-nio-11040-exec-10] [com.momo.provider.JwtProvider] - Expired JWT Token
io.jsonwebtoken.ExpiredJwtException: JWT expired at 2025-04-17T13:23:16Z. Current time: 2025-04-17T13:27:37Z, a difference of 261064 milliseconds.  Allowed clock skew: 0 milliseconds.
	at io.jsonwebtoken.impl.DefaultJwtParser.parse(DefaultJwtParser.java:427)
	at io.jsonwebtoken.impl.DefaultJwtParser.parse(DefaultJwtParser.java:529)
	at io.jsonwebtoken.impl.DefaultJwtParser.parseClaimsJws(DefaultJwtParser.java:589)
	at io.jsonwebtoken.impl.ImmutableJwtParser.parseClaimsJws(ImmutableJwtParser.java:173)
	at com.momo.provider.JwtProvider.validateToken(JwtProvider.java:145)
	at com.momo.filter.JwtAuthorizationFilter.doFilterInternal(JwtAuthorizationFilter.java:38)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:195)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:225)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:340)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:840)
2025-04-17 22:27:37.065 INFO  [http-nio-11040-exec-10] [com.momo.filter.JwtAuthorizationFilter] - 유효한 JWT 토큰이 없습니다
2025-04-17 22:27:37.072 DEBUG [http-nio-11040-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
11. with recursive istm_range as (
            select 0 as i
            union all
            select i+1
            from istm_range
            where i<5
        ), base as (
            select ct_istm
            from tb_sale
            where shop_id=2 and

                        seller_id='km1104rs' and

                actv_dt between '2025-01-01' and '2025-01-31'
        ), final as (
            select i as istm,
                   IFNULL(count(base.ct_istm),0) as cnt
            from istm_range
                     left outer join base on base.ct_istm=istm_range.i
            group by i
            order by istm desc
        )

        select json_arrayagg(istm) as type,
               json_arrayagg(cnt) as cnt,
               json_arrayagg(IF((
                      select IFNULL(count(ct_istm), 0)
                      from base
                  ) = 0 or cnt = 0, 0, TRUNCATE((cnt/(
                   select IFNULL(count(ct_istm), 0)
                   from base
               )) * 100, 1))) as per
        from final
 {executed in 2 msec}
2025-04-17 22:27:40.177 INFO  [http-nio-11040-exec-6] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/auth/refresh
2025-04-17 22:27:40.177 INFO  [http-nio-11040-exec-6] [com.momo.filter.JwtAuthorizationFilter] - access token: null
2025-04-17 22:27:40.177 INFO  [http-nio-11040-exec-6] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/auth/refresh
2025-04-17 22:27:40.177 INFO  [http-nio-11040-exec-6] [com.momo.filter.JwtAuthorizationFilter] - 유효한 JWT 토큰이 없습니다
2025-04-17 22:27:40.182 INFO  [http-nio-11040-exec-6] [com.momo.api.AuthController] - refresh
2025-04-17 22:27:40.195 DEBUG [http-nio-11040-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
11. SELECT  *
        FROM    tb_refresh_token
        WHERE   refresh_token='eyJhbGciOiJIUzI1NiJ9.eyJleHAiOjE3NDQ4OTc4NjZ9.kSmR1vpvfQZO8aI4TS_cDu3QOCVvhBkgahzUvCXVn7o'
 {executed in 4 msec}
2025-04-17 22:27:40.200 DEBUG [http-nio-11040-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
11. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 4 msec}
2025-04-17 22:27:40.202 INFO  [http-nio-11040-exec-6] [com.momo.api.AuthController] - jwt: JwtVO(grantType=Bearer , username=km1104rs, accessToken=eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDg5NjQ2MCwiZXhwIjoxNzQ0ODk3MDYwLCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.uVbuNRELM8S426P4ARuDZddYuwDlcWA28qD8L25tWTo, refreshToken=null, expireTime=null, revoked=false, expired=false)
2025-04-17 22:27:40.235 INFO  [http-nio-11040-exec-3] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/notif/read/all
2025-04-17 22:27:40.235 INFO  [http-nio-11040-exec-1] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/notif/all
2025-04-17 22:27:40.235 INFO  [http-nio-11040-exec-3] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDg5NjQ2MCwiZXhwIjoxNzQ0ODk3MDYwLCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.uVbuNRELM8S426P4ARuDZddYuwDlcWA28qD8L25tWTo
2025-04-17 22:27:40.235 INFO  [http-nio-11040-exec-8] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/notif/count/unread
2025-04-17 22:27:40.235 INFO  [http-nio-11040-exec-8] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDg5NjQ2MCwiZXhwIjoxNzQ0ODk3MDYwLCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.uVbuNRELM8S426P4ARuDZddYuwDlcWA28qD8L25tWTo
2025-04-17 22:27:40.235 INFO  [http-nio-11040-exec-4] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/user/info
2025-04-17 22:27:40.235 INFO  [http-nio-11040-exec-8] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/notif/count/unread
2025-04-17 22:27:40.235 INFO  [http-nio-11040-exec-3] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/notif/read/all
2025-04-17 22:27:40.235 INFO  [http-nio-11040-exec-1] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDg5NjQ2MCwiZXhwIjoxNzQ0ODk3MDYwLCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.uVbuNRELM8S426P4ARuDZddYuwDlcWA28qD8L25tWTo
2025-04-17 22:27:40.235 INFO  [http-nio-11040-exec-4] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDg5NjQ2MCwiZXhwIjoxNzQ0ODk3MDYwLCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.uVbuNRELM8S426P4ARuDZddYuwDlcWA28qD8L25tWTo
2025-04-17 22:27:40.235 INFO  [http-nio-11040-exec-1] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/notif/all
2025-04-17 22:27:40.235 INFO  [http-nio-11040-exec-4] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/user/info
2025-04-17 22:27:40.236 INFO  [http-nio-11040-exec-1] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-17 22:27:40.237 INFO  [http-nio-11040-exec-4] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-17 22:27:40.236 INFO  [http-nio-11040-exec-3] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-17 22:27:40.237 INFO  [http-nio-11040-exec-8] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-17 22:27:40.239 DEBUG [http-nio-11040-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
13. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 0 msec}
2025-04-17 22:27:40.239 DEBUG [http-nio-11040-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
11. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 1 msec}
2025-04-17 22:27:40.239 DEBUG [http-nio-11040-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
12. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 1 msec}
2025-04-17 22:27:40.239 DEBUG [http-nio-11040-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
14. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 1 msec}
2025-04-17 22:27:40.239 INFO  [http-nio-11040-exec-4] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-17 22:27:40.239 INFO  [http-nio-11040-exec-1] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-17 22:27:40.239 INFO  [http-nio-11040-exec-8] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-17 22:27:40.239 INFO  [http-nio-11040-exec-3] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-17 22:27:40.240 INFO  [http-nio-11040-exec-3] [c.momo.common.util.SecurityContextUtil] - principal: UserDetailsImpl(username=km1104rs, password=$2a$10$uXShhwl6ULOkbJe477uDWOfdiUUcu6lOSF/Dhj9xP3U1nUn/gXkc6, authorities=[ROLE_NONE])
2025-04-17 22:27:40.240 INFO  [http-nio-11040-exec-1] [c.momo.common.util.SecurityContextUtil] - principal: UserDetailsImpl(username=km1104rs, password=$2a$10$uXShhwl6ULOkbJe477uDWOfdiUUcu6lOSF/Dhj9xP3U1nUn/gXkc6, authorities=[ROLE_NONE])
2025-04-17 22:27:40.240 INFO  [http-nio-11040-exec-8] [c.momo.common.util.SecurityContextUtil] - principal: UserDetailsImpl(username=km1104rs, password=$2a$10$uXShhwl6ULOkbJe477uDWOfdiUUcu6lOSF/Dhj9xP3U1nUn/gXkc6, authorities=[ROLE_NONE])
2025-04-17 22:27:40.240 INFO  [http-nio-11040-exec-4] [c.momo.common.util.SecurityContextUtil] - principal: UserDetailsImpl(username=km1104rs, password=$2a$10$uXShhwl6ULOkbJe477uDWOfdiUUcu6lOSF/Dhj9xP3U1nUn/gXkc6, authorities=[ROLE_NONE])
2025-04-17 22:27:40.243 DEBUG [http-nio-11040-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
12. SELECT ac.id,
               ac.name,
               ac.tel,
               ac.nickname,
               ac.pfp,
               ac.curr_shop_id,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where sf.shop_id = ac.curr_shop_id and
                         sf.staff_id = ac.id
                   ) as role,
               sh.shop_nm,
               sh.shop_addr,
               sh.provider,
               (
                   IFNULL((
                       select sf2.approval_st
                       from tb_staff sf2
                       where sf2.shop_id=ac.curr_shop_id and
                           sf2.staff_id=ac.id
                       ), -1)
                ) as approval_st,
                ac.corp_nm,
                ac.br_no
        FROM tb_account ac
        LEFT OUTER JOIN tb_shop sh on sh.shop_id=ac.curr_shop_id
        WHERE id = 'km1104rs'
 {executed in 2 msec}
2025-04-17 22:27:40.243 DEBUG [http-nio-11040-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
13. UPDATE tb_notification
        SET read_st = TRUE
        WHERE receiver_id = 'km1104rs'
          AND read_st = FALSE
 {executed in 1 msec}
2025-04-17 22:27:40.243 DEBUG [http-nio-11040-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
14. SELECT count(*)
        FROM tb_notification
        WHERE receiver_id = 'km1104rs'
          AND read_st = FALSE
 {executed in 3 msec}
2025-04-17 22:27:40.243 DEBUG [http-nio-11040-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
11. SELECT content,
               notif_id,
               read_st,
               notif_tp as type,
               IF(date(send_dt) = current_date,true,false) as today,
            (
               TIMESTAMPDIFF(MINUTE, send_dt, current_timestamp)
            ) as ago
        FROM tb_notification
        WHERE receiver_id='km1104rs'
        ORDER BY send_dt DESC
 {executed in 3 msec}
2025-04-17 22:27:40.243 INFO  [http-nio-11040-exec-4] [com.momo.api.UserController] - User: {role=0, approval_st=1, shop_addr=충청남도 천안시 병천면 충절로 1600 한국기술교육대학교 다산정보관 102, br_no=5218702490, provider=2, name=박희찬, nickname=대표, corp_nm=123, tel=010-4524-0636, id=km1104rs, pfp=1921fc01-e573-4243-9365-6b905389f4fc.png, curr_shop_id=2, shop_nm=한기대점 }
2025-04-17 22:27:40.250 INFO  [http-nio-11040-exec-5] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/notif/count/unread
2025-04-17 22:27:40.251 INFO  [http-nio-11040-exec-5] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDg5NjQ2MCwiZXhwIjoxNzQ0ODk3MDYwLCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.uVbuNRELM8S426P4ARuDZddYuwDlcWA28qD8L25tWTo
2025-04-17 22:27:40.251 INFO  [http-nio-11040-exec-5] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/notif/count/unread
2025-04-17 22:27:40.254 INFO  [http-nio-11040-exec-5] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-17 22:27:40.257 DEBUG [http-nio-11040-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
11. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 3 msec}
2025-04-17 22:27:40.258 INFO  [http-nio-11040-exec-5] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-17 22:27:40.260 INFO  [http-nio-11040-exec-5] [c.momo.common.util.SecurityContextUtil] - principal: UserDetailsImpl(username=km1104rs, password=$2a$10$uXShhwl6ULOkbJe477uDWOfdiUUcu6lOSF/Dhj9xP3U1nUn/gXkc6, authorities=[ROLE_NONE])
2025-04-17 22:27:40.271 DEBUG [http-nio-11040-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
11. SELECT count(*)
        FROM tb_notification
        WHERE receiver_id = 'km1104rs'
          AND read_st = FALSE
 {executed in 10 msec}
2025-04-17 22:27:40.277 INFO  [http-nio-11040-exec-9] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/sale/graph/ct/d
2025-04-17 22:27:40.277 INFO  [http-nio-11040-exec-9] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDg5NjQ2MCwiZXhwIjoxNzQ0ODk3MDYwLCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.uVbuNRELM8S426P4ARuDZddYuwDlcWA28qD8L25tWTo
2025-04-17 22:27:40.277 INFO  [http-nio-11040-exec-9] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/sale/graph/ct/d
2025-04-17 22:27:40.278 INFO  [http-nio-11040-exec-2] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/notif/count/unread
2025-04-17 22:27:40.278 INFO  [http-nio-11040-exec-2] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDg5NjQ2MCwiZXhwIjoxNzQ0ODk3MDYwLCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.uVbuNRELM8S426P4ARuDZddYuwDlcWA28qD8L25tWTo
2025-04-17 22:27:40.278 INFO  [http-nio-11040-exec-2] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/notif/count/unread
2025-04-17 22:27:40.279 INFO  [http-nio-11040-exec-9] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-17 22:27:40.279 INFO  [http-nio-11040-exec-2] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-17 22:27:40.280 DEBUG [http-nio-11040-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
12. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 1 msec}
2025-04-17 22:27:40.280 DEBUG [http-nio-11040-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
11. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 1 msec}
2025-04-17 22:27:40.280 INFO  [http-nio-11040-exec-7] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/sale/graph/ct/d
2025-04-17 22:27:40.280 INFO  [http-nio-11040-exec-7] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDg5NjQ2MCwiZXhwIjoxNzQ0ODk3MDYwLCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.uVbuNRELM8S426P4ARuDZddYuwDlcWA28qD8L25tWTo
2025-04-17 22:27:40.280 INFO  [http-nio-11040-exec-7] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/sale/graph/ct/d
2025-04-17 22:27:40.280 INFO  [http-nio-11040-exec-2] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-17 22:27:40.280 INFO  [http-nio-11040-exec-9] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-17 22:27:40.281 INFO  [http-nio-11040-exec-2] [c.momo.common.util.SecurityContextUtil] - principal: UserDetailsImpl(username=km1104rs, password=$2a$10$uXShhwl6ULOkbJe477uDWOfdiUUcu6lOSF/Dhj9xP3U1nUn/gXkc6, authorities=[ROLE_NONE])
2025-04-17 22:27:40.281 INFO  [http-nio-11040-exec-7] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-17 22:27:40.282 DEBUG [http-nio-11040-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
12. SELECT count(*)
        FROM tb_notification
        WHERE receiver_id = 'km1104rs'
          AND read_st = FALSE
 {executed in 1 msec}
2025-04-17 22:27:40.282 DEBUG [http-nio-11040-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
11. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 1 msec}
2025-04-17 22:27:40.282 INFO  [http-nio-11040-exec-7] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-17 22:27:40.283 DEBUG [http-nio-11040-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
13. set @limit_cond := (
               case 'd'
                   when 'h' then '2000-01-24'
                   when 'd' then '2025-04-17'
                   when 'w' then '2025-04-17'
                   when 'm' then date_sub('2025-04-17', interval 1 month)
               end
        );

        with recursive org_date_table as (
            select (
                       case
                           when 'd' = 'h' then '2000-01-01'
                           when 'd' != 'h' then '2025-01-17'
                           end
                       ) as it
            union all
            select (
                       case 'd'
                           when 'h' then date_add(it, interval 1 day)
                           when 'd' then date_add(it, interval 1 day)
                           when 'w' then date_add(it, interval 1 week)
                           when 'm' then date_add(it, interval 1 month)
                           end
                       ) as it
            from org_date_table
            where it < @limit_cond
        ), date_table as (
            select
                year(it) as _year,
                (
                    case 'd'
                        when 'h' then day(it)
                        when 'd' then it
                        when 'w' then week(it)
                        when 'm' then month(it)
                        end
                    ) as dt
            from org_date_table
        ),  date_sale as (
            select year(actv_dt) _year,
                   month(actv_dt) as m,
                   week(actv_dt) as w,
                   actv_dt as d,
                   hour(regi_dt) as h,
                   tb_sale.*
            from tb_sale
            where shop_id=2 and

                actv_dt between '2025-01-17' and (
                    case
                        when 'd' = 'h' then '2025-01-17'
                        when 'd' != 'h' then '2025-04-17'
                        end
                    )
        ), final as (
            select count(device_id) as cnt
            from date_table dd
                     left outer join date_sale ds on dd._year=ds._year and
                                                     d = dt
            group by dd._year, dd.dt
        )

        select
            (
                select json_arrayagg(cnt)
                from final
            ) as value,
            (
                select json_arrayagg(date_format(it, '%Y-%m-%d'))
                from org_date_table
            ) as date
 {executed in 1 msec}
2025-04-17 22:27:40.286 DEBUG [http-nio-11040-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
11. set @limit_cond := (
               case 'd'
                   when 'h' then '2000-01-24'
                   when 'd' then '2025-04-16'
                   when 'w' then '2025-04-16'
                   when 'm' then date_sub('2025-04-16', interval 1 month)
               end
        );

        with recursive org_date_table as (
            select (
                       case
                           when 'd' = 'h' then '2000-01-01'
                           when 'd' != 'h' then '2025-04-10'
                           end
                       ) as it
            union all
            select (
                       case 'd'
                           when 'h' then date_add(it, interval 1 day)
                           when 'd' then date_add(it, interval 1 day)
                           when 'w' then date_add(it, interval 1 week)
                           when 'm' then date_add(it, interval 1 month)
                           end
                       ) as it
            from org_date_table
            where it < @limit_cond
        ), date_table as (
            select
                year(it) as _year,
                (
                    case 'd'
                        when 'h' then day(it)
                        when 'd' then it
                        when 'w' then week(it)
                        when 'm' then month(it)
                        end
                    ) as dt
            from org_date_table
        ),  date_sale as (
            select year(actv_dt) _year,
                   month(actv_dt) as m,
                   week(actv_dt) as w,
                   actv_dt as d,
                   hour(regi_dt) as h,
                   tb_sale.*
            from tb_sale
            where shop_id=2 and

                actv_dt between '2025-04-10' and (
                    case
                        when 'd' = 'h' then '2025-04-10'
                        when 'd' != 'h' then '2025-04-16'
                        end
                    )
        ), final as (
            select count(device_id) as cnt
            from date_table dd
                     left outer join date_sale ds on dd._year=ds._year and
                                                     d = dt
            group by dd._year, dd.dt
        )

        select
            (
                select json_arrayagg(cnt)
                from final
            ) as value,
            (
                select json_arrayagg(date_format(it, '%Y-%m-%d'))
                from org_date_table
            ) as date
 {executed in 3 msec}
2025-04-17 22:27:40.290 INFO  [http-nio-11040-exec-10] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/sale/graph/ct/select/0
2025-04-17 22:27:40.290 INFO  [http-nio-11040-exec-10] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDg5NjQ2MCwiZXhwIjoxNzQ0ODk3MDYwLCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.uVbuNRELM8S426P4ARuDZddYuwDlcWA28qD8L25tWTo
2025-04-17 22:27:40.290 INFO  [http-nio-11040-exec-10] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/sale/graph/ct/select/0
2025-04-17 22:27:40.291 INFO  [http-nio-11040-exec-10] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-17 22:27:40.293 DEBUG [http-nio-11040-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
11. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 1 msec}
2025-04-17 22:27:40.293 INFO  [http-nio-11040-exec-10] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-17 22:27:40.299 INFO  [http-nio-11040-exec-6] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/sale/graph/stat/select/0
2025-04-17 22:27:40.300 INFO  [http-nio-11040-exec-6] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDg5NjQ2MCwiZXhwIjoxNzQ0ODk3MDYwLCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.uVbuNRELM8S426P4ARuDZddYuwDlcWA28qD8L25tWTo
2025-04-17 22:27:40.300 INFO  [http-nio-11040-exec-6] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/sale/graph/stat/select/0
2025-04-17 22:27:40.300 DEBUG [http-nio-11040-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
11. with recursive group_generation as (
            select 0 as g
            union all
            select g+1
            from group_generation
            where g < 8
        ), group_weekday as (
            select 0 as g
            union all
            select g+1
            from group_weekday
            where g < 6
        ),  sale as (
            select weekday(actv_dt) as days,
                   device_id,
                   cust_cd,
                   sale_id
            from tb_sale
            where shop_id=2 and

                device_id is not null and
                actv_dt between '2025-04-01' and '2025-04-30'
        ), sale_gene as (
            select sale_id,
                   (
                       case
                           when length(cust_cd) = 6 then floor((year(curdate()) - concat((
                                 case
                                     when substring(cust_cd, 1,2) > '44' then '19'
                                     when substring(cust_cd, 1,2) <= '44' then '20'
                                     end
                                 ),substring(cust_cd,1,2))) / 10)
                           when length(cust_cd) != 6 then null
                           end
                       ) as generation
            from sale
        ), generation as (
            select g,
                   device_id
            from group_generation g
                     left outer join sale_gene sg on g.g=sg.generation
                     left outer join sale s on s.sale_id=sg.sale_id
        ), weekdays as (
            select g,
                   device_id
            from group_weekday w
                     left outer join sale s on s.days=w.g
        )

        select IFNULL(count(device_id),0) as avg
        from generation
        group by g
 {executed in 3 msec}
2025-04-17 22:27:40.301 INFO  [http-nio-11040-exec-6] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-17 22:27:40.303 DEBUG [http-nio-11040-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
11. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 2 msec}
2025-04-17 22:27:40.304 INFO  [http-nio-11040-exec-6] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-17 22:27:40.308 INFO  [http-nio-11040-exec-4] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/sale/graph/ratio/select/0
2025-04-17 22:27:40.308 INFO  [http-nio-11040-exec-4] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDg5NjQ2MCwiZXhwIjoxNzQ0ODk3MDYwLCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.uVbuNRELM8S426P4ARuDZddYuwDlcWA28qD8L25tWTo
2025-04-17 22:27:40.308 INFO  [http-nio-11040-exec-4] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/sale/graph/ratio/select/0
2025-04-17 22:27:40.308 DEBUG [http-nio-11040-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
11. with base as (select device_id,
                             (SELECT device_nm
                              FROM tb_device
                              WHERE tb_device.device_id = sl.device_id)      as device,
                             sd_id,
                             (SELECT sd_nm
                              FROM tb_second_device
                              WHERE tb_second_device.sd_id = sl.sd_id)       as sec_device,
                             ct_actv_plan,
                             (SELECT ct_plan_nm
                              FROM tb_ct_plan
                              WHERE tb_ct_plan.ct_plan_id = sl.ct_actv_plan) as actv_plan
                      from tb_sale sl
                      where shop_id = 2 and

                        actv_dt between '2025-04-01' and '2025-04-30'),
             device as (SELECT device                   as name,
                               count(device_id) as count
                        from base
                        where device_id is not null
                        group by device),
             sec_device as (SELECT sec_device                   as name,
                                   count(sec_device) as count
                            from base
                            where sd_id is not null
                            group by sec_device),
             actv_plan as (SELECT actv_plan                   as name,
                                  count(actv_plan) as count
                           from base
                           where ct_actv_plan is not null
                           group by actv_plan),
             total as (select count('device') as cnt
                       from base
                       where 'device' is not null
             )

        select name,
               count,
               (
                   IF((select cnt
                       from total) = 0 or count = 0, 0, TRUNCATE(
                              (count / (
                                  select cnt
                                  from total
                              )
                                  ) * 100, 1))
                   ) as per
        from device
        order by per desc
        limit 5
 {executed in 1 msec}
2025-04-17 22:27:40.309 INFO  [http-nio-11040-exec-4] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-17 22:27:40.310 DEBUG [http-nio-11040-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
12. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 0 msec}
2025-04-17 22:27:40.310 INFO  [http-nio-11040-exec-4] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-17 22:27:40.314 DEBUG [http-nio-11040-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
12. with recursive istm_range as (
            select 0 as i
            union all
            select i+1
            from istm_range
            where i<5
        ), base as (
            select ct_istm
            from tb_sale
            where shop_id=2 and

                actv_dt between '2025-04-01' and '2025-04-30'
        ), final as (
            select i as istm,
                   IFNULL(count(base.ct_istm),0) as cnt
            from istm_range
                     left outer join base on base.ct_istm=istm_range.i
            group by i
            order by istm desc
        )

        select json_arrayagg(istm) as type,
               json_arrayagg(cnt) as cnt,
               json_arrayagg(IF((
                      select IFNULL(count(ct_istm), 0)
                      from base
                  ) = 0 or cnt = 0, 0, TRUNCATE((cnt/(
                   select IFNULL(count(ct_istm), 0)
                   from base
               )) * 100, 1))) as per
        from final
 {executed in 2 msec}
2025-04-17 22:27:40.317 INFO  [http-nio-11040-exec-8] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/sale/graph/summary
2025-04-17 22:27:40.317 INFO  [http-nio-11040-exec-8] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDg5NjQ2MCwiZXhwIjoxNzQ0ODk3MDYwLCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.uVbuNRELM8S426P4ARuDZddYuwDlcWA28qD8L25tWTo
2025-04-17 22:27:40.317 INFO  [http-nio-11040-exec-8] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/sale/graph/summary
2025-04-17 22:27:40.318 INFO  [http-nio-11040-exec-8] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-17 22:27:40.319 DEBUG [http-nio-11040-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
14. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 1 msec}
2025-04-17 22:27:40.320 INFO  [http-nio-11040-exec-8] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-17 22:27:40.321 INFO  [http-nio-11040-exec-8] [com.momo.api.SaleController] - summary: CommonVO(provider=null, date=null, year=null, month=null, day=null, selectType=null, range=null, dateType=null, prevFromYmd=null, prevToYmd=null, currFromYmd=null, currToYmd=null, fromYmd=2024-10-01, toYmd=2025-04-01, fromYm=null, toYm=null, prevDate=null, currDate=null)
2025-04-17 22:27:40.371 INFO  [http-nio-11040-exec-3] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/sale/graph/ct/d
2025-04-17 22:27:40.371 INFO  [http-nio-11040-exec-3] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDg5NjQ2MCwiZXhwIjoxNzQ0ODk3MDYwLCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.uVbuNRELM8S426P4ARuDZddYuwDlcWA28qD8L25tWTo
2025-04-17 22:27:40.371 INFO  [http-nio-11040-exec-3] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/sale/graph/ct/d
2025-04-17 22:27:40.373 INFO  [http-nio-11040-exec-3] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-17 22:27:40.375 DEBUG [http-nio-11040-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
13. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 0 msec}
2025-04-17 22:27:40.375 INFO  [http-nio-11040-exec-3] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-17 22:27:40.378 DEBUG [http-nio-11040-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
14. #         월별 날짜 구하기
        with recursive month_range as (
            select '2024-10-01' as d
            union all
            select date_add(d, interval 1 month) as d
            from month_range
            where date_add(d, interval 1 month) < '2025-04-01'
        ), months as(
            select month(d) as m
            from month_range
        ), filtered_sale as ( # 판매일보 초벌
            select month(actv_dt) as actv_month,
                   device_id,
                   internet_plan,
                   tv_plan,
                    exsvc_id,
                   total_cms,
                   wt_cms,
                   sale_id,
                   sd_id,
                    shop_id
            from tb_sale
            where shop_id=2 and

                actv_dt between '2024-10-01' and date_add('2025-04-01', interval 1 month)
        ), ct_graph as ( # 무선 그래프 데이터
            SELECT m,
                   count(device_id) as cnt
            FROM months
                     LEFT OUTER JOIN filtered_sale on actv_month = m and
                                                      device_id is not null
            group by m
        ), internet_graph as ( # 인터넷 그래프 데이터
            SELECT m,
                   count(internet_plan) as cnt
            FROM months
                     LEFT OUTER JOIN filtered_sale on actv_month = m  and
                                                      internet_plan is not null
            group by m
        ), tv_graph as ( # TV 그래프 데이터
            SELECT m,
                   count(tv_plan) as cnt
            FROM months
                     LEFT OUTER JOIN filtered_sale on actv_month = m  and
                                                      tv_plan is not null
            group by m
        ), card as ( # 카드 데이터
            SELECT m,
                   (
                    select count(*)
                    from tb_sale_card sc
                    left outer join filtered_sale fs on fs.shop_id = sc.shop_id and
                                                        fs.sale_id = sc.sale_id
                   )  as cnt
            FROM months
                     LEFT OUTER JOIN filtered_sale on actv_month = m
            group by m
        ), exsvc as ( # 부가서비스 데이터
            SELECT m,
                   count(exsvc_id) as cnt
            FROM months
                     LEFT OUTER JOIN filtered_sale on actv_month = m  and
                                                      exsvc_id is not null
            group by m
        ), tc_graph as ( # 총 이익 그래프 데이터
            SELECT m,
                   IFNULL(sum(total_cms), 0) as cnt
            FROM months
                     LEFT OUTER JOIN filtered_sale on actv_month = m
            group by m
        ), avg_margin_graph as ( # 개인 평균 마진 그래프 데이터
            SELECT m,
                   IFNULL(avg(total_cms), 0) as cnt
            FROM months
                     LEFT OUTER JOIN filtered_sale on actv_month = m and
                                                      device_id is not null
            group by m
        ), ud_graph as ( # 중고 개통 그래프 데이터
            SELECT m,
                   count(ud_id) as cnt
            FROM months
                     LEFT OUTER JOIN filtered_sale on actv_month = m
                     LEFT OUTER JOIN tb_sale_used_device sud on sud.sale_id=filtered_sale.sale_id
            group by m
        ), sec_graph as ( # 세컨 그래프 데이터
            SELECT m,
                   count(sd_id) as cnt
            FROM months
                     LEFT OUTER JOIN filtered_sale on actv_month = m and
                                                      sd_id != 0
            group by m
        ), diff_ct as (
            select
                (
                    select cnt
                    from ct_graph
                    limit 4, 1
                ) as prv,
                (
                    select cnt
                    from ct_graph
                    limit 5,1
                ) as curr
            from dual
        ), diff_internet as (
            select
                (
                    select cnt
                    from internet_graph
                    limit 4,1
                ) as prv,
                (
                    select cnt
                    from internet_graph
                    limit 5,1
                ) as curr
            from dual
        ), diff_tv as (
            select
                (
                    select cnt
                    from tv_graph
                    limit 4,1
                ) as prv,
                (
                    select cnt
                    from tv_graph
                    limit 5,1
                ) as curr
            from dual
        ), diff_card as (
            select
                (
                    select cnt
                    from card
                    limit 4,1
                ) as prv,
                (
                    select cnt
                    from card
                    limit 5,1
                ) as curr
            from dual
        ), diff_exsvc as (
            select
                (
                    select cnt
                    from exsvc
                    limit 4,1
                ) as prv,
                (
                    select cnt
                    from exsvc
                    limit 5,1
                ) as curr
            from dual
        ), diff_tc as (
            select
                (
                    select cnt
                    from tc_graph
                    limit 4,1
                ) as prv,
                (
                    select cnt
                    from tc_graph
                    limit 5,1
                ) as curr
            from dual
        ) , diff_margin as (
            select
                (
                    select cnt
                    from avg_margin_graph
                    limit 4,1
                ) as prv,
                (
                    select cnt
                    from avg_margin_graph
                    limit 5,1
                ) as curr
            from dual
        ), diff_ud as (
            select
                (
                    select cnt
                    from ud_graph
                    limit 4,1
                ) as prv,
                (
                    select cnt
                    from ud_graph
                    limit 5,1
                ) as curr
            from dual
        ) , diff_sec as (
            select
                (
                    select cnt
                    from sec_graph
                    limit 4,1
                ) as prv,
                (
                    select cnt
                    from sec_graph
                    limit 5,1
                ) as curr
            from dual
        ), final as (
            select
                curr,
                prv,
                (
                    select json_arrayagg(cnt)
                    from ct_graph
                ) as list
            from diff_ct
            union all
            select
                curr,
                prv,
                (
                    select json_arrayagg(cnt)
                    from internet_graph
                ) as list
            from diff_internet
            union all
            select
                curr,
                prv,
                (
                    select json_arrayagg(cnt)
                    from tv_graph
                ) as list
            from diff_tv
             union all
            select
                curr,
                prv,
                (
                    select json_arrayagg(cnt)
                    from card
                ) as list
            from diff_card
             union all
            select
                curr,
                prv,
                (
                    select json_arrayagg(cnt)
                    from exsvc
                ) as list
            from diff_exsvc
            union all
            select
                curr,
                prv,
                (
                    select json_arrayagg(cnt)
                    from tc_graph
                ) as list
            from diff_tc
            union all
            select
                curr,
                prv,
                (
                    select json_arrayagg(cnt)
                    from avg_margin_graph
                ) as list
            from diff_margin
            union all
            select
                curr,
                prv,
                (
                    select json_arrayagg(cnt)
                    from ud_graph
                ) as list
            from diff_ud
            union all
            select
                curr,
                prv,
                (
                    select json_arrayagg(cnt)
                    from sec_graph
                ) as list
            from diff_sec
        )

        select FLOOR(curr) as value,
               (
                   CASE
                       WHEN curr = 0 and prv = 0 THEN 0
                       WHEN prv != 0 and curr = 0 THEN -100
                       WHEN prv = 0 and curr != 0 THEN 100
                       WHEN curr != 0 and prv != 0 THEN TRUNCATE(((curr/prv)-1)*100, 1)
                       END
                   ) as per,
               list
        from final
 {executed in 52 msec}
2025-04-17 22:27:40.381 DEBUG [http-nio-11040-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
13. set @limit_cond := (
               case 'd'
                   when 'h' then '2000-01-24'
                   when 'd' then '2025-04-17'
                   when 'w' then '2025-04-17'
                   when 'm' then date_sub('2025-04-17', interval 1 month)
               end
        );

        with recursive org_date_table as (
            select (
                       case
                           when 'd' = 'h' then '2000-01-01'
                           when 'd' != 'h' then '2025-01-17'
                           end
                       ) as it
            union all
            select (
                       case 'd'
                           when 'h' then date_add(it, interval 1 day)
                           when 'd' then date_add(it, interval 1 day)
                           when 'w' then date_add(it, interval 1 week)
                           when 'm' then date_add(it, interval 1 month)
                           end
                       ) as it
            from org_date_table
            where it < @limit_cond
        ), date_table as (
            select
                year(it) as _year,
                (
                    case 'd'
                        when 'h' then day(it)
                        when 'd' then it
                        when 'w' then week(it)
                        when 'm' then month(it)
                        end
                    ) as dt
            from org_date_table
        ),  date_sale as (
            select year(actv_dt) _year,
                   month(actv_dt) as m,
                   week(actv_dt) as w,
                   actv_dt as d,
                   hour(regi_dt) as h,
                   tb_sale.*
            from tb_sale
            where shop_id=2 and

                    seller_id='km1104rs' and

                actv_dt between '2025-01-17' and (
                    case
                        when 'd' = 'h' then '2025-01-17'
                        when 'd' != 'h' then '2025-04-17'
                        end
                    )
        ), final as (
            select count(device_id) as cnt
            from date_table dd
                     left outer join date_sale ds on dd._year=ds._year and
                                                     d = dt
            group by dd._year, dd.dt
        )

        select
            (
                select json_arrayagg(cnt)
                from final
            ) as value,
            (
                select json_arrayagg(date_format(it, '%Y-%m-%d'))
                from org_date_table
            ) as date
 {executed in 4 msec}
2025-04-17 22:27:40.385 INFO  [http-nio-11040-exec-1] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/sale/graph/ct/d
2025-04-17 22:27:40.385 INFO  [http-nio-11040-exec-1] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDg5NjQ2MCwiZXhwIjoxNzQ0ODk3MDYwLCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.uVbuNRELM8S426P4ARuDZddYuwDlcWA28qD8L25tWTo
2025-04-17 22:27:40.385 INFO  [http-nio-11040-exec-1] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/sale/graph/ct/d
2025-04-17 22:27:40.387 INFO  [http-nio-11040-exec-1] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-17 22:27:40.388 DEBUG [http-nio-11040-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
11. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 1 msec}
2025-04-17 22:27:40.388 INFO  [http-nio-11040-exec-1] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-17 22:27:40.392 DEBUG [http-nio-11040-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
11. set @limit_cond := (
               case 'd'
                   when 'h' then '2000-01-24'
                   when 'd' then '2025-04-16'
                   when 'w' then '2025-04-16'
                   when 'm' then date_sub('2025-04-16', interval 1 month)
               end
        );

        with recursive org_date_table as (
            select (
                       case
                           when 'd' = 'h' then '2000-01-01'
                           when 'd' != 'h' then '2025-04-10'
                           end
                       ) as it
            union all
            select (
                       case 'd'
                           when 'h' then date_add(it, interval 1 day)
                           when 'd' then date_add(it, interval 1 day)
                           when 'w' then date_add(it, interval 1 week)
                           when 'm' then date_add(it, interval 1 month)
                           end
                       ) as it
            from org_date_table
            where it < @limit_cond
        ), date_table as (
            select
                year(it) as _year,
                (
                    case 'd'
                        when 'h' then day(it)
                        when 'd' then it
                        when 'w' then week(it)
                        when 'm' then month(it)
                        end
                    ) as dt
            from org_date_table
        ),  date_sale as (
            select year(actv_dt) _year,
                   month(actv_dt) as m,
                   week(actv_dt) as w,
                   actv_dt as d,
                   hour(regi_dt) as h,
                   tb_sale.*
            from tb_sale
            where shop_id=2 and

                    seller_id='km1104rs' and

                actv_dt between '2025-04-10' and (
                    case
                        when 'd' = 'h' then '2025-04-10'
                        when 'd' != 'h' then '2025-04-16'
                        end
                    )
        ), final as (
            select count(device_id) as cnt
            from date_table dd
                     left outer join date_sale ds on dd._year=ds._year and
                                                     d = dt
            group by dd._year, dd.dt
        )

        select
            (
                select json_arrayagg(cnt)
                from final
            ) as value,
            (
                select json_arrayagg(date_format(it, '%Y-%m-%d'))
                from org_date_table
            ) as date
 {executed in 1 msec}
2025-04-17 22:27:40.411 INFO  [http-nio-11040-exec-5] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/sale/graph/ct/select/0
2025-04-17 22:27:40.411 INFO  [http-nio-11040-exec-5] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDg5NjQ2MCwiZXhwIjoxNzQ0ODk3MDYwLCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.uVbuNRELM8S426P4ARuDZddYuwDlcWA28qD8L25tWTo
2025-04-17 22:27:40.411 INFO  [http-nio-11040-exec-5] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/sale/graph/ct/select/0
2025-04-17 22:27:40.413 INFO  [http-nio-11040-exec-5] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-17 22:27:40.417 DEBUG [http-nio-11040-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
11. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 3 msec}
2025-04-17 22:27:40.417 INFO  [http-nio-11040-exec-5] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-17 22:27:40.424 DEBUG [http-nio-11040-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
11. with recursive group_generation as (
            select 0 as g
            union all
            select g+1
            from group_generation
            where g < 8
        ), group_weekday as (
            select 0 as g
            union all
            select g+1
            from group_weekday
            where g < 6
        ),  sale as (
            select weekday(actv_dt) as days,
                   device_id,
                   cust_cd,
                   sale_id
            from tb_sale
            where shop_id=2 and

                      seller_id='km1104rs' and

                device_id is not null and
                actv_dt between '2025-04-01' and '2025-04-30'
        ), sale_gene as (
            select sale_id,
                   (
                       case
                           when length(cust_cd) = 6 then floor((year(curdate()) - concat((
                                 case
                                     when substring(cust_cd, 1,2) > '44' then '19'
                                     when substring(cust_cd, 1,2) <= '44' then '20'
                                     end
                                 ),substring(cust_cd,1,2))) / 10)
                           when length(cust_cd) != 6 then null
                           end
                       ) as generation
            from sale
        ), generation as (
            select g,
                   device_id
            from group_generation g
                     left outer join sale_gene sg on g.g=sg.generation
                     left outer join sale s on s.sale_id=sg.sale_id
        ), weekdays as (
            select g,
                   device_id
            from group_weekday w
                     left outer join sale s on s.days=w.g
        )

        select IFNULL(count(device_id),0) as avg
        from generation
        group by g
 {executed in 2 msec}
2025-04-17 22:27:40.432 INFO  [http-nio-11040-exec-2] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/sale/graph/stat/select/0
2025-04-17 22:27:40.432 INFO  [http-nio-11040-exec-2] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDg5NjQ2MCwiZXhwIjoxNzQ0ODk3MDYwLCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.uVbuNRELM8S426P4ARuDZddYuwDlcWA28qD8L25tWTo
2025-04-17 22:27:40.432 INFO  [http-nio-11040-exec-2] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/sale/graph/stat/select/0
2025-04-17 22:27:40.434 INFO  [http-nio-11040-exec-2] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-17 22:27:40.436 DEBUG [http-nio-11040-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
12. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 2 msec}
2025-04-17 22:27:40.437 INFO  [http-nio-11040-exec-2] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-17 22:27:40.449 INFO  [http-nio-11040-exec-9] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/sale/graph/ratio/select/0
2025-04-17 22:27:40.449 INFO  [http-nio-11040-exec-9] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDg5NjQ2MCwiZXhwIjoxNzQ0ODk3MDYwLCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.uVbuNRELM8S426P4ARuDZddYuwDlcWA28qD8L25tWTo
2025-04-17 22:27:40.449 INFO  [http-nio-11040-exec-9] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/sale/graph/ratio/select/0
2025-04-17 22:27:40.451 INFO  [http-nio-11040-exec-9] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-17 22:27:40.454 DEBUG [http-nio-11040-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
12. with base as (select device_id,
                             (SELECT device_nm
                              FROM tb_device
                              WHERE tb_device.device_id = sl.device_id)      as device,
                             sd_id,
                             (SELECT sd_nm
                              FROM tb_second_device
                              WHERE tb_second_device.sd_id = sl.sd_id)       as sec_device,
                             ct_actv_plan,
                             (SELECT ct_plan_nm
                              FROM tb_ct_plan
                              WHERE tb_ct_plan.ct_plan_id = sl.ct_actv_plan) as actv_plan
                      from tb_sale sl
                      where shop_id = 2 and

                                seller_id='km1104rs' and

                        actv_dt between '2025-04-01' and '2025-04-30'),
             device as (SELECT device                   as name,
                               count(device_id) as count
                        from base
                        where device_id is not null
                        group by device),
             sec_device as (SELECT sec_device                   as name,
                                   count(sec_device) as count
                            from base
                            where sd_id is not null
                            group by sec_device),
             actv_plan as (SELECT actv_plan                   as name,
                                  count(actv_plan) as count
                           from base
                           where ct_actv_plan is not null
                           group by actv_plan),
             total as (select count('device') as cnt
                       from base
                       where 'device' is not null
             )

        select name,
               count,
               (
                   IF((select cnt
                       from total) = 0 or count = 0, 0, TRUNCATE(
                              (count / (
                                  select cnt
                                  from total
                              )
                                  ) * 100, 1))
                   ) as per
        from device
        order by per desc
        limit 5
 {executed in 13 msec}
2025-04-17 22:27:40.460 DEBUG [http-nio-11040-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
13. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 8 msec}
2025-04-17 22:27:40.460 INFO  [http-nio-11040-exec-9] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-17 22:27:40.464 INFO  [http-nio-11040-exec-7] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/sale/graph/summary
2025-04-17 22:27:40.464 INFO  [http-nio-11040-exec-7] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDg5NjQ2MCwiZXhwIjoxNzQ0ODk3MDYwLCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.uVbuNRELM8S426P4ARuDZddYuwDlcWA28qD8L25tWTo
2025-04-17 22:27:40.464 INFO  [http-nio-11040-exec-7] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/sale/graph/summary
2025-04-17 22:27:40.465 DEBUG [http-nio-11040-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
13. with recursive istm_range as (
            select 0 as i
            union all
            select i+1
            from istm_range
            where i<5
        ), base as (
            select ct_istm
            from tb_sale
            where shop_id=2 and

                        seller_id='km1104rs' and

                actv_dt between '2025-04-01' and '2025-04-30'
        ), final as (
            select i as istm,
                   IFNULL(count(base.ct_istm),0) as cnt
            from istm_range
                     left outer join base on base.ct_istm=istm_range.i
            group by i
            order by istm desc
        )

        select json_arrayagg(istm) as type,
               json_arrayagg(cnt) as cnt,
               json_arrayagg(IF((
                      select IFNULL(count(ct_istm), 0)
                      from base
                  ) = 0 or cnt = 0, 0, TRUNCATE((cnt/(
                   select IFNULL(count(ct_istm), 0)
                   from base
               )) * 100, 1))) as per
        from final
 {executed in 2 msec}
2025-04-17 22:27:40.466 INFO  [http-nio-11040-exec-7] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-17 22:27:40.469 DEBUG [http-nio-11040-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
11. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 3 msec}
2025-04-17 22:27:40.469 INFO  [http-nio-11040-exec-7] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-17 22:27:40.470 INFO  [http-nio-11040-exec-7] [com.momo.api.SaleController] - summary: CommonVO(provider=null, date=null, year=null, month=null, day=null, selectType=null, range=null, dateType=null, prevFromYmd=null, prevToYmd=null, currFromYmd=null, currToYmd=null, fromYmd=2024-10-01, toYmd=2025-04-01, fromYm=null, toYm=null, prevDate=null, currDate=null)
2025-04-17 22:27:40.522 DEBUG [http-nio-11040-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
11. #         월별 날짜 구하기
        with recursive month_range as (
            select '2024-10-01' as d
            union all
            select date_add(d, interval 1 month) as d
            from month_range
            where date_add(d, interval 1 month) < '2025-04-01'
        ), months as(
            select month(d) as m
            from month_range
        ), filtered_sale as ( # 판매일보 초벌
            select month(actv_dt) as actv_month,
                   device_id,
                   internet_plan,
                   tv_plan,
                    exsvc_id,
                   total_cms,
                   wt_cms,
                   sale_id,
                   sd_id,
                    shop_id
            from tb_sale
            where shop_id=2 and

                    seller_id='km1104rs' and

                actv_dt between '2024-10-01' and date_add('2025-04-01', interval 1 month)
        ), ct_graph as ( # 무선 그래프 데이터
            SELECT m,
                   count(device_id) as cnt
            FROM months
                     LEFT OUTER JOIN filtered_sale on actv_month = m and
                                                      device_id is not null
            group by m
        ), internet_graph as ( # 인터넷 그래프 데이터
            SELECT m,
                   count(internet_plan) as cnt
            FROM months
                     LEFT OUTER JOIN filtered_sale on actv_month = m  and
                                                      internet_plan is not null
            group by m
        ), tv_graph as ( # TV 그래프 데이터
            SELECT m,
                   count(tv_plan) as cnt
            FROM months
                     LEFT OUTER JOIN filtered_sale on actv_month = m  and
                                                      tv_plan is not null
            group by m
        ), card as ( # 카드 데이터
            SELECT m,
                   (
                    select count(*)
                    from tb_sale_card sc
                    left outer join filtered_sale fs on fs.shop_id = sc.shop_id and
                                                        fs.sale_id = sc.sale_id
                   )  as cnt
            FROM months
                     LEFT OUTER JOIN filtered_sale on actv_month = m
            group by m
        ), exsvc as ( # 부가서비스 데이터
            SELECT m,
                   count(exsvc_id) as cnt
            FROM months
                     LEFT OUTER JOIN filtered_sale on actv_month = m  and
                                                      exsvc_id is not null
            group by m
        ), tc_graph as ( # 총 이익 그래프 데이터
            SELECT m,
                   IFNULL(sum(total_cms), 0) as cnt
            FROM months
                     LEFT OUTER JOIN filtered_sale on actv_month = m
            group by m
        ), avg_margin_graph as ( # 개인 평균 마진 그래프 데이터
            SELECT m,
                   IFNULL(avg(total_cms), 0) as cnt
            FROM months
                     LEFT OUTER JOIN filtered_sale on actv_month = m and
                                                      device_id is not null
            group by m
        ), ud_graph as ( # 중고 개통 그래프 데이터
            SELECT m,
                   count(ud_id) as cnt
            FROM months
                     LEFT OUTER JOIN filtered_sale on actv_month = m
                     LEFT OUTER JOIN tb_sale_used_device sud on sud.sale_id=filtered_sale.sale_id
            group by m
        ), sec_graph as ( # 세컨 그래프 데이터
            SELECT m,
                   count(sd_id) as cnt
            FROM months
                     LEFT OUTER JOIN filtered_sale on actv_month = m and
                                                      sd_id != 0
            group by m
        ), diff_ct as (
            select
                (
                    select cnt
                    from ct_graph
                    limit 4, 1
                ) as prv,
                (
                    select cnt
                    from ct_graph
                    limit 5,1
                ) as curr
            from dual
        ), diff_internet as (
            select
                (
                    select cnt
                    from internet_graph
                    limit 4,1
                ) as prv,
                (
                    select cnt
                    from internet_graph
                    limit 5,1
                ) as curr
            from dual
        ), diff_tv as (
            select
                (
                    select cnt
                    from tv_graph
                    limit 4,1
                ) as prv,
                (
                    select cnt
                    from tv_graph
                    limit 5,1
                ) as curr
            from dual
        ), diff_card as (
            select
                (
                    select cnt
                    from card
                    limit 4,1
                ) as prv,
                (
                    select cnt
                    from card
                    limit 5,1
                ) as curr
            from dual
        ), diff_exsvc as (
            select
                (
                    select cnt
                    from exsvc
                    limit 4,1
                ) as prv,
                (
                    select cnt
                    from exsvc
                    limit 5,1
                ) as curr
            from dual
        ), diff_tc as (
            select
                (
                    select cnt
                    from tc_graph
                    limit 4,1
                ) as prv,
                (
                    select cnt
                    from tc_graph
                    limit 5,1
                ) as curr
            from dual
        ) , diff_margin as (
            select
                (
                    select cnt
                    from avg_margin_graph
                    limit 4,1
                ) as prv,
                (
                    select cnt
                    from avg_margin_graph
                    limit 5,1
                ) as curr
            from dual
        ), diff_ud as (
            select
                (
                    select cnt
                    from ud_graph
                    limit 4,1
                ) as prv,
                (
                    select cnt
                    from ud_graph
                    limit 5,1
                ) as curr
            from dual
        ) , diff_sec as (
            select
                (
                    select cnt
                    from sec_graph
                    limit 4,1
                ) as prv,
                (
                    select cnt
                    from sec_graph
                    limit 5,1
                ) as curr
            from dual
        ), final as (
            select
                curr,
                prv,
                (
                    select json_arrayagg(cnt)
                    from ct_graph
                ) as list
            from diff_ct
            union all
            select
                curr,
                prv,
                (
                    select json_arrayagg(cnt)
                    from internet_graph
                ) as list
            from diff_internet
            union all
            select
                curr,
                prv,
                (
                    select json_arrayagg(cnt)
                    from tv_graph
                ) as list
            from diff_tv
             union all
            select
                curr,
                prv,
                (
                    select json_arrayagg(cnt)
                    from card
                ) as list
            from diff_card
             union all
            select
                curr,
                prv,
                (
                    select json_arrayagg(cnt)
                    from exsvc
                ) as list
            from diff_exsvc
            union all
            select
                curr,
                prv,
                (
                    select json_arrayagg(cnt)
                    from tc_graph
                ) as list
            from diff_tc
            union all
            select
                curr,
                prv,
                (
                    select json_arrayagg(cnt)
                    from avg_margin_graph
                ) as list
            from diff_margin
            union all
            select
                curr,
                prv,
                (
                    select json_arrayagg(cnt)
                    from ud_graph
                ) as list
            from diff_ud
            union all
            select
                curr,
                prv,
                (
                    select json_arrayagg(cnt)
                    from sec_graph
                ) as list
            from diff_sec
        )

        select FLOOR(curr) as value,
               (
                   CASE
                       WHEN curr = 0 and prv = 0 THEN 0
                       WHEN prv != 0 and curr = 0 THEN -100
                       WHEN prv = 0 and curr != 0 THEN 100
                       WHEN curr != 0 and prv != 0 THEN TRUNCATE(((curr/prv)-1)*100, 1)
                       END
                   ) as per,
               list
        from final
 {executed in 46 msec}
2025-04-17 22:27:40.561 INFO  [http-nio-11040-exec-10] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/sale/graph/ct/select/0
2025-04-17 22:27:40.561 INFO  [http-nio-11040-exec-10] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDg5NjQ2MCwiZXhwIjoxNzQ0ODk3MDYwLCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.uVbuNRELM8S426P4ARuDZddYuwDlcWA28qD8L25tWTo
2025-04-17 22:27:40.561 INFO  [http-nio-11040-exec-10] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/sale/graph/ct/select/0
2025-04-17 22:27:40.563 INFO  [http-nio-11040-exec-10] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-17 22:27:40.565 DEBUG [http-nio-11040-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
11. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 1 msec}
2025-04-17 22:27:40.566 INFO  [http-nio-11040-exec-10] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-17 22:27:40.575 DEBUG [http-nio-11040-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
11. with recursive group_generation as (
            select 0 as g
            union all
            select g+1
            from group_generation
            where g < 8
        ), group_weekday as (
            select 0 as g
            union all
            select g+1
            from group_weekday
            where g < 6
        ),  sale as (
            select weekday(actv_dt) as days,
                   device_id,
                   cust_cd,
                   sale_id
            from tb_sale
            where shop_id=2 and

                      seller_id='km1104rs' and

                device_id is not null and
                actv_dt between '2025-04-01' and '2025-04-30'
        ), sale_gene as (
            select sale_id,
                   (
                       case
                           when length(cust_cd) = 6 then floor((year(curdate()) - concat((
                                 case
                                     when substring(cust_cd, 1,2) > '44' then '19'
                                     when substring(cust_cd, 1,2) <= '44' then '20'
                                     end
                                 ),substring(cust_cd,1,2))) / 10)
                           when length(cust_cd) != 6 then null
                           end
                       ) as generation
            from sale
        ), generation as (
            select g,
                   device_id
            from group_generation g
                     left outer join sale_gene sg on g.g=sg.generation
                     left outer join sale s on s.sale_id=sg.sale_id
        ), weekdays as (
            select g,
                   device_id
            from group_weekday w
                     left outer join sale s on s.days=w.g
        )

        select IFNULL(count(device_id),0) as avg
        from generation
        group by g
 {executed in 4 msec}
2025-04-17 22:27:40.585 INFO  [http-nio-11040-exec-6] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/sale/graph/stat/select/0
2025-04-17 22:27:40.586 INFO  [http-nio-11040-exec-6] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDg5NjQ2MCwiZXhwIjoxNzQ0ODk3MDYwLCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.uVbuNRELM8S426P4ARuDZddYuwDlcWA28qD8L25tWTo
2025-04-17 22:27:40.586 INFO  [http-nio-11040-exec-6] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/sale/graph/stat/select/0
2025-04-17 22:27:40.588 INFO  [http-nio-11040-exec-6] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-17 22:27:40.589 DEBUG [http-nio-11040-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
11. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 1 msec}
2025-04-17 22:27:40.590 INFO  [http-nio-11040-exec-6] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-17 22:27:40.595 DEBUG [http-nio-11040-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
11. with base as (select device_id,
                             (SELECT device_nm
                              FROM tb_device
                              WHERE tb_device.device_id = sl.device_id)      as device,
                             sd_id,
                             (SELECT sd_nm
                              FROM tb_second_device
                              WHERE tb_second_device.sd_id = sl.sd_id)       as sec_device,
                             ct_actv_plan,
                             (SELECT ct_plan_nm
                              FROM tb_ct_plan
                              WHERE tb_ct_plan.ct_plan_id = sl.ct_actv_plan) as actv_plan
                      from tb_sale sl
                      where shop_id = 2 and

                                seller_id='km1104rs' and

                        actv_dt between '2025-04-01' and '2025-04-30'),
             device as (SELECT device                   as name,
                               count(device_id) as count
                        from base
                        where device_id is not null
                        group by device),
             sec_device as (SELECT sec_device                   as name,
                                   count(sec_device) as count
                            from base
                            where sd_id is not null
                            group by sec_device),
             actv_plan as (SELECT actv_plan                   as name,
                                  count(actv_plan) as count
                           from base
                           where ct_actv_plan is not null
                           group by actv_plan),
             total as (select count('device') as cnt
                       from base
                       where 'device' is not null
             )

        select name,
               count,
               (
                   IF((select cnt
                       from total) = 0 or count = 0, 0, TRUNCATE(
                              (count / (
                                  select cnt
                                  from total
                              )
                                  ) * 100, 1))
                   ) as per
        from device
        order by per desc
        limit 5
 {executed in 3 msec}
2025-04-17 22:27:40.613 INFO  [http-nio-11040-exec-4] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/sale/graph/ratio/select/0
2025-04-17 22:27:40.613 INFO  [http-nio-11040-exec-4] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDg5NjQ2MCwiZXhwIjoxNzQ0ODk3MDYwLCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.uVbuNRELM8S426P4ARuDZddYuwDlcWA28qD8L25tWTo
2025-04-17 22:27:40.613 INFO  [http-nio-11040-exec-4] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/sale/graph/ratio/select/0
2025-04-17 22:27:40.615 INFO  [http-nio-11040-exec-4] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-17 22:27:40.618 DEBUG [http-nio-11040-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
12. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 2 msec}
2025-04-17 22:27:40.618 INFO  [http-nio-11040-exec-4] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-17 22:27:40.622 DEBUG [http-nio-11040-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
12. with recursive istm_range as (
            select 0 as i
            union all
            select i+1
            from istm_range
            where i<5
        ), base as (
            select ct_istm
            from tb_sale
            where shop_id=2 and

                        seller_id='km1104rs' and

                actv_dt between '2025-04-01' and '2025-04-30'
        ), final as (
            select i as istm,
                   IFNULL(count(base.ct_istm),0) as cnt
            from istm_range
                     left outer join base on base.ct_istm=istm_range.i
            group by i
            order by istm desc
        )

        select json_arrayagg(istm) as type,
               json_arrayagg(cnt) as cnt,
               json_arrayagg(IF((
                      select IFNULL(count(ct_istm), 0)
                      from base
                  ) = 0 or cnt = 0, 0, TRUNCATE((cnt/(
                   select IFNULL(count(ct_istm), 0)
                   from base
               )) * 100, 1))) as per
        from final
 {executed in 2 msec}
2025-04-17 22:27:40.666 INFO  [http-nio-11040-exec-8] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/sale/graph/ct/select/0
2025-04-17 22:27:40.666 INFO  [http-nio-11040-exec-8] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDg5NjQ2MCwiZXhwIjoxNzQ0ODk3MDYwLCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.uVbuNRELM8S426P4ARuDZddYuwDlcWA28qD8L25tWTo
2025-04-17 22:27:40.666 INFO  [http-nio-11040-exec-8] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/sale/graph/ct/select/0
2025-04-17 22:27:40.668 INFO  [http-nio-11040-exec-8] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-17 22:27:40.669 DEBUG [http-nio-11040-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
14. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 1 msec}
2025-04-17 22:27:40.669 INFO  [http-nio-11040-exec-8] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-17 22:27:40.673 DEBUG [http-nio-11040-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
14. with recursive group_generation as (
            select 0 as g
            union all
            select g+1
            from group_generation
            where g < 8
        ), group_weekday as (
            select 0 as g
            union all
            select g+1
            from group_weekday
            where g < 6
        ),  sale as (
            select weekday(actv_dt) as days,
                   device_id,
                   cust_cd,
                   sale_id
            from tb_sale
            where shop_id=2 and

                      seller_id='km1104rs' and

                device_id is not null and
                actv_dt between '2025-04-01' and '2025-04-30'
        ), sale_gene as (
            select sale_id,
                   (
                       case
                           when length(cust_cd) = 6 then floor((year(curdate()) - concat((
                                 case
                                     when substring(cust_cd, 1,2) > '44' then '19'
                                     when substring(cust_cd, 1,2) <= '44' then '20'
                                     end
                                 ),substring(cust_cd,1,2))) / 10)
                           when length(cust_cd) != 6 then null
                           end
                       ) as generation
            from sale
        ), generation as (
            select g,
                   device_id
            from group_generation g
                     left outer join sale_gene sg on g.g=sg.generation
                     left outer join sale s on s.sale_id=sg.sale_id
        ), weekdays as (
            select g,
                   device_id
            from group_weekday w
                     left outer join sale s on s.days=w.g
        )

        select IFNULL(count(device_id),0) as avg
        from generation
        group by g
 {executed in 1 msec}
2025-04-17 22:27:40.688 INFO  [http-nio-11040-exec-3] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/sale/graph/stat/select/0
2025-04-17 22:27:40.688 INFO  [http-nio-11040-exec-3] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDg5NjQ2MCwiZXhwIjoxNzQ0ODk3MDYwLCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.uVbuNRELM8S426P4ARuDZddYuwDlcWA28qD8L25tWTo
2025-04-17 22:27:40.688 INFO  [http-nio-11040-exec-3] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/sale/graph/stat/select/0
2025-04-17 22:27:40.690 INFO  [http-nio-11040-exec-3] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-17 22:27:40.691 DEBUG [http-nio-11040-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
13. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 1 msec}
2025-04-17 22:27:40.691 INFO  [http-nio-11040-exec-3] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-17 22:27:40.695 DEBUG [http-nio-11040-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
13. with base as (select device_id,
                             (SELECT device_nm
                              FROM tb_device
                              WHERE tb_device.device_id = sl.device_id)      as device,
                             sd_id,
                             (SELECT sd_nm
                              FROM tb_second_device
                              WHERE tb_second_device.sd_id = sl.sd_id)       as sec_device,
                             ct_actv_plan,
                             (SELECT ct_plan_nm
                              FROM tb_ct_plan
                              WHERE tb_ct_plan.ct_plan_id = sl.ct_actv_plan) as actv_plan
                      from tb_sale sl
                      where shop_id = 2 and

                                seller_id='km1104rs' and

                        actv_dt between '2025-04-01' and '2025-04-30'),
             device as (SELECT device                   as name,
                               count(device_id) as count
                        from base
                        where device_id is not null
                        group by device),
             sec_device as (SELECT sec_device                   as name,
                                   count(sec_device) as count
                            from base
                            where sd_id is not null
                            group by sec_device),
             actv_plan as (SELECT actv_plan                   as name,
                                  count(actv_plan) as count
                           from base
                           where ct_actv_plan is not null
                           group by actv_plan),
             total as (select count('device') as cnt
                       from base
                       where 'device' is not null
             )

        select name,
               count,
               (
                   IF((select cnt
                       from total) = 0 or count = 0, 0, TRUNCATE(
                              (count / (
                                  select cnt
                                  from total
                              )
                                  ) * 100, 1))
                   ) as per
        from device
        order by per desc
        limit 5
 {executed in 2 msec}
2025-04-17 22:27:40.711 INFO  [http-nio-11040-exec-1] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/sale/graph/ratio/select/0
2025-04-17 22:27:40.711 INFO  [http-nio-11040-exec-1] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDg5NjQ2MCwiZXhwIjoxNzQ0ODk3MDYwLCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.uVbuNRELM8S426P4ARuDZddYuwDlcWA28qD8L25tWTo
2025-04-17 22:27:40.711 INFO  [http-nio-11040-exec-1] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/sale/graph/ratio/select/0
2025-04-17 22:27:40.713 INFO  [http-nio-11040-exec-1] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-17 22:27:40.714 DEBUG [http-nio-11040-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
11. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 1 msec}
2025-04-17 22:27:40.714 INFO  [http-nio-11040-exec-1] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-17 22:27:40.717 DEBUG [http-nio-11040-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
11. with recursive istm_range as (
            select 0 as i
            union all
            select i+1
            from istm_range
            where i<5
        ), base as (
            select ct_istm
            from tb_sale
            where shop_id=2 and

                        seller_id='km1104rs' and

                actv_dt between '2025-04-01' and '2025-04-30'
        ), final as (
            select i as istm,
                   IFNULL(count(base.ct_istm),0) as cnt
            from istm_range
                     left outer join base on base.ct_istm=istm_range.i
            group by i
            order by istm desc
        )

        select json_arrayagg(istm) as type,
               json_arrayagg(cnt) as cnt,
               json_arrayagg(IF((
                      select IFNULL(count(ct_istm), 0)
                      from base
                  ) = 0 or cnt = 0, 0, TRUNCATE((cnt/(
                   select IFNULL(count(ct_istm), 0)
                   from base
               )) * 100, 1))) as per
        from final
 {executed in 1 msec}
2025-04-17 22:27:47.968 INFO  [http-nio-11040-exec-5] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/notif/count/unread
2025-04-17 22:27:47.969 INFO  [http-nio-11040-exec-5] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDg5NjQ2MCwiZXhwIjoxNzQ0ODk3MDYwLCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.uVbuNRELM8S426P4ARuDZddYuwDlcWA28qD8L25tWTo
2025-04-17 22:27:47.969 INFO  [http-nio-11040-exec-5] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/notif/count/unread
2025-04-17 22:27:47.971 INFO  [http-nio-11040-exec-5] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-17 22:27:47.974 DEBUG [http-nio-11040-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
11. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 1 msec}
2025-04-17 22:27:47.974 INFO  [http-nio-11040-exec-5] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-17 22:27:47.975 INFO  [http-nio-11040-exec-5] [c.momo.common.util.SecurityContextUtil] - principal: UserDetailsImpl(username=km1104rs, password=$2a$10$uXShhwl6ULOkbJe477uDWOfdiUUcu6lOSF/Dhj9xP3U1nUn/gXkc6, authorities=[ROLE_NONE])
2025-04-17 22:27:47.977 DEBUG [http-nio-11040-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
11. SELECT count(*)
        FROM tb_notification
        WHERE receiver_id = 'km1104rs'
          AND read_st = FALSE
 {executed in 1 msec}
2025-04-17 22:27:48.883 INFO  [http-nio-11040-exec-2] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/notif/count/unread
2025-04-17 22:27:48.883 INFO  [http-nio-11040-exec-2] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDg5NjQ2MCwiZXhwIjoxNzQ0ODk3MDYwLCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.uVbuNRELM8S426P4ARuDZddYuwDlcWA28qD8L25tWTo
2025-04-17 22:27:48.883 INFO  [http-nio-11040-exec-2] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/notif/count/unread
2025-04-17 22:27:48.885 INFO  [http-nio-11040-exec-2] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-17 22:27:48.888 DEBUG [http-nio-11040-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
12. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 1 msec}
2025-04-17 22:27:48.888 INFO  [http-nio-11040-exec-2] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-17 22:27:48.889 INFO  [http-nio-11040-exec-2] [c.momo.common.util.SecurityContextUtil] - principal: UserDetailsImpl(username=km1104rs, password=$2a$10$uXShhwl6ULOkbJe477uDWOfdiUUcu6lOSF/Dhj9xP3U1nUn/gXkc6, authorities=[ROLE_NONE])
2025-04-17 22:27:48.893 DEBUG [http-nio-11040-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
12. SELECT count(*)
        FROM tb_notification
        WHERE receiver_id = 'km1104rs'
          AND read_st = FALSE
 {executed in 2 msec}
2025-04-17 22:27:48.914 INFO  [http-nio-11040-exec-9] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/sale/graph/ct/select/0
2025-04-17 22:27:48.914 INFO  [http-nio-11040-exec-9] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDg5NjQ2MCwiZXhwIjoxNzQ0ODk3MDYwLCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.uVbuNRELM8S426P4ARuDZddYuwDlcWA28qD8L25tWTo
2025-04-17 22:27:48.914 INFO  [http-nio-11040-exec-9] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/sale/graph/ct/select/0
2025-04-17 22:27:48.917 INFO  [http-nio-11040-exec-9] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-17 22:27:48.919 DEBUG [http-nio-11040-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
13. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 2 msec}
2025-04-17 22:27:48.919 INFO  [http-nio-11040-exec-9] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-17 22:27:48.926 DEBUG [http-nio-11040-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
13. with recursive group_generation as (
            select 0 as g
            union all
            select g+1
            from group_generation
            where g < 8
        ), group_weekday as (
            select 0 as g
            union all
            select g+1
            from group_weekday
            where g < 6
        ),  sale as (
            select weekday(actv_dt) as days,
                   device_id,
                   cust_cd,
                   sale_id
            from tb_sale
            where shop_id=2 and

                      seller_id='km1104rs' and

                device_id is not null and
                actv_dt between '2025-01-01' and '2025-01-31'
        ), sale_gene as (
            select sale_id,
                   (
                       case
                           when length(cust_cd) = 6 then floor((year(curdate()) - concat((
                                 case
                                     when substring(cust_cd, 1,2) > '44' then '19'
                                     when substring(cust_cd, 1,2) <= '44' then '20'
                                     end
                                 ),substring(cust_cd,1,2))) / 10)
                           when length(cust_cd) != 6 then null
                           end
                       ) as generation
            from sale
        ), generation as (
            select g,
                   device_id
            from group_generation g
                     left outer join sale_gene sg on g.g=sg.generation
                     left outer join sale s on s.sale_id=sg.sale_id
        ), weekdays as (
            select g,
                   device_id
            from group_weekday w
                     left outer join sale s on s.days=w.g
        )

        select IFNULL(count(device_id),0) as avg
        from generation
        group by g
 {executed in 3 msec}
2025-04-17 22:27:48.938 INFO  [http-nio-11040-exec-7] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/sale/graph/stat/select/0
2025-04-17 22:27:48.938 INFO  [http-nio-11040-exec-7] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDg5NjQ2MCwiZXhwIjoxNzQ0ODk3MDYwLCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.uVbuNRELM8S426P4ARuDZddYuwDlcWA28qD8L25tWTo
2025-04-17 22:27:48.938 INFO  [http-nio-11040-exec-7] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/sale/graph/stat/select/0
2025-04-17 22:27:48.940 INFO  [http-nio-11040-exec-7] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-17 22:27:48.942 DEBUG [http-nio-11040-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
11. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 1 msec}
2025-04-17 22:27:48.943 INFO  [http-nio-11040-exec-7] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-17 22:27:48.947 DEBUG [http-nio-11040-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
11. with base as (select device_id,
                             (SELECT device_nm
                              FROM tb_device
                              WHERE tb_device.device_id = sl.device_id)      as device,
                             sd_id,
                             (SELECT sd_nm
                              FROM tb_second_device
                              WHERE tb_second_device.sd_id = sl.sd_id)       as sec_device,
                             ct_actv_plan,
                             (SELECT ct_plan_nm
                              FROM tb_ct_plan
                              WHERE tb_ct_plan.ct_plan_id = sl.ct_actv_plan) as actv_plan
                      from tb_sale sl
                      where shop_id = 2 and

                                seller_id='km1104rs' and

                        actv_dt between '2025-01-01' and '2025-01-31'),
             device as (SELECT device                   as name,
                               count(device_id) as count
                        from base
                        where device_id is not null
                        group by device),
             sec_device as (SELECT sec_device                   as name,
                                   count(sec_device) as count
                            from base
                            where sd_id is not null
                            group by sec_device),
             actv_plan as (SELECT actv_plan                   as name,
                                  count(actv_plan) as count
                           from base
                           where ct_actv_plan is not null
                           group by actv_plan),
             total as (select count('device') as cnt
                       from base
                       where 'device' is not null
             )

        select name,
               count,
               (
                   IF((select cnt
                       from total) = 0 or count = 0, 0, TRUNCATE(
                              (count / (
                                  select cnt
                                  from total
                              )
                                  ) * 100, 1))
                   ) as per
        from device
        order by per desc
        limit 5
 {executed in 1 msec}
2025-04-17 22:27:48.962 INFO  [http-nio-11040-exec-10] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/sale/graph/ratio/select/0
2025-04-17 22:27:48.962 INFO  [http-nio-11040-exec-10] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDg5NjQ2MCwiZXhwIjoxNzQ0ODk3MDYwLCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.uVbuNRELM8S426P4ARuDZddYuwDlcWA28qD8L25tWTo
2025-04-17 22:27:48.962 INFO  [http-nio-11040-exec-10] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/sale/graph/ratio/select/0
2025-04-17 22:27:48.964 INFO  [http-nio-11040-exec-10] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-17 22:27:48.966 DEBUG [http-nio-11040-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
11. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 2 msec}
2025-04-17 22:27:48.966 INFO  [http-nio-11040-exec-10] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-17 22:27:48.970 DEBUG [http-nio-11040-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
11. with recursive istm_range as (
            select 0 as i
            union all
            select i+1
            from istm_range
            where i<5
        ), base as (
            select ct_istm
            from tb_sale
            where shop_id=2 and

                        seller_id='km1104rs' and

                actv_dt between '2025-01-01' and '2025-01-31'
        ), final as (
            select i as istm,
                   IFNULL(count(base.ct_istm),0) as cnt
            from istm_range
                     left outer join base on base.ct_istm=istm_range.i
            group by i
            order by istm desc
        )

        select json_arrayagg(istm) as type,
               json_arrayagg(cnt) as cnt,
               json_arrayagg(IF((
                      select IFNULL(count(ct_istm), 0)
                      from base
                  ) = 0 or cnt = 0, 0, TRUNCATE((cnt/(
                   select IFNULL(count(ct_istm), 0)
                   from base
               )) * 100, 1))) as per
        from final
 {executed in 1 msec}
2025-04-17 22:27:48.984 INFO  [http-nio-11040-exec-6] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/sale/graph/summary
2025-04-17 22:27:48.984 INFO  [http-nio-11040-exec-6] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDg5NjQ2MCwiZXhwIjoxNzQ0ODk3MDYwLCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.uVbuNRELM8S426P4ARuDZddYuwDlcWA28qD8L25tWTo
2025-04-17 22:27:48.984 INFO  [http-nio-11040-exec-6] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/sale/graph/summary
2025-04-17 22:27:48.985 INFO  [http-nio-11040-exec-6] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-17 22:27:48.987 DEBUG [http-nio-11040-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
11. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 1 msec}
2025-04-17 22:27:48.987 INFO  [http-nio-11040-exec-6] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-17 22:27:48.988 INFO  [http-nio-11040-exec-6] [com.momo.api.SaleController] - summary: CommonVO(provider=null, date=null, year=null, month=null, day=null, selectType=null, range=null, dateType=null, prevFromYmd=null, prevToYmd=null, currFromYmd=null, currToYmd=null, fromYmd=2024-07-01, toYmd=2025-01-01, fromYm=null, toYm=null, prevDate=null, currDate=null)
2025-04-17 22:27:49.008 DEBUG [http-nio-11040-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
11. #         월별 날짜 구하기
        with recursive month_range as (
            select '2024-07-01' as d
            union all
            select date_add(d, interval 1 month) as d
            from month_range
            where date_add(d, interval 1 month) < '2025-01-01'
        ), months as(
            select month(d) as m
            from month_range
        ), filtered_sale as ( # 판매일보 초벌
            select month(actv_dt) as actv_month,
                   device_id,
                   internet_plan,
                   tv_plan,
                    exsvc_id,
                   total_cms,
                   wt_cms,
                   sale_id,
                   sd_id,
                    shop_id
            from tb_sale
            where shop_id=2 and

                    seller_id='km1104rs' and

                actv_dt between '2024-07-01' and date_add('2025-01-01', interval 1 month)
        ), ct_graph as ( # 무선 그래프 데이터
            SELECT m,
                   count(device_id) as cnt
            FROM months
                     LEFT OUTER JOIN filtered_sale on actv_month = m and
                                                      device_id is not null
            group by m
        ), internet_graph as ( # 인터넷 그래프 데이터
            SELECT m,
                   count(internet_plan) as cnt
            FROM months
                     LEFT OUTER JOIN filtered_sale on actv_month = m  and
                                                      internet_plan is not null
            group by m
        ), tv_graph as ( # TV 그래프 데이터
            SELECT m,
                   count(tv_plan) as cnt
            FROM months
                     LEFT OUTER JOIN filtered_sale on actv_month = m  and
                                                      tv_plan is not null
            group by m
        ), card as ( # 카드 데이터
            SELECT m,
                   (
                    select count(*)
                    from tb_sale_card sc
                    left outer join filtered_sale fs on fs.shop_id = sc.shop_id and
                                                        fs.sale_id = sc.sale_id
                   )  as cnt
            FROM months
                     LEFT OUTER JOIN filtered_sale on actv_month = m
            group by m
        ), exsvc as ( # 부가서비스 데이터
            SELECT m,
                   count(exsvc_id) as cnt
            FROM months
                     LEFT OUTER JOIN filtered_sale on actv_month = m  and
                                                      exsvc_id is not null
            group by m
        ), tc_graph as ( # 총 이익 그래프 데이터
            SELECT m,
                   IFNULL(sum(total_cms), 0) as cnt
            FROM months
                     LEFT OUTER JOIN filtered_sale on actv_month = m
            group by m
        ), avg_margin_graph as ( # 개인 평균 마진 그래프 데이터
            SELECT m,
                   IFNULL(avg(total_cms), 0) as cnt
            FROM months
                     LEFT OUTER JOIN filtered_sale on actv_month = m and
                                                      device_id is not null
            group by m
        ), ud_graph as ( # 중고 개통 그래프 데이터
            SELECT m,
                   count(ud_id) as cnt
            FROM months
                     LEFT OUTER JOIN filtered_sale on actv_month = m
                     LEFT OUTER JOIN tb_sale_used_device sud on sud.sale_id=filtered_sale.sale_id
            group by m
        ), sec_graph as ( # 세컨 그래프 데이터
            SELECT m,
                   count(sd_id) as cnt
            FROM months
                     LEFT OUTER JOIN filtered_sale on actv_month = m and
                                                      sd_id != 0
            group by m
        ), diff_ct as (
            select
                (
                    select cnt
                    from ct_graph
                    limit 4, 1
                ) as prv,
                (
                    select cnt
                    from ct_graph
                    limit 5,1
                ) as curr
            from dual
        ), diff_internet as (
            select
                (
                    select cnt
                    from internet_graph
                    limit 4,1
                ) as prv,
                (
                    select cnt
                    from internet_graph
                    limit 5,1
                ) as curr
            from dual
        ), diff_tv as (
            select
                (
                    select cnt
                    from tv_graph
                    limit 4,1
                ) as prv,
                (
                    select cnt
                    from tv_graph
                    limit 5,1
                ) as curr
            from dual
        ), diff_card as (
            select
                (
                    select cnt
                    from card
                    limit 4,1
                ) as prv,
                (
                    select cnt
                    from card
                    limit 5,1
                ) as curr
            from dual
        ), diff_exsvc as (
            select
                (
                    select cnt
                    from exsvc
                    limit 4,1
                ) as prv,
                (
                    select cnt
                    from exsvc
                    limit 5,1
                ) as curr
            from dual
        ), diff_tc as (
            select
                (
                    select cnt
                    from tc_graph
                    limit 4,1
                ) as prv,
                (
                    select cnt
                    from tc_graph
                    limit 5,1
                ) as curr
            from dual
        ) , diff_margin as (
            select
                (
                    select cnt
                    from avg_margin_graph
                    limit 4,1
                ) as prv,
                (
                    select cnt
                    from avg_margin_graph
                    limit 5,1
                ) as curr
            from dual
        ), diff_ud as (
            select
                (
                    select cnt
                    from ud_graph
                    limit 4,1
                ) as prv,
                (
                    select cnt
                    from ud_graph
                    limit 5,1
                ) as curr
            from dual
        ) , diff_sec as (
            select
                (
                    select cnt
                    from sec_graph
                    limit 4,1
                ) as prv,
                (
                    select cnt
                    from sec_graph
                    limit 5,1
                ) as curr
            from dual
        ), final as (
            select
                curr,
                prv,
                (
                    select json_arrayagg(cnt)
                    from ct_graph
                ) as list
            from diff_ct
            union all
            select
                curr,
                prv,
                (
                    select json_arrayagg(cnt)
                    from internet_graph
                ) as list
            from diff_internet
            union all
            select
                curr,
                prv,
                (
                    select json_arrayagg(cnt)
                    from tv_graph
                ) as list
            from diff_tv
             union all
            select
                curr,
                prv,
                (
                    select json_arrayagg(cnt)
                    from card
                ) as list
            from diff_card
             union all
            select
                curr,
                prv,
                (
                    select json_arrayagg(cnt)
                    from exsvc
                ) as list
            from diff_exsvc
            union all
            select
                curr,
                prv,
                (
                    select json_arrayagg(cnt)
                    from tc_graph
                ) as list
            from diff_tc
            union all
            select
                curr,
                prv,
                (
                    select json_arrayagg(cnt)
                    from avg_margin_graph
                ) as list
            from diff_margin
            union all
            select
                curr,
                prv,
                (
                    select json_arrayagg(cnt)
                    from ud_graph
                ) as list
            from diff_ud
            union all
            select
                curr,
                prv,
                (
                    select json_arrayagg(cnt)
                    from sec_graph
                ) as list
            from diff_sec
        )

        select FLOOR(curr) as value,
               (
                   CASE
                       WHEN curr = 0 and prv = 0 THEN 0
                       WHEN prv != 0 and curr = 0 THEN -100
                       WHEN prv = 0 and curr != 0 THEN 100
                       WHEN curr != 0 and prv != 0 THEN TRUNCATE(((curr/prv)-1)*100, 1)
                       END
                   ) as per,
               list
        from final
 {executed in 13 msec}
2025-04-17 22:27:49.008 INFO  [http-nio-11040-exec-4] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/notif/count/unread
2025-04-17 22:27:49.009 INFO  [http-nio-11040-exec-4] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDg5NjQ2MCwiZXhwIjoxNzQ0ODk3MDYwLCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.uVbuNRELM8S426P4ARuDZddYuwDlcWA28qD8L25tWTo
2025-04-17 22:27:49.009 INFO  [http-nio-11040-exec-4] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/notif/count/unread
2025-04-17 22:27:49.010 INFO  [http-nio-11040-exec-4] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-17 22:27:49.012 DEBUG [http-nio-11040-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
12. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 1 msec}
2025-04-17 22:27:49.012 INFO  [http-nio-11040-exec-4] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-17 22:27:49.013 INFO  [http-nio-11040-exec-4] [c.momo.common.util.SecurityContextUtil] - principal: UserDetailsImpl(username=km1104rs, password=$2a$10$uXShhwl6ULOkbJe477uDWOfdiUUcu6lOSF/Dhj9xP3U1nUn/gXkc6, authorities=[ROLE_NONE])
2025-04-17 22:27:49.015 DEBUG [http-nio-11040-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
12. SELECT count(*)
        FROM tb_notification
        WHERE receiver_id = 'km1104rs'
          AND read_st = FALSE
 {executed in 0 msec}
2025-04-17 22:27:49.048 INFO  [http-nio-11040-exec-8] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/sale/graph/ct/select/0
2025-04-17 22:27:49.048 INFO  [http-nio-11040-exec-8] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDg5NjQ2MCwiZXhwIjoxNzQ0ODk3MDYwLCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.uVbuNRELM8S426P4ARuDZddYuwDlcWA28qD8L25tWTo
2025-04-17 22:27:49.048 INFO  [http-nio-11040-exec-8] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/sale/graph/ct/select/0
2025-04-17 22:27:49.050 INFO  [http-nio-11040-exec-8] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-17 22:27:49.051 DEBUG [http-nio-11040-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
14. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 1 msec}
2025-04-17 22:27:49.052 INFO  [http-nio-11040-exec-8] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-17 22:27:49.056 DEBUG [http-nio-11040-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
14. with recursive group_generation as (
            select 0 as g
            union all
            select g+1
            from group_generation
            where g < 8
        ), group_weekday as (
            select 0 as g
            union all
            select g+1
            from group_weekday
            where g < 6
        ),  sale as (
            select weekday(actv_dt) as days,
                   device_id,
                   cust_cd,
                   sale_id
            from tb_sale
            where shop_id=2 and

                      seller_id='km1104rs' and

                device_id is not null and
                actv_dt between '2025-01-01' and '2025-01-31'
        ), sale_gene as (
            select sale_id,
                   (
                       case
                           when length(cust_cd) = 6 then floor((year(curdate()) - concat((
                                 case
                                     when substring(cust_cd, 1,2) > '44' then '19'
                                     when substring(cust_cd, 1,2) <= '44' then '20'
                                     end
                                 ),substring(cust_cd,1,2))) / 10)
                           when length(cust_cd) != 6 then null
                           end
                       ) as generation
            from sale
        ), generation as (
            select g,
                   device_id
            from group_generation g
                     left outer join sale_gene sg on g.g=sg.generation
                     left outer join sale s on s.sale_id=sg.sale_id
        ), weekdays as (
            select g,
                   device_id
            from group_weekday w
                     left outer join sale s on s.days=w.g
        )

        select IFNULL(count(device_id),0) as avg
        from generation
        group by g
 {executed in 2 msec}
2025-04-17 22:27:49.070 INFO  [http-nio-11040-exec-3] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/sale/graph/stat/select/0
2025-04-17 22:27:49.070 INFO  [http-nio-11040-exec-3] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDg5NjQ2MCwiZXhwIjoxNzQ0ODk3MDYwLCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.uVbuNRELM8S426P4ARuDZddYuwDlcWA28qD8L25tWTo
2025-04-17 22:27:49.070 INFO  [http-nio-11040-exec-3] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/sale/graph/stat/select/0
2025-04-17 22:27:49.072 INFO  [http-nio-11040-exec-3] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-17 22:27:49.074 DEBUG [http-nio-11040-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
13. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 2 msec}
2025-04-17 22:27:49.074 INFO  [http-nio-11040-exec-3] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-17 22:27:49.079 DEBUG [http-nio-11040-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
13. with base as (select device_id,
                             (SELECT device_nm
                              FROM tb_device
                              WHERE tb_device.device_id = sl.device_id)      as device,
                             sd_id,
                             (SELECT sd_nm
                              FROM tb_second_device
                              WHERE tb_second_device.sd_id = sl.sd_id)       as sec_device,
                             ct_actv_plan,
                             (SELECT ct_plan_nm
                              FROM tb_ct_plan
                              WHERE tb_ct_plan.ct_plan_id = sl.ct_actv_plan) as actv_plan
                      from tb_sale sl
                      where shop_id = 2 and

                                seller_id='km1104rs' and

                        actv_dt between '2025-01-01' and '2025-01-31'),
             device as (SELECT device                   as name,
                               count(device_id) as count
                        from base
                        where device_id is not null
                        group by device),
             sec_device as (SELECT sec_device                   as name,
                                   count(sec_device) as count
                            from base
                            where sd_id is not null
                            group by sec_device),
             actv_plan as (SELECT actv_plan                   as name,
                                  count(actv_plan) as count
                           from base
                           where ct_actv_plan is not null
                           group by actv_plan),
             total as (select count('device') as cnt
                       from base
                       where 'device' is not null
             )

        select name,
               count,
               (
                   IF((select cnt
                       from total) = 0 or count = 0, 0, TRUNCATE(
                              (count / (
                                  select cnt
                                  from total
                              )
                                  ) * 100, 1))
                   ) as per
        from device
        order by per desc
        limit 5
 {executed in 1 msec}
2025-04-17 22:27:49.096 INFO  [http-nio-11040-exec-1] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/sale/graph/ratio/select/0
2025-04-17 22:27:49.096 INFO  [http-nio-11040-exec-1] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDg5NjQ2MCwiZXhwIjoxNzQ0ODk3MDYwLCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.uVbuNRELM8S426P4ARuDZddYuwDlcWA28qD8L25tWTo
2025-04-17 22:27:49.096 INFO  [http-nio-11040-exec-1] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/sale/graph/ratio/select/0
2025-04-17 22:27:49.097 INFO  [http-nio-11040-exec-1] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-17 22:27:49.099 DEBUG [http-nio-11040-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
11. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 1 msec}
2025-04-17 22:27:49.099 INFO  [http-nio-11040-exec-1] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-17 22:27:49.102 DEBUG [http-nio-11040-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
11. with recursive istm_range as (
            select 0 as i
            union all
            select i+1
            from istm_range
            where i<5
        ), base as (
            select ct_istm
            from tb_sale
            where shop_id=2 and

                        seller_id='km1104rs' and

                actv_dt between '2025-01-01' and '2025-01-31'
        ), final as (
            select i as istm,
                   IFNULL(count(base.ct_istm),0) as cnt
            from istm_range
                     left outer join base on base.ct_istm=istm_range.i
            group by i
            order by istm desc
        )

        select json_arrayagg(istm) as type,
               json_arrayagg(cnt) as cnt,
               json_arrayagg(IF((
                      select IFNULL(count(ct_istm), 0)
                      from base
                  ) = 0 or cnt = 0, 0, TRUNCATE((cnt/(
                   select IFNULL(count(ct_istm), 0)
                   from base
               )) * 100, 1))) as per
        from final
 {executed in 2 msec}
2025-04-17 22:28:08.591 INFO  [http-nio-11040-exec-5] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/sale/graph/ratio/select/0
2025-04-17 22:28:08.592 INFO  [http-nio-11040-exec-5] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDg5NjQ2MCwiZXhwIjoxNzQ0ODk3MDYwLCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.uVbuNRELM8S426P4ARuDZddYuwDlcWA28qD8L25tWTo
2025-04-17 22:28:08.592 INFO  [http-nio-11040-exec-5] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/sale/graph/ratio/select/0
2025-04-17 22:28:08.594 INFO  [http-nio-11040-exec-5] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-17 22:28:08.597 DEBUG [http-nio-11040-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
11. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 2 msec}
2025-04-17 22:28:08.597 INFO  [http-nio-11040-exec-5] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-17 22:28:08.601 DEBUG [http-nio-11040-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
11. with recursive istm_range as (
            select 0 as i
            union all
            select i+1
            from istm_range
            where i<5
        ), base as (
            select ct_istm
            from tb_sale
            where shop_id=2 and

                        seller_id='km1104rs' and

                actv_dt between '2025-01-01' and '2025-01-31'
        ), final as (
            select i as istm,
                   IFNULL(count(base.ct_istm),0) as cnt
            from istm_range
                     left outer join base on base.ct_istm=istm_range.i
            group by i
            order by istm desc
        )

        select json_arrayagg(istm) as type,
               json_arrayagg(cnt) as cnt,
               json_arrayagg(IF((
                      select IFNULL(count(ct_istm), 0)
                      from base
                  ) = 0 or cnt = 0, 0, TRUNCATE((cnt/(
                   select IFNULL(count(ct_istm), 0)
                   from base
               )) * 100, 1))) as per
        from final
 {executed in 2 msec}
2025-04-17 22:30:01.208 INFO  [http-nio-11040-exec-2] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/sale/graph/ratio/select/0
2025-04-17 22:30:01.209 INFO  [http-nio-11040-exec-2] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDg5NjQ2MCwiZXhwIjoxNzQ0ODk3MDYwLCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.uVbuNRELM8S426P4ARuDZddYuwDlcWA28qD8L25tWTo
2025-04-17 22:30:01.209 INFO  [http-nio-11040-exec-2] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/sale/graph/ratio/select/0
2025-04-17 22:30:01.214 INFO  [http-nio-11040-exec-2] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-17 22:30:01.235 DEBUG [http-nio-11040-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
12. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 18 msec}
2025-04-17 22:30:01.236 INFO  [http-nio-11040-exec-2] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-17 22:30:01.256 DEBUG [http-nio-11040-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
12. with recursive istm_range as (
            select 0 as i
            union all
            select i+1
            from istm_range
            where i<5
        ), base as (
            select ct_istm
            from tb_sale
            where shop_id=2 and

                        seller_id='km1104rs' and

                actv_dt between '2025-01-01' and '2025-01-31'
        ), final as (
            select i as istm,
                   IFNULL(count(base.ct_istm),0) as cnt
            from istm_range
                     left outer join base on base.ct_istm=istm_range.i
            group by i
            order by istm desc
        )

        select json_arrayagg(istm) as type,
               json_arrayagg(cnt) as cnt,
               json_arrayagg(IF((
                      select IFNULL(count(ct_istm), 0)
                      from base
                  ) = 0 or cnt = 0, 0, TRUNCATE((cnt/(
                   select IFNULL(count(ct_istm), 0)
                   from base
               )) * 100, 1))) as per
        from final
 {executed in 3 msec}
2025-04-17 22:30:03.371 INFO  [http-nio-11040-exec-9] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/sale/graph/ratio/select/1
2025-04-17 22:30:03.371 INFO  [http-nio-11040-exec-9] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDg5NjQ2MCwiZXhwIjoxNzQ0ODk3MDYwLCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.uVbuNRELM8S426P4ARuDZddYuwDlcWA28qD8L25tWTo
2025-04-17 22:30:03.371 INFO  [http-nio-11040-exec-9] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/sale/graph/ratio/select/1
2025-04-17 22:30:03.373 INFO  [http-nio-11040-exec-9] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-17 22:30:03.375 DEBUG [http-nio-11040-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
13. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 1 msec}
2025-04-17 22:30:03.375 INFO  [http-nio-11040-exec-9] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-17 22:30:03.379 DEBUG [http-nio-11040-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
13. with recursive maker_range as (
            select 0 as i
            union all
            select i+1
            from maker_range
            where i<2
        ), base as (
            select dc.maker
            from tb_sale sl
            left outer join tb_device dc on sl.device_id=dc.device_id
            where shop_id=2 and

            seller_id='km1104rs' and

                actv_dt between '2025-01-01' and '2025-01-31'
        ), final as (
            select i as maker,
                   IFNULL(count(base.maker),0) as cnt
            from maker_range
                     left outer join base on base.maker=maker_range.i
            group by i
            order by maker asc
        )

        select json_arrayagg(maker) as type,
               json_arrayagg(cnt) as cnt,
               json_arrayagg(IF((
                      select IFNULL(count(maker), 0)
                      from base
                  ) = 0 or cnt = 0, 0, TRUNCATE((cnt/(
                   select IFNULL(count(maker), 0)
                   from base
               )) * 100, 1))) as per
        from final;
 {executed in 2 msec}
2025-04-17 22:30:03.670 INFO  [http-nio-11040-exec-7] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/sale/graph/ratio/select/2
2025-04-17 22:30:03.670 INFO  [http-nio-11040-exec-7] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDg5NjQ2MCwiZXhwIjoxNzQ0ODk3MDYwLCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.uVbuNRELM8S426P4ARuDZddYuwDlcWA28qD8L25tWTo
2025-04-17 22:30:03.670 INFO  [http-nio-11040-exec-7] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/sale/graph/ratio/select/2
2025-04-17 22:30:03.672 INFO  [http-nio-11040-exec-7] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-17 22:30:03.674 DEBUG [http-nio-11040-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
11. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 1 msec}
2025-04-17 22:30:03.674 INFO  [http-nio-11040-exec-7] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-17 22:30:03.679 DEBUG [http-nio-11040-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
11. with recursive actv_tp_range as (
            select 0 as i
            union all
            select i+1
            from actv_tp_range
            where i<2
        ), base as (
            select ct_actv_tp
            from tb_sale
            where shop_id=2 and

            seller_id='km1104rs' and

                actv_dt between '2025-01-01' and '2025-01-31'
        ), final as (
            select i as ct_actv_tp,
                   IFNULL(count(base.ct_actv_tp),0) as cnt
            from actv_tp_range
                     left outer join base on base.ct_actv_tp=actv_tp_range.i
            group by i
           order by ct_actv_tp asc
        )

        select json_arrayagg(ct_actv_tp) as type,
               json_arrayagg(cnt) as cnt,
               json_arrayagg(IF((
                      select IFNULL(count(ct_actv_tp), 0)
                      from base
                  ) = 0 or cnt = 0, 0, TRUNCATE((cnt/(
                   select IFNULL(count(ct_actv_tp), 0)
                   from base
               )) * 100, 1)) ) as per
        from final;
 {executed in 3 msec}
2025-04-17 22:30:03.971 INFO  [http-nio-11040-exec-10] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/sale/graph/ratio/select/3
2025-04-17 22:30:03.972 INFO  [http-nio-11040-exec-10] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDg5NjQ2MCwiZXhwIjoxNzQ0ODk3MDYwLCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.uVbuNRELM8S426P4ARuDZddYuwDlcWA28qD8L25tWTo
2025-04-17 22:30:03.972 INFO  [http-nio-11040-exec-10] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/sale/graph/ratio/select/3
2025-04-17 22:30:03.973 INFO  [http-nio-11040-exec-10] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-17 22:30:03.975 DEBUG [http-nio-11040-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
11. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 1 msec}
2025-04-17 22:30:03.975 INFO  [http-nio-11040-exec-10] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-17 22:30:03.980 DEBUG [http-nio-11040-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
11. with recursive gender_range as (
            select 0 as i
            union all
            select i+1
            from gender_range
            where i<2
        ), base as (
            select cust_gd
            from tb_sale
            where shop_id=2 and

                    seller_id='km1104rs' and

                actv_dt between '2025-01-01' and '2025-01-31'
        ), final as (
            select i as gender,
                   IFNULL(count(base.cust_gd),0) as cnt
            from gender_range
                     left outer join base on base.cust_gd=gender_range.i
            group by i
            order by gender asc
        )

        select json_arrayagg(gender) as type,
               json_arrayagg(cnt) as cnt,
               json_arrayagg(IF((
                      select IFNULL(count(cust_gd), 0)
                      from base
                  ) = 0 or cnt = 0, 0, TRUNCATE((cnt/(
                   select IFNULL(count(cust_gd), 0)
                   from base
               )) * 100, 1))) as per
        from final;
 {executed in 2 msec}
2025-04-17 22:30:04.392 INFO  [http-nio-11040-exec-6] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/sale/graph/ratio/select/0
2025-04-17 22:30:04.392 INFO  [http-nio-11040-exec-6] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDg5NjQ2MCwiZXhwIjoxNzQ0ODk3MDYwLCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.uVbuNRELM8S426P4ARuDZddYuwDlcWA28qD8L25tWTo
2025-04-17 22:30:04.392 INFO  [http-nio-11040-exec-6] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/sale/graph/ratio/select/0
2025-04-17 22:30:04.394 INFO  [http-nio-11040-exec-6] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-17 22:30:04.395 DEBUG [http-nio-11040-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
11. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 1 msec}
2025-04-17 22:30:04.396 INFO  [http-nio-11040-exec-6] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-17 22:30:04.399 DEBUG [http-nio-11040-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
11. with recursive istm_range as (
            select 0 as i
            union all
            select i+1
            from istm_range
            where i<5
        ), base as (
            select ct_istm
            from tb_sale
            where shop_id=2 and

                        seller_id='km1104rs' and

                actv_dt between '2025-01-01' and '2025-01-31'
        ), final as (
            select i as istm,
                   IFNULL(count(base.ct_istm),0) as cnt
            from istm_range
                     left outer join base on base.ct_istm=istm_range.i
            group by i
            order by istm desc
        )

        select json_arrayagg(istm) as type,
               json_arrayagg(cnt) as cnt,
               json_arrayagg(IF((
                      select IFNULL(count(ct_istm), 0)
                      from base
                  ) = 0 or cnt = 0, 0, TRUNCATE((cnt/(
                   select IFNULL(count(ct_istm), 0)
                   from base
               )) * 100, 1))) as per
        from final
 {executed in 1 msec}
2025-04-17 22:30:13.608 INFO  [http-nio-11040-exec-4] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/auth/refresh
2025-04-17 22:30:13.608 INFO  [http-nio-11040-exec-4] [com.momo.filter.JwtAuthorizationFilter] - access token: null
2025-04-17 22:30:13.609 INFO  [http-nio-11040-exec-4] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/auth/refresh
2025-04-17 22:30:13.609 INFO  [http-nio-11040-exec-4] [com.momo.filter.JwtAuthorizationFilter] - 유효한 JWT 토큰이 없습니다
2025-04-17 22:30:13.610 INFO  [http-nio-11040-exec-4] [com.momo.api.AuthController] - refresh
2025-04-17 22:30:13.617 DEBUG [http-nio-11040-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
12. SELECT  *
        FROM    tb_refresh_token
        WHERE   refresh_token='eyJhbGciOiJIUzI1NiJ9.eyJleHAiOjE3NDQ4OTc4NjZ9.kSmR1vpvfQZO8aI4TS_cDu3QOCVvhBkgahzUvCXVn7o'
 {executed in 2 msec}
2025-04-17 22:30:13.619 DEBUG [http-nio-11040-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
12. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 0 msec}
2025-04-17 22:30:13.620 INFO  [http-nio-11040-exec-4] [com.momo.api.AuthController] - jwt: JwtVO(grantType=Bearer , username=km1104rs, accessToken=eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDg5NjYxMywiZXhwIjoxNzQ0ODk3MjEzLCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.QSX5ZaBczFe8YrJzbIL66-RsKa7uKvudSNrcPv_maVA, refreshToken=null, expireTime=null, revoked=false, expired=false)
2025-04-17 22:30:13.644 INFO  [http-nio-11040-exec-8] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/notif/all
2025-04-17 22:30:13.644 INFO  [http-nio-11040-exec-8] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDg5NjYxMywiZXhwIjoxNzQ0ODk3MjEzLCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.QSX5ZaBczFe8YrJzbIL66-RsKa7uKvudSNrcPv_maVA
2025-04-17 22:30:13.644 INFO  [http-nio-11040-exec-8] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/notif/all
2025-04-17 22:30:13.644 INFO  [http-nio-11040-exec-3] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/notif/read/all
2025-04-17 22:30:13.644 INFO  [http-nio-11040-exec-3] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDg5NjYxMywiZXhwIjoxNzQ0ODk3MjEzLCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.QSX5ZaBczFe8YrJzbIL66-RsKa7uKvudSNrcPv_maVA
2025-04-17 22:30:13.644 INFO  [http-nio-11040-exec-3] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/notif/read/all
2025-04-17 22:30:13.646 INFO  [http-nio-11040-exec-8] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-17 22:30:13.646 INFO  [http-nio-11040-exec-3] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-17 22:30:13.648 DEBUG [http-nio-11040-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
14. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 1 msec}
2025-04-17 22:30:13.648 INFO  [http-nio-11040-exec-8] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-17 22:30:13.648 DEBUG [http-nio-11040-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
13. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 2 msec}
2025-04-17 22:30:13.648 INFO  [http-nio-11040-exec-3] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-17 22:30:13.649 INFO  [http-nio-11040-exec-3] [c.momo.common.util.SecurityContextUtil] - principal: UserDetailsImpl(username=km1104rs, password=$2a$10$uXShhwl6ULOkbJe477uDWOfdiUUcu6lOSF/Dhj9xP3U1nUn/gXkc6, authorities=[ROLE_NONE])
2025-04-17 22:30:13.649 INFO  [http-nio-11040-exec-8] [c.momo.common.util.SecurityContextUtil] - principal: UserDetailsImpl(username=km1104rs, password=$2a$10$uXShhwl6ULOkbJe477uDWOfdiUUcu6lOSF/Dhj9xP3U1nUn/gXkc6, authorities=[ROLE_NONE])
2025-04-17 22:30:13.651 INFO  [http-nio-11040-exec-1] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/notif/count/unread
2025-04-17 22:30:13.651 INFO  [http-nio-11040-exec-1] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDg5NjYxMywiZXhwIjoxNzQ0ODk3MjEzLCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.QSX5ZaBczFe8YrJzbIL66-RsKa7uKvudSNrcPv_maVA
2025-04-17 22:30:13.651 INFO  [http-nio-11040-exec-1] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/notif/count/unread
2025-04-17 22:30:13.651 DEBUG [http-nio-11040-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
13. UPDATE tb_notification
        SET read_st = TRUE
        WHERE receiver_id = 'km1104rs'
          AND read_st = FALSE
 {executed in 1 msec}
2025-04-17 22:30:13.652 DEBUG [http-nio-11040-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
14. SELECT content,
               notif_id,
               read_st,
               notif_tp as type,
               IF(date(send_dt) = current_date,true,false) as today,
            (
               TIMESTAMPDIFF(MINUTE, send_dt, current_timestamp)
            ) as ago
        FROM tb_notification
        WHERE receiver_id='km1104rs'
        ORDER BY send_dt DESC
 {executed in 2 msec}
2025-04-17 22:30:13.652 INFO  [http-nio-11040-exec-5] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/user/info
2025-04-17 22:30:13.652 INFO  [http-nio-11040-exec-5] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDg5NjYxMywiZXhwIjoxNzQ0ODk3MjEzLCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.QSX5ZaBczFe8YrJzbIL66-RsKa7uKvudSNrcPv_maVA
2025-04-17 22:30:13.652 INFO  [http-nio-11040-exec-5] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/user/info
2025-04-17 22:30:13.654 INFO  [http-nio-11040-exec-5] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-17 22:30:13.654 INFO  [http-nio-11040-exec-1] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-17 22:30:13.656 DEBUG [http-nio-11040-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
11. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 2 msec}
2025-04-17 22:30:13.656 DEBUG [http-nio-11040-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
12. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 2 msec}
2025-04-17 22:30:13.657 INFO  [http-nio-11040-exec-5] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-17 22:30:13.657 INFO  [http-nio-11040-exec-1] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-17 22:30:13.657 INFO  [http-nio-11040-exec-1] [c.momo.common.util.SecurityContextUtil] - principal: UserDetailsImpl(username=km1104rs, password=$2a$10$uXShhwl6ULOkbJe477uDWOfdiUUcu6lOSF/Dhj9xP3U1nUn/gXkc6, authorities=[ROLE_NONE])
2025-04-17 22:30:13.657 INFO  [http-nio-11040-exec-5] [c.momo.common.util.SecurityContextUtil] - principal: UserDetailsImpl(username=km1104rs, password=$2a$10$uXShhwl6ULOkbJe477uDWOfdiUUcu6lOSF/Dhj9xP3U1nUn/gXkc6, authorities=[ROLE_NONE])
2025-04-17 22:30:13.658 DEBUG [http-nio-11040-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
12. SELECT count(*)
        FROM tb_notification
        WHERE receiver_id = 'km1104rs'
          AND read_st = FALSE
 {executed in 1 msec}
2025-04-17 22:30:13.658 DEBUG [http-nio-11040-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
11. SELECT ac.id,
               ac.name,
               ac.tel,
               ac.nickname,
               ac.pfp,
               ac.curr_shop_id,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where sf.shop_id = ac.curr_shop_id and
                         sf.staff_id = ac.id
                   ) as role,
               sh.shop_nm,
               sh.shop_addr,
               sh.provider,
               (
                   IFNULL((
                       select sf2.approval_st
                       from tb_staff sf2
                       where sf2.shop_id=ac.curr_shop_id and
                           sf2.staff_id=ac.id
                       ), -1)
                ) as approval_st,
                ac.corp_nm,
                ac.br_no
        FROM tb_account ac
        LEFT OUTER JOIN tb_shop sh on sh.shop_id=ac.curr_shop_id
        WHERE id = 'km1104rs'
 {executed in 1 msec}
2025-04-17 22:30:13.659 INFO  [http-nio-11040-exec-5] [com.momo.api.UserController] - User: {role=0, approval_st=1, shop_addr=충청남도 천안시 병천면 충절로 1600 한국기술교육대학교 다산정보관 102, br_no=5218702490, provider=2, name=박희찬, nickname=대표, corp_nm=123, tel=010-4524-0636, id=km1104rs, pfp=1921fc01-e573-4243-9365-6b905389f4fc.png, curr_shop_id=2, shop_nm=한기대점 }
2025-04-17 22:30:13.665 INFO  [http-nio-11040-exec-2] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/notif/count/unread
2025-04-17 22:30:13.665 INFO  [http-nio-11040-exec-2] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDg5NjYxMywiZXhwIjoxNzQ0ODk3MjEzLCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.QSX5ZaBczFe8YrJzbIL66-RsKa7uKvudSNrcPv_maVA
2025-04-17 22:30:13.665 INFO  [http-nio-11040-exec-2] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/notif/count/unread
2025-04-17 22:30:13.667 INFO  [http-nio-11040-exec-2] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-17 22:30:13.669 DEBUG [http-nio-11040-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
12. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 1 msec}
2025-04-17 22:30:13.669 INFO  [http-nio-11040-exec-2] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-17 22:30:13.670 INFO  [http-nio-11040-exec-2] [c.momo.common.util.SecurityContextUtil] - principal: UserDetailsImpl(username=km1104rs, password=$2a$10$uXShhwl6ULOkbJe477uDWOfdiUUcu6lOSF/Dhj9xP3U1nUn/gXkc6, authorities=[ROLE_NONE])
2025-04-17 22:30:13.672 DEBUG [http-nio-11040-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
12. SELECT count(*)
        FROM tb_notification
        WHERE receiver_id = 'km1104rs'
          AND read_st = FALSE
 {executed in 2 msec}
2025-04-17 22:30:13.686 INFO  [http-nio-11040-exec-9] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/notif/count/unread
2025-04-17 22:30:13.686 INFO  [http-nio-11040-exec-9] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDg5NjYxMywiZXhwIjoxNzQ0ODk3MjEzLCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.QSX5ZaBczFe8YrJzbIL66-RsKa7uKvudSNrcPv_maVA
2025-04-17 22:30:13.686 INFO  [http-nio-11040-exec-9] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/notif/count/unread
2025-04-17 22:30:13.687 INFO  [http-nio-11040-exec-9] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-17 22:30:13.688 DEBUG [http-nio-11040-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
13. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 1 msec}
2025-04-17 22:30:13.688 INFO  [http-nio-11040-exec-9] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-17 22:30:13.689 INFO  [http-nio-11040-exec-9] [c.momo.common.util.SecurityContextUtil] - principal: UserDetailsImpl(username=km1104rs, password=$2a$10$uXShhwl6ULOkbJe477uDWOfdiUUcu6lOSF/Dhj9xP3U1nUn/gXkc6, authorities=[ROLE_NONE])
2025-04-17 22:30:13.690 DEBUG [http-nio-11040-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
13. SELECT count(*)
        FROM tb_notification
        WHERE receiver_id = 'km1104rs'
          AND read_st = FALSE
 {executed in 1 msec}
2025-04-17 22:30:13.696 INFO  [http-nio-11040-exec-7] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/sale/graph/ct/d
2025-04-17 22:30:13.696 INFO  [http-nio-11040-exec-7] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDg5NjYxMywiZXhwIjoxNzQ0ODk3MjEzLCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.QSX5ZaBczFe8YrJzbIL66-RsKa7uKvudSNrcPv_maVA
2025-04-17 22:30:13.696 INFO  [http-nio-11040-exec-7] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/sale/graph/ct/d
2025-04-17 22:30:13.698 INFO  [http-nio-11040-exec-7] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-17 22:30:13.699 DEBUG [http-nio-11040-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
11. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 1 msec}
2025-04-17 22:30:13.699 INFO  [http-nio-11040-exec-7] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-17 22:30:13.703 DEBUG [http-nio-11040-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
11. set @limit_cond := (
               case 'd'
                   when 'h' then '2000-01-24'
                   when 'd' then '2025-04-17'
                   when 'w' then '2025-04-17'
                   when 'm' then date_sub('2025-04-17', interval 1 month)
               end
        );

        with recursive org_date_table as (
            select (
                       case
                           when 'd' = 'h' then '2000-01-01'
                           when 'd' != 'h' then '2025-01-17'
                           end
                       ) as it
            union all
            select (
                       case 'd'
                           when 'h' then date_add(it, interval 1 day)
                           when 'd' then date_add(it, interval 1 day)
                           when 'w' then date_add(it, interval 1 week)
                           when 'm' then date_add(it, interval 1 month)
                           end
                       ) as it
            from org_date_table
            where it < @limit_cond
        ), date_table as (
            select
                year(it) as _year,
                (
                    case 'd'
                        when 'h' then day(it)
                        when 'd' then it
                        when 'w' then week(it)
                        when 'm' then month(it)
                        end
                    ) as dt
            from org_date_table
        ),  date_sale as (
            select year(actv_dt) _year,
                   month(actv_dt) as m,
                   week(actv_dt) as w,
                   actv_dt as d,
                   hour(regi_dt) as h,
                   tb_sale.*
            from tb_sale
            where shop_id=2 and

                actv_dt between '2025-01-17' and (
                    case
                        when 'd' = 'h' then '2025-01-17'
                        when 'd' != 'h' then '2025-04-17'
                        end
                    )
        ), final as (
            select count(device_id) as cnt
            from date_table dd
                     left outer join date_sale ds on dd._year=ds._year and
                                                     d = dt
            group by dd._year, dd.dt
        )

        select
            (
                select json_arrayagg(cnt)
                from final
            ) as value,
            (
                select json_arrayagg(date_format(it, '%Y-%m-%d'))
                from org_date_table
            ) as date
 {executed in 1 msec}
2025-04-17 22:30:13.706 INFO  [http-nio-11040-exec-10] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/sale/graph/ct/d
2025-04-17 22:30:13.706 INFO  [http-nio-11040-exec-10] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDg5NjYxMywiZXhwIjoxNzQ0ODk3MjEzLCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.QSX5ZaBczFe8YrJzbIL66-RsKa7uKvudSNrcPv_maVA
2025-04-17 22:30:13.706 INFO  [http-nio-11040-exec-10] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/sale/graph/ct/d
2025-04-17 22:30:13.707 INFO  [http-nio-11040-exec-10] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-17 22:30:13.708 DEBUG [http-nio-11040-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
11. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 1 msec}
2025-04-17 22:30:13.708 INFO  [http-nio-11040-exec-10] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-17 22:30:13.711 DEBUG [http-nio-11040-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
11. set @limit_cond := (
               case 'd'
                   when 'h' then '2000-01-24'
                   when 'd' then '2025-04-16'
                   when 'w' then '2025-04-16'
                   when 'm' then date_sub('2025-04-16', interval 1 month)
               end
        );

        with recursive org_date_table as (
            select (
                       case
                           when 'd' = 'h' then '2000-01-01'
                           when 'd' != 'h' then '2025-04-10'
                           end
                       ) as it
            union all
            select (
                       case 'd'
                           when 'h' then date_add(it, interval 1 day)
                           when 'd' then date_add(it, interval 1 day)
                           when 'w' then date_add(it, interval 1 week)
                           when 'm' then date_add(it, interval 1 month)
                           end
                       ) as it
            from org_date_table
            where it < @limit_cond
        ), date_table as (
            select
                year(it) as _year,
                (
                    case 'd'
                        when 'h' then day(it)
                        when 'd' then it
                        when 'w' then week(it)
                        when 'm' then month(it)
                        end
                    ) as dt
            from org_date_table
        ),  date_sale as (
            select year(actv_dt) _year,
                   month(actv_dt) as m,
                   week(actv_dt) as w,
                   actv_dt as d,
                   hour(regi_dt) as h,
                   tb_sale.*
            from tb_sale
            where shop_id=2 and

                actv_dt between '2025-04-10' and (
                    case
                        when 'd' = 'h' then '2025-04-10'
                        when 'd' != 'h' then '2025-04-16'
                        end
                    )
        ), final as (
            select count(device_id) as cnt
            from date_table dd
                     left outer join date_sale ds on dd._year=ds._year and
                                                     d = dt
            group by dd._year, dd.dt
        )

        select
            (
                select json_arrayagg(cnt)
                from final
            ) as value,
            (
                select json_arrayagg(date_format(it, '%Y-%m-%d'))
                from org_date_table
            ) as date
 {executed in 2 msec}
2025-04-17 22:30:13.716 INFO  [http-nio-11040-exec-6] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/sale/graph/ct/select/0
2025-04-17 22:30:13.716 INFO  [http-nio-11040-exec-6] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDg5NjYxMywiZXhwIjoxNzQ0ODk3MjEzLCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.QSX5ZaBczFe8YrJzbIL66-RsKa7uKvudSNrcPv_maVA
2025-04-17 22:30:13.716 INFO  [http-nio-11040-exec-6] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/sale/graph/ct/select/0
2025-04-17 22:30:13.717 INFO  [http-nio-11040-exec-6] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-17 22:30:13.718 DEBUG [http-nio-11040-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
11. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 1 msec}
2025-04-17 22:30:13.719 INFO  [http-nio-11040-exec-6] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-17 22:30:13.722 DEBUG [http-nio-11040-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
11. with recursive group_generation as (
            select 0 as g
            union all
            select g+1
            from group_generation
            where g < 8
        ), group_weekday as (
            select 0 as g
            union all
            select g+1
            from group_weekday
            where g < 6
        ),  sale as (
            select weekday(actv_dt) as days,
                   device_id,
                   cust_cd,
                   sale_id
            from tb_sale
            where shop_id=2 and

                device_id is not null and
                actv_dt between '2025-04-01' and '2025-04-30'
        ), sale_gene as (
            select sale_id,
                   (
                       case
                           when length(cust_cd) = 6 then floor((year(curdate()) - concat((
                                 case
                                     when substring(cust_cd, 1,2) > '44' then '19'
                                     when substring(cust_cd, 1,2) <= '44' then '20'
                                     end
                                 ),substring(cust_cd,1,2))) / 10)
                           when length(cust_cd) != 6 then null
                           end
                       ) as generation
            from sale
        ), generation as (
            select g,
                   device_id
            from group_generation g
                     left outer join sale_gene sg on g.g=sg.generation
                     left outer join sale s on s.sale_id=sg.sale_id
        ), weekdays as (
            select g,
                   device_id
            from group_weekday w
                     left outer join sale s on s.days=w.g
        )

        select IFNULL(count(device_id),0) as avg
        from generation
        group by g
 {executed in 2 msec}
2025-04-17 22:30:13.727 INFO  [http-nio-11040-exec-4] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/sale/graph/stat/select/0
2025-04-17 22:30:13.727 INFO  [http-nio-11040-exec-4] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDg5NjYxMywiZXhwIjoxNzQ0ODk3MjEzLCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.QSX5ZaBczFe8YrJzbIL66-RsKa7uKvudSNrcPv_maVA
2025-04-17 22:30:13.728 INFO  [http-nio-11040-exec-4] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/sale/graph/stat/select/0
2025-04-17 22:30:13.729 INFO  [http-nio-11040-exec-4] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-17 22:30:13.730 DEBUG [http-nio-11040-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
12. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 1 msec}
2025-04-17 22:30:13.730 INFO  [http-nio-11040-exec-4] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-17 22:30:13.734 DEBUG [http-nio-11040-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
12. with base as (select device_id,
                             (SELECT device_nm
                              FROM tb_device
                              WHERE tb_device.device_id = sl.device_id)      as device,
                             sd_id,
                             (SELECT sd_nm
                              FROM tb_second_device
                              WHERE tb_second_device.sd_id = sl.sd_id)       as sec_device,
                             ct_actv_plan,
                             (SELECT ct_plan_nm
                              FROM tb_ct_plan
                              WHERE tb_ct_plan.ct_plan_id = sl.ct_actv_plan) as actv_plan
                      from tb_sale sl
                      where shop_id = 2 and

                        actv_dt between '2025-04-01' and '2025-04-30'),
             device as (SELECT device                   as name,
                               count(device_id) as count
                        from base
                        where device_id is not null
                        group by device),
             sec_device as (SELECT sec_device                   as name,
                                   count(sec_device) as count
                            from base
                            where sd_id is not null
                            group by sec_device),
             actv_plan as (SELECT actv_plan                   as name,
                                  count(actv_plan) as count
                           from base
                           where ct_actv_plan is not null
                           group by actv_plan),
             total as (select count('device') as cnt
                       from base
                       where 'device' is not null
             )

        select name,
               count,
               (
                   IF((select cnt
                       from total) = 0 or count = 0, 0, TRUNCATE(
                              (count / (
                                  select cnt
                                  from total
                              )
                                  ) * 100, 1))
                   ) as per
        from device
        order by per desc
        limit 5
 {executed in 1 msec}
2025-04-17 22:30:13.737 INFO  [http-nio-11040-exec-3] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/sale/graph/ratio/select/0
2025-04-17 22:30:13.737 INFO  [http-nio-11040-exec-3] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDg5NjYxMywiZXhwIjoxNzQ0ODk3MjEzLCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.QSX5ZaBczFe8YrJzbIL66-RsKa7uKvudSNrcPv_maVA
2025-04-17 22:30:13.737 INFO  [http-nio-11040-exec-3] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/sale/graph/ratio/select/0
2025-04-17 22:30:13.738 INFO  [http-nio-11040-exec-3] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-17 22:30:13.739 DEBUG [http-nio-11040-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
13. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 1 msec}
2025-04-17 22:30:13.739 INFO  [http-nio-11040-exec-3] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-17 22:30:13.742 DEBUG [http-nio-11040-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
13. with recursive istm_range as (
            select 0 as i
            union all
            select i+1
            from istm_range
            where i<5
        ), base as (
            select ct_istm
            from tb_sale
            where shop_id=2 and

                actv_dt between '2025-04-01' and '2025-04-30'
        ), final as (
            select i as istm,
                   IFNULL(count(base.ct_istm),0) as cnt
            from istm_range
                     left outer join base on base.ct_istm=istm_range.i
            group by i
            order by istm desc
        )

        select json_arrayagg(istm) as type,
               json_arrayagg(cnt) as cnt,
               json_arrayagg(IF((
                      select IFNULL(count(ct_istm), 0)
                      from base
                  ) = 0 or cnt = 0, 0, TRUNCATE((cnt/(
                   select IFNULL(count(ct_istm), 0)
                   from base
               )) * 100, 1))) as per
        from final
 {executed in 1 msec}
2025-04-17 22:30:13.746 INFO  [http-nio-11040-exec-8] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/sale/graph/summary
2025-04-17 22:30:13.747 INFO  [http-nio-11040-exec-8] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDg5NjYxMywiZXhwIjoxNzQ0ODk3MjEzLCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.QSX5ZaBczFe8YrJzbIL66-RsKa7uKvudSNrcPv_maVA
2025-04-17 22:30:13.747 INFO  [http-nio-11040-exec-8] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/sale/graph/summary
2025-04-17 22:30:13.748 INFO  [http-nio-11040-exec-8] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-17 22:30:13.749 DEBUG [http-nio-11040-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
14. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 1 msec}
2025-04-17 22:30:13.749 INFO  [http-nio-11040-exec-8] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-17 22:30:13.750 INFO  [http-nio-11040-exec-8] [com.momo.api.SaleController] - summary: CommonVO(provider=null, date=null, year=null, month=null, day=null, selectType=null, range=null, dateType=null, prevFromYmd=null, prevToYmd=null, currFromYmd=null, currToYmd=null, fromYmd=2024-10-01, toYmd=2025-04-01, fromYm=null, toYm=null, prevDate=null, currDate=null)
2025-04-17 22:30:13.786 INFO  [http-nio-11040-exec-1] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/sale/graph/ct/d
2025-04-17 22:30:13.786 INFO  [http-nio-11040-exec-1] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDg5NjYxMywiZXhwIjoxNzQ0ODk3MjEzLCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.QSX5ZaBczFe8YrJzbIL66-RsKa7uKvudSNrcPv_maVA
2025-04-17 22:30:13.787 INFO  [http-nio-11040-exec-1] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/sale/graph/ct/d
2025-04-17 22:30:13.786 DEBUG [http-nio-11040-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
14. #         월별 날짜 구하기
        with recursive month_range as (
            select '2024-10-01' as d
            union all
            select date_add(d, interval 1 month) as d
            from month_range
            where date_add(d, interval 1 month) < '2025-04-01'
        ), months as(
            select month(d) as m
            from month_range
        ), filtered_sale as ( # 판매일보 초벌
            select month(actv_dt) as actv_month,
                   device_id,
                   internet_plan,
                   tv_plan,
                    exsvc_id,
                   total_cms,
                   wt_cms,
                   sale_id,
                   sd_id,
                    shop_id
            from tb_sale
            where shop_id=2 and

                actv_dt between '2024-10-01' and date_add('2025-04-01', interval 1 month)
        ), ct_graph as ( # 무선 그래프 데이터
            SELECT m,
                   count(device_id) as cnt
            FROM months
                     LEFT OUTER JOIN filtered_sale on actv_month = m and
                                                      device_id is not null
            group by m
        ), internet_graph as ( # 인터넷 그래프 데이터
            SELECT m,
                   count(internet_plan) as cnt
            FROM months
                     LEFT OUTER JOIN filtered_sale on actv_month = m  and
                                                      internet_plan is not null
            group by m
        ), tv_graph as ( # TV 그래프 데이터
            SELECT m,
                   count(tv_plan) as cnt
            FROM months
                     LEFT OUTER JOIN filtered_sale on actv_month = m  and
                                                      tv_plan is not null
            group by m
        ), card as ( # 카드 데이터
            SELECT m,
                   (
                    select count(*)
                    from tb_sale_card sc
                    left outer join filtered_sale fs on fs.shop_id = sc.shop_id and
                                                        fs.sale_id = sc.sale_id
                   )  as cnt
            FROM months
                     LEFT OUTER JOIN filtered_sale on actv_month = m
            group by m
        ), exsvc as ( # 부가서비스 데이터
            SELECT m,
                   count(exsvc_id) as cnt
            FROM months
                     LEFT OUTER JOIN filtered_sale on actv_month = m  and
                                                      exsvc_id is not null
            group by m
        ), tc_graph as ( # 총 이익 그래프 데이터
            SELECT m,
                   IFNULL(sum(total_cms), 0) as cnt
            FROM months
                     LEFT OUTER JOIN filtered_sale on actv_month = m
            group by m
        ), avg_margin_graph as ( # 개인 평균 마진 그래프 데이터
            SELECT m,
                   IFNULL(avg(total_cms), 0) as cnt
            FROM months
                     LEFT OUTER JOIN filtered_sale on actv_month = m and
                                                      device_id is not null
            group by m
        ), ud_graph as ( # 중고 개통 그래프 데이터
            SELECT m,
                   count(ud_id) as cnt
            FROM months
                     LEFT OUTER JOIN filtered_sale on actv_month = m
                     LEFT OUTER JOIN tb_sale_used_device sud on sud.sale_id=filtered_sale.sale_id
            group by m
        ), sec_graph as ( # 세컨 그래프 데이터
            SELECT m,
                   count(sd_id) as cnt
            FROM months
                     LEFT OUTER JOIN filtered_sale on actv_month = m and
                                                      sd_id != 0
            group by m
        ), diff_ct as (
            select
                (
                    select cnt
                    from ct_graph
                    limit 4, 1
                ) as prv,
                (
                    select cnt
                    from ct_graph
                    limit 5,1
                ) as curr
            from dual
        ), diff_internet as (
            select
                (
                    select cnt
                    from internet_graph
                    limit 4,1
                ) as prv,
                (
                    select cnt
                    from internet_graph
                    limit 5,1
                ) as curr
            from dual
        ), diff_tv as (
            select
                (
                    select cnt
                    from tv_graph
                    limit 4,1
                ) as prv,
                (
                    select cnt
                    from tv_graph
                    limit 5,1
                ) as curr
            from dual
        ), diff_card as (
            select
                (
                    select cnt
                    from card
                    limit 4,1
                ) as prv,
                (
                    select cnt
                    from card
                    limit 5,1
                ) as curr
            from dual
        ), diff_exsvc as (
            select
                (
                    select cnt
                    from exsvc
                    limit 4,1
                ) as prv,
                (
                    select cnt
                    from exsvc
                    limit 5,1
                ) as curr
            from dual
        ), diff_tc as (
            select
                (
                    select cnt
                    from tc_graph
                    limit 4,1
                ) as prv,
                (
                    select cnt
                    from tc_graph
                    limit 5,1
                ) as curr
            from dual
        ) , diff_margin as (
            select
                (
                    select cnt
                    from avg_margin_graph
                    limit 4,1
                ) as prv,
                (
                    select cnt
                    from avg_margin_graph
                    limit 5,1
                ) as curr
            from dual
        ), diff_ud as (
            select
                (
                    select cnt
                    from ud_graph
                    limit 4,1
                ) as prv,
                (
                    select cnt
                    from ud_graph
                    limit 5,1
                ) as curr
            from dual
        ) , diff_sec as (
            select
                (
                    select cnt
                    from sec_graph
                    limit 4,1
                ) as prv,
                (
                    select cnt
                    from sec_graph
                    limit 5,1
                ) as curr
            from dual
        ), final as (
            select
                curr,
                prv,
                (
                    select json_arrayagg(cnt)
                    from ct_graph
                ) as list
            from diff_ct
            union all
            select
                curr,
                prv,
                (
                    select json_arrayagg(cnt)
                    from internet_graph
                ) as list
            from diff_internet
            union all
            select
                curr,
                prv,
                (
                    select json_arrayagg(cnt)
                    from tv_graph
                ) as list
            from diff_tv
             union all
            select
                curr,
                prv,
                (
                    select json_arrayagg(cnt)
                    from card
                ) as list
            from diff_card
             union all
            select
                curr,
                prv,
                (
                    select json_arrayagg(cnt)
                    from exsvc
                ) as list
            from diff_exsvc
            union all
            select
                curr,
                prv,
                (
                    select json_arrayagg(cnt)
                    from tc_graph
                ) as list
            from diff_tc
            union all
            select
                curr,
                prv,
                (
                    select json_arrayagg(cnt)
                    from avg_margin_graph
                ) as list
            from diff_margin
            union all
            select
                curr,
                prv,
                (
                    select json_arrayagg(cnt)
                    from ud_graph
                ) as list
            from diff_ud
            union all
            select
                curr,
                prv,
                (
                    select json_arrayagg(cnt)
                    from sec_graph
                ) as list
            from diff_sec
        )

        select FLOOR(curr) as value,
               (
                   CASE
                       WHEN curr = 0 and prv = 0 THEN 0
                       WHEN prv != 0 and curr = 0 THEN -100
                       WHEN prv = 0 and curr != 0 THEN 100
                       WHEN curr != 0 and prv != 0 THEN TRUNCATE(((curr/prv)-1)*100, 1)
                       END
                   ) as per,
               list
        from final
 {executed in 32 msec}
2025-04-17 22:30:13.788 INFO  [http-nio-11040-exec-1] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-17 22:30:13.790 DEBUG [http-nio-11040-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
12. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 1 msec}
2025-04-17 22:30:13.790 INFO  [http-nio-11040-exec-1] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-17 22:30:13.794 DEBUG [http-nio-11040-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
12. set @limit_cond := (
               case 'd'
                   when 'h' then '2000-01-24'
                   when 'd' then '2025-04-17'
                   when 'w' then '2025-04-17'
                   when 'm' then date_sub('2025-04-17', interval 1 month)
               end
        );

        with recursive org_date_table as (
            select (
                       case
                           when 'd' = 'h' then '2000-01-01'
                           when 'd' != 'h' then '2025-01-17'
                           end
                       ) as it
            union all
            select (
                       case 'd'
                           when 'h' then date_add(it, interval 1 day)
                           when 'd' then date_add(it, interval 1 day)
                           when 'w' then date_add(it, interval 1 week)
                           when 'm' then date_add(it, interval 1 month)
                           end
                       ) as it
            from org_date_table
            where it < @limit_cond
        ), date_table as (
            select
                year(it) as _year,
                (
                    case 'd'
                        when 'h' then day(it)
                        when 'd' then it
                        when 'w' then week(it)
                        when 'm' then month(it)
                        end
                    ) as dt
            from org_date_table
        ),  date_sale as (
            select year(actv_dt) _year,
                   month(actv_dt) as m,
                   week(actv_dt) as w,
                   actv_dt as d,
                   hour(regi_dt) as h,
                   tb_sale.*
            from tb_sale
            where shop_id=2 and

                    seller_id='km1104rs' and

                actv_dt between '2025-01-17' and (
                    case
                        when 'd' = 'h' then '2025-01-17'
                        when 'd' != 'h' then '2025-04-17'
                        end
                    )
        ), final as (
            select count(device_id) as cnt
            from date_table dd
                     left outer join date_sale ds on dd._year=ds._year and
                                                     d = dt
            group by dd._year, dd.dt
        )

        select
            (
                select json_arrayagg(cnt)
                from final
            ) as value,
            (
                select json_arrayagg(date_format(it, '%Y-%m-%d'))
                from org_date_table
            ) as date
 {executed in 1 msec}
2025-04-17 22:30:13.800 INFO  [http-nio-11040-exec-5] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/sale/graph/ct/d
2025-04-17 22:30:13.800 INFO  [http-nio-11040-exec-5] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDg5NjYxMywiZXhwIjoxNzQ0ODk3MjEzLCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.QSX5ZaBczFe8YrJzbIL66-RsKa7uKvudSNrcPv_maVA
2025-04-17 22:30:13.800 INFO  [http-nio-11040-exec-5] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/sale/graph/ct/d
2025-04-17 22:30:13.802 INFO  [http-nio-11040-exec-5] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-17 22:30:13.803 DEBUG [http-nio-11040-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
11. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 1 msec}
2025-04-17 22:30:13.803 INFO  [http-nio-11040-exec-5] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-17 22:30:13.806 DEBUG [http-nio-11040-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
11. set @limit_cond := (
               case 'd'
                   when 'h' then '2000-01-24'
                   when 'd' then '2025-04-16'
                   when 'w' then '2025-04-16'
                   when 'm' then date_sub('2025-04-16', interval 1 month)
               end
        );

        with recursive org_date_table as (
            select (
                       case
                           when 'd' = 'h' then '2000-01-01'
                           when 'd' != 'h' then '2025-04-10'
                           end
                       ) as it
            union all
            select (
                       case 'd'
                           when 'h' then date_add(it, interval 1 day)
                           when 'd' then date_add(it, interval 1 day)
                           when 'w' then date_add(it, interval 1 week)
                           when 'm' then date_add(it, interval 1 month)
                           end
                       ) as it
            from org_date_table
            where it < @limit_cond
        ), date_table as (
            select
                year(it) as _year,
                (
                    case 'd'
                        when 'h' then day(it)
                        when 'd' then it
                        when 'w' then week(it)
                        when 'm' then month(it)
                        end
                    ) as dt
            from org_date_table
        ),  date_sale as (
            select year(actv_dt) _year,
                   month(actv_dt) as m,
                   week(actv_dt) as w,
                   actv_dt as d,
                   hour(regi_dt) as h,
                   tb_sale.*
            from tb_sale
            where shop_id=2 and

                    seller_id='km1104rs' and

                actv_dt between '2025-04-10' and (
                    case
                        when 'd' = 'h' then '2025-04-10'
                        when 'd' != 'h' then '2025-04-16'
                        end
                    )
        ), final as (
            select count(device_id) as cnt
            from date_table dd
                     left outer join date_sale ds on dd._year=ds._year and
                                                     d = dt
            group by dd._year, dd.dt
        )

        select
            (
                select json_arrayagg(cnt)
                from final
            ) as value,
            (
                select json_arrayagg(date_format(it, '%Y-%m-%d'))
                from org_date_table
            ) as date
 {executed in 1 msec}
2025-04-17 22:30:13.819 INFO  [http-nio-11040-exec-2] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/sale/graph/ct/select/0
2025-04-17 22:30:13.819 INFO  [http-nio-11040-exec-2] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDg5NjYxMywiZXhwIjoxNzQ0ODk3MjEzLCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.QSX5ZaBczFe8YrJzbIL66-RsKa7uKvudSNrcPv_maVA
2025-04-17 22:30:13.819 INFO  [http-nio-11040-exec-2] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/sale/graph/ct/select/0
2025-04-17 22:30:13.821 INFO  [http-nio-11040-exec-2] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-17 22:30:13.823 DEBUG [http-nio-11040-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
12. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 2 msec}
2025-04-17 22:30:13.823 INFO  [http-nio-11040-exec-2] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-17 22:30:13.827 DEBUG [http-nio-11040-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
12. with recursive group_generation as (
            select 0 as g
            union all
            select g+1
            from group_generation
            where g < 8
        ), group_weekday as (
            select 0 as g
            union all
            select g+1
            from group_weekday
            where g < 6
        ),  sale as (
            select weekday(actv_dt) as days,
                   device_id,
                   cust_cd,
                   sale_id
            from tb_sale
            where shop_id=2 and

                      seller_id='km1104rs' and

                device_id is not null and
                actv_dt between '2025-04-01' and '2025-04-30'
        ), sale_gene as (
            select sale_id,
                   (
                       case
                           when length(cust_cd) = 6 then floor((year(curdate()) - concat((
                                 case
                                     when substring(cust_cd, 1,2) > '44' then '19'
                                     when substring(cust_cd, 1,2) <= '44' then '20'
                                     end
                                 ),substring(cust_cd,1,2))) / 10)
                           when length(cust_cd) != 6 then null
                           end
                       ) as generation
            from sale
        ), generation as (
            select g,
                   device_id
            from group_generation g
                     left outer join sale_gene sg on g.g=sg.generation
                     left outer join sale s on s.sale_id=sg.sale_id
        ), weekdays as (
            select g,
                   device_id
            from group_weekday w
                     left outer join sale s on s.days=w.g
        )

        select IFNULL(count(device_id),0) as avg
        from generation
        group by g
 {executed in 2 msec}
2025-04-17 22:30:13.836 INFO  [http-nio-11040-exec-9] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/sale/graph/stat/select/0
2025-04-17 22:30:13.836 INFO  [http-nio-11040-exec-9] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDg5NjYxMywiZXhwIjoxNzQ0ODk3MjEzLCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.QSX5ZaBczFe8YrJzbIL66-RsKa7uKvudSNrcPv_maVA
2025-04-17 22:30:13.836 INFO  [http-nio-11040-exec-9] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/sale/graph/stat/select/0
2025-04-17 22:30:13.838 INFO  [http-nio-11040-exec-9] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-17 22:30:13.840 DEBUG [http-nio-11040-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
13. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 1 msec}
2025-04-17 22:30:13.840 INFO  [http-nio-11040-exec-9] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-17 22:30:13.844 DEBUG [http-nio-11040-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
13. with base as (select device_id,
                             (SELECT device_nm
                              FROM tb_device
                              WHERE tb_device.device_id = sl.device_id)      as device,
                             sd_id,
                             (SELECT sd_nm
                              FROM tb_second_device
                              WHERE tb_second_device.sd_id = sl.sd_id)       as sec_device,
                             ct_actv_plan,
                             (SELECT ct_plan_nm
                              FROM tb_ct_plan
                              WHERE tb_ct_plan.ct_plan_id = sl.ct_actv_plan) as actv_plan
                      from tb_sale sl
                      where shop_id = 2 and

                                seller_id='km1104rs' and

                        actv_dt between '2025-04-01' and '2025-04-30'),
             device as (SELECT device                   as name,
                               count(device_id) as count
                        from base
                        where device_id is not null
                        group by device),
             sec_device as (SELECT sec_device                   as name,
                                   count(sec_device) as count
                            from base
                            where sd_id is not null
                            group by sec_device),
             actv_plan as (SELECT actv_plan                   as name,
                                  count(actv_plan) as count
                           from base
                           where ct_actv_plan is not null
                           group by actv_plan),
             total as (select count('device') as cnt
                       from base
                       where 'device' is not null
             )

        select name,
               count,
               (
                   IF((select cnt
                       from total) = 0 or count = 0, 0, TRUNCATE(
                              (count / (
                                  select cnt
                                  from total
                              )
                                  ) * 100, 1))
                   ) as per
        from device
        order by per desc
        limit 5
 {executed in 2 msec}
2025-04-17 22:30:13.854 INFO  [http-nio-11040-exec-7] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/sale/graph/ratio/select/0
2025-04-17 22:30:13.854 INFO  [http-nio-11040-exec-7] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDg5NjYxMywiZXhwIjoxNzQ0ODk3MjEzLCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.QSX5ZaBczFe8YrJzbIL66-RsKa7uKvudSNrcPv_maVA
2025-04-17 22:30:13.854 INFO  [http-nio-11040-exec-7] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/sale/graph/ratio/select/0
2025-04-17 22:30:13.856 INFO  [http-nio-11040-exec-7] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-17 22:30:13.858 DEBUG [http-nio-11040-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
11. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 2 msec}
2025-04-17 22:30:13.859 INFO  [http-nio-11040-exec-7] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-17 22:30:13.865 DEBUG [http-nio-11040-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
11. with recursive istm_range as (
            select 0 as i
            union all
            select i+1
            from istm_range
            where i<5
        ), base as (
            select ct_istm
            from tb_sale
            where shop_id=2 and

                        seller_id='km1104rs' and

                actv_dt between '2025-04-01' and '2025-04-30'
        ), final as (
            select i as istm,
                   IFNULL(count(base.ct_istm),0) as cnt
            from istm_range
                     left outer join base on base.ct_istm=istm_range.i
            group by i
            order by istm desc
        )

        select json_arrayagg(istm) as type,
               json_arrayagg(cnt) as cnt,
               json_arrayagg(IF((
                      select IFNULL(count(ct_istm), 0)
                      from base
                  ) = 0 or cnt = 0, 0, TRUNCATE((cnt/(
                   select IFNULL(count(ct_istm), 0)
                   from base
               )) * 100, 1))) as per
        from final
 {executed in 3 msec}
2025-04-17 22:30:13.874 INFO  [http-nio-11040-exec-10] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/sale/graph/summary
2025-04-17 22:30:13.874 INFO  [http-nio-11040-exec-10] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDg5NjYxMywiZXhwIjoxNzQ0ODk3MjEzLCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.QSX5ZaBczFe8YrJzbIL66-RsKa7uKvudSNrcPv_maVA
2025-04-17 22:30:13.874 INFO  [http-nio-11040-exec-10] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/sale/graph/summary
2025-04-17 22:30:13.876 INFO  [http-nio-11040-exec-10] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-17 22:30:13.878 DEBUG [http-nio-11040-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
11. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 2 msec}
2025-04-17 22:30:13.878 INFO  [http-nio-11040-exec-10] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-17 22:30:13.880 INFO  [http-nio-11040-exec-10] [com.momo.api.SaleController] - summary: CommonVO(provider=null, date=null, year=null, month=null, day=null, selectType=null, range=null, dateType=null, prevFromYmd=null, prevToYmd=null, currFromYmd=null, currToYmd=null, fromYmd=2024-10-01, toYmd=2025-04-01, fromYm=null, toYm=null, prevDate=null, currDate=null)
2025-04-17 22:30:13.949 DEBUG [http-nio-11040-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
11. #         월별 날짜 구하기
        with recursive month_range as (
            select '2024-10-01' as d
            union all
            select date_add(d, interval 1 month) as d
            from month_range
            where date_add(d, interval 1 month) < '2025-04-01'
        ), months as(
            select month(d) as m
            from month_range
        ), filtered_sale as ( # 판매일보 초벌
            select month(actv_dt) as actv_month,
                   device_id,
                   internet_plan,
                   tv_plan,
                    exsvc_id,
                   total_cms,
                   wt_cms,
                   sale_id,
                   sd_id,
                    shop_id
            from tb_sale
            where shop_id=2 and

                    seller_id='km1104rs' and

                actv_dt between '2024-10-01' and date_add('2025-04-01', interval 1 month)
        ), ct_graph as ( # 무선 그래프 데이터
            SELECT m,
                   count(device_id) as cnt
            FROM months
                     LEFT OUTER JOIN filtered_sale on actv_month = m and
                                                      device_id is not null
            group by m
        ), internet_graph as ( # 인터넷 그래프 데이터
            SELECT m,
                   count(internet_plan) as cnt
            FROM months
                     LEFT OUTER JOIN filtered_sale on actv_month = m  and
                                                      internet_plan is not null
            group by m
        ), tv_graph as ( # TV 그래프 데이터
            SELECT m,
                   count(tv_plan) as cnt
            FROM months
                     LEFT OUTER JOIN filtered_sale on actv_month = m  and
                                                      tv_plan is not null
            group by m
        ), card as ( # 카드 데이터
            SELECT m,
                   (
                    select count(*)
                    from tb_sale_card sc
                    left outer join filtered_sale fs on fs.shop_id = sc.shop_id and
                                                        fs.sale_id = sc.sale_id
                   )  as cnt
            FROM months
                     LEFT OUTER JOIN filtered_sale on actv_month = m
            group by m
        ), exsvc as ( # 부가서비스 데이터
            SELECT m,
                   count(exsvc_id) as cnt
            FROM months
                     LEFT OUTER JOIN filtered_sale on actv_month = m  and
                                                      exsvc_id is not null
            group by m
        ), tc_graph as ( # 총 이익 그래프 데이터
            SELECT m,
                   IFNULL(sum(total_cms), 0) as cnt
            FROM months
                     LEFT OUTER JOIN filtered_sale on actv_month = m
            group by m
        ), avg_margin_graph as ( # 개인 평균 마진 그래프 데이터
            SELECT m,
                   IFNULL(avg(total_cms), 0) as cnt
            FROM months
                     LEFT OUTER JOIN filtered_sale on actv_month = m and
                                                      device_id is not null
            group by m
        ), ud_graph as ( # 중고 개통 그래프 데이터
            SELECT m,
                   count(ud_id) as cnt
            FROM months
                     LEFT OUTER JOIN filtered_sale on actv_month = m
                     LEFT OUTER JOIN tb_sale_used_device sud on sud.sale_id=filtered_sale.sale_id
            group by m
        ), sec_graph as ( # 세컨 그래프 데이터
            SELECT m,
                   count(sd_id) as cnt
            FROM months
                     LEFT OUTER JOIN filtered_sale on actv_month = m and
                                                      sd_id != 0
            group by m
        ), diff_ct as (
            select
                (
                    select cnt
                    from ct_graph
                    limit 4, 1
                ) as prv,
                (
                    select cnt
                    from ct_graph
                    limit 5,1
                ) as curr
            from dual
        ), diff_internet as (
            select
                (
                    select cnt
                    from internet_graph
                    limit 4,1
                ) as prv,
                (
                    select cnt
                    from internet_graph
                    limit 5,1
                ) as curr
            from dual
        ), diff_tv as (
            select
                (
                    select cnt
                    from tv_graph
                    limit 4,1
                ) as prv,
                (
                    select cnt
                    from tv_graph
                    limit 5,1
                ) as curr
            from dual
        ), diff_card as (
            select
                (
                    select cnt
                    from card
                    limit 4,1
                ) as prv,
                (
                    select cnt
                    from card
                    limit 5,1
                ) as curr
            from dual
        ), diff_exsvc as (
            select
                (
                    select cnt
                    from exsvc
                    limit 4,1
                ) as prv,
                (
                    select cnt
                    from exsvc
                    limit 5,1
                ) as curr
            from dual
        ), diff_tc as (
            select
                (
                    select cnt
                    from tc_graph
                    limit 4,1
                ) as prv,
                (
                    select cnt
                    from tc_graph
                    limit 5,1
                ) as curr
            from dual
        ) , diff_margin as (
            select
                (
                    select cnt
                    from avg_margin_graph
                    limit 4,1
                ) as prv,
                (
                    select cnt
                    from avg_margin_graph
                    limit 5,1
                ) as curr
            from dual
        ), diff_ud as (
            select
                (
                    select cnt
                    from ud_graph
                    limit 4,1
                ) as prv,
                (
                    select cnt
                    from ud_graph
                    limit 5,1
                ) as curr
            from dual
        ) , diff_sec as (
            select
                (
                    select cnt
                    from sec_graph
                    limit 4,1
                ) as prv,
                (
                    select cnt
                    from sec_graph
                    limit 5,1
                ) as curr
            from dual
        ), final as (
            select
                curr,
                prv,
                (
                    select json_arrayagg(cnt)
                    from ct_graph
                ) as list
            from diff_ct
            union all
            select
                curr,
                prv,
                (
                    select json_arrayagg(cnt)
                    from internet_graph
                ) as list
            from diff_internet
            union all
            select
                curr,
                prv,
                (
                    select json_arrayagg(cnt)
                    from tv_graph
                ) as list
            from diff_tv
             union all
            select
                curr,
                prv,
                (
                    select json_arrayagg(cnt)
                    from card
                ) as list
            from diff_card
             union all
            select
                curr,
                prv,
                (
                    select json_arrayagg(cnt)
                    from exsvc
                ) as list
            from diff_exsvc
            union all
            select
                curr,
                prv,
                (
                    select json_arrayagg(cnt)
                    from tc_graph
                ) as list
            from diff_tc
            union all
            select
                curr,
                prv,
                (
                    select json_arrayagg(cnt)
                    from avg_margin_graph
                ) as list
            from diff_margin
            union all
            select
                curr,
                prv,
                (
                    select json_arrayagg(cnt)
                    from ud_graph
                ) as list
            from diff_ud
            union all
            select
                curr,
                prv,
                (
                    select json_arrayagg(cnt)
                    from sec_graph
                ) as list
            from diff_sec
        )

        select FLOOR(curr) as value,
               (
                   CASE
                       WHEN curr = 0 and prv = 0 THEN 0
                       WHEN prv != 0 and curr = 0 THEN -100
                       WHEN prv = 0 and curr != 0 THEN 100
                       WHEN curr != 0 and prv != 0 THEN TRUNCATE(((curr/prv)-1)*100, 1)
                       END
                   ) as per,
               list
        from final
 {executed in 64 msec}
2025-04-17 22:30:14.004 INFO  [http-nio-11040-exec-6] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/sale/graph/ct/select/0
2025-04-17 22:30:14.005 INFO  [http-nio-11040-exec-6] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDg5NjYxMywiZXhwIjoxNzQ0ODk3MjEzLCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.QSX5ZaBczFe8YrJzbIL66-RsKa7uKvudSNrcPv_maVA
2025-04-17 22:30:14.005 INFO  [http-nio-11040-exec-6] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/sale/graph/ct/select/0
2025-04-17 22:30:14.007 INFO  [http-nio-11040-exec-6] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-17 22:30:14.010 DEBUG [http-nio-11040-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
11. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 2 msec}
2025-04-17 22:30:14.010 INFO  [http-nio-11040-exec-6] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-17 22:30:14.016 DEBUG [http-nio-11040-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
11. with recursive group_generation as (
            select 0 as g
            union all
            select g+1
            from group_generation
            where g < 8
        ), group_weekday as (
            select 0 as g
            union all
            select g+1
            from group_weekday
            where g < 6
        ),  sale as (
            select weekday(actv_dt) as days,
                   device_id,
                   cust_cd,
                   sale_id
            from tb_sale
            where shop_id=2 and

                      seller_id='km1104rs' and

                device_id is not null and
                actv_dt between '2025-04-01' and '2025-04-30'
        ), sale_gene as (
            select sale_id,
                   (
                       case
                           when length(cust_cd) = 6 then floor((year(curdate()) - concat((
                                 case
                                     when substring(cust_cd, 1,2) > '44' then '19'
                                     when substring(cust_cd, 1,2) <= '44' then '20'
                                     end
                                 ),substring(cust_cd,1,2))) / 10)
                           when length(cust_cd) != 6 then null
                           end
                       ) as generation
            from sale
        ), generation as (
            select g,
                   device_id
            from group_generation g
                     left outer join sale_gene sg on g.g=sg.generation
                     left outer join sale s on s.sale_id=sg.sale_id
        ), weekdays as (
            select g,
                   device_id
            from group_weekday w
                     left outer join sale s on s.days=w.g
        )

        select IFNULL(count(device_id),0) as avg
        from generation
        group by g
 {executed in 2 msec}
2025-04-17 22:30:14.028 INFO  [http-nio-11040-exec-4] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/sale/graph/stat/select/0
2025-04-17 22:30:14.028 INFO  [http-nio-11040-exec-4] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDg5NjYxMywiZXhwIjoxNzQ0ODk3MjEzLCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.QSX5ZaBczFe8YrJzbIL66-RsKa7uKvudSNrcPv_maVA
2025-04-17 22:30:14.028 INFO  [http-nio-11040-exec-4] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/sale/graph/stat/select/0
2025-04-17 22:30:14.032 INFO  [http-nio-11040-exec-4] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-17 22:30:14.034 DEBUG [http-nio-11040-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
12. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 2 msec}
2025-04-17 22:30:14.035 INFO  [http-nio-11040-exec-4] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-17 22:30:14.040 DEBUG [http-nio-11040-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
12. with base as (select device_id,
                             (SELECT device_nm
                              FROM tb_device
                              WHERE tb_device.device_id = sl.device_id)      as device,
                             sd_id,
                             (SELECT sd_nm
                              FROM tb_second_device
                              WHERE tb_second_device.sd_id = sl.sd_id)       as sec_device,
                             ct_actv_plan,
                             (SELECT ct_plan_nm
                              FROM tb_ct_plan
                              WHERE tb_ct_plan.ct_plan_id = sl.ct_actv_plan) as actv_plan
                      from tb_sale sl
                      where shop_id = 2 and

                                seller_id='km1104rs' and

                        actv_dt between '2025-04-01' and '2025-04-30'),
             device as (SELECT device                   as name,
                               count(device_id) as count
                        from base
                        where device_id is not null
                        group by device),
             sec_device as (SELECT sec_device                   as name,
                                   count(sec_device) as count
                            from base
                            where sd_id is not null
                            group by sec_device),
             actv_plan as (SELECT actv_plan                   as name,
                                  count(actv_plan) as count
                           from base
                           where ct_actv_plan is not null
                           group by actv_plan),
             total as (select count('device') as cnt
                       from base
                       where 'device' is not null
             )

        select name,
               count,
               (
                   IF((select cnt
                       from total) = 0 or count = 0, 0, TRUNCATE(
                              (count / (
                                  select cnt
                                  from total
                              )
                                  ) * 100, 1))
                   ) as per
        from device
        order by per desc
        limit 5
 {executed in 1 msec}
2025-04-17 22:30:14.057 INFO  [http-nio-11040-exec-3] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/sale/graph/ratio/select/0
2025-04-17 22:30:14.057 INFO  [http-nio-11040-exec-3] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDg5NjYxMywiZXhwIjoxNzQ0ODk3MjEzLCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.QSX5ZaBczFe8YrJzbIL66-RsKa7uKvudSNrcPv_maVA
2025-04-17 22:30:14.057 INFO  [http-nio-11040-exec-3] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/sale/graph/ratio/select/0
2025-04-17 22:30:14.059 INFO  [http-nio-11040-exec-3] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-17 22:30:14.063 DEBUG [http-nio-11040-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
13. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 3 msec}
2025-04-17 22:30:14.064 INFO  [http-nio-11040-exec-3] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-17 22:30:14.069 DEBUG [http-nio-11040-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
13. with recursive istm_range as (
            select 0 as i
            union all
            select i+1
            from istm_range
            where i<5
        ), base as (
            select ct_istm
            from tb_sale
            where shop_id=2 and

                        seller_id='km1104rs' and

                actv_dt between '2025-04-01' and '2025-04-30'
        ), final as (
            select i as istm,
                   IFNULL(count(base.ct_istm),0) as cnt
            from istm_range
                     left outer join base on base.ct_istm=istm_range.i
            group by i
            order by istm desc
        )

        select json_arrayagg(istm) as type,
               json_arrayagg(cnt) as cnt,
               json_arrayagg(IF((
                      select IFNULL(count(ct_istm), 0)
                      from base
                  ) = 0 or cnt = 0, 0, TRUNCATE((cnt/(
                   select IFNULL(count(ct_istm), 0)
                   from base
               )) * 100, 1))) as per
        from final
 {executed in 3 msec}
2025-04-17 22:30:14.115 INFO  [http-nio-11040-exec-8] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/sale/graph/ct/select/0
2025-04-17 22:30:14.115 INFO  [http-nio-11040-exec-8] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDg5NjYxMywiZXhwIjoxNzQ0ODk3MjEzLCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.QSX5ZaBczFe8YrJzbIL66-RsKa7uKvudSNrcPv_maVA
2025-04-17 22:30:14.115 INFO  [http-nio-11040-exec-8] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/sale/graph/ct/select/0
2025-04-17 22:30:14.117 INFO  [http-nio-11040-exec-8] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-17 22:30:14.118 DEBUG [http-nio-11040-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
14. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 1 msec}
2025-04-17 22:30:14.118 INFO  [http-nio-11040-exec-8] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-17 22:30:14.122 DEBUG [http-nio-11040-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
14. with recursive group_generation as (
            select 0 as g
            union all
            select g+1
            from group_generation
            where g < 8
        ), group_weekday as (
            select 0 as g
            union all
            select g+1
            from group_weekday
            where g < 6
        ),  sale as (
            select weekday(actv_dt) as days,
                   device_id,
                   cust_cd,
                   sale_id
            from tb_sale
            where shop_id=2 and

                      seller_id='km1104rs' and

                device_id is not null and
                actv_dt between '2025-04-01' and '2025-04-30'
        ), sale_gene as (
            select sale_id,
                   (
                       case
                           when length(cust_cd) = 6 then floor((year(curdate()) - concat((
                                 case
                                     when substring(cust_cd, 1,2) > '44' then '19'
                                     when substring(cust_cd, 1,2) <= '44' then '20'
                                     end
                                 ),substring(cust_cd,1,2))) / 10)
                           when length(cust_cd) != 6 then null
                           end
                       ) as generation
            from sale
        ), generation as (
            select g,
                   device_id
            from group_generation g
                     left outer join sale_gene sg on g.g=sg.generation
                     left outer join sale s on s.sale_id=sg.sale_id
        ), weekdays as (
            select g,
                   device_id
            from group_weekday w
                     left outer join sale s on s.days=w.g
        )

        select IFNULL(count(device_id),0) as avg
        from generation
        group by g
 {executed in 2 msec}
2025-04-17 22:30:14.134 INFO  [http-nio-11040-exec-1] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/sale/graph/stat/select/0
2025-04-17 22:30:14.135 INFO  [http-nio-11040-exec-1] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDg5NjYxMywiZXhwIjoxNzQ0ODk3MjEzLCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.QSX5ZaBczFe8YrJzbIL66-RsKa7uKvudSNrcPv_maVA
2025-04-17 22:30:14.135 INFO  [http-nio-11040-exec-1] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/sale/graph/stat/select/0
2025-04-17 22:30:14.143 INFO  [http-nio-11040-exec-1] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-17 22:30:14.146 DEBUG [http-nio-11040-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
12. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 3 msec}
2025-04-17 22:30:14.146 INFO  [http-nio-11040-exec-1] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-17 22:30:14.150 DEBUG [http-nio-11040-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
12. with base as (select device_id,
                             (SELECT device_nm
                              FROM tb_device
                              WHERE tb_device.device_id = sl.device_id)      as device,
                             sd_id,
                             (SELECT sd_nm
                              FROM tb_second_device
                              WHERE tb_second_device.sd_id = sl.sd_id)       as sec_device,
                             ct_actv_plan,
                             (SELECT ct_plan_nm
                              FROM tb_ct_plan
                              WHERE tb_ct_plan.ct_plan_id = sl.ct_actv_plan) as actv_plan
                      from tb_sale sl
                      where shop_id = 2 and

                                seller_id='km1104rs' and

                        actv_dt between '2025-04-01' and '2025-04-30'),
             device as (SELECT device                   as name,
                               count(device_id) as count
                        from base
                        where device_id is not null
                        group by device),
             sec_device as (SELECT sec_device                   as name,
                                   count(sec_device) as count
                            from base
                            where sd_id is not null
                            group by sec_device),
             actv_plan as (SELECT actv_plan                   as name,
                                  count(actv_plan) as count
                           from base
                           where ct_actv_plan is not null
                           group by actv_plan),
             total as (select count('device') as cnt
                       from base
                       where 'device' is not null
             )

        select name,
               count,
               (
                   IF((select cnt
                       from total) = 0 or count = 0, 0, TRUNCATE(
                              (count / (
                                  select cnt
                                  from total
                              )
                                  ) * 100, 1))
                   ) as per
        from device
        order by per desc
        limit 5
 {executed in 2 msec}
2025-04-17 22:30:14.162 INFO  [http-nio-11040-exec-5] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/sale/graph/ratio/select/0
2025-04-17 22:30:14.162 INFO  [http-nio-11040-exec-5] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDg5NjYxMywiZXhwIjoxNzQ0ODk3MjEzLCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.QSX5ZaBczFe8YrJzbIL66-RsKa7uKvudSNrcPv_maVA
2025-04-17 22:30:14.162 INFO  [http-nio-11040-exec-5] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/sale/graph/ratio/select/0
2025-04-17 22:30:14.164 INFO  [http-nio-11040-exec-5] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-17 22:30:14.165 DEBUG [http-nio-11040-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
11. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 1 msec}
2025-04-17 22:30:14.165 INFO  [http-nio-11040-exec-5] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-17 22:30:14.168 DEBUG [http-nio-11040-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
11. with recursive istm_range as (
            select 0 as i
            union all
            select i+1
            from istm_range
            where i<5
        ), base as (
            select ct_istm
            from tb_sale
            where shop_id=2 and

                        seller_id='km1104rs' and

                actv_dt between '2025-04-01' and '2025-04-30'
        ), final as (
            select i as istm,
                   IFNULL(count(base.ct_istm),0) as cnt
            from istm_range
                     left outer join base on base.ct_istm=istm_range.i
            group by i
            order by istm desc
        )

        select json_arrayagg(istm) as type,
               json_arrayagg(cnt) as cnt,
               json_arrayagg(IF((
                      select IFNULL(count(ct_istm), 0)
                      from base
                  ) = 0 or cnt = 0, 0, TRUNCATE((cnt/(
                   select IFNULL(count(ct_istm), 0)
                   from base
               )) * 100, 1))) as per
        from final
 {executed in 2 msec}
2025-04-17 22:30:22.301 INFO  [http-nio-11040-exec-2] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/auth/refresh
2025-04-17 22:30:22.301 INFO  [http-nio-11040-exec-2] [com.momo.filter.JwtAuthorizationFilter] - access token: null
2025-04-17 22:30:22.301 INFO  [http-nio-11040-exec-2] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/auth/refresh
2025-04-17 22:30:22.301 INFO  [http-nio-11040-exec-2] [com.momo.filter.JwtAuthorizationFilter] - 유효한 JWT 토큰이 없습니다
2025-04-17 22:30:22.303 INFO  [http-nio-11040-exec-2] [com.momo.api.AuthController] - refresh
2025-04-17 22:30:22.310 DEBUG [http-nio-11040-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
12. SELECT  *
        FROM    tb_refresh_token
        WHERE   refresh_token='eyJhbGciOiJIUzI1NiJ9.eyJleHAiOjE3NDQ4OTc4NjZ9.kSmR1vpvfQZO8aI4TS_cDu3QOCVvhBkgahzUvCXVn7o'
 {executed in 2 msec}
2025-04-17 22:30:22.312 DEBUG [http-nio-11040-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
12. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 1 msec}
2025-04-17 22:30:22.315 INFO  [http-nio-11040-exec-2] [com.momo.api.AuthController] - jwt: JwtVO(grantType=Bearer , username=km1104rs, accessToken=eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDg5NjYyMiwiZXhwIjoxNzQ0ODk3MjIyLCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.wm7jFLxCam8FRVJxM7Ych38CxJ_3rzCnPGu7FnKsj44, refreshToken=null, expireTime=null, revoked=false, expired=false)
2025-04-17 22:30:22.345 INFO  [http-nio-11040-exec-9] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/notif/all
2025-04-17 22:30:22.345 INFO  [http-nio-11040-exec-9] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDg5NjYyMiwiZXhwIjoxNzQ0ODk3MjIyLCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.wm7jFLxCam8FRVJxM7Ych38CxJ_3rzCnPGu7FnKsj44
2025-04-17 22:30:22.345 INFO  [http-nio-11040-exec-9] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/notif/all
2025-04-17 22:30:22.348 INFO  [http-nio-11040-exec-9] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-17 22:30:22.348 INFO  [http-nio-11040-exec-7] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/notif/read/all
2025-04-17 22:30:22.348 INFO  [http-nio-11040-exec-7] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDg5NjYyMiwiZXhwIjoxNzQ0ODk3MjIyLCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.wm7jFLxCam8FRVJxM7Ych38CxJ_3rzCnPGu7FnKsj44
2025-04-17 22:30:22.348 INFO  [http-nio-11040-exec-7] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/notif/read/all
2025-04-17 22:30:22.349 INFO  [http-nio-11040-exec-7] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-17 22:30:22.349 DEBUG [http-nio-11040-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
13. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 1 msec}
2025-04-17 22:30:22.349 INFO  [http-nio-11040-exec-9] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-17 22:30:22.350 INFO  [http-nio-11040-exec-9] [c.momo.common.util.SecurityContextUtil] - principal: UserDetailsImpl(username=km1104rs, password=$2a$10$uXShhwl6ULOkbJe477uDWOfdiUUcu6lOSF/Dhj9xP3U1nUn/gXkc6, authorities=[ROLE_NONE])
2025-04-17 22:30:22.351 INFO  [http-nio-11040-exec-10] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/notif/count/unread
2025-04-17 22:30:22.351 INFO  [http-nio-11040-exec-10] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDg5NjYyMiwiZXhwIjoxNzQ0ODk3MjIyLCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.wm7jFLxCam8FRVJxM7Ych38CxJ_3rzCnPGu7FnKsj44
2025-04-17 22:30:22.351 INFO  [http-nio-11040-exec-10] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/notif/count/unread
2025-04-17 22:30:22.351 DEBUG [http-nio-11040-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
11. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 2 msec}
2025-04-17 22:30:22.351 INFO  [http-nio-11040-exec-7] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-17 22:30:22.352 INFO  [http-nio-11040-exec-7] [c.momo.common.util.SecurityContextUtil] - principal: UserDetailsImpl(username=km1104rs, password=$2a$10$uXShhwl6ULOkbJe477uDWOfdiUUcu6lOSF/Dhj9xP3U1nUn/gXkc6, authorities=[ROLE_NONE])
2025-04-17 22:30:22.353 DEBUG [http-nio-11040-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
13. SELECT content,
               notif_id,
               read_st,
               notif_tp as type,
               IF(date(send_dt) = current_date,true,false) as today,
            (
               TIMESTAMPDIFF(MINUTE, send_dt, current_timestamp)
            ) as ago
        FROM tb_notification
        WHERE receiver_id='km1104rs'
        ORDER BY send_dt DESC
 {executed in 1 msec}
2025-04-17 22:30:22.354 INFO  [http-nio-11040-exec-10] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-17 22:30:22.354 DEBUG [http-nio-11040-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
11. UPDATE tb_notification
        SET read_st = TRUE
        WHERE receiver_id = 'km1104rs'
          AND read_st = FALSE
 {executed in 1 msec}
2025-04-17 22:30:22.355 INFO  [http-nio-11040-exec-6] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/user/info
2025-04-17 22:30:22.355 INFO  [http-nio-11040-exec-6] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDg5NjYyMiwiZXhwIjoxNzQ0ODk3MjIyLCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.wm7jFLxCam8FRVJxM7Ych38CxJ_3rzCnPGu7FnKsj44
2025-04-17 22:30:22.355 INFO  [http-nio-11040-exec-6] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/user/info
2025-04-17 22:30:22.357 DEBUG [http-nio-11040-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
12. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 2 msec}
2025-04-17 22:30:22.357 INFO  [http-nio-11040-exec-10] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-17 22:30:22.358 INFO  [http-nio-11040-exec-10] [c.momo.common.util.SecurityContextUtil] - principal: UserDetailsImpl(username=km1104rs, password=$2a$10$uXShhwl6ULOkbJe477uDWOfdiUUcu6lOSF/Dhj9xP3U1nUn/gXkc6, authorities=[ROLE_NONE])
2025-04-17 22:30:22.359 INFO  [http-nio-11040-exec-6] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-17 22:30:22.360 DEBUG [http-nio-11040-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
12. SELECT count(*)
        FROM tb_notification
        WHERE receiver_id = 'km1104rs'
          AND read_st = FALSE
 {executed in 1 msec}
2025-04-17 22:30:22.360 DEBUG [http-nio-11040-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
11. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 1 msec}
2025-04-17 22:30:22.360 INFO  [http-nio-11040-exec-6] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-17 22:30:22.361 INFO  [http-nio-11040-exec-6] [c.momo.common.util.SecurityContextUtil] - principal: UserDetailsImpl(username=km1104rs, password=$2a$10$uXShhwl6ULOkbJe477uDWOfdiUUcu6lOSF/Dhj9xP3U1nUn/gXkc6, authorities=[ROLE_NONE])
2025-04-17 22:30:22.364 DEBUG [http-nio-11040-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
11. SELECT ac.id,
               ac.name,
               ac.tel,
               ac.nickname,
               ac.pfp,
               ac.curr_shop_id,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where sf.shop_id = ac.curr_shop_id and
                         sf.staff_id = ac.id
                   ) as role,
               sh.shop_nm,
               sh.shop_addr,
               sh.provider,
               (
                   IFNULL((
                       select sf2.approval_st
                       from tb_staff sf2
                       where sf2.shop_id=ac.curr_shop_id and
                           sf2.staff_id=ac.id
                       ), -1)
                ) as approval_st,
                ac.corp_nm,
                ac.br_no
        FROM tb_account ac
        LEFT OUTER JOIN tb_shop sh on sh.shop_id=ac.curr_shop_id
        WHERE id = 'km1104rs'
 {executed in 3 msec}
2025-04-17 22:30:22.364 INFO  [http-nio-11040-exec-6] [com.momo.api.UserController] - User: {role=0, approval_st=1, shop_addr=충청남도 천안시 병천면 충절로 1600 한국기술교육대학교 다산정보관 102, br_no=5218702490, provider=2, name=박희찬, nickname=대표, corp_nm=123, tel=010-4524-0636, id=km1104rs, pfp=1921fc01-e573-4243-9365-6b905389f4fc.png, curr_shop_id=2, shop_nm=한기대점 }
2025-04-17 22:30:22.366 INFO  [http-nio-11040-exec-4] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/notif/count/unread
2025-04-17 22:30:22.366 INFO  [http-nio-11040-exec-4] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDg5NjYyMiwiZXhwIjoxNzQ0ODk3MjIyLCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.wm7jFLxCam8FRVJxM7Ych38CxJ_3rzCnPGu7FnKsj44
2025-04-17 22:30:22.366 INFO  [http-nio-11040-exec-4] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/notif/count/unread
2025-04-17 22:30:22.369 INFO  [http-nio-11040-exec-4] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-17 22:30:22.370 DEBUG [http-nio-11040-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
12. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 1 msec}
2025-04-17 22:30:22.371 INFO  [http-nio-11040-exec-4] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-17 22:30:22.371 INFO  [http-nio-11040-exec-4] [c.momo.common.util.SecurityContextUtil] - principal: UserDetailsImpl(username=km1104rs, password=$2a$10$uXShhwl6ULOkbJe477uDWOfdiUUcu6lOSF/Dhj9xP3U1nUn/gXkc6, authorities=[ROLE_NONE])
2025-04-17 22:30:22.373 DEBUG [http-nio-11040-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
12. SELECT count(*)
        FROM tb_notification
        WHERE receiver_id = 'km1104rs'
          AND read_st = FALSE
 {executed in 1 msec}
2025-04-17 22:30:22.393 INFO  [http-nio-11040-exec-3] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/notif/count/unread
2025-04-17 22:30:22.393 INFO  [http-nio-11040-exec-3] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDg5NjYyMiwiZXhwIjoxNzQ0ODk3MjIyLCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.wm7jFLxCam8FRVJxM7Ych38CxJ_3rzCnPGu7FnKsj44
2025-04-17 22:30:22.393 INFO  [http-nio-11040-exec-3] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/notif/count/unread
2025-04-17 22:30:22.394 INFO  [http-nio-11040-exec-3] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-17 22:30:22.395 DEBUG [http-nio-11040-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
13. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 1 msec}
2025-04-17 22:30:22.395 INFO  [http-nio-11040-exec-3] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-17 22:30:22.396 INFO  [http-nio-11040-exec-3] [c.momo.common.util.SecurityContextUtil] - principal: UserDetailsImpl(username=km1104rs, password=$2a$10$uXShhwl6ULOkbJe477uDWOfdiUUcu6lOSF/Dhj9xP3U1nUn/gXkc6, authorities=[ROLE_NONE])
2025-04-17 22:30:22.397 DEBUG [http-nio-11040-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
13. SELECT count(*)
        FROM tb_notification
        WHERE receiver_id = 'km1104rs'
          AND read_st = FALSE
 {executed in 1 msec}
2025-04-17 22:30:22.403 INFO  [http-nio-11040-exec-8] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/sale/graph/ct/d
2025-04-17 22:30:22.403 INFO  [http-nio-11040-exec-8] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDg5NjYyMiwiZXhwIjoxNzQ0ODk3MjIyLCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.wm7jFLxCam8FRVJxM7Ych38CxJ_3rzCnPGu7FnKsj44
2025-04-17 22:30:22.403 INFO  [http-nio-11040-exec-8] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/sale/graph/ct/d
2025-04-17 22:30:22.404 INFO  [http-nio-11040-exec-8] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-17 22:30:22.405 DEBUG [http-nio-11040-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
14. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 1 msec}
2025-04-17 22:30:22.405 INFO  [http-nio-11040-exec-8] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-17 22:30:22.409 DEBUG [http-nio-11040-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
14. set @limit_cond := (
               case 'd'
                   when 'h' then '2000-01-24'
                   when 'd' then '2025-04-17'
                   when 'w' then '2025-04-17'
                   when 'm' then date_sub('2025-04-17', interval 1 month)
               end
        );

        with recursive org_date_table as (
            select (
                       case
                           when 'd' = 'h' then '2000-01-01'
                           when 'd' != 'h' then '2025-01-17'
                           end
                       ) as it
            union all
            select (
                       case 'd'
                           when 'h' then date_add(it, interval 1 day)
                           when 'd' then date_add(it, interval 1 day)
                           when 'w' then date_add(it, interval 1 week)
                           when 'm' then date_add(it, interval 1 month)
                           end
                       ) as it
            from org_date_table
            where it < @limit_cond
        ), date_table as (
            select
                year(it) as _year,
                (
                    case 'd'
                        when 'h' then day(it)
                        when 'd' then it
                        when 'w' then week(it)
                        when 'm' then month(it)
                        end
                    ) as dt
            from org_date_table
        ),  date_sale as (
            select year(actv_dt) _year,
                   month(actv_dt) as m,
                   week(actv_dt) as w,
                   actv_dt as d,
                   hour(regi_dt) as h,
                   tb_sale.*
            from tb_sale
            where shop_id=2 and

                actv_dt between '2025-01-17' and (
                    case
                        when 'd' = 'h' then '2025-01-17'
                        when 'd' != 'h' then '2025-04-17'
                        end
                    )
        ), final as (
            select count(device_id) as cnt
            from date_table dd
                     left outer join date_sale ds on dd._year=ds._year and
                                                     d = dt
            group by dd._year, dd.dt
        )

        select
            (
                select json_arrayagg(cnt)
                from final
            ) as value,
            (
                select json_arrayagg(date_format(it, '%Y-%m-%d'))
                from org_date_table
            ) as date
 {executed in 1 msec}
2025-04-17 22:30:22.414 INFO  [http-nio-11040-exec-1] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/sale/graph/ct/d
2025-04-17 22:30:22.414 INFO  [http-nio-11040-exec-1] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDg5NjYyMiwiZXhwIjoxNzQ0ODk3MjIyLCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.wm7jFLxCam8FRVJxM7Ych38CxJ_3rzCnPGu7FnKsj44
2025-04-17 22:30:22.414 INFO  [http-nio-11040-exec-1] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/sale/graph/ct/d
2025-04-17 22:30:22.415 INFO  [http-nio-11040-exec-1] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-17 22:30:22.416 DEBUG [http-nio-11040-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
12. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 1 msec}
2025-04-17 22:30:22.416 INFO  [http-nio-11040-exec-1] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-17 22:30:22.419 DEBUG [http-nio-11040-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
12. set @limit_cond := (
               case 'd'
                   when 'h' then '2000-01-24'
                   when 'd' then '2025-04-16'
                   when 'w' then '2025-04-16'
                   when 'm' then date_sub('2025-04-16', interval 1 month)
               end
        );

        with recursive org_date_table as (
            select (
                       case
                           when 'd' = 'h' then '2000-01-01'
                           when 'd' != 'h' then '2025-04-10'
                           end
                       ) as it
            union all
            select (
                       case 'd'
                           when 'h' then date_add(it, interval 1 day)
                           when 'd' then date_add(it, interval 1 day)
                           when 'w' then date_add(it, interval 1 week)
                           when 'm' then date_add(it, interval 1 month)
                           end
                       ) as it
            from org_date_table
            where it < @limit_cond
        ), date_table as (
            select
                year(it) as _year,
                (
                    case 'd'
                        when 'h' then day(it)
                        when 'd' then it
                        when 'w' then week(it)
                        when 'm' then month(it)
                        end
                    ) as dt
            from org_date_table
        ),  date_sale as (
            select year(actv_dt) _year,
                   month(actv_dt) as m,
                   week(actv_dt) as w,
                   actv_dt as d,
                   hour(regi_dt) as h,
                   tb_sale.*
            from tb_sale
            where shop_id=2 and

                actv_dt between '2025-04-10' and (
                    case
                        when 'd' = 'h' then '2025-04-10'
                        when 'd' != 'h' then '2025-04-16'
                        end
                    )
        ), final as (
            select count(device_id) as cnt
            from date_table dd
                     left outer join date_sale ds on dd._year=ds._year and
                                                     d = dt
            group by dd._year, dd.dt
        )

        select
            (
                select json_arrayagg(cnt)
                from final
            ) as value,
            (
                select json_arrayagg(date_format(it, '%Y-%m-%d'))
                from org_date_table
            ) as date
 {executed in 1 msec}
2025-04-17 22:30:22.423 INFO  [http-nio-11040-exec-5] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/sale/graph/ct/select/0
2025-04-17 22:30:22.423 INFO  [http-nio-11040-exec-5] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDg5NjYyMiwiZXhwIjoxNzQ0ODk3MjIyLCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.wm7jFLxCam8FRVJxM7Ych38CxJ_3rzCnPGu7FnKsj44
2025-04-17 22:30:22.423 INFO  [http-nio-11040-exec-5] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/sale/graph/ct/select/0
2025-04-17 22:30:22.425 INFO  [http-nio-11040-exec-5] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-17 22:30:22.426 DEBUG [http-nio-11040-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
11. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 1 msec}
2025-04-17 22:30:22.426 INFO  [http-nio-11040-exec-5] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-17 22:30:22.429 DEBUG [http-nio-11040-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
11. with recursive group_generation as (
            select 0 as g
            union all
            select g+1
            from group_generation
            where g < 8
        ), group_weekday as (
            select 0 as g
            union all
            select g+1
            from group_weekday
            where g < 6
        ),  sale as (
            select weekday(actv_dt) as days,
                   device_id,
                   cust_cd,
                   sale_id
            from tb_sale
            where shop_id=2 and

                device_id is not null and
                actv_dt between '2025-04-01' and '2025-04-30'
        ), sale_gene as (
            select sale_id,
                   (
                       case
                           when length(cust_cd) = 6 then floor((year(curdate()) - concat((
                                 case
                                     when substring(cust_cd, 1,2) > '44' then '19'
                                     when substring(cust_cd, 1,2) <= '44' then '20'
                                     end
                                 ),substring(cust_cd,1,2))) / 10)
                           when length(cust_cd) != 6 then null
                           end
                       ) as generation
            from sale
        ), generation as (
            select g,
                   device_id
            from group_generation g
                     left outer join sale_gene sg on g.g=sg.generation
                     left outer join sale s on s.sale_id=sg.sale_id
        ), weekdays as (
            select g,
                   device_id
            from group_weekday w
                     left outer join sale s on s.days=w.g
        )

        select IFNULL(count(device_id),0) as avg
        from generation
        group by g
 {executed in 1 msec}
2025-04-17 22:30:22.433 INFO  [http-nio-11040-exec-2] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/sale/graph/stat/select/0
2025-04-17 22:30:22.433 INFO  [http-nio-11040-exec-2] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDg5NjYyMiwiZXhwIjoxNzQ0ODk3MjIyLCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.wm7jFLxCam8FRVJxM7Ych38CxJ_3rzCnPGu7FnKsj44
2025-04-17 22:30:22.433 INFO  [http-nio-11040-exec-2] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/sale/graph/stat/select/0
2025-04-17 22:30:22.434 INFO  [http-nio-11040-exec-2] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-17 22:30:22.435 DEBUG [http-nio-11040-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
12. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 1 msec}
2025-04-17 22:30:22.435 INFO  [http-nio-11040-exec-2] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-17 22:30:22.439 DEBUG [http-nio-11040-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
12. with base as (select device_id,
                             (SELECT device_nm
                              FROM tb_device
                              WHERE tb_device.device_id = sl.device_id)      as device,
                             sd_id,
                             (SELECT sd_nm
                              FROM tb_second_device
                              WHERE tb_second_device.sd_id = sl.sd_id)       as sec_device,
                             ct_actv_plan,
                             (SELECT ct_plan_nm
                              FROM tb_ct_plan
                              WHERE tb_ct_plan.ct_plan_id = sl.ct_actv_plan) as actv_plan
                      from tb_sale sl
                      where shop_id = 2 and

                        actv_dt between '2025-04-01' and '2025-04-30'),
             device as (SELECT device                   as name,
                               count(device_id) as count
                        from base
                        where device_id is not null
                        group by device),
             sec_device as (SELECT sec_device                   as name,
                                   count(sec_device) as count
                            from base
                            where sd_id is not null
                            group by sec_device),
             actv_plan as (SELECT actv_plan                   as name,
                                  count(actv_plan) as count
                           from base
                           where ct_actv_plan is not null
                           group by actv_plan),
             total as (select count('device') as cnt
                       from base
                       where 'device' is not null
             )

        select name,
               count,
               (
                   IF((select cnt
                       from total) = 0 or count = 0, 0, TRUNCATE(
                              (count / (
                                  select cnt
                                  from total
                              )
                                  ) * 100, 1))
                   ) as per
        from device
        order by per desc
        limit 5
 {executed in 2 msec}
2025-04-17 22:30:22.444 INFO  [http-nio-11040-exec-9] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/sale/graph/ratio/select/0
2025-04-17 22:30:22.444 INFO  [http-nio-11040-exec-9] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDg5NjYyMiwiZXhwIjoxNzQ0ODk3MjIyLCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.wm7jFLxCam8FRVJxM7Ych38CxJ_3rzCnPGu7FnKsj44
2025-04-17 22:30:22.444 INFO  [http-nio-11040-exec-9] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/sale/graph/ratio/select/0
2025-04-17 22:30:22.445 INFO  [http-nio-11040-exec-9] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-17 22:30:22.446 DEBUG [http-nio-11040-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
13. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 1 msec}
2025-04-17 22:30:22.447 INFO  [http-nio-11040-exec-9] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-17 22:30:22.449 DEBUG [http-nio-11040-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
13. with recursive istm_range as (
            select 0 as i
            union all
            select i+1
            from istm_range
            where i<5
        ), base as (
            select ct_istm
            from tb_sale
            where shop_id=2 and

                actv_dt between '2025-04-01' and '2025-04-30'
        ), final as (
            select i as istm,
                   IFNULL(count(base.ct_istm),0) as cnt
            from istm_range
                     left outer join base on base.ct_istm=istm_range.i
            group by i
            order by istm desc
        )

        select json_arrayagg(istm) as type,
               json_arrayagg(cnt) as cnt,
               json_arrayagg(IF((
                      select IFNULL(count(ct_istm), 0)
                      from base
                  ) = 0 or cnt = 0, 0, TRUNCATE((cnt/(
                   select IFNULL(count(ct_istm), 0)
                   from base
               )) * 100, 1))) as per
        from final
 {executed in 1 msec}
2025-04-17 22:30:22.454 INFO  [http-nio-11040-exec-7] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/sale/graph/summary
2025-04-17 22:30:22.454 INFO  [http-nio-11040-exec-7] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDg5NjYyMiwiZXhwIjoxNzQ0ODk3MjIyLCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.wm7jFLxCam8FRVJxM7Ych38CxJ_3rzCnPGu7FnKsj44
2025-04-17 22:30:22.454 INFO  [http-nio-11040-exec-7] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/sale/graph/summary
2025-04-17 22:30:22.455 INFO  [http-nio-11040-exec-7] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-17 22:30:22.456 DEBUG [http-nio-11040-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
11. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 1 msec}
2025-04-17 22:30:22.456 INFO  [http-nio-11040-exec-7] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-17 22:30:22.457 INFO  [http-nio-11040-exec-7] [com.momo.api.SaleController] - summary: CommonVO(provider=null, date=null, year=null, month=null, day=null, selectType=null, range=null, dateType=null, prevFromYmd=null, prevToYmd=null, currFromYmd=null, currToYmd=null, fromYmd=2024-10-01, toYmd=2025-04-01, fromYm=null, toYm=null, prevDate=null, currDate=null)
2025-04-17 22:30:22.482 INFO  [http-nio-11040-exec-10] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/sale/graph/ct/d
2025-04-17 22:30:22.482 INFO  [http-nio-11040-exec-10] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDg5NjYyMiwiZXhwIjoxNzQ0ODk3MjIyLCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.wm7jFLxCam8FRVJxM7Ych38CxJ_3rzCnPGu7FnKsj44
2025-04-17 22:30:22.482 INFO  [http-nio-11040-exec-10] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/sale/graph/ct/d
2025-04-17 22:30:22.488 INFO  [http-nio-11040-exec-10] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-17 22:30:22.489 DEBUG [http-nio-11040-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
11. #         월별 날짜 구하기
        with recursive month_range as (
            select '2024-10-01' as d
            union all
            select date_add(d, interval 1 month) as d
            from month_range
            where date_add(d, interval 1 month) < '2025-04-01'
        ), months as(
            select month(d) as m
            from month_range
        ), filtered_sale as ( # 판매일보 초벌
            select month(actv_dt) as actv_month,
                   device_id,
                   internet_plan,
                   tv_plan,
                    exsvc_id,
                   total_cms,
                   wt_cms,
                   sale_id,
                   sd_id,
                    shop_id
            from tb_sale
            where shop_id=2 and

                actv_dt between '2024-10-01' and date_add('2025-04-01', interval 1 month)
        ), ct_graph as ( # 무선 그래프 데이터
            SELECT m,
                   count(device_id) as cnt
            FROM months
                     LEFT OUTER JOIN filtered_sale on actv_month = m and
                                                      device_id is not null
            group by m
        ), internet_graph as ( # 인터넷 그래프 데이터
            SELECT m,
                   count(internet_plan) as cnt
            FROM months
                     LEFT OUTER JOIN filtered_sale on actv_month = m  and
                                                      internet_plan is not null
            group by m
        ), tv_graph as ( # TV 그래프 데이터
            SELECT m,
                   count(tv_plan) as cnt
            FROM months
                     LEFT OUTER JOIN filtered_sale on actv_month = m  and
                                                      tv_plan is not null
            group by m
        ), card as ( # 카드 데이터
            SELECT m,
                   (
                    select count(*)
                    from tb_sale_card sc
                    left outer join filtered_sale fs on fs.shop_id = sc.shop_id and
                                                        fs.sale_id = sc.sale_id
                   )  as cnt
            FROM months
                     LEFT OUTER JOIN filtered_sale on actv_month = m
            group by m
        ), exsvc as ( # 부가서비스 데이터
            SELECT m,
                   count(exsvc_id) as cnt
            FROM months
                     LEFT OUTER JOIN filtered_sale on actv_month = m  and
                                                      exsvc_id is not null
            group by m
        ), tc_graph as ( # 총 이익 그래프 데이터
            SELECT m,
                   IFNULL(sum(total_cms), 0) as cnt
            FROM months
                     LEFT OUTER JOIN filtered_sale on actv_month = m
            group by m
        ), avg_margin_graph as ( # 개인 평균 마진 그래프 데이터
            SELECT m,
                   IFNULL(avg(total_cms), 0) as cnt
            FROM months
                     LEFT OUTER JOIN filtered_sale on actv_month = m and
                                                      device_id is not null
            group by m
        ), ud_graph as ( # 중고 개통 그래프 데이터
            SELECT m,
                   count(ud_id) as cnt
            FROM months
                     LEFT OUTER JOIN filtered_sale on actv_month = m
                     LEFT OUTER JOIN tb_sale_used_device sud on sud.sale_id=filtered_sale.sale_id
            group by m
        ), sec_graph as ( # 세컨 그래프 데이터
            SELECT m,
                   count(sd_id) as cnt
            FROM months
                     LEFT OUTER JOIN filtered_sale on actv_month = m and
                                                      sd_id != 0
            group by m
        ), diff_ct as (
            select
                (
                    select cnt
                    from ct_graph
                    limit 4, 1
                ) as prv,
                (
                    select cnt
                    from ct_graph
                    limit 5,1
                ) as curr
            from dual
        ), diff_internet as (
            select
                (
                    select cnt
                    from internet_graph
                    limit 4,1
                ) as prv,
                (
                    select cnt
                    from internet_graph
                    limit 5,1
                ) as curr
            from dual
        ), diff_tv as (
            select
                (
                    select cnt
                    from tv_graph
                    limit 4,1
                ) as prv,
                (
                    select cnt
                    from tv_graph
                    limit 5,1
                ) as curr
            from dual
        ), diff_card as (
            select
                (
                    select cnt
                    from card
                    limit 4,1
                ) as prv,
                (
                    select cnt
                    from card
                    limit 5,1
                ) as curr
            from dual
        ), diff_exsvc as (
            select
                (
                    select cnt
                    from exsvc
                    limit 4,1
                ) as prv,
                (
                    select cnt
                    from exsvc
                    limit 5,1
                ) as curr
            from dual
        ), diff_tc as (
            select
                (
                    select cnt
                    from tc_graph
                    limit 4,1
                ) as prv,
                (
                    select cnt
                    from tc_graph
                    limit 5,1
                ) as curr
            from dual
        ) , diff_margin as (
            select
                (
                    select cnt
                    from avg_margin_graph
                    limit 4,1
                ) as prv,
                (
                    select cnt
                    from avg_margin_graph
                    limit 5,1
                ) as curr
            from dual
        ), diff_ud as (
            select
                (
                    select cnt
                    from ud_graph
                    limit 4,1
                ) as prv,
                (
                    select cnt
                    from ud_graph
                    limit 5,1
                ) as curr
            from dual
        ) , diff_sec as (
            select
                (
                    select cnt
                    from sec_graph
                    limit 4,1
                ) as prv,
                (
                    select cnt
                    from sec_graph
                    limit 5,1
                ) as curr
            from dual
        ), final as (
            select
                curr,
                prv,
                (
                    select json_arrayagg(cnt)
                    from ct_graph
                ) as list
            from diff_ct
            union all
            select
                curr,
                prv,
                (
                    select json_arrayagg(cnt)
                    from internet_graph
                ) as list
            from diff_internet
            union all
            select
                curr,
                prv,
                (
                    select json_arrayagg(cnt)
                    from tv_graph
                ) as list
            from diff_tv
             union all
            select
                curr,
                prv,
                (
                    select json_arrayagg(cnt)
                    from card
                ) as list
            from diff_card
             union all
            select
                curr,
                prv,
                (
                    select json_arrayagg(cnt)
                    from exsvc
                ) as list
            from diff_exsvc
            union all
            select
                curr,
                prv,
                (
                    select json_arrayagg(cnt)
                    from tc_graph
                ) as list
            from diff_tc
            union all
            select
                curr,
                prv,
                (
                    select json_arrayagg(cnt)
                    from avg_margin_graph
                ) as list
            from diff_margin
            union all
            select
                curr,
                prv,
                (
                    select json_arrayagg(cnt)
                    from ud_graph
                ) as list
            from diff_ud
            union all
            select
                curr,
                prv,
                (
                    select json_arrayagg(cnt)
                    from sec_graph
                ) as list
            from diff_sec
        )

        select FLOOR(curr) as value,
               (
                   CASE
                       WHEN curr = 0 and prv = 0 THEN 0
                       WHEN prv != 0 and curr = 0 THEN -100
                       WHEN prv = 0 and curr != 0 THEN 100
                       WHEN curr != 0 and prv != 0 THEN TRUNCATE(((curr/prv)-1)*100, 1)
                       END
                   ) as per,
               list
        from final
 {executed in 27 msec}
2025-04-17 22:30:22.490 INFO  [http-nio-11040-exec-6] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/sale/graph/ct/d
2025-04-17 22:30:22.490 INFO  [http-nio-11040-exec-6] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDg5NjYyMiwiZXhwIjoxNzQ0ODk3MjIyLCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.wm7jFLxCam8FRVJxM7Ych38CxJ_3rzCnPGu7FnKsj44
2025-04-17 22:30:22.490 INFO  [http-nio-11040-exec-6] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/sale/graph/ct/d
2025-04-17 22:30:22.490 DEBUG [http-nio-11040-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
12. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 2 msec}
2025-04-17 22:30:22.491 INFO  [http-nio-11040-exec-10] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-17 22:30:22.493 INFO  [http-nio-11040-exec-6] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-17 22:30:22.494 DEBUG [http-nio-11040-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
11. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 1 msec}
2025-04-17 22:30:22.494 INFO  [http-nio-11040-exec-6] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-17 22:30:22.494 DEBUG [http-nio-11040-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
12. set @limit_cond := (
               case 'd'
                   when 'h' then '2000-01-24'
                   when 'd' then '2025-04-17'
                   when 'w' then '2025-04-17'
                   when 'm' then date_sub('2025-04-17', interval 1 month)
               end
        );

        with recursive org_date_table as (
            select (
                       case
                           when 'd' = 'h' then '2000-01-01'
                           when 'd' != 'h' then '2025-01-17'
                           end
                       ) as it
            union all
            select (
                       case 'd'
                           when 'h' then date_add(it, interval 1 day)
                           when 'd' then date_add(it, interval 1 day)
                           when 'w' then date_add(it, interval 1 week)
                           when 'm' then date_add(it, interval 1 month)
                           end
                       ) as it
            from org_date_table
            where it < @limit_cond
        ), date_table as (
            select
                year(it) as _year,
                (
                    case 'd'
                        when 'h' then day(it)
                        when 'd' then it
                        when 'w' then week(it)
                        when 'm' then month(it)
                        end
                    ) as dt
            from org_date_table
        ),  date_sale as (
            select year(actv_dt) _year,
                   month(actv_dt) as m,
                   week(actv_dt) as w,
                   actv_dt as d,
                   hour(regi_dt) as h,
                   tb_sale.*
            from tb_sale
            where shop_id=2 and

                    seller_id='km1104rs' and

                actv_dt between '2025-01-17' and (
                    case
                        when 'd' = 'h' then '2025-01-17'
                        when 'd' != 'h' then '2025-04-17'
                        end
                    )
        ), final as (
            select count(device_id) as cnt
            from date_table dd
                     left outer join date_sale ds on dd._year=ds._year and
                                                     d = dt
            group by dd._year, dd.dt
        )

        select
            (
                select json_arrayagg(cnt)
                from final
            ) as value,
            (
                select json_arrayagg(date_format(it, '%Y-%m-%d'))
                from org_date_table
            ) as date
 {executed in 1 msec}
2025-04-17 22:30:22.499 DEBUG [http-nio-11040-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
11. set @limit_cond := (
               case 'd'
                   when 'h' then '2000-01-24'
                   when 'd' then '2025-04-16'
                   when 'w' then '2025-04-16'
                   when 'm' then date_sub('2025-04-16', interval 1 month)
               end
        );

        with recursive org_date_table as (
            select (
                       case
                           when 'd' = 'h' then '2000-01-01'
                           when 'd' != 'h' then '2025-04-10'
                           end
                       ) as it
            union all
            select (
                       case 'd'
                           when 'h' then date_add(it, interval 1 day)
                           when 'd' then date_add(it, interval 1 day)
                           when 'w' then date_add(it, interval 1 week)
                           when 'm' then date_add(it, interval 1 month)
                           end
                       ) as it
            from org_date_table
            where it < @limit_cond
        ), date_table as (
            select
                year(it) as _year,
                (
                    case 'd'
                        when 'h' then day(it)
                        when 'd' then it
                        when 'w' then week(it)
                        when 'm' then month(it)
                        end
                    ) as dt
            from org_date_table
        ),  date_sale as (
            select year(actv_dt) _year,
                   month(actv_dt) as m,
                   week(actv_dt) as w,
                   actv_dt as d,
                   hour(regi_dt) as h,
                   tb_sale.*
            from tb_sale
            where shop_id=2 and

                    seller_id='km1104rs' and

                actv_dt between '2025-04-10' and (
                    case
                        when 'd' = 'h' then '2025-04-10'
                        when 'd' != 'h' then '2025-04-16'
                        end
                    )
        ), final as (
            select count(device_id) as cnt
            from date_table dd
                     left outer join date_sale ds on dd._year=ds._year and
                                                     d = dt
            group by dd._year, dd.dt
        )

        select
            (
                select json_arrayagg(cnt)
                from final
            ) as value,
            (
                select json_arrayagg(date_format(it, '%Y-%m-%d'))
                from org_date_table
            ) as date
 {executed in 2 msec}
2025-04-17 22:30:22.504 INFO  [http-nio-11040-exec-4] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/sale/graph/ct/select/0
2025-04-17 22:30:22.504 INFO  [http-nio-11040-exec-4] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDg5NjYyMiwiZXhwIjoxNzQ0ODk3MjIyLCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.wm7jFLxCam8FRVJxM7Ych38CxJ_3rzCnPGu7FnKsj44
2025-04-17 22:30:22.504 INFO  [http-nio-11040-exec-4] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/sale/graph/ct/select/0
2025-04-17 22:30:22.506 INFO  [http-nio-11040-exec-4] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-17 22:30:22.507 DEBUG [http-nio-11040-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
12. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 1 msec}
2025-04-17 22:30:22.507 INFO  [http-nio-11040-exec-4] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-17 22:30:22.511 DEBUG [http-nio-11040-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
12. with recursive group_generation as (
            select 0 as g
            union all
            select g+1
            from group_generation
            where g < 8
        ), group_weekday as (
            select 0 as g
            union all
            select g+1
            from group_weekday
            where g < 6
        ),  sale as (
            select weekday(actv_dt) as days,
                   device_id,
                   cust_cd,
                   sale_id
            from tb_sale
            where shop_id=2 and

                      seller_id='km1104rs' and

                device_id is not null and
                actv_dt between '2025-04-01' and '2025-04-30'
        ), sale_gene as (
            select sale_id,
                   (
                       case
                           when length(cust_cd) = 6 then floor((year(curdate()) - concat((
                                 case
                                     when substring(cust_cd, 1,2) > '44' then '19'
                                     when substring(cust_cd, 1,2) <= '44' then '20'
                                     end
                                 ),substring(cust_cd,1,2))) / 10)
                           when length(cust_cd) != 6 then null
                           end
                       ) as generation
            from sale
        ), generation as (
            select g,
                   device_id
            from group_generation g
                     left outer join sale_gene sg on g.g=sg.generation
                     left outer join sale s on s.sale_id=sg.sale_id
        ), weekdays as (
            select g,
                   device_id
            from group_weekday w
                     left outer join sale s on s.days=w.g
        )

        select IFNULL(count(device_id),0) as avg
        from generation
        group by g
 {executed in 1 msec}
2025-04-17 22:30:22.521 INFO  [http-nio-11040-exec-3] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/sale/graph/stat/select/0
2025-04-17 22:30:22.521 INFO  [http-nio-11040-exec-3] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDg5NjYyMiwiZXhwIjoxNzQ0ODk3MjIyLCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.wm7jFLxCam8FRVJxM7Ych38CxJ_3rzCnPGu7FnKsj44
2025-04-17 22:30:22.521 INFO  [http-nio-11040-exec-3] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/sale/graph/stat/select/0
2025-04-17 22:30:22.522 INFO  [http-nio-11040-exec-3] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-17 22:30:22.523 DEBUG [http-nio-11040-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
13. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 1 msec}
2025-04-17 22:30:22.523 INFO  [http-nio-11040-exec-3] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-17 22:30:22.528 DEBUG [http-nio-11040-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
13. with base as (select device_id,
                             (SELECT device_nm
                              FROM tb_device
                              WHERE tb_device.device_id = sl.device_id)      as device,
                             sd_id,
                             (SELECT sd_nm
                              FROM tb_second_device
                              WHERE tb_second_device.sd_id = sl.sd_id)       as sec_device,
                             ct_actv_plan,
                             (SELECT ct_plan_nm
                              FROM tb_ct_plan
                              WHERE tb_ct_plan.ct_plan_id = sl.ct_actv_plan) as actv_plan
                      from tb_sale sl
                      where shop_id = 2 and

                                seller_id='km1104rs' and

                        actv_dt between '2025-04-01' and '2025-04-30'),
             device as (SELECT device                   as name,
                               count(device_id) as count
                        from base
                        where device_id is not null
                        group by device),
             sec_device as (SELECT sec_device                   as name,
                                   count(sec_device) as count
                            from base
                            where sd_id is not null
                            group by sec_device),
             actv_plan as (SELECT actv_plan                   as name,
                                  count(actv_plan) as count
                           from base
                           where ct_actv_plan is not null
                           group by actv_plan),
             total as (select count('device') as cnt
                       from base
                       where 'device' is not null
             )

        select name,
               count,
               (
                   IF((select cnt
                       from total) = 0 or count = 0, 0, TRUNCATE(
                              (count / (
                                  select cnt
                                  from total
                              )
                                  ) * 100, 1))
                   ) as per
        from device
        order by per desc
        limit 5
 {executed in 2 msec}
2025-04-17 22:30:22.539 INFO  [http-nio-11040-exec-8] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/sale/graph/ratio/select/0
2025-04-17 22:30:22.539 INFO  [http-nio-11040-exec-8] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDg5NjYyMiwiZXhwIjoxNzQ0ODk3MjIyLCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.wm7jFLxCam8FRVJxM7Ych38CxJ_3rzCnPGu7FnKsj44
2025-04-17 22:30:22.539 INFO  [http-nio-11040-exec-8] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/sale/graph/ratio/select/0
2025-04-17 22:30:22.540 INFO  [http-nio-11040-exec-8] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-17 22:30:22.542 DEBUG [http-nio-11040-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
14. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 1 msec}
2025-04-17 22:30:22.542 INFO  [http-nio-11040-exec-8] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-17 22:30:22.548 DEBUG [http-nio-11040-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
14. with recursive istm_range as (
            select 0 as i
            union all
            select i+1
            from istm_range
            where i<5
        ), base as (
            select ct_istm
            from tb_sale
            where shop_id=2 and

                        seller_id='km1104rs' and

                actv_dt between '2025-04-01' and '2025-04-30'
        ), final as (
            select i as istm,
                   IFNULL(count(base.ct_istm),0) as cnt
            from istm_range
                     left outer join base on base.ct_istm=istm_range.i
            group by i
            order by istm desc
        )

        select json_arrayagg(istm) as type,
               json_arrayagg(cnt) as cnt,
               json_arrayagg(IF((
                      select IFNULL(count(ct_istm), 0)
                      from base
                  ) = 0 or cnt = 0, 0, TRUNCATE((cnt/(
                   select IFNULL(count(ct_istm), 0)
                   from base
               )) * 100, 1))) as per
        from final
 {executed in 4 msec}
2025-04-17 22:30:22.557 INFO  [http-nio-11040-exec-1] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/sale/graph/summary
2025-04-17 22:30:22.557 INFO  [http-nio-11040-exec-1] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDg5NjYyMiwiZXhwIjoxNzQ0ODk3MjIyLCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.wm7jFLxCam8FRVJxM7Ych38CxJ_3rzCnPGu7FnKsj44
2025-04-17 22:30:22.557 INFO  [http-nio-11040-exec-1] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/sale/graph/summary
2025-04-17 22:30:22.560 INFO  [http-nio-11040-exec-1] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-17 22:30:22.561 DEBUG [http-nio-11040-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
12. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 1 msec}
2025-04-17 22:30:22.562 INFO  [http-nio-11040-exec-1] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-17 22:30:22.563 INFO  [http-nio-11040-exec-1] [com.momo.api.SaleController] - summary: CommonVO(provider=null, date=null, year=null, month=null, day=null, selectType=null, range=null, dateType=null, prevFromYmd=null, prevToYmd=null, currFromYmd=null, currToYmd=null, fromYmd=2024-10-01, toYmd=2025-04-01, fromYm=null, toYm=null, prevDate=null, currDate=null)
2025-04-17 22:30:22.603 DEBUG [http-nio-11040-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
12. #         월별 날짜 구하기
        with recursive month_range as (
            select '2024-10-01' as d
            union all
            select date_add(d, interval 1 month) as d
            from month_range
            where date_add(d, interval 1 month) < '2025-04-01'
        ), months as(
            select month(d) as m
            from month_range
        ), filtered_sale as ( # 판매일보 초벌
            select month(actv_dt) as actv_month,
                   device_id,
                   internet_plan,
                   tv_plan,
                    exsvc_id,
                   total_cms,
                   wt_cms,
                   sale_id,
                   sd_id,
                    shop_id
            from tb_sale
            where shop_id=2 and

                    seller_id='km1104rs' and

                actv_dt between '2024-10-01' and date_add('2025-04-01', interval 1 month)
        ), ct_graph as ( # 무선 그래프 데이터
            SELECT m,
                   count(device_id) as cnt
            FROM months
                     LEFT OUTER JOIN filtered_sale on actv_month = m and
                                                      device_id is not null
            group by m
        ), internet_graph as ( # 인터넷 그래프 데이터
            SELECT m,
                   count(internet_plan) as cnt
            FROM months
                     LEFT OUTER JOIN filtered_sale on actv_month = m  and
                                                      internet_plan is not null
            group by m
        ), tv_graph as ( # TV 그래프 데이터
            SELECT m,
                   count(tv_plan) as cnt
            FROM months
                     LEFT OUTER JOIN filtered_sale on actv_month = m  and
                                                      tv_plan is not null
            group by m
        ), card as ( # 카드 데이터
            SELECT m,
                   (
                    select count(*)
                    from tb_sale_card sc
                    left outer join filtered_sale fs on fs.shop_id = sc.shop_id and
                                                        fs.sale_id = sc.sale_id
                   )  as cnt
            FROM months
                     LEFT OUTER JOIN filtered_sale on actv_month = m
            group by m
        ), exsvc as ( # 부가서비스 데이터
            SELECT m,
                   count(exsvc_id) as cnt
            FROM months
                     LEFT OUTER JOIN filtered_sale on actv_month = m  and
                                                      exsvc_id is not null
            group by m
        ), tc_graph as ( # 총 이익 그래프 데이터
            SELECT m,
                   IFNULL(sum(total_cms), 0) as cnt
            FROM months
                     LEFT OUTER JOIN filtered_sale on actv_month = m
            group by m
        ), avg_margin_graph as ( # 개인 평균 마진 그래프 데이터
            SELECT m,
                   IFNULL(avg(total_cms), 0) as cnt
            FROM months
                     LEFT OUTER JOIN filtered_sale on actv_month = m and
                                                      device_id is not null
            group by m
        ), ud_graph as ( # 중고 개통 그래프 데이터
            SELECT m,
                   count(ud_id) as cnt
            FROM months
                     LEFT OUTER JOIN filtered_sale on actv_month = m
                     LEFT OUTER JOIN tb_sale_used_device sud on sud.sale_id=filtered_sale.sale_id
            group by m
        ), sec_graph as ( # 세컨 그래프 데이터
            SELECT m,
                   count(sd_id) as cnt
            FROM months
                     LEFT OUTER JOIN filtered_sale on actv_month = m and
                                                      sd_id != 0
            group by m
        ), diff_ct as (
            select
                (
                    select cnt
                    from ct_graph
                    limit 4, 1
                ) as prv,
                (
                    select cnt
                    from ct_graph
                    limit 5,1
                ) as curr
            from dual
        ), diff_internet as (
            select
                (
                    select cnt
                    from internet_graph
                    limit 4,1
                ) as prv,
                (
                    select cnt
                    from internet_graph
                    limit 5,1
                ) as curr
            from dual
        ), diff_tv as (
            select
                (
                    select cnt
                    from tv_graph
                    limit 4,1
                ) as prv,
                (
                    select cnt
                    from tv_graph
                    limit 5,1
                ) as curr
            from dual
        ), diff_card as (
            select
                (
                    select cnt
                    from card
                    limit 4,1
                ) as prv,
                (
                    select cnt
                    from card
                    limit 5,1
                ) as curr
            from dual
        ), diff_exsvc as (
            select
                (
                    select cnt
                    from exsvc
                    limit 4,1
                ) as prv,
                (
                    select cnt
                    from exsvc
                    limit 5,1
                ) as curr
            from dual
        ), diff_tc as (
            select
                (
                    select cnt
                    from tc_graph
                    limit 4,1
                ) as prv,
                (
                    select cnt
                    from tc_graph
                    limit 5,1
                ) as curr
            from dual
        ) , diff_margin as (
            select
                (
                    select cnt
                    from avg_margin_graph
                    limit 4,1
                ) as prv,
                (
                    select cnt
                    from avg_margin_graph
                    limit 5,1
                ) as curr
            from dual
        ), diff_ud as (
            select
                (
                    select cnt
                    from ud_graph
                    limit 4,1
                ) as prv,
                (
                    select cnt
                    from ud_graph
                    limit 5,1
                ) as curr
            from dual
        ) , diff_sec as (
            select
                (
                    select cnt
                    from sec_graph
                    limit 4,1
                ) as prv,
                (
                    select cnt
                    from sec_graph
                    limit 5,1
                ) as curr
            from dual
        ), final as (
            select
                curr,
                prv,
                (
                    select json_arrayagg(cnt)
                    from ct_graph
                ) as list
            from diff_ct
            union all
            select
                curr,
                prv,
                (
                    select json_arrayagg(cnt)
                    from internet_graph
                ) as list
            from diff_internet
            union all
            select
                curr,
                prv,
                (
                    select json_arrayagg(cnt)
                    from tv_graph
                ) as list
            from diff_tv
             union all
            select
                curr,
                prv,
                (
                    select json_arrayagg(cnt)
                    from card
                ) as list
            from diff_card
             union all
            select
                curr,
                prv,
                (
                    select json_arrayagg(cnt)
                    from exsvc
                ) as list
            from diff_exsvc
            union all
            select
                curr,
                prv,
                (
                    select json_arrayagg(cnt)
                    from tc_graph
                ) as list
            from diff_tc
            union all
            select
                curr,
                prv,
                (
                    select json_arrayagg(cnt)
                    from avg_margin_graph
                ) as list
            from diff_margin
            union all
            select
                curr,
                prv,
                (
                    select json_arrayagg(cnt)
                    from ud_graph
                ) as list
            from diff_ud
            union all
            select
                curr,
                prv,
                (
                    select json_arrayagg(cnt)
                    from sec_graph
                ) as list
            from diff_sec
        )

        select FLOOR(curr) as value,
               (
                   CASE
                       WHEN curr = 0 and prv = 0 THEN 0
                       WHEN prv != 0 and curr = 0 THEN -100
                       WHEN prv = 0 and curr != 0 THEN 100
                       WHEN curr != 0 and prv != 0 THEN TRUNCATE(((curr/prv)-1)*100, 1)
                       END
                   ) as per,
               list
        from final
 {executed in 33 msec}
2025-04-17 22:30:22.674 INFO  [http-nio-11040-exec-5] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/sale/graph/ct/select/0
2025-04-17 22:30:22.674 INFO  [http-nio-11040-exec-5] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDg5NjYyMiwiZXhwIjoxNzQ0ODk3MjIyLCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.wm7jFLxCam8FRVJxM7Ych38CxJ_3rzCnPGu7FnKsj44
2025-04-17 22:30:22.674 INFO  [http-nio-11040-exec-5] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/sale/graph/ct/select/0
2025-04-17 22:30:22.676 INFO  [http-nio-11040-exec-5] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-17 22:30:22.679 DEBUG [http-nio-11040-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
11. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 1 msec}
2025-04-17 22:30:22.681 INFO  [http-nio-11040-exec-5] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-17 22:30:22.688 DEBUG [http-nio-11040-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
11. with recursive group_generation as (
            select 0 as g
            union all
            select g+1
            from group_generation
            where g < 8
        ), group_weekday as (
            select 0 as g
            union all
            select g+1
            from group_weekday
            where g < 6
        ),  sale as (
            select weekday(actv_dt) as days,
                   device_id,
                   cust_cd,
                   sale_id
            from tb_sale
            where shop_id=2 and

                      seller_id='km1104rs' and

                device_id is not null and
                actv_dt between '2025-04-01' and '2025-04-30'
        ), sale_gene as (
            select sale_id,
                   (
                       case
                           when length(cust_cd) = 6 then floor((year(curdate()) - concat((
                                 case
                                     when substring(cust_cd, 1,2) > '44' then '19'
                                     when substring(cust_cd, 1,2) <= '44' then '20'
                                     end
                                 ),substring(cust_cd,1,2))) / 10)
                           when length(cust_cd) != 6 then null
                           end
                       ) as generation
            from sale
        ), generation as (
            select g,
                   device_id
            from group_generation g
                     left outer join sale_gene sg on g.g=sg.generation
                     left outer join sale s on s.sale_id=sg.sale_id
        ), weekdays as (
            select g,
                   device_id
            from group_weekday w
                     left outer join sale s on s.days=w.g
        )

        select IFNULL(count(device_id),0) as avg
        from generation
        group by g
 {executed in 2 msec}
2025-04-17 22:30:22.699 INFO  [http-nio-11040-exec-2] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/sale/graph/stat/select/0
2025-04-17 22:30:22.699 INFO  [http-nio-11040-exec-2] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDg5NjYyMiwiZXhwIjoxNzQ0ODk3MjIyLCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.wm7jFLxCam8FRVJxM7Ych38CxJ_3rzCnPGu7FnKsj44
2025-04-17 22:30:22.699 INFO  [http-nio-11040-exec-2] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/sale/graph/stat/select/0
2025-04-17 22:30:22.702 INFO  [http-nio-11040-exec-2] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-17 22:30:22.705 DEBUG [http-nio-11040-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
12. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 2 msec}
2025-04-17 22:30:22.705 INFO  [http-nio-11040-exec-2] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-17 22:30:22.712 DEBUG [http-nio-11040-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
12. with base as (select device_id,
                             (SELECT device_nm
                              FROM tb_device
                              WHERE tb_device.device_id = sl.device_id)      as device,
                             sd_id,
                             (SELECT sd_nm
                              FROM tb_second_device
                              WHERE tb_second_device.sd_id = sl.sd_id)       as sec_device,
                             ct_actv_plan,
                             (SELECT ct_plan_nm
                              FROM tb_ct_plan
                              WHERE tb_ct_plan.ct_plan_id = sl.ct_actv_plan) as actv_plan
                      from tb_sale sl
                      where shop_id = 2 and

                                seller_id='km1104rs' and

                        actv_dt between '2025-04-01' and '2025-04-30'),
             device as (SELECT device                   as name,
                               count(device_id) as count
                        from base
                        where device_id is not null
                        group by device),
             sec_device as (SELECT sec_device                   as name,
                                   count(sec_device) as count
                            from base
                            where sd_id is not null
                            group by sec_device),
             actv_plan as (SELECT actv_plan                   as name,
                                  count(actv_plan) as count
                           from base
                           where ct_actv_plan is not null
                           group by actv_plan),
             total as (select count('device') as cnt
                       from base
                       where 'device' is not null
             )

        select name,
               count,
               (
                   IF((select cnt
                       from total) = 0 or count = 0, 0, TRUNCATE(
                              (count / (
                                  select cnt
                                  from total
                              )
                                  ) * 100, 1))
                   ) as per
        from device
        order by per desc
        limit 5
 {executed in 2 msec}
2025-04-17 22:30:22.744 INFO  [http-nio-11040-exec-9] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/sale/graph/ratio/select/0
2025-04-17 22:30:22.744 INFO  [http-nio-11040-exec-9] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDg5NjYyMiwiZXhwIjoxNzQ0ODk3MjIyLCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.wm7jFLxCam8FRVJxM7Ych38CxJ_3rzCnPGu7FnKsj44
2025-04-17 22:30:22.745 INFO  [http-nio-11040-exec-9] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/sale/graph/ratio/select/0
2025-04-17 22:30:22.746 INFO  [http-nio-11040-exec-9] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-17 22:30:22.750 DEBUG [http-nio-11040-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
13. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 3 msec}
2025-04-17 22:30:22.750 INFO  [http-nio-11040-exec-9] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-17 22:30:22.755 DEBUG [http-nio-11040-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
13. with recursive istm_range as (
            select 0 as i
            union all
            select i+1
            from istm_range
            where i<5
        ), base as (
            select ct_istm
            from tb_sale
            where shop_id=2 and

                        seller_id='km1104rs' and

                actv_dt between '2025-04-01' and '2025-04-30'
        ), final as (
            select i as istm,
                   IFNULL(count(base.ct_istm),0) as cnt
            from istm_range
                     left outer join base on base.ct_istm=istm_range.i
            group by i
            order by istm desc
        )

        select json_arrayagg(istm) as type,
               json_arrayagg(cnt) as cnt,
               json_arrayagg(IF((
                      select IFNULL(count(ct_istm), 0)
                      from base
                  ) = 0 or cnt = 0, 0, TRUNCATE((cnt/(
                   select IFNULL(count(ct_istm), 0)
                   from base
               )) * 100, 1))) as per
        from final
 {executed in 2 msec}
2025-04-17 22:30:25.007 INFO  [http-nio-11040-exec-7] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/notif/count/unread
2025-04-17 22:30:25.007 INFO  [http-nio-11040-exec-7] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDg5NjYyMiwiZXhwIjoxNzQ0ODk3MjIyLCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.wm7jFLxCam8FRVJxM7Ych38CxJ_3rzCnPGu7FnKsj44
2025-04-17 22:30:25.007 INFO  [http-nio-11040-exec-7] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/notif/count/unread
2025-04-17 22:30:25.009 INFO  [http-nio-11040-exec-7] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-17 22:30:25.012 DEBUG [http-nio-11040-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
11. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 1 msec}
2025-04-17 22:30:25.012 INFO  [http-nio-11040-exec-7] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-17 22:30:25.013 INFO  [http-nio-11040-exec-7] [c.momo.common.util.SecurityContextUtil] - principal: UserDetailsImpl(username=km1104rs, password=$2a$10$uXShhwl6ULOkbJe477uDWOfdiUUcu6lOSF/Dhj9xP3U1nUn/gXkc6, authorities=[ROLE_NONE])
2025-04-17 22:30:25.015 DEBUG [http-nio-11040-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
11. SELECT count(*)
        FROM tb_notification
        WHERE receiver_id = 'km1104rs'
          AND read_st = FALSE
 {executed in 2 msec}
2025-04-17 22:30:25.775 INFO  [http-nio-11040-exec-10] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/notif/count/unread
2025-04-17 22:30:25.775 INFO  [http-nio-11040-exec-10] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDg5NjYyMiwiZXhwIjoxNzQ0ODk3MjIyLCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.wm7jFLxCam8FRVJxM7Ych38CxJ_3rzCnPGu7FnKsj44
2025-04-17 22:30:25.775 INFO  [http-nio-11040-exec-10] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/notif/count/unread
2025-04-17 22:30:25.777 INFO  [http-nio-11040-exec-10] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-17 22:30:25.780 DEBUG [http-nio-11040-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
12. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 2 msec}
2025-04-17 22:30:25.781 INFO  [http-nio-11040-exec-10] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-17 22:30:25.781 INFO  [http-nio-11040-exec-10] [c.momo.common.util.SecurityContextUtil] - principal: UserDetailsImpl(username=km1104rs, password=$2a$10$uXShhwl6ULOkbJe477uDWOfdiUUcu6lOSF/Dhj9xP3U1nUn/gXkc6, authorities=[ROLE_NONE])
2025-04-17 22:30:25.783 DEBUG [http-nio-11040-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
12. SELECT count(*)
        FROM tb_notification
        WHERE receiver_id = 'km1104rs'
          AND read_st = FALSE
 {executed in 1 msec}
2025-04-17 22:30:25.798 INFO  [http-nio-11040-exec-6] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/sale/graph/ct/select/0
2025-04-17 22:30:25.798 INFO  [http-nio-11040-exec-6] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDg5NjYyMiwiZXhwIjoxNzQ0ODk3MjIyLCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.wm7jFLxCam8FRVJxM7Ych38CxJ_3rzCnPGu7FnKsj44
2025-04-17 22:30:25.798 INFO  [http-nio-11040-exec-6] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/sale/graph/ct/select/0
2025-04-17 22:30:25.799 INFO  [http-nio-11040-exec-6] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-17 22:30:25.801 DEBUG [http-nio-11040-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
11. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 1 msec}
2025-04-17 22:30:25.802 INFO  [http-nio-11040-exec-6] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-17 22:30:25.806 DEBUG [http-nio-11040-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
11. with recursive group_generation as (
            select 0 as g
            union all
            select g+1
            from group_generation
            where g < 8
        ), group_weekday as (
            select 0 as g
            union all
            select g+1
            from group_weekday
            where g < 6
        ),  sale as (
            select weekday(actv_dt) as days,
                   device_id,
                   cust_cd,
                   sale_id
            from tb_sale
            where shop_id=2 and

                      seller_id='km1104rs' and

                device_id is not null and
                actv_dt between '2025-01-01' and '2025-01-31'
        ), sale_gene as (
            select sale_id,
                   (
                       case
                           when length(cust_cd) = 6 then floor((year(curdate()) - concat((
                                 case
                                     when substring(cust_cd, 1,2) > '44' then '19'
                                     when substring(cust_cd, 1,2) <= '44' then '20'
                                     end
                                 ),substring(cust_cd,1,2))) / 10)
                           when length(cust_cd) != 6 then null
                           end
                       ) as generation
            from sale
        ), generation as (
            select g,
                   device_id
            from group_generation g
                     left outer join sale_gene sg on g.g=sg.generation
                     left outer join sale s on s.sale_id=sg.sale_id
        ), weekdays as (
            select g,
                   device_id
            from group_weekday w
                     left outer join sale s on s.days=w.g
        )

        select IFNULL(count(device_id),0) as avg
        from generation
        group by g
 {executed in 1 msec}
2025-04-17 22:30:25.819 INFO  [http-nio-11040-exec-4] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/sale/graph/stat/select/0
2025-04-17 22:30:25.819 INFO  [http-nio-11040-exec-4] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDg5NjYyMiwiZXhwIjoxNzQ0ODk3MjIyLCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.wm7jFLxCam8FRVJxM7Ych38CxJ_3rzCnPGu7FnKsj44
2025-04-17 22:30:25.819 INFO  [http-nio-11040-exec-4] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/sale/graph/stat/select/0
2025-04-17 22:30:25.821 INFO  [http-nio-11040-exec-4] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-17 22:30:25.822 DEBUG [http-nio-11040-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
12. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 1 msec}
2025-04-17 22:30:25.822 INFO  [http-nio-11040-exec-4] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-17 22:30:25.826 DEBUG [http-nio-11040-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
12. with base as (select device_id,
                             (SELECT device_nm
                              FROM tb_device
                              WHERE tb_device.device_id = sl.device_id)      as device,
                             sd_id,
                             (SELECT sd_nm
                              FROM tb_second_device
                              WHERE tb_second_device.sd_id = sl.sd_id)       as sec_device,
                             ct_actv_plan,
                             (SELECT ct_plan_nm
                              FROM tb_ct_plan
                              WHERE tb_ct_plan.ct_plan_id = sl.ct_actv_plan) as actv_plan
                      from tb_sale sl
                      where shop_id = 2 and

                                seller_id='km1104rs' and

                        actv_dt between '2025-01-01' and '2025-01-31'),
             device as (SELECT device                   as name,
                               count(device_id) as count
                        from base
                        where device_id is not null
                        group by device),
             sec_device as (SELECT sec_device                   as name,
                                   count(sec_device) as count
                            from base
                            where sd_id is not null
                            group by sec_device),
             actv_plan as (SELECT actv_plan                   as name,
                                  count(actv_plan) as count
                           from base
                           where ct_actv_plan is not null
                           group by actv_plan),
             total as (select count('device') as cnt
                       from base
                       where 'device' is not null
             )

        select name,
               count,
               (
                   IF((select cnt
                       from total) = 0 or count = 0, 0, TRUNCATE(
                              (count / (
                                  select cnt
                                  from total
                              )
                                  ) * 100, 1))
                   ) as per
        from device
        order by per desc
        limit 5
 {executed in 2 msec}
2025-04-17 22:30:25.842 INFO  [http-nio-11040-exec-3] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/sale/graph/ratio/select/0
2025-04-17 22:30:25.842 INFO  [http-nio-11040-exec-3] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDg5NjYyMiwiZXhwIjoxNzQ0ODk3MjIyLCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.wm7jFLxCam8FRVJxM7Ych38CxJ_3rzCnPGu7FnKsj44
2025-04-17 22:30:25.842 INFO  [http-nio-11040-exec-3] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/sale/graph/ratio/select/0
2025-04-17 22:30:25.843 INFO  [http-nio-11040-exec-3] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-17 22:30:25.844 DEBUG [http-nio-11040-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
13. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 1 msec}
2025-04-17 22:30:25.844 INFO  [http-nio-11040-exec-3] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-17 22:30:25.847 DEBUG [http-nio-11040-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
13. with recursive istm_range as (
            select 0 as i
            union all
            select i+1
            from istm_range
            where i<5
        ), base as (
            select ct_istm
            from tb_sale
            where shop_id=2 and

                        seller_id='km1104rs' and

                actv_dt between '2025-01-01' and '2025-01-31'
        ), final as (
            select i as istm,
                   IFNULL(count(base.ct_istm),0) as cnt
            from istm_range
                     left outer join base on base.ct_istm=istm_range.i
            group by i
            order by istm desc
        )

        select json_arrayagg(istm) as type,
               json_arrayagg(cnt) as cnt,
               json_arrayagg(IF((
                      select IFNULL(count(ct_istm), 0)
                      from base
                  ) = 0 or cnt = 0, 0, TRUNCATE((cnt/(
                   select IFNULL(count(ct_istm), 0)
                   from base
               )) * 100, 1))) as per
        from final
 {executed in 2 msec}
2025-04-17 22:30:25.864 INFO  [http-nio-11040-exec-8] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/sale/graph/summary
2025-04-17 22:30:25.864 INFO  [http-nio-11040-exec-8] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDg5NjYyMiwiZXhwIjoxNzQ0ODk3MjIyLCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.wm7jFLxCam8FRVJxM7Ych38CxJ_3rzCnPGu7FnKsj44
2025-04-17 22:30:25.864 INFO  [http-nio-11040-exec-8] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/sale/graph/summary
2025-04-17 22:30:25.865 INFO  [http-nio-11040-exec-8] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-17 22:30:25.866 DEBUG [http-nio-11040-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
14. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 1 msec}
2025-04-17 22:30:25.866 INFO  [http-nio-11040-exec-8] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-17 22:30:25.867 INFO  [http-nio-11040-exec-8] [com.momo.api.SaleController] - summary: CommonVO(provider=null, date=null, year=null, month=null, day=null, selectType=null, range=null, dateType=null, prevFromYmd=null, prevToYmd=null, currFromYmd=null, currToYmd=null, fromYmd=2024-07-01, toYmd=2025-01-01, fromYm=null, toYm=null, prevDate=null, currDate=null)
2025-04-17 22:30:25.883 DEBUG [http-nio-11040-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
14. #         월별 날짜 구하기
        with recursive month_range as (
            select '2024-07-01' as d
            union all
            select date_add(d, interval 1 month) as d
            from month_range
            where date_add(d, interval 1 month) < '2025-01-01'
        ), months as(
            select month(d) as m
            from month_range
        ), filtered_sale as ( # 판매일보 초벌
            select month(actv_dt) as actv_month,
                   device_id,
                   internet_plan,
                   tv_plan,
                    exsvc_id,
                   total_cms,
                   wt_cms,
                   sale_id,
                   sd_id,
                    shop_id
            from tb_sale
            where shop_id=2 and

                    seller_id='km1104rs' and

                actv_dt between '2024-07-01' and date_add('2025-01-01', interval 1 month)
        ), ct_graph as ( # 무선 그래프 데이터
            SELECT m,
                   count(device_id) as cnt
            FROM months
                     LEFT OUTER JOIN filtered_sale on actv_month = m and
                                                      device_id is not null
            group by m
        ), internet_graph as ( # 인터넷 그래프 데이터
            SELECT m,
                   count(internet_plan) as cnt
            FROM months
                     LEFT OUTER JOIN filtered_sale on actv_month = m  and
                                                      internet_plan is not null
            group by m
        ), tv_graph as ( # TV 그래프 데이터
            SELECT m,
                   count(tv_plan) as cnt
            FROM months
                     LEFT OUTER JOIN filtered_sale on actv_month = m  and
                                                      tv_plan is not null
            group by m
        ), card as ( # 카드 데이터
            SELECT m,
                   (
                    select count(*)
                    from tb_sale_card sc
                    left outer join filtered_sale fs on fs.shop_id = sc.shop_id and
                                                        fs.sale_id = sc.sale_id
                   )  as cnt
            FROM months
                     LEFT OUTER JOIN filtered_sale on actv_month = m
            group by m
        ), exsvc as ( # 부가서비스 데이터
            SELECT m,
                   count(exsvc_id) as cnt
            FROM months
                     LEFT OUTER JOIN filtered_sale on actv_month = m  and
                                                      exsvc_id is not null
            group by m
        ), tc_graph as ( # 총 이익 그래프 데이터
            SELECT m,
                   IFNULL(sum(total_cms), 0) as cnt
            FROM months
                     LEFT OUTER JOIN filtered_sale on actv_month = m
            group by m
        ), avg_margin_graph as ( # 개인 평균 마진 그래프 데이터
            SELECT m,
                   IFNULL(avg(total_cms), 0) as cnt
            FROM months
                     LEFT OUTER JOIN filtered_sale on actv_month = m and
                                                      device_id is not null
            group by m
        ), ud_graph as ( # 중고 개통 그래프 데이터
            SELECT m,
                   count(ud_id) as cnt
            FROM months
                     LEFT OUTER JOIN filtered_sale on actv_month = m
                     LEFT OUTER JOIN tb_sale_used_device sud on sud.sale_id=filtered_sale.sale_id
            group by m
        ), sec_graph as ( # 세컨 그래프 데이터
            SELECT m,
                   count(sd_id) as cnt
            FROM months
                     LEFT OUTER JOIN filtered_sale on actv_month = m and
                                                      sd_id != 0
            group by m
        ), diff_ct as (
            select
                (
                    select cnt
                    from ct_graph
                    limit 4, 1
                ) as prv,
                (
                    select cnt
                    from ct_graph
                    limit 5,1
                ) as curr
            from dual
        ), diff_internet as (
            select
                (
                    select cnt
                    from internet_graph
                    limit 4,1
                ) as prv,
                (
                    select cnt
                    from internet_graph
                    limit 5,1
                ) as curr
            from dual
        ), diff_tv as (
            select
                (
                    select cnt
                    from tv_graph
                    limit 4,1
                ) as prv,
                (
                    select cnt
                    from tv_graph
                    limit 5,1
                ) as curr
            from dual
        ), diff_card as (
            select
                (
                    select cnt
                    from card
                    limit 4,1
                ) as prv,
                (
                    select cnt
                    from card
                    limit 5,1
                ) as curr
            from dual
        ), diff_exsvc as (
            select
                (
                    select cnt
                    from exsvc
                    limit 4,1
                ) as prv,
                (
                    select cnt
                    from exsvc
                    limit 5,1
                ) as curr
            from dual
        ), diff_tc as (
            select
                (
                    select cnt
                    from tc_graph
                    limit 4,1
                ) as prv,
                (
                    select cnt
                    from tc_graph
                    limit 5,1
                ) as curr
            from dual
        ) , diff_margin as (
            select
                (
                    select cnt
                    from avg_margin_graph
                    limit 4,1
                ) as prv,
                (
                    select cnt
                    from avg_margin_graph
                    limit 5,1
                ) as curr
            from dual
        ), diff_ud as (
            select
                (
                    select cnt
                    from ud_graph
                    limit 4,1
                ) as prv,
                (
                    select cnt
                    from ud_graph
                    limit 5,1
                ) as curr
            from dual
        ) , diff_sec as (
            select
                (
                    select cnt
                    from sec_graph
                    limit 4,1
                ) as prv,
                (
                    select cnt
                    from sec_graph
                    limit 5,1
                ) as curr
            from dual
        ), final as (
            select
                curr,
                prv,
                (
                    select json_arrayagg(cnt)
                    from ct_graph
                ) as list
            from diff_ct
            union all
            select
                curr,
                prv,
                (
                    select json_arrayagg(cnt)
                    from internet_graph
                ) as list
            from diff_internet
            union all
            select
                curr,
                prv,
                (
                    select json_arrayagg(cnt)
                    from tv_graph
                ) as list
            from diff_tv
             union all
            select
                curr,
                prv,
                (
                    select json_arrayagg(cnt)
                    from card
                ) as list
            from diff_card
             union all
            select
                curr,
                prv,
                (
                    select json_arrayagg(cnt)
                    from exsvc
                ) as list
            from diff_exsvc
            union all
            select
                curr,
                prv,
                (
                    select json_arrayagg(cnt)
                    from tc_graph
                ) as list
            from diff_tc
            union all
            select
                curr,
                prv,
                (
                    select json_arrayagg(cnt)
                    from avg_margin_graph
                ) as list
            from diff_margin
            union all
            select
                curr,
                prv,
                (
                    select json_arrayagg(cnt)
                    from ud_graph
                ) as list
            from diff_ud
            union all
            select
                curr,
                prv,
                (
                    select json_arrayagg(cnt)
                    from sec_graph
                ) as list
            from diff_sec
        )

        select FLOOR(curr) as value,
               (
                   CASE
                       WHEN curr = 0 and prv = 0 THEN 0
                       WHEN prv != 0 and curr = 0 THEN -100
                       WHEN prv = 0 and curr != 0 THEN 100
                       WHEN curr != 0 and prv != 0 THEN TRUNCATE(((curr/prv)-1)*100, 1)
                       END
                   ) as per,
               list
        from final
 {executed in 13 msec}
2025-04-17 22:30:25.888 INFO  [http-nio-11040-exec-1] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/notif/count/unread
2025-04-17 22:30:25.888 INFO  [http-nio-11040-exec-1] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDg5NjYyMiwiZXhwIjoxNzQ0ODk3MjIyLCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.wm7jFLxCam8FRVJxM7Ych38CxJ_3rzCnPGu7FnKsj44
2025-04-17 22:30:25.888 INFO  [http-nio-11040-exec-1] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/notif/count/unread
2025-04-17 22:30:25.889 INFO  [http-nio-11040-exec-1] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-17 22:30:25.890 DEBUG [http-nio-11040-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
12. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 1 msec}
2025-04-17 22:30:25.890 INFO  [http-nio-11040-exec-1] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-17 22:30:25.890 INFO  [http-nio-11040-exec-1] [c.momo.common.util.SecurityContextUtil] - principal: UserDetailsImpl(username=km1104rs, password=$2a$10$uXShhwl6ULOkbJe477uDWOfdiUUcu6lOSF/Dhj9xP3U1nUn/gXkc6, authorities=[ROLE_NONE])
2025-04-17 22:30:25.891 DEBUG [http-nio-11040-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
12. SELECT count(*)
        FROM tb_notification
        WHERE receiver_id = 'km1104rs'
          AND read_st = FALSE
 {executed in 1 msec}
2025-04-17 22:30:25.926 INFO  [http-nio-11040-exec-5] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/sale/graph/ct/select/0
2025-04-17 22:30:25.926 INFO  [http-nio-11040-exec-5] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDg5NjYyMiwiZXhwIjoxNzQ0ODk3MjIyLCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.wm7jFLxCam8FRVJxM7Ych38CxJ_3rzCnPGu7FnKsj44
2025-04-17 22:30:25.926 INFO  [http-nio-11040-exec-5] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/sale/graph/ct/select/0
2025-04-17 22:30:25.927 INFO  [http-nio-11040-exec-5] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-17 22:30:25.929 DEBUG [http-nio-11040-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
11. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 1 msec}
2025-04-17 22:30:25.929 INFO  [http-nio-11040-exec-5] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-17 22:30:25.932 DEBUG [http-nio-11040-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
11. with recursive group_generation as (
            select 0 as g
            union all
            select g+1
            from group_generation
            where g < 8
        ), group_weekday as (
            select 0 as g
            union all
            select g+1
            from group_weekday
            where g < 6
        ),  sale as (
            select weekday(actv_dt) as days,
                   device_id,
                   cust_cd,
                   sale_id
            from tb_sale
            where shop_id=2 and

                      seller_id='km1104rs' and

                device_id is not null and
                actv_dt between '2025-01-01' and '2025-01-31'
        ), sale_gene as (
            select sale_id,
                   (
                       case
                           when length(cust_cd) = 6 then floor((year(curdate()) - concat((
                                 case
                                     when substring(cust_cd, 1,2) > '44' then '19'
                                     when substring(cust_cd, 1,2) <= '44' then '20'
                                     end
                                 ),substring(cust_cd,1,2))) / 10)
                           when length(cust_cd) != 6 then null
                           end
                       ) as generation
            from sale
        ), generation as (
            select g,
                   device_id
            from group_generation g
                     left outer join sale_gene sg on g.g=sg.generation
                     left outer join sale s on s.sale_id=sg.sale_id
        ), weekdays as (
            select g,
                   device_id
            from group_weekday w
                     left outer join sale s on s.days=w.g
        )

        select IFNULL(count(device_id),0) as avg
        from generation
        group by g
 {executed in 2 msec}
2025-04-17 22:30:25.950 INFO  [http-nio-11040-exec-2] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/sale/graph/stat/select/0
2025-04-17 22:30:25.950 INFO  [http-nio-11040-exec-2] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDg5NjYyMiwiZXhwIjoxNzQ0ODk3MjIyLCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.wm7jFLxCam8FRVJxM7Ych38CxJ_3rzCnPGu7FnKsj44
2025-04-17 22:30:25.950 INFO  [http-nio-11040-exec-2] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/sale/graph/stat/select/0
2025-04-17 22:30:25.951 INFO  [http-nio-11040-exec-2] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-17 22:30:25.953 DEBUG [http-nio-11040-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
12. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 0 msec}
2025-04-17 22:30:25.953 INFO  [http-nio-11040-exec-2] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-17 22:30:25.956 DEBUG [http-nio-11040-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
12. with base as (select device_id,
                             (SELECT device_nm
                              FROM tb_device
                              WHERE tb_device.device_id = sl.device_id)      as device,
                             sd_id,
                             (SELECT sd_nm
                              FROM tb_second_device
                              WHERE tb_second_device.sd_id = sl.sd_id)       as sec_device,
                             ct_actv_plan,
                             (SELECT ct_plan_nm
                              FROM tb_ct_plan
                              WHERE tb_ct_plan.ct_plan_id = sl.ct_actv_plan) as actv_plan
                      from tb_sale sl
                      where shop_id = 2 and

                                seller_id='km1104rs' and

                        actv_dt between '2025-01-01' and '2025-01-31'),
             device as (SELECT device                   as name,
                               count(device_id) as count
                        from base
                        where device_id is not null
                        group by device),
             sec_device as (SELECT sec_device                   as name,
                                   count(sec_device) as count
                            from base
                            where sd_id is not null
                            group by sec_device),
             actv_plan as (SELECT actv_plan                   as name,
                                  count(actv_plan) as count
                           from base
                           where ct_actv_plan is not null
                           group by actv_plan),
             total as (select count('device') as cnt
                       from base
                       where 'device' is not null
             )

        select name,
               count,
               (
                   IF((select cnt
                       from total) = 0 or count = 0, 0, TRUNCATE(
                              (count / (
                                  select cnt
                                  from total
                              )
                                  ) * 100, 1))
                   ) as per
        from device
        order by per desc
        limit 5
 {executed in 1 msec}
2025-04-17 22:30:25.976 INFO  [http-nio-11040-exec-9] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/sale/graph/ratio/select/0
2025-04-17 22:30:25.976 INFO  [http-nio-11040-exec-9] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDg5NjYyMiwiZXhwIjoxNzQ0ODk3MjIyLCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.wm7jFLxCam8FRVJxM7Ych38CxJ_3rzCnPGu7FnKsj44
2025-04-17 22:30:25.976 INFO  [http-nio-11040-exec-9] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/sale/graph/ratio/select/0
2025-04-17 22:30:25.978 INFO  [http-nio-11040-exec-9] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-17 22:30:25.979 DEBUG [http-nio-11040-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
13. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 1 msec}
2025-04-17 22:30:25.980 INFO  [http-nio-11040-exec-9] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-17 22:30:25.983 DEBUG [http-nio-11040-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
13. with recursive istm_range as (
            select 0 as i
            union all
            select i+1
            from istm_range
            where i<5
        ), base as (
            select ct_istm
            from tb_sale
            where shop_id=2 and

                        seller_id='km1104rs' and

                actv_dt between '2025-01-01' and '2025-01-31'
        ), final as (
            select i as istm,
                   IFNULL(count(base.ct_istm),0) as cnt
            from istm_range
                     left outer join base on base.ct_istm=istm_range.i
            group by i
            order by istm desc
        )

        select json_arrayagg(istm) as type,
               json_arrayagg(cnt) as cnt,
               json_arrayagg(IF((
                      select IFNULL(count(ct_istm), 0)
                      from base
                  ) = 0 or cnt = 0, 0, TRUNCATE((cnt/(
                   select IFNULL(count(ct_istm), 0)
                   from base
               )) * 100, 1))) as per
        from final
 {executed in 1 msec}
2025-04-17 22:30:27.656 INFO  [http-nio-11040-exec-7] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/sale/graph/ratio/select/2
2025-04-17 22:30:27.656 INFO  [http-nio-11040-exec-7] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDg5NjYyMiwiZXhwIjoxNzQ0ODk3MjIyLCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.wm7jFLxCam8FRVJxM7Ych38CxJ_3rzCnPGu7FnKsj44
2025-04-17 22:30:27.656 INFO  [http-nio-11040-exec-7] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/sale/graph/ratio/select/2
2025-04-17 22:30:27.659 INFO  [http-nio-11040-exec-7] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-17 22:30:27.660 DEBUG [http-nio-11040-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
11. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 1 msec}
2025-04-17 22:30:27.660 INFO  [http-nio-11040-exec-7] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-17 22:30:27.664 DEBUG [http-nio-11040-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
11. with recursive actv_tp_range as (
            select 0 as i
            union all
            select i+1
            from actv_tp_range
            where i<2
        ), base as (
            select ct_actv_tp
            from tb_sale
            where shop_id=2 and

            seller_id='km1104rs' and

                actv_dt between '2025-01-01' and '2025-01-31'
        ), final as (
            select i as ct_actv_tp,
                   IFNULL(count(base.ct_actv_tp),0) as cnt
            from actv_tp_range
                     left outer join base on base.ct_actv_tp=actv_tp_range.i
            group by i
           order by ct_actv_tp asc
        )

        select json_arrayagg(ct_actv_tp) as type,
               json_arrayagg(cnt) as cnt,
               json_arrayagg(IF((
                      select IFNULL(count(ct_actv_tp), 0)
                      from base
                  ) = 0 or cnt = 0, 0, TRUNCATE((cnt/(
                   select IFNULL(count(ct_actv_tp), 0)
                   from base
               )) * 100, 1)) ) as per
        from final;
 {executed in 2 msec}
2025-04-17 22:30:28.048 INFO  [http-nio-11040-exec-10] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/sale/graph/ratio/select/3
2025-04-17 22:30:28.048 INFO  [http-nio-11040-exec-10] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDg5NjYyMiwiZXhwIjoxNzQ0ODk3MjIyLCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.wm7jFLxCam8FRVJxM7Ych38CxJ_3rzCnPGu7FnKsj44
2025-04-17 22:30:28.048 INFO  [http-nio-11040-exec-10] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/sale/graph/ratio/select/3
2025-04-17 22:30:28.050 INFO  [http-nio-11040-exec-10] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-17 22:30:28.053 DEBUG [http-nio-11040-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
12. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 2 msec}
2025-04-17 22:30:28.053 INFO  [http-nio-11040-exec-10] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-17 22:30:28.058 DEBUG [http-nio-11040-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
12. with recursive gender_range as (
            select 0 as i
            union all
            select i+1
            from gender_range
            where i<2
        ), base as (
            select cust_gd
            from tb_sale
            where shop_id=2 and

                    seller_id='km1104rs' and

                actv_dt between '2025-01-01' and '2025-01-31'
        ), final as (
            select i as gender,
                   IFNULL(count(base.cust_gd),0) as cnt
            from gender_range
                     left outer join base on base.cust_gd=gender_range.i
            group by i
            order by gender asc
        )

        select json_arrayagg(gender) as type,
               json_arrayagg(cnt) as cnt,
               json_arrayagg(IF((
                      select IFNULL(count(cust_gd), 0)
                      from base
                  ) = 0 or cnt = 0, 0, TRUNCATE((cnt/(
                   select IFNULL(count(cust_gd), 0)
                   from base
               )) * 100, 1))) as per
        from final;
 {executed in 2 msec}
2025-04-17 22:30:28.500 INFO  [http-nio-11040-exec-6] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/sale/graph/ratio/select/1
2025-04-17 22:30:28.500 INFO  [http-nio-11040-exec-6] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDg5NjYyMiwiZXhwIjoxNzQ0ODk3MjIyLCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.wm7jFLxCam8FRVJxM7Ych38CxJ_3rzCnPGu7FnKsj44
2025-04-17 22:30:28.501 INFO  [http-nio-11040-exec-6] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/sale/graph/ratio/select/1
2025-04-17 22:30:28.502 INFO  [http-nio-11040-exec-6] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-17 22:30:28.505 DEBUG [http-nio-11040-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
11. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 1 msec}
2025-04-17 22:30:28.505 INFO  [http-nio-11040-exec-6] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-17 22:30:28.511 DEBUG [http-nio-11040-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
11. with recursive maker_range as (
            select 0 as i
            union all
            select i+1
            from maker_range
            where i<2
        ), base as (
            select dc.maker
            from tb_sale sl
            left outer join tb_device dc on sl.device_id=dc.device_id
            where shop_id=2 and

            seller_id='km1104rs' and

                actv_dt between '2025-01-01' and '2025-01-31'
        ), final as (
            select i as maker,
                   IFNULL(count(base.maker),0) as cnt
            from maker_range
                     left outer join base on base.maker=maker_range.i
            group by i
            order by maker asc
        )

        select json_arrayagg(maker) as type,
               json_arrayagg(cnt) as cnt,
               json_arrayagg(IF((
                      select IFNULL(count(maker), 0)
                      from base
                  ) = 0 or cnt = 0, 0, TRUNCATE((cnt/(
                   select IFNULL(count(maker), 0)
                   from base
               )) * 100, 1))) as per
        from final;
 {executed in 2 msec}
2025-04-17 22:30:28.887 INFO  [http-nio-11040-exec-4] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/sale/graph/stat/select/2
2025-04-17 22:30:28.887 INFO  [http-nio-11040-exec-4] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDg5NjYyMiwiZXhwIjoxNzQ0ODk3MjIyLCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.wm7jFLxCam8FRVJxM7Ych38CxJ_3rzCnPGu7FnKsj44
2025-04-17 22:30:28.887 INFO  [http-nio-11040-exec-4] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/sale/graph/stat/select/2
2025-04-17 22:30:28.888 INFO  [http-nio-11040-exec-4] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-17 22:30:28.891 DEBUG [http-nio-11040-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
12. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 1 msec}
2025-04-17 22:30:28.891 INFO  [http-nio-11040-exec-4] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-17 22:30:28.895 DEBUG [http-nio-11040-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
12. with base as (select device_id,
                             (SELECT device_nm
                              FROM tb_device
                              WHERE tb_device.device_id = sl.device_id)      as device,
                             sd_id,
                             (SELECT sd_nm
                              FROM tb_second_device
                              WHERE tb_second_device.sd_id = sl.sd_id)       as sec_device,
                             ct_actv_plan,
                             (SELECT ct_plan_nm
                              FROM tb_ct_plan
                              WHERE tb_ct_plan.ct_plan_id = sl.ct_actv_plan) as actv_plan
                      from tb_sale sl
                      where shop_id = 2 and

                                seller_id='km1104rs' and

                        actv_dt between '2025-01-01' and '2025-01-31'),
             device as (SELECT device                   as name,
                               count(device_id) as count
                        from base
                        where device_id is not null
                        group by device),
             sec_device as (SELECT sec_device                   as name,
                                   count(sec_device) as count
                            from base
                            where sd_id is not null
                            group by sec_device),
             actv_plan as (SELECT actv_plan                   as name,
                                  count(actv_plan) as count
                           from base
                           where ct_actv_plan is not null
                           group by actv_plan),
             total as (select count('sec_device') as cnt
                       from base
                       where 'sec_device' is not null
             )

        select name,
               count,
               (
                   IF((select cnt
                       from total) = 0 or count = 0, 0, TRUNCATE(
                              (count / (
                                  select cnt
                                  from total
                              )
                                  ) * 100, 1))
                   ) as per
        from sec_device
        order by per desc
        limit 5
 {executed in 2 msec}
2025-04-17 22:30:29.157 INFO  [http-nio-11040-exec-3] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/sale/graph/stat/select/1
2025-04-17 22:30:29.157 INFO  [http-nio-11040-exec-3] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDg5NjYyMiwiZXhwIjoxNzQ0ODk3MjIyLCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.wm7jFLxCam8FRVJxM7Ych38CxJ_3rzCnPGu7FnKsj44
2025-04-17 22:30:29.157 INFO  [http-nio-11040-exec-3] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/sale/graph/stat/select/1
2025-04-17 22:30:29.159 INFO  [http-nio-11040-exec-3] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-17 22:30:29.160 DEBUG [http-nio-11040-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
13. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 1 msec}
2025-04-17 22:30:29.160 INFO  [http-nio-11040-exec-3] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-17 22:30:29.164 DEBUG [http-nio-11040-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
13. with base as (select device_id,
                             (SELECT device_nm
                              FROM tb_device
                              WHERE tb_device.device_id = sl.device_id)      as device,
                             sd_id,
                             (SELECT sd_nm
                              FROM tb_second_device
                              WHERE tb_second_device.sd_id = sl.sd_id)       as sec_device,
                             ct_actv_plan,
                             (SELECT ct_plan_nm
                              FROM tb_ct_plan
                              WHERE tb_ct_plan.ct_plan_id = sl.ct_actv_plan) as actv_plan
                      from tb_sale sl
                      where shop_id = 2 and

                                seller_id='km1104rs' and

                        actv_dt between '2025-01-01' and '2025-01-31'),
             device as (SELECT device                   as name,
                               count(device_id) as count
                        from base
                        where device_id is not null
                        group by device),
             sec_device as (SELECT sec_device                   as name,
                                   count(sec_device) as count
                            from base
                            where sd_id is not null
                            group by sec_device),
             actv_plan as (SELECT actv_plan                   as name,
                                  count(actv_plan) as count
                           from base
                           where ct_actv_plan is not null
                           group by actv_plan),
             total as (select count('actv_plan') as cnt
                       from base
                       where 'actv_plan' is not null
             )

        select name,
               count,
               (
                   IF((select cnt
                       from total) = 0 or count = 0, 0, TRUNCATE(
                              (count / (
                                  select cnt
                                  from total
                              )
                                  ) * 100, 1))
                   ) as per
        from actv_plan
        order by per desc
        limit 5
 {executed in 2 msec}
2025-04-17 22:30:29.818 INFO  [http-nio-11040-exec-8] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/sale/graph/ct/select/1
2025-04-17 22:30:29.818 INFO  [http-nio-11040-exec-8] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDg5NjYyMiwiZXhwIjoxNzQ0ODk3MjIyLCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.wm7jFLxCam8FRVJxM7Ych38CxJ_3rzCnPGu7FnKsj44
2025-04-17 22:30:29.818 INFO  [http-nio-11040-exec-8] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/sale/graph/ct/select/1
2025-04-17 22:30:29.819 INFO  [http-nio-11040-exec-8] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-17 22:30:29.821 DEBUG [http-nio-11040-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
14. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 1 msec}
2025-04-17 22:30:29.821 INFO  [http-nio-11040-exec-8] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-17 22:30:29.825 DEBUG [http-nio-11040-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
14. with recursive group_generation as (
            select 0 as g
            union all
            select g+1
            from group_generation
            where g < 8
        ), group_weekday as (
            select 0 as g
            union all
            select g+1
            from group_weekday
            where g < 6
        ),  sale as (
            select weekday(actv_dt) as days,
                   device_id,
                   cust_cd,
                   sale_id
            from tb_sale
            where shop_id=2 and

                      seller_id='km1104rs' and

                device_id is not null and
                actv_dt between '2025-01-01' and '2025-01-31'
        ), sale_gene as (
            select sale_id,
                   (
                       case
                           when length(cust_cd) = 6 then floor((year(curdate()) - concat((
                                 case
                                     when substring(cust_cd, 1,2) > '44' then '19'
                                     when substring(cust_cd, 1,2) <= '44' then '20'
                                     end
                                 ),substring(cust_cd,1,2))) / 10)
                           when length(cust_cd) != 6 then null
                           end
                       ) as generation
            from sale
        ), generation as (
            select g,
                   device_id
            from group_generation g
                     left outer join sale_gene sg on g.g=sg.generation
                     left outer join sale s on s.sale_id=sg.sale_id
        ), weekdays as (
            select g,
                   device_id
            from group_weekday w
                     left outer join sale s on s.days=w.g
        )

        select IFNULL(count(device_id),0) as avg
        from weekdays
        group by g
 {executed in 1 msec}
2025-04-17 22:30:30.132 INFO  [http-nio-11040-exec-1] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/sale/graph/ct/select/0
2025-04-17 22:30:30.133 INFO  [http-nio-11040-exec-1] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDg5NjYyMiwiZXhwIjoxNzQ0ODk3MjIyLCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.wm7jFLxCam8FRVJxM7Ych38CxJ_3rzCnPGu7FnKsj44
2025-04-17 22:30:30.133 INFO  [http-nio-11040-exec-1] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/sale/graph/ct/select/0
2025-04-17 22:30:30.134 INFO  [http-nio-11040-exec-1] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-17 22:30:30.137 DEBUG [http-nio-11040-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
12. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 2 msec}
2025-04-17 22:30:30.137 INFO  [http-nio-11040-exec-1] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-17 22:30:30.141 DEBUG [http-nio-11040-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
12. with recursive group_generation as (
            select 0 as g
            union all
            select g+1
            from group_generation
            where g < 8
        ), group_weekday as (
            select 0 as g
            union all
            select g+1
            from group_weekday
            where g < 6
        ),  sale as (
            select weekday(actv_dt) as days,
                   device_id,
                   cust_cd,
                   sale_id
            from tb_sale
            where shop_id=2 and

                      seller_id='km1104rs' and

                device_id is not null and
                actv_dt between '2025-01-01' and '2025-01-31'
        ), sale_gene as (
            select sale_id,
                   (
                       case
                           when length(cust_cd) = 6 then floor((year(curdate()) - concat((
                                 case
                                     when substring(cust_cd, 1,2) > '44' then '19'
                                     when substring(cust_cd, 1,2) <= '44' then '20'
                                     end
                                 ),substring(cust_cd,1,2))) / 10)
                           when length(cust_cd) != 6 then null
                           end
                       ) as generation
            from sale
        ), generation as (
            select g,
                   device_id
            from group_generation g
                     left outer join sale_gene sg on g.g=sg.generation
                     left outer join sale s on s.sale_id=sg.sale_id
        ), weekdays as (
            select g,
                   device_id
            from group_weekday w
                     left outer join sale s on s.days=w.g
        )

        select IFNULL(count(device_id),0) as avg
        from generation
        group by g
 {executed in 2 msec}
2025-04-17 22:31:56.050 INFO  [SpringApplicationShutdownHook] [o.s.m.s.b.SimpleBrokerMessageHandler] - Stopping...
2025-04-17 22:31:56.053 INFO  [SpringApplicationShutdownHook] [o.s.m.s.b.SimpleBrokerMessageHandler] - BrokerAvailabilityEvent[available=false, SimpleBrokerMessageHandler [org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry@29b8d76e]]
2025-04-17 22:31:56.053 INFO  [SpringApplicationShutdownHook] [o.s.m.s.b.SimpleBrokerMessageHandler] - Stopped.
2025-04-17 22:31:56.053 INFO  [SpringApplicationShutdownHook] [org.quartz.core.QuartzScheduler] - Scheduler quartzScheduler_$_NON_CLUSTERED paused.
2025-04-17 22:31:56.062 INFO  [SpringApplicationShutdownHook] [o.s.s.quartz.SchedulerFactoryBean] - Shutting down Quartz Scheduler
2025-04-17 22:31:56.062 INFO  [SpringApplicationShutdownHook] [org.quartz.core.QuartzScheduler] - Scheduler quartzScheduler_$_NON_CLUSTERED shutting down.
2025-04-17 22:31:56.062 INFO  [SpringApplicationShutdownHook] [org.quartz.core.QuartzScheduler] - Scheduler quartzScheduler_$_NON_CLUSTERED paused.
2025-04-17 22:31:56.062 INFO  [SpringApplicationShutdownHook] [org.quartz.core.QuartzScheduler] - Scheduler quartzScheduler_$_NON_CLUSTERED shutdown complete.
