2025-04-09 00:10:43.843 INFO  [background-preinit] [o.h.validator.internal.util.Version] - HV000001: Hibernate Validator 8.0.1.Final
2025-04-09 00:10:43.930 INFO  [restartedMain] [com.momo.PhoneManagementApplication] - Starting PhoneManagementApplication using Java 17.0.12 with PID 4260 (/Users/chan/momo/phoneManagement/target/classes started by chan in /Users/chan/momo/phoneManagement)
2025-04-09 00:10:43.931 INFO  [restartedMain] [com.momo.PhoneManagementApplication] - The following 1 profile is active: "dev"
2025-04-09 00:10:44.282 INFO  [restartedMain] [o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor] - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2025-04-09 00:10:44.282 INFO  [restartedMain] [o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor] - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2025-04-09 00:10:45.960 INFO  [restartedMain] [o.s.b.w.embedded.tomcat.TomcatWebServer] - Tomcat initialized with port 11040 (http)
2025-04-09 00:10:45.969 INFO  [restartedMain] [o.apache.coyote.http11.Http11NioProtocol] - Initializing ProtocolHandler ["http-nio-11040"]
2025-04-09 00:10:45.970 INFO  [restartedMain] [o.apache.catalina.core.StandardService] - Starting service [Tomcat]
2025-04-09 00:10:45.970 INFO  [restartedMain] [org.apache.catalina.core.StandardEngine] - Starting Servlet engine: [Apache Tomcat/10.1.17]
2025-04-09 00:10:45.997 INFO  [restartedMain] [o.a.c.c.C.[Tomcat].[localhost].[/]] - Initializing Spring embedded WebApplicationContext
2025-04-09 00:10:45.998 INFO  [restartedMain] [o.s.b.w.s.c.ServletWebServerApplicationContext] - Root WebApplicationContext: initialization completed in 1716 ms
2025-04-09 00:10:46.576 INFO  [restartedMain] [org.quartz.impl.StdSchedulerFactory] - Using default implementation for ThreadExecutor
2025-04-09 00:10:46.583 INFO  [restartedMain] [org.quartz.core.SchedulerSignalerImpl] - Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2025-04-09 00:10:46.583 INFO  [restartedMain] [org.quartz.core.QuartzScheduler] - Quartz Scheduler v.2.3.2 created.
2025-04-09 00:10:46.584 INFO  [restartedMain] [org.quartz.simpl.RAMJobStore] - RAMJobStore initialized.
2025-04-09 00:10:46.584 INFO  [restartedMain] [org.quartz.core.QuartzScheduler] - Scheduler meta-data: Quartz Scheduler (v2.3.2) 'quartzScheduler' with instanceId 'NON_CLUSTERED'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 10 threads.
  Using job-store 'org.quartz.simpl.RAMJobStore' - which does not support persistence. and is not clustered.

2025-04-09 00:10:46.584 INFO  [restartedMain] [org.quartz.impl.StdSchedulerFactory] - Quartz scheduler 'quartzScheduler' initialized from an externally provided properties instance.
2025-04-09 00:10:46.584 INFO  [restartedMain] [org.quartz.impl.StdSchedulerFactory] - Quartz scheduler version: 2.3.2
2025-04-09 00:10:46.584 INFO  [restartedMain] [org.quartz.core.QuartzScheduler] - JobFactory set to: org.springframework.scheduling.quartz.SpringBeanJobFactory@7b8ea33c
2025-04-09 00:10:46.617 INFO  [restartedMain] [o.s.b.f.a.AutowiredAnnotationBeanPostProcessor] - Autowired annotation is not supported on static fields: public static int com.momo.job.DormantUserJob.DORMANT_CYCLE_DATE
2025-04-09 00:10:46.757 INFO  [restartedMain] [o.s.b.a.w.s.WelcomePageHandlerMapping] - Adding welcome page: class path resource [public/index.html]
2025-04-09 00:10:47.297 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Will secure any request with [org.springframework.security.web.session.DisableEncodeUrlFilter@4ecbb14e, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@7e6b6d7a, org.springframework.security.web.context.SecurityContextHolderFilter@19ec0990, org.springframework.security.web.header.HeaderWriterFilter@10c9f080, org.springframework.web.filter.CorsFilter@47d8ef09, org.springframework.security.web.authentication.logout.LogoutFilter@4d321ca4, com.momo.filter.JwtAuthorizationFilter@597ed971, org.springframework.security.web.session.ConcurrentSessionFilter@76c620ad, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@3aacf4c6, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@57c44628, org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationFilter@4d17993c, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@4aac42d1, org.springframework.security.web.session.SessionManagementFilter@471eedbe, org.springframework.security.web.access.ExceptionTranslationFilter@4c01a59a, org.springframework.security.web.access.intercept.FilterSecurityInterceptor@35ad89ed]
2025-04-09 00:10:47.617 WARN  [restartedMain] [o.s.b.a.t.ThymeleafAutoConfiguration$DefaultTemplateResolverConfiguration] - Cannot find template location: classpath:/templates/ (please add some templates, check your Thymeleaf configuration, or set spring.thymeleaf.check-template-location=false)
2025-04-09 00:10:47.767 INFO  [restartedMain] [o.s.b.d.a.OptionalLiveReloadServer] - LiveReload server is running on port 35729
2025-04-09 00:10:47.794 INFO  [restartedMain] [o.apache.coyote.http11.Http11NioProtocol] - Starting ProtocolHandler ["http-nio-11040"]
2025-04-09 00:10:47.808 INFO  [restartedMain] [o.s.b.w.embedded.tomcat.TomcatWebServer] - Tomcat started on port 11040 (http) with context path ''
2025-04-09 00:10:47.810 INFO  [restartedMain] [o.s.m.s.b.SimpleBrokerMessageHandler] - Starting...
2025-04-09 00:10:47.810 INFO  [restartedMain] [o.s.m.s.b.SimpleBrokerMessageHandler] - BrokerAvailabilityEvent[available=true, SimpleBrokerMessageHandler [org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry@479e66cc]]
2025-04-09 00:10:47.810 INFO  [restartedMain] [o.s.m.s.b.SimpleBrokerMessageHandler] - Started.
2025-04-09 00:10:47.810 INFO  [restartedMain] [o.s.s.quartz.SchedulerFactoryBean] - Starting Quartz Scheduler now
2025-04-09 00:10:47.810 INFO  [restartedMain] [org.quartz.core.QuartzScheduler] - Scheduler quartzScheduler_$_NON_CLUSTERED started.
2025-04-09 00:10:47.820 INFO  [restartedMain] [com.momo.PhoneManagementApplication] - Started PhoneManagementApplication in 4.78 seconds (process running for 5.674)
2025-04-09 00:10:51.222 INFO  [http-nio-11040-exec-1] [o.a.c.c.C.[Tomcat].[localhost].[/]] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-04-09 00:10:51.222 INFO  [http-nio-11040-exec-1] [o.s.web.servlet.DispatcherServlet] - Initializing Servlet 'dispatcherServlet'
2025-04-09 00:10:51.223 INFO  [http-nio-11040-exec-1] [o.s.web.servlet.DispatcherServlet] - Completed initialization in 1 ms
2025-04-09 00:10:51.235 INFO  [http-nio-11040-exec-1] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/user/info
2025-04-09 00:10:51.236 INFO  [http-nio-11040-exec-1] [com.momo.filter.JwtAuthorizationFilter] - access token: null
2025-04-09 00:10:51.236 INFO  [http-nio-11040-exec-1] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/user/info
2025-04-09 00:10:51.236 INFO  [http-nio-11040-exec-1] [com.momo.filter.JwtAuthorizationFilter] - 유효한 JWT 토큰이 없습니다
2025-04-09 00:10:51.249 INFO  [http-nio-11040-exec-1] [c.momo.common.util.SecurityContextUtil] - principal: anonymousUser
2025-04-09 00:10:51.420 DEBUG [http-nio-11040-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT ac.id,
               ac.name,
               ac.tel,
               ac.nickname,
               ac.pfp,
               ac.curr_shop_id,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where sf.shop_id = ac.curr_shop_id and
                         sf.staff_id = ac.id
                   ) as role,
               sh.shop_nm,
               sh.shop_addr,
               sh.provider,
               (
                   IFNULL((
                       select sf2.approval_st
                       from tb_staff sf2
                       where sf2.shop_id=ac.curr_shop_id and
                           sf2.staff_id=ac.id
                       ), -1)
                ) as approval_st,
                ac.corp_nm,
                ac.br_no
        FROM tb_account ac
        LEFT OUTER JOIN tb_shop sh on sh.shop_id=ac.curr_shop_id
        WHERE id = ''
 {executed in 16 msec}
2025-04-09 00:10:51.430 INFO  [http-nio-11040-exec-1] [com.momo.api.UserController] - User: null
2025-04-09 00:10:52.214 INFO  [http-nio-11040-exec-2] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/public/login
2025-04-09 00:10:52.214 INFO  [http-nio-11040-exec-2] [com.momo.filter.JwtAuthorizationFilter] - access token: null
2025-04-09 00:10:52.215 INFO  [http-nio-11040-exec-2] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/public/login
2025-04-09 00:10:52.215 INFO  [http-nio-11040-exec-2] [com.momo.filter.JwtAuthorizationFilter] - 유효한 JWT 토큰이 없습니다
2025-04-09 00:10:52.272 DEBUG [http-nio-11040-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 4 msec}
2025-04-09 00:10:52.408 DEBUG [http-nio-11040-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. UPDATE
            tb_account
        SET last_login_dt=NOW(),
            user_st=0
        WHERE id = 'km1104rs'
 {executed in 7 msec}
2025-04-09 00:10:52.429 INFO  [http-nio-11040-exec-2] [com.momo.service.JwtService] - save refresh token: JwtVO(grantType=Bearer, username=km1104rs, accessToken=eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDEyNTA1MiwiZXhwIjoxNzQ0MTI1NjUyLCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.Qku5d4TStM9nJKJo1YX6F3hk_MJav1u53cZuUzcWqmQ, refreshToken=eyJhbGciOiJIUzI1NiJ9.eyJleHAiOjE3NDQxMjg2NTJ9.gr7OIme4nPSUZoFI1-yXatRm4aw17f6kISUtFhXU4kA, expireTime=3600000, revoked=false, expired=false)
2025-04-09 00:10:52.434 DEBUG [http-nio-11040-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT  *
        FROM    tb_refresh_token
        WHERE   user_id='km1104rs'
 {executed in 4 msec}
2025-04-09 00:10:52.436 DEBUG [http-nio-11040-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. UPDATE  tb_refresh_token
        SET     refresh_token='eyJhbGciOiJIUzI1NiJ9.eyJleHAiOjE3NDQxMjg2NTJ9.gr7OIme4nPSUZoFI1-yXatRm4aw17f6kISUtFhXU4kA'
        WHERE   user_id='km1104rs'
 {executed in 1 msec}
2025-04-09 00:10:52.438 DEBUG [http-nio-11040-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT curr_shop_id
        FROM tb_account
        WHERE id='km1104rs'
 {executed in 1 msec}
2025-04-09 00:10:52.464 INFO  [http-nio-11040-exec-3] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/user/info
2025-04-09 00:10:52.464 INFO  [http-nio-11040-exec-3] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDEyNTA1MiwiZXhwIjoxNzQ0MTI1NjUyLCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.Qku5d4TStM9nJKJo1YX6F3hk_MJav1u53cZuUzcWqmQ
2025-04-09 00:10:52.464 INFO  [http-nio-11040-exec-3] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/user/info
2025-04-09 00:10:52.487 INFO  [http-nio-11040-exec-3] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-09 00:10:52.489 DEBUG [http-nio-11040-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 2 msec}
2025-04-09 00:10:52.490 INFO  [http-nio-11040-exec-3] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-09 00:10:52.492 INFO  [http-nio-11040-exec-3] [c.momo.common.util.SecurityContextUtil] - principal: UserDetailsImpl(username=km1104rs, password=$2a$10$uXShhwl6ULOkbJe477uDWOfdiUUcu6lOSF/Dhj9xP3U1nUn/gXkc6, authorities=[ROLE_NONE])
2025-04-09 00:10:52.497 DEBUG [http-nio-11040-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT ac.id,
               ac.name,
               ac.tel,
               ac.nickname,
               ac.pfp,
               ac.curr_shop_id,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where sf.shop_id = ac.curr_shop_id and
                         sf.staff_id = ac.id
                   ) as role,
               sh.shop_nm,
               sh.shop_addr,
               sh.provider,
               (
                   IFNULL((
                       select sf2.approval_st
                       from tb_staff sf2
                       where sf2.shop_id=ac.curr_shop_id and
                           sf2.staff_id=ac.id
                       ), -1)
                ) as approval_st,
                ac.corp_nm,
                ac.br_no
        FROM tb_account ac
        LEFT OUTER JOIN tb_shop sh on sh.shop_id=ac.curr_shop_id
        WHERE id = 'km1104rs'
 {executed in 5 msec}
2025-04-09 00:10:52.498 INFO  [http-nio-11040-exec-3] [com.momo.api.UserController] - User: {role=0, approval_st=1, shop_addr=충청남도 천안시 병천면 충절로 1600 한국기술교육대학교 다산정보관 102, br_no=5218702490, provider=2, name=박희찬, nickname=대표, corp_nm=123, tel=010-4524-0636, id=km1104rs, pfp=1921fc01-e573-4243-9365-6b905389f4fc.png, curr_shop_id=2, shop_nm=한기대점 }
2025-04-09 00:10:52.559 INFO  [http-nio-11040-exec-4] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/auth/refresh
2025-04-09 00:10:52.559 INFO  [http-nio-11040-exec-4] [com.momo.filter.JwtAuthorizationFilter] - access token: null
2025-04-09 00:10:52.559 INFO  [http-nio-11040-exec-4] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/auth/refresh
2025-04-09 00:10:52.559 INFO  [http-nio-11040-exec-4] [com.momo.filter.JwtAuthorizationFilter] - 유효한 JWT 토큰이 없습니다
2025-04-09 00:10:52.563 INFO  [http-nio-11040-exec-4] [com.momo.api.AuthController] - refresh
2025-04-09 00:10:52.568 DEBUG [http-nio-11040-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT  *
        FROM    tb_refresh_token
        WHERE   refresh_token='eyJhbGciOiJIUzI1NiJ9.eyJleHAiOjE3NDQxMjg2NTJ9.gr7OIme4nPSUZoFI1-yXatRm4aw17f6kISUtFhXU4kA'
 {executed in 2 msec}
2025-04-09 00:10:52.570 DEBUG [http-nio-11040-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 1 msec}
2025-04-09 00:10:52.571 INFO  [http-nio-11040-exec-4] [com.momo.api.AuthController] - jwt: JwtVO(grantType=Bearer , username=km1104rs, accessToken=eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDEyNTA1MiwiZXhwIjoxNzQ0MTI1NjUyLCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.Qku5d4TStM9nJKJo1YX6F3hk_MJav1u53cZuUzcWqmQ, refreshToken=null, expireTime=null, revoked=false, expired=false)
2025-04-09 00:10:52.571 INFO  [http-nio-11040-exec-4] [com.momo.service.CommonService] - Session('curr_shop_id') is not found. Try to find on Database...
2025-04-09 00:10:52.571 INFO  [http-nio-11040-exec-4] [c.momo.common.util.SecurityContextUtil] - principal: anonymousUser
2025-04-09 00:10:52.572 DEBUG [http-nio-11040-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT curr_shop_id
        FROM tb_account
        WHERE id=''
 {executed in 0 msec}
2025-04-09 00:10:52.579 ERROR [http-nio-11040-exec-4] [com.momo.handler.GlobalExceptionHandler] - BusinessException: com.momo.common.response.ErrorResponse@1a629666
2025-04-09 00:10:52.583 WARN  [http-nio-11040-exec-4] [o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver] - Resolved [com.momo.exception.BusinessException]
2025-04-09 00:10:52.602 INFO  [http-nio-11040-exec-5] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/user/info
2025-04-09 00:10:52.602 INFO  [http-nio-11040-exec-5] [com.momo.filter.JwtAuthorizationFilter] - access token: null
2025-04-09 00:10:52.602 INFO  [http-nio-11040-exec-5] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/user/info
2025-04-09 00:10:52.602 INFO  [http-nio-11040-exec-5] [com.momo.filter.JwtAuthorizationFilter] - 유효한 JWT 토큰이 없습니다
2025-04-09 00:10:52.603 INFO  [http-nio-11040-exec-5] [c.momo.common.util.SecurityContextUtil] - principal: anonymousUser
2025-04-09 00:10:52.614 DEBUG [http-nio-11040-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT ac.id,
               ac.name,
               ac.tel,
               ac.nickname,
               ac.pfp,
               ac.curr_shop_id,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where sf.shop_id = ac.curr_shop_id and
                         sf.staff_id = ac.id
                   ) as role,
               sh.shop_nm,
               sh.shop_addr,
               sh.provider,
               (
                   IFNULL((
                       select sf2.approval_st
                       from tb_staff sf2
                       where sf2.shop_id=ac.curr_shop_id and
                           sf2.staff_id=ac.id
                       ), -1)
                ) as approval_st,
                ac.corp_nm,
                ac.br_no
        FROM tb_account ac
        LEFT OUTER JOIN tb_shop sh on sh.shop_id=ac.curr_shop_id
        WHERE id = ''
 {executed in 8 msec}
2025-04-09 00:10:52.615 INFO  [http-nio-11040-exec-5] [com.momo.api.UserController] - User: null
2025-04-09 00:10:53.983 INFO  [http-nio-11040-exec-6] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/public/login
2025-04-09 00:10:53.983 INFO  [http-nio-11040-exec-6] [com.momo.filter.JwtAuthorizationFilter] - access token: null
2025-04-09 00:10:53.984 INFO  [http-nio-11040-exec-6] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/public/login
2025-04-09 00:10:53.984 INFO  [http-nio-11040-exec-6] [com.momo.filter.JwtAuthorizationFilter] - 유효한 JWT 토큰이 없습니다
2025-04-09 00:10:53.991 DEBUG [http-nio-11040-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 2 msec}
2025-04-09 00:10:54.125 DEBUG [http-nio-11040-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. UPDATE
            tb_account
        SET last_login_dt=NOW(),
            user_st=0
        WHERE id = 'km1104rs'
 {executed in 2 msec}
2025-04-09 00:10:54.127 INFO  [http-nio-11040-exec-6] [com.momo.service.JwtService] - save refresh token: JwtVO(grantType=Bearer, username=km1104rs, accessToken=eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDEyNTA1NCwiZXhwIjoxNzQ0MTI1NjU0LCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.PqbPGvkfF80iZ23XX-UvTsME700-SQ8FBh2gARAGbFk, refreshToken=eyJhbGciOiJIUzI1NiJ9.eyJleHAiOjE3NDQxMjg2NTR9.Hu5v28fYDYskftTZCCla1rTP2SYYoiuUfGr3MjFwGxk, expireTime=3600000, revoked=false, expired=false)
2025-04-09 00:10:54.129 DEBUG [http-nio-11040-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT  *
        FROM    tb_refresh_token
        WHERE   user_id='km1104rs'
 {executed in 2 msec}
2025-04-09 00:10:54.130 DEBUG [http-nio-11040-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. UPDATE  tb_refresh_token
        SET     refresh_token='eyJhbGciOiJIUzI1NiJ9.eyJleHAiOjE3NDQxMjg2NTR9.Hu5v28fYDYskftTZCCla1rTP2SYYoiuUfGr3MjFwGxk'
        WHERE   user_id='km1104rs'
 {executed in 1 msec}
2025-04-09 00:10:54.133 DEBUG [http-nio-11040-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT curr_shop_id
        FROM tb_account
        WHERE id='km1104rs'
 {executed in 1 msec}
2025-04-09 00:10:54.150 INFO  [http-nio-11040-exec-7] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/user/info
2025-04-09 00:10:54.150 INFO  [http-nio-11040-exec-7] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDEyNTA1NCwiZXhwIjoxNzQ0MTI1NjU0LCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.PqbPGvkfF80iZ23XX-UvTsME700-SQ8FBh2gARAGbFk
2025-04-09 00:10:54.150 INFO  [http-nio-11040-exec-7] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/user/info
2025-04-09 00:10:54.152 INFO  [http-nio-11040-exec-7] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-09 00:10:54.153 DEBUG [http-nio-11040-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 1 msec}
2025-04-09 00:10:54.154 INFO  [http-nio-11040-exec-7] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-09 00:10:54.156 INFO  [http-nio-11040-exec-7] [c.momo.common.util.SecurityContextUtil] - principal: UserDetailsImpl(username=km1104rs, password=$2a$10$uXShhwl6ULOkbJe477uDWOfdiUUcu6lOSF/Dhj9xP3U1nUn/gXkc6, authorities=[ROLE_NONE])
2025-04-09 00:10:54.158 DEBUG [http-nio-11040-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT ac.id,
               ac.name,
               ac.tel,
               ac.nickname,
               ac.pfp,
               ac.curr_shop_id,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where sf.shop_id = ac.curr_shop_id and
                         sf.staff_id = ac.id
                   ) as role,
               sh.shop_nm,
               sh.shop_addr,
               sh.provider,
               (
                   IFNULL((
                       select sf2.approval_st
                       from tb_staff sf2
                       where sf2.shop_id=ac.curr_shop_id and
                           sf2.staff_id=ac.id
                       ), -1)
                ) as approval_st,
                ac.corp_nm,
                ac.br_no
        FROM tb_account ac
        LEFT OUTER JOIN tb_shop sh on sh.shop_id=ac.curr_shop_id
        WHERE id = 'km1104rs'
 {executed in 1 msec}
2025-04-09 00:10:54.159 INFO  [http-nio-11040-exec-7] [com.momo.api.UserController] - User: {role=0, approval_st=1, shop_addr=충청남도 천안시 병천면 충절로 1600 한국기술교육대학교 다산정보관 102, br_no=5218702490, provider=2, name=박희찬, nickname=대표, corp_nm=123, tel=010-4524-0636, id=km1104rs, pfp=1921fc01-e573-4243-9365-6b905389f4fc.png, curr_shop_id=2, shop_nm=한기대점 }
2025-04-09 00:10:54.235 INFO  [http-nio-11040-exec-8] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/auth/refresh
2025-04-09 00:10:54.236 INFO  [http-nio-11040-exec-8] [com.momo.filter.JwtAuthorizationFilter] - access token: null
2025-04-09 00:10:54.236 INFO  [http-nio-11040-exec-8] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/auth/refresh
2025-04-09 00:10:54.236 INFO  [http-nio-11040-exec-8] [com.momo.filter.JwtAuthorizationFilter] - 유효한 JWT 토큰이 없습니다
2025-04-09 00:10:54.238 INFO  [http-nio-11040-exec-8] [com.momo.api.AuthController] - refresh
2025-04-09 00:10:54.246 DEBUG [http-nio-11040-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT  *
        FROM    tb_refresh_token
        WHERE   refresh_token='eyJhbGciOiJIUzI1NiJ9.eyJleHAiOjE3NDQxMjg2NTR9.Hu5v28fYDYskftTZCCla1rTP2SYYoiuUfGr3MjFwGxk'
 {executed in 4 msec}
2025-04-09 00:10:54.249 DEBUG [http-nio-11040-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 1 msec}
2025-04-09 00:10:54.250 INFO  [http-nio-11040-exec-8] [com.momo.api.AuthController] - jwt: JwtVO(grantType=Bearer , username=km1104rs, accessToken=eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDEyNTA1NCwiZXhwIjoxNzQ0MTI1NjU0LCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.PqbPGvkfF80iZ23XX-UvTsME700-SQ8FBh2gARAGbFk, refreshToken=null, expireTime=null, revoked=false, expired=false)
2025-04-09 00:10:54.275 INFO  [http-nio-11040-exec-9] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/notif/all
2025-04-09 00:10:54.275 INFO  [http-nio-11040-exec-9] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDEyNTA1NCwiZXhwIjoxNzQ0MTI1NjU0LCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.PqbPGvkfF80iZ23XX-UvTsME700-SQ8FBh2gARAGbFk
2025-04-09 00:10:54.275 INFO  [http-nio-11040-exec-9] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/notif/all
2025-04-09 00:10:54.280 INFO  [http-nio-11040-exec-9] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-09 00:10:54.285 DEBUG [http-nio-11040-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 3 msec}
2025-04-09 00:10:54.286 INFO  [http-nio-11040-exec-9] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-09 00:10:54.287 INFO  [http-nio-11040-exec-9] [c.momo.common.util.SecurityContextUtil] - principal: UserDetailsImpl(username=km1104rs, password=$2a$10$uXShhwl6ULOkbJe477uDWOfdiUUcu6lOSF/Dhj9xP3U1nUn/gXkc6, authorities=[ROLE_NONE])
2025-04-09 00:10:54.289 INFO  [http-nio-11040-exec-10] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/notif/read/all
2025-04-09 00:10:54.289 INFO  [http-nio-11040-exec-10] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDEyNTA1NCwiZXhwIjoxNzQ0MTI1NjU0LCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.PqbPGvkfF80iZ23XX-UvTsME700-SQ8FBh2gARAGbFk
2025-04-09 00:10:54.289 INFO  [http-nio-11040-exec-10] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/notif/read/all
2025-04-09 00:10:54.291 INFO  [http-nio-11040-exec-10] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-09 00:10:54.293 INFO  [http-nio-11040-exec-2] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/user/info
2025-04-09 00:10:54.293 INFO  [http-nio-11040-exec-2] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDEyNTA1NCwiZXhwIjoxNzQ0MTI1NjU0LCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.PqbPGvkfF80iZ23XX-UvTsME700-SQ8FBh2gARAGbFk
2025-04-09 00:10:54.293 INFO  [http-nio-11040-exec-2] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/user/info
2025-04-09 00:10:54.295 INFO  [http-nio-11040-exec-2] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-09 00:10:54.295 INFO  [http-nio-11040-exec-1] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/notif/count/unread
2025-04-09 00:10:54.295 INFO  [http-nio-11040-exec-1] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDEyNTA1NCwiZXhwIjoxNzQ0MTI1NjU0LCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.PqbPGvkfF80iZ23XX-UvTsME700-SQ8FBh2gARAGbFk
2025-04-09 00:10:54.295 INFO  [http-nio-11040-exec-1] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/notif/count/unread
2025-04-09 00:10:54.299 DEBUG [http-nio-11040-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
2. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 4 msec}
2025-04-09 00:10:54.299 INFO  [http-nio-11040-exec-10] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-09 00:10:54.299 INFO  [http-nio-11040-exec-1] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-09 00:10:54.300 DEBUG [http-nio-11040-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT content,
               notif_id,
               read_st,
               notif_tp as type,
               IF(date(send_dt) = current_date,true,false) as today,
            (
               TIMESTAMPDIFF(MINUTE, send_dt, current_timestamp)
            ) as ago
        FROM tb_notification
        WHERE receiver_id='km1104rs'
        ORDER BY send_dt DESC
 {executed in 10 msec}
2025-04-09 00:10:54.300 DEBUG [http-nio-11040-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
3. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 3 msec}
2025-04-09 00:10:54.300 INFO  [http-nio-11040-exec-10] [c.momo.common.util.SecurityContextUtil] - principal: UserDetailsImpl(username=km1104rs, password=$2a$10$uXShhwl6ULOkbJe477uDWOfdiUUcu6lOSF/Dhj9xP3U1nUn/gXkc6, authorities=[ROLE_NONE])
2025-04-09 00:10:54.300 INFO  [http-nio-11040-exec-2] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-09 00:10:54.301 INFO  [http-nio-11040-exec-2] [c.momo.common.util.SecurityContextUtil] - principal: UserDetailsImpl(username=km1104rs, password=$2a$10$uXShhwl6ULOkbJe477uDWOfdiUUcu6lOSF/Dhj9xP3U1nUn/gXkc6, authorities=[ROLE_NONE])
2025-04-09 00:10:54.303 DEBUG [http-nio-11040-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
2. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 3 msec}
2025-04-09 00:10:54.303 DEBUG [http-nio-11040-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
3. UPDATE tb_notification
        SET read_st = TRUE
        WHERE receiver_id = 'km1104rs'
          AND read_st = FALSE
 {executed in 1 msec}
2025-04-09 00:10:54.303 INFO  [http-nio-11040-exec-1] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-09 00:10:54.303 INFO  [http-nio-11040-exec-1] [c.momo.common.util.SecurityContextUtil] - principal: UserDetailsImpl(username=km1104rs, password=$2a$10$uXShhwl6ULOkbJe477uDWOfdiUUcu6lOSF/Dhj9xP3U1nUn/gXkc6, authorities=[ROLE_NONE])
2025-04-09 00:10:54.303 DEBUG [http-nio-11040-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
4. SELECT ac.id,
               ac.name,
               ac.tel,
               ac.nickname,
               ac.pfp,
               ac.curr_shop_id,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where sf.shop_id = ac.curr_shop_id and
                         sf.staff_id = ac.id
                   ) as role,
               sh.shop_nm,
               sh.shop_addr,
               sh.provider,
               (
                   IFNULL((
                       select sf2.approval_st
                       from tb_staff sf2
                       where sf2.shop_id=ac.curr_shop_id and
                           sf2.staff_id=ac.id
                       ), -1)
                ) as approval_st,
                ac.corp_nm,
                ac.br_no
        FROM tb_account ac
        LEFT OUTER JOIN tb_shop sh on sh.shop_id=ac.curr_shop_id
        WHERE id = 'km1104rs'
 {executed in 2 msec}
2025-04-09 00:10:54.304 INFO  [http-nio-11040-exec-2] [com.momo.api.UserController] - User: {role=0, approval_st=1, shop_addr=충청남도 천안시 병천면 충절로 1600 한국기술교육대학교 다산정보관 102, br_no=5218702490, provider=2, name=박희찬, nickname=대표, corp_nm=123, tel=010-4524-0636, id=km1104rs, pfp=1921fc01-e573-4243-9365-6b905389f4fc.png, curr_shop_id=2, shop_nm=한기대점 }
2025-04-09 00:10:54.311 DEBUG [http-nio-11040-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
2. SELECT count(*)
        FROM tb_notification
        WHERE receiver_id = 'km1104rs'
          AND read_st = FALSE
 {executed in 7 msec}
2025-04-09 00:10:54.317 INFO  [http-nio-11040-exec-3] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/notif/count/unread
2025-04-09 00:10:54.317 INFO  [http-nio-11040-exec-3] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDEyNTA1NCwiZXhwIjoxNzQ0MTI1NjU0LCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.PqbPGvkfF80iZ23XX-UvTsME700-SQ8FBh2gARAGbFk
2025-04-09 00:10:54.318 INFO  [http-nio-11040-exec-3] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/notif/count/unread
2025-04-09 00:10:54.320 INFO  [http-nio-11040-exec-3] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-09 00:10:54.322 DEBUG [http-nio-11040-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 1 msec}
2025-04-09 00:10:54.322 INFO  [http-nio-11040-exec-3] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-09 00:10:54.322 INFO  [http-nio-11040-exec-3] [c.momo.common.util.SecurityContextUtil] - principal: UserDetailsImpl(username=km1104rs, password=$2a$10$uXShhwl6ULOkbJe477uDWOfdiUUcu6lOSF/Dhj9xP3U1nUn/gXkc6, authorities=[ROLE_NONE])
2025-04-09 00:10:54.324 DEBUG [http-nio-11040-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT count(*)
        FROM tb_notification
        WHERE receiver_id = 'km1104rs'
          AND read_st = FALSE
 {executed in 1 msec}
2025-04-09 00:10:54.349 INFO  [http-nio-11040-exec-4] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/notif/count/unread
2025-04-09 00:10:54.349 INFO  [http-nio-11040-exec-4] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDEyNTA1NCwiZXhwIjoxNzQ0MTI1NjU0LCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.PqbPGvkfF80iZ23XX-UvTsME700-SQ8FBh2gARAGbFk
2025-04-09 00:10:54.349 INFO  [http-nio-11040-exec-4] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/notif/count/unread
2025-04-09 00:10:54.352 INFO  [http-nio-11040-exec-5] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/sale/graph/ct/d
2025-04-09 00:10:54.352 INFO  [http-nio-11040-exec-4] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-09 00:10:54.352 INFO  [http-nio-11040-exec-5] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDEyNTA1NCwiZXhwIjoxNzQ0MTI1NjU0LCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.PqbPGvkfF80iZ23XX-UvTsME700-SQ8FBh2gARAGbFk
2025-04-09 00:10:54.352 INFO  [http-nio-11040-exec-5] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/sale/graph/ct/d
2025-04-09 00:10:54.356 INFO  [http-nio-11040-exec-5] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-09 00:10:54.356 INFO  [http-nio-11040-exec-7] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/pimg
2025-04-09 00:10:54.357 INFO  [http-nio-11040-exec-7] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDEyNTA1NCwiZXhwIjoxNzQ0MTI1NjU0LCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.PqbPGvkfF80iZ23XX-UvTsME700-SQ8FBh2gARAGbFk
2025-04-09 00:10:54.357 INFO  [http-nio-11040-exec-7] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/pimg
2025-04-09 00:10:54.357 INFO  [http-nio-11040-exec-6] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/sale/change/ct
2025-04-09 00:10:54.357 INFO  [http-nio-11040-exec-6] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDEyNTA1NCwiZXhwIjoxNzQ0MTI1NjU0LCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.PqbPGvkfF80iZ23XX-UvTsME700-SQ8FBh2gARAGbFk
2025-04-09 00:10:54.357 INFO  [http-nio-11040-exec-6] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/sale/change/ct
2025-04-09 00:10:54.358 DEBUG [http-nio-11040-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 4 msec}
2025-04-09 00:10:54.358 INFO  [http-nio-11040-exec-4] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-09 00:10:54.359 INFO  [http-nio-11040-exec-7] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-09 00:10:54.360 INFO  [http-nio-11040-exec-6] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-09 00:10:54.361 INFO  [http-nio-11040-exec-4] [c.momo.common.util.SecurityContextUtil] - principal: UserDetailsImpl(username=km1104rs, password=$2a$10$uXShhwl6ULOkbJe477uDWOfdiUUcu6lOSF/Dhj9xP3U1nUn/gXkc6, authorities=[ROLE_NONE])
2025-04-09 00:10:54.361 DEBUG [http-nio-11040-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
2. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 4 msec}
2025-04-09 00:10:54.361 INFO  [http-nio-11040-exec-5] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-09 00:10:54.362 DEBUG [http-nio-11040-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 3 msec}
2025-04-09 00:10:54.362 INFO  [http-nio-11040-exec-7] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-09 00:10:54.366 DEBUG [http-nio-11040-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
3. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 6 msec}
2025-04-09 00:10:54.367 INFO  [http-nio-11040-exec-6] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-09 00:10:54.368 DEBUG [http-nio-11040-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
4. SELECT count(*)
        FROM tb_notification
        WHERE receiver_id = 'km1104rs'
          AND read_st = FALSE
 {executed in 4 msec}
2025-04-09 00:10:54.373 DEBUG [http-nio-11040-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. select pimg_id as id,
               pimg_text as text,
               pimg_path as file
        from tb_post_img
        where shop_id=2
 {executed in 7 msec}
2025-04-09 00:10:54.389 INFO  [http-nio-11040-exec-8] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/todo
2025-04-09 00:10:54.389 INFO  [http-nio-11040-exec-8] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDEyNTA1NCwiZXhwIjoxNzQ0MTI1NjU0LCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.PqbPGvkfF80iZ23XX-UvTsME700-SQ8FBh2gARAGbFk
2025-04-09 00:10:54.389 INFO  [http-nio-11040-exec-8] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/todo
2025-04-09 00:10:54.389 INFO  [http-nio-11040-exec-2] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/todo/detail
2025-04-09 00:10:54.390 INFO  [http-nio-11040-exec-2] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDEyNTA1NCwiZXhwIjoxNzQ0MTI1NjU0LCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.PqbPGvkfF80iZ23XX-UvTsME700-SQ8FBh2gARAGbFk
2025-04-09 00:10:54.390 INFO  [http-nio-11040-exec-2] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/todo/detail
2025-04-09 00:10:54.392 INFO  [http-nio-11040-exec-8] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-09 00:10:54.392 INFO  [http-nio-11040-exec-2] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-09 00:10:54.393 INFO  [http-nio-11040-exec-9] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/shop/all
2025-04-09 00:10:54.394 INFO  [http-nio-11040-exec-9] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDEyNTA1NCwiZXhwIjoxNzQ0MTI1NjU0LCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.PqbPGvkfF80iZ23XX-UvTsME700-SQ8FBh2gARAGbFk
2025-04-09 00:10:54.394 INFO  [http-nio-11040-exec-9] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/shop/all
2025-04-09 00:10:54.394 INFO  [http-nio-11040-exec-10] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/img/download/pfp
2025-04-09 00:10:54.394 INFO  [http-nio-11040-exec-10] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDEyNTA1NCwiZXhwIjoxNzQ0MTI1NjU0LCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.PqbPGvkfF80iZ23XX-UvTsME700-SQ8FBh2gARAGbFk
2025-04-09 00:10:54.394 INFO  [http-nio-11040-exec-10] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/img/download/pfp
2025-04-09 00:10:54.395 DEBUG [http-nio-11040-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 3 msec}
2025-04-09 00:10:54.396 INFO  [http-nio-11040-exec-8] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-09 00:10:54.397 INFO  [http-nio-11040-exec-10] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-09 00:10:54.397 INFO  [http-nio-11040-exec-9] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-09 00:10:54.398 DEBUG [http-nio-11040-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
4. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 5 msec}
2025-04-09 00:10:54.399 INFO  [http-nio-11040-exec-2] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-09 00:10:54.404 DEBUG [http-nio-11040-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
2. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 7 msec}
2025-04-09 00:10:54.404 DEBUG [http-nio-11040-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 7 msec}
2025-04-09 00:10:54.405 INFO  [http-nio-11040-exec-9] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-09 00:10:54.405 INFO  [http-nio-11040-exec-10] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-09 00:10:54.410 INFO  [http-nio-11040-exec-9] [c.momo.common.util.SecurityContextUtil] - principal: UserDetailsImpl(username=km1104rs, password=$2a$10$uXShhwl6ULOkbJe477uDWOfdiUUcu6lOSF/Dhj9xP3U1nUn/gXkc6, authorities=[ROLE_NONE])
2025-04-09 00:10:54.425 INFO  [http-nio-11040-exec-1] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/sale/summary
2025-04-09 00:10:54.426 INFO  [http-nio-11040-exec-1] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDEyNTA1NCwiZXhwIjoxNzQ0MTI1NjU0LCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.PqbPGvkfF80iZ23XX-UvTsME700-SQ8FBh2gARAGbFk
2025-04-09 00:10:54.426 INFO  [http-nio-11040-exec-1] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/sale/summary
2025-04-09 00:10:54.429 INFO  [http-nio-11040-exec-1] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-09 00:10:54.432 DEBUG [http-nio-11040-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
3. with tb as (
            SELECT
                (
                    SELECT count(*)
                    FROM tb_sale
                    WHERE shop_id=2 and
                          device_id != 0 and
                          actv_dt BETWEEN '2025-03-01' AND '2025-03-09'
                    ) as prev,
                (
                    SELECT count(*)
                    FROM tb_sale
                    WHERE shop_id=2 and
                        device_id != 0 and
                        actv_dt BETWEEN '2025-04-01' AND '2025-04-09'
                ) as curr
            FROM DUAL
        )

        SELECT tb.curr - tb.prev
        FROM tb
 {executed in 41 msec}
2025-04-09 00:10:54.432 DEBUG [http-nio-11040-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
4. SELECT /* TodoMapper.xml : getTodoDetail */
                todo_id,
                color,
                checked,
               content
        FROM tb_todo td
        WHERE td.shop_id=2 and
            todo_dt='2025-04-09'
 {executed in 31 msec}
2025-04-09 00:10:54.441 DEBUG [http-nio-11040-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
6. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 9 msec}
2025-04-09 00:10:54.443 INFO  [http-nio-11040-exec-1] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-09 00:10:54.447 INFO  [http-nio-11040-exec-4] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/sale/wip
2025-04-09 00:10:54.447 INFO  [http-nio-11040-exec-4] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDEyNTA1NCwiZXhwIjoxNzQ0MTI1NjU0LCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.PqbPGvkfF80iZ23XX-UvTsME700-SQ8FBh2gARAGbFk
2025-04-09 00:10:54.447 INFO  [http-nio-11040-exec-4] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/sale/wip
2025-04-09 00:10:54.447 INFO  [http-nio-11040-exec-3] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/sale/ratio
2025-04-09 00:10:54.448 INFO  [http-nio-11040-exec-3] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDEyNTA1NCwiZXhwIjoxNzQ0MTI1NjU0LCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.PqbPGvkfF80iZ23XX-UvTsME700-SQ8FBh2gARAGbFk
2025-04-09 00:10:54.448 INFO  [http-nio-11040-exec-3] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/sale/ratio
2025-04-09 00:10:54.449 INFO  [http-nio-11040-exec-4] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-09 00:10:54.451 INFO  [http-nio-11040-exec-3] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-09 00:10:54.458 DEBUG [http-nio-11040-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
2. select sh.shop_id,
               sh.shop_nm
        from tb_staff sf
        left outer join tb_shop sh on sh.shop_id=sf.shop_id
        where staff_id='km1104rs'
 {executed in 47 msec}
2025-04-09 00:10:54.476 INFO  [http-nio-11040-exec-7] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/img/download/pimg
2025-04-09 00:10:54.477 INFO  [http-nio-11040-exec-7] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDEyNTA1NCwiZXhwIjoxNzQ0MTI1NjU0LCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.PqbPGvkfF80iZ23XX-UvTsME700-SQ8FBh2gARAGbFk
2025-04-09 00:10:54.477 INFO  [http-nio-11040-exec-7] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/img/download/pimg
2025-04-09 00:10:54.488 INFO  [http-nio-11040-exec-7] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-09 00:10:54.509 DEBUG [http-nio-11040-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT SUBSTR(todo_dt, 9, 2)
        FROM tb_todo
        WHERE shop_id= 2  and
            todo_dt like '%2025-04%'
 {executed in 94 msec}
2025-04-09 00:10:54.527 INFO  [http-nio-11040-exec-10] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/todo/detail
2025-04-09 00:10:54.527 INFO  [http-nio-11040-exec-10] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDEyNTA1NCwiZXhwIjoxNzQ0MTI1NjU0LCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.PqbPGvkfF80iZ23XX-UvTsME700-SQ8FBh2gARAGbFk
2025-04-09 00:10:54.527 INFO  [http-nio-11040-exec-10] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/todo/detail
2025-04-09 00:10:54.528 DEBUG [http-nio-11040-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
2. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 38 msec}
2025-04-09 00:10:54.528 INFO  [http-nio-11040-exec-7] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-09 00:10:54.529 DEBUG [http-nio-11040-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
4. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 74 msec}
2025-04-09 00:10:54.530 INFO  [http-nio-11040-exec-4] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-09 00:10:54.530 DEBUG [http-nio-11040-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
3. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 75 msec}
2025-04-09 00:10:54.530 INFO  [http-nio-11040-exec-3] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-09 00:10:54.532 INFO  [http-nio-11040-exec-10] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-09 00:10:54.534 DEBUG [http-nio-11040-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
6. with prevMonth as (
            SELECT *
            FROM tb_sale
            WHERE shop_id=2 and
                actv_dt like '2025-03%'
        ), currMonth as (
            SELECT *
            FROM tb_sale
            WHERE shop_id=2 and
                actv_dt like '2025-04%'
        ) , tb as (
            SELECT
                (
                    SELECT IFNULL(count(*), 0)
                    FROM prevMonth
                    WHERE device_id is not null
                    ) as prev,
                (
                    SELECT IFNULL(count(*), 0)
                    FROM currMonth
                    WHERE device_id is not null
                ) as curr
            from dual
            UNION ALL
            SELECT
                (
                    SELECT IFNULL(count(*), 0)
                    FROM prevMonth
                    WHERE internet_plan is not null
                ) as prev,
                (
                    SELECT IFNULL(count(*), 0)
                    FROM currMonth
                    WHERE internet_plan is not null
                ) as curr
            from dual
            UNION ALL
            SELECT
                (
                    SELECT IFNULL(count(*), 0)
                    FROM prevMonth
                    WHERE tv_plan is not null
                ) as prev,
                (
                    SELECT IFNULL(count(*), 0)
                    FROM currMonth
                    WHERE tv_plan is not null
                ) as curr
            from dual
            UNION ALL
            SELECT
                (
                    SELECT IFNULL(SUM(total_cms),0)
                    FROM prevMonth
                    where device_id is not null
                ) as prev,
                (
                    SELECT IFNULL(SUM(total_cms),0)
                    FROM currMonth
                    where device_id is not null
                ) as curr
            from dual
            UNION ALL
            SELECT
                (
                    SELECT IFNULL(AVG(total_cms),0)
                    FROM prevMonth
                    where device_id is not null
                ) as prev,
                (
                    SELECT IFNULL(AVG(total_cms),0)
                    FROM currMonth
                    where device_id is not null
                ) as curr
            from dual
        )

        SELECT FLOOR(curr) as value,
               (
                   CASE
                       WHEN curr = 0 THEN 0
                       WHEN prev = 0 THEN 100
                       WHEN prev != 0 THEN TRUNCATE(((curr/prev)-1)*100, 1)
                   END
                   ) as per
        FROM tb
 {executed in 85 msec}
2025-04-09 00:10:54.541 DEBUG [http-nio-11040-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
3. SET @total_sale_count := (
            SELECT count(*)
            FROM tb_sale
            WHERE shop_id=2 and
                device_id is not null and
                actv_dt like '2025-04%'
        );

        with tb as (
            SELECT count(*) as curr
            FROM tb_sale_card sc
                     LEFT OUTER JOIN tb_sale sl on sl.sale_id=sc.sale_id
            WHERE sc.shop_id=2 and
                actv_dt like '2025-04%'
            UNION ALL
            SELECT count(*) as curr
            FROM tb_sale
            WHERE shop_id= 2 and
                actv_dt like '2025-04%' and
                sd_id is not null
            UNION ALL
            SELECT count(*) as curr
            FROM tb_sale
            WHERE shop_id= 2 and
                actv_dt like '2025-04%' and
                exsvc_id is not null
        )

        SELECT
            curr as value,
            @total_sale_count as total,
            (
                CASE
                    WHEN @total_sale_count = 0 THEN 0
                    WHEN @total_sale_count != 0 THEN TRUNCATE(((curr/@total_sale_count))*100, 1)
                    END
                ) as per
        FROM tb
 {executed in 8 msec}
2025-04-09 00:10:54.542 INFO  [http-nio-11040-exec-6] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/todo
2025-04-09 00:10:54.543 INFO  [http-nio-11040-exec-6] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDEyNTA1NCwiZXhwIjoxNzQ0MTI1NjU0LCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.PqbPGvkfF80iZ23XX-UvTsME700-SQ8FBh2gARAGbFk
2025-04-09 00:10:54.543 INFO  [http-nio-11040-exec-6] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/todo
2025-04-09 00:10:54.547 INFO  [http-nio-11040-exec-6] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-09 00:10:54.548 DEBUG [http-nio-11040-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
5. set @limit_cond := (
               case 'd'
                   when 'h' then '2000-01-24'
                   when 'd' then '2025-04-09'
                   when 'w' then '2025-04-09'
                   when 'm' then date_sub('2025-04-09', interval 1 month)
               end
        );

        with recursive org_date_table as (
            select (
                       case
                           when 'd' = 'h' then '2000-01-01'
                           when 'd' != 'h' then '2025-01-09'
                           end
                       ) as it
            union all
            select (
                       case 'd'
                           when 'h' then date_add(it, interval 1 day)
                           when 'd' then date_add(it, interval 1 day)
                           when 'w' then date_add(it, interval 1 week)
                           when 'm' then date_add(it, interval 1 month)
                           end
                       ) as it
            from org_date_table
            where it < @limit_cond
        ), date_table as (
            select
                year(it) as _year,
                (
                    case 'd'
                        when 'h' then day(it)
                        when 'd' then it
                        when 'w' then week(it)
                        when 'm' then month(it)
                        end
                    ) as dt
            from org_date_table
        ),  date_sale as (
            select year(actv_dt) _year,
                   month(actv_dt) as m,
                   week(actv_dt) as w,
                   actv_dt as d,
                   hour(regi_dt) as h,
                   tb_sale.*
            from tb_sale
            where shop_id=2 and

                actv_dt between '2025-01-09' and (
                    case
                        when 'd' = 'h' then '2025-01-09'
                        when 'd' != 'h' then '2025-04-09'
                        end
                    )
        ), final as (
            select count(device_id) as cnt
            from date_table dd
                     left outer join date_sale ds on dd._year=ds._year and
                                                     d = dt
            group by dd._year, dd.dt
        )

        select
            (
                select json_arrayagg(cnt)
                from final
            ) as value,
            (
                select json_arrayagg(date_format(it, '%Y-%m-%d'))
                from org_date_table
            ) as date
 {executed in 118 msec}
2025-04-09 00:10:54.548 DEBUG [http-nio-11040-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 15 msec}
2025-04-09 00:10:54.549 INFO  [http-nio-11040-exec-10] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-09 00:10:54.564 DEBUG [http-nio-11040-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
3. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 14 msec}
2025-04-09 00:10:54.567 INFO  [http-nio-11040-exec-2] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/img/download/pimg
2025-04-09 00:10:54.568 INFO  [http-nio-11040-exec-2] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDEyNTA1NCwiZXhwIjoxNzQ0MTI1NjU0LCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.PqbPGvkfF80iZ23XX-UvTsME700-SQ8FBh2gARAGbFk
2025-04-09 00:10:54.568 INFO  [http-nio-11040-exec-6] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-09 00:10:54.568 INFO  [http-nio-11040-exec-2] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/img/download/pimg
2025-04-09 00:10:54.574 INFO  [http-nio-11040-exec-2] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-09 00:10:54.575 DEBUG [http-nio-11040-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT /* TodoMapper.xml : getTodoDetail */
                todo_id,
                color,
                checked,
               content
        FROM tb_todo td
        WHERE td.shop_id=2 and
            todo_dt='2025-04-09'
 {executed in 18 msec}
2025-04-09 00:10:54.575 DEBUG [http-nio-11040-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
4. with table_ud as (
            SELECT ud_st
            FROM tb_sale_used_device sud
            LEFT OUTER JOIN tb_sale sl on sl.sale_id=sud.sale_id
            WHERE sud.shop_id=2
--               and
--                 actv_dt like '%'
        ), table_card as (
            SELECT card_st
            FROM tb_sale_card sc
            LEFT OUTER JOIN tb_sale sl on sl.sale_id=sc.sale_id
            WHERE sc.shop_id=2
--               and
--                 actv_dt like '%'
        ), table_comb as (
            SELECT comb_st
            FROM tb_sale
            WHERE shop_id=2
--               and
--                 actv_dt like '%%'
        ), table_sup as (
            SELECT sup_st
            FROM tb_sale_support sc LEFT OUTER JOIN tb_sale sl on sl.sale_id=sc.sale_id
            WHERE sc.shop_id=2
--               and
--                 actv_dt like '%%'
        ), table_pm as (
            SELECT checked
            FROM tb_promise sc
                LEFT OUTER JOIN tb_sale sl on sl.sale_id=sc.sale_id
            WHERE sc.shop_id=2
--               and
--                 actv_dt like '%%'
        ), rst as (
            SELECT
                (
                    SELECT count(*)
                    FROM table_ud
                    WHERE ud_st!=2
                )
            UNION ALL
            SELECT
                (
                    SELECT count(*)
                    FROM table_card
                    WHERE card_st!=2
                )
            UNION ALL
            SELECT
                (
                    SELECT count(*)
                    FROM table_comb
                    WHERE comb_st!=1
                )
            UNION ALL
            SELECT
                (
                    SELECT count(*)
                    FROM table_sup
                    WHERE sup_st!=1
                )
            UNION ALL
            SELECT
                (
                    SELECT count(*)
                    FROM table_pm
                    WHERE checked!=1
                )
        )

        SELECT *
        FROM rst
 {executed in 41 msec}
2025-04-09 00:10:54.578 DEBUG [http-nio-11040-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
3. SELECT SUBSTR(todo_dt, 9, 2)
        FROM tb_todo
        WHERE shop_id= 2  and
            todo_dt like '%2025-04%'
 {executed in 5 msec}
2025-04-09 00:10:54.579 DEBUG [http-nio-11040-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
2. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 4 msec}
2025-04-09 00:10:54.580 INFO  [http-nio-11040-exec-2] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-09 00:10:54.587 INFO  [http-nio-11040-exec-9] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/todo/detail
2025-04-09 00:10:54.587 INFO  [http-nio-11040-exec-9] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDEyNTA1NCwiZXhwIjoxNzQ0MTI1NjU0LCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.PqbPGvkfF80iZ23XX-UvTsME700-SQ8FBh2gARAGbFk
2025-04-09 00:10:54.587 INFO  [http-nio-11040-exec-9] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/todo/detail
2025-04-09 00:10:54.588 INFO  [http-nio-11040-exec-8] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/todo
2025-04-09 00:10:54.589 INFO  [http-nio-11040-exec-8] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDEyNTA1NCwiZXhwIjoxNzQ0MTI1NjU0LCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.PqbPGvkfF80iZ23XX-UvTsME700-SQ8FBh2gARAGbFk
2025-04-09 00:10:54.589 INFO  [http-nio-11040-exec-8] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/todo
2025-04-09 00:10:54.590 INFO  [http-nio-11040-exec-9] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-09 00:10:54.591 INFO  [http-nio-11040-exec-8] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-09 00:10:54.593 DEBUG [http-nio-11040-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
2. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 2 msec}
2025-04-09 00:10:54.593 DEBUG [http-nio-11040-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 2 msec}
2025-04-09 00:10:54.594 INFO  [http-nio-11040-exec-9] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-09 00:10:54.594 INFO  [http-nio-11040-exec-8] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-09 00:10:54.596 DEBUG [http-nio-11040-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
2. SELECT /* TodoMapper.xml : getTodoDetail */
                todo_id,
                color,
                checked,
               content
        FROM tb_todo td
        WHERE td.shop_id=2 and
            todo_dt='2025-04-09'
 {executed in 1 msec}
2025-04-09 00:10:54.597 DEBUG [http-nio-11040-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT SUBSTR(todo_dt, 9, 2)
        FROM tb_todo
        WHERE shop_id= 2  and
            todo_dt like '%2025-04%'
 {executed in 1 msec}
2025-04-09 00:10:54.606 INFO  [http-nio-11040-exec-7] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/todo/detail
2025-04-09 00:10:54.606 INFO  [http-nio-11040-exec-1] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/todo
2025-04-09 00:10:54.607 INFO  [http-nio-11040-exec-1] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDEyNTA1NCwiZXhwIjoxNzQ0MTI1NjU0LCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.PqbPGvkfF80iZ23XX-UvTsME700-SQ8FBh2gARAGbFk
2025-04-09 00:10:54.607 INFO  [http-nio-11040-exec-7] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDEyNTA1NCwiZXhwIjoxNzQ0MTI1NjU0LCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.PqbPGvkfF80iZ23XX-UvTsME700-SQ8FBh2gARAGbFk
2025-04-09 00:10:54.607 INFO  [http-nio-11040-exec-1] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/todo
2025-04-09 00:10:54.607 INFO  [http-nio-11040-exec-7] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/todo/detail
2025-04-09 00:10:54.611 INFO  [http-nio-11040-exec-7] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-09 00:10:54.611 INFO  [http-nio-11040-exec-1] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-09 00:10:54.614 DEBUG [http-nio-11040-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
6. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 2 msec}
2025-04-09 00:10:54.614 DEBUG [http-nio-11040-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
2. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 2 msec}
2025-04-09 00:10:54.614 INFO  [http-nio-11040-exec-7] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-09 00:10:54.614 INFO  [http-nio-11040-exec-1] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-09 00:10:54.617 DEBUG [http-nio-11040-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
2. SELECT /* TodoMapper.xml : getTodoDetail */
                todo_id,
                color,
                checked,
               content
        FROM tb_todo td
        WHERE td.shop_id=2 and
            todo_dt='2025-04-09'
 {executed in 1 msec}
2025-04-09 00:10:54.617 DEBUG [http-nio-11040-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
6. SELECT SUBSTR(todo_dt, 9, 2)
        FROM tb_todo
        WHERE shop_id= 2  and
            todo_dt like '%2025-04%'
 {executed in 1 msec}
2025-04-09 00:10:54.631 INFO  [http-nio-11040-exec-5] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/todo/detail
2025-04-09 00:10:54.631 INFO  [http-nio-11040-exec-5] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDEyNTA1NCwiZXhwIjoxNzQ0MTI1NjU0LCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.PqbPGvkfF80iZ23XX-UvTsME700-SQ8FBh2gARAGbFk
2025-04-09 00:10:54.631 INFO  [http-nio-11040-exec-3] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/todo
2025-04-09 00:10:54.631 INFO  [http-nio-11040-exec-5] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/todo/detail
2025-04-09 00:10:54.631 INFO  [http-nio-11040-exec-3] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDEyNTA1NCwiZXhwIjoxNzQ0MTI1NjU0LCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.PqbPGvkfF80iZ23XX-UvTsME700-SQ8FBh2gARAGbFk
2025-04-09 00:10:54.631 INFO  [http-nio-11040-exec-3] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/todo
2025-04-09 00:10:54.634 INFO  [http-nio-11040-exec-5] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-09 00:10:54.634 INFO  [http-nio-11040-exec-3] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-09 00:10:54.636 DEBUG [http-nio-11040-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
3. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 2 msec}
2025-04-09 00:10:54.636 DEBUG [http-nio-11040-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
5. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 2 msec}
2025-04-09 00:10:54.637 INFO  [http-nio-11040-exec-3] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-09 00:10:54.637 INFO  [http-nio-11040-exec-5] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-09 00:10:54.642 DEBUG [http-nio-11040-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
3. SELECT SUBSTR(todo_dt, 9, 2)
        FROM tb_todo
        WHERE shop_id= 2  and
            todo_dt like '%2025-04%'
 {executed in 1 msec}
2025-04-09 00:10:54.642 DEBUG [http-nio-11040-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
5. SELECT /* TodoMapper.xml : getTodoDetail */
                todo_id,
                color,
                checked,
               content
        FROM tb_todo td
        WHERE td.shop_id=2 and
            todo_dt='2025-04-09'
 {executed in 2 msec}
2025-04-09 00:10:54.646 INFO  [http-nio-11040-exec-5] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/img/download/pimg
2025-04-09 00:10:54.646 INFO  [http-nio-11040-exec-5] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDEyNTA1NCwiZXhwIjoxNzQ0MTI1NjU0LCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.PqbPGvkfF80iZ23XX-UvTsME700-SQ8FBh2gARAGbFk
2025-04-09 00:10:54.646 INFO  [http-nio-11040-exec-5] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/img/download/pimg
2025-04-09 00:10:54.650 INFO  [http-nio-11040-exec-5] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-09 00:10:54.650 INFO  [http-nio-11040-exec-6] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/todo
2025-04-09 00:10:54.650 INFO  [http-nio-11040-exec-10] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/todo/detail
2025-04-09 00:10:54.650 INFO  [http-nio-11040-exec-6] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDEyNTA1NCwiZXhwIjoxNzQ0MTI1NjU0LCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.PqbPGvkfF80iZ23XX-UvTsME700-SQ8FBh2gARAGbFk
2025-04-09 00:10:54.650 INFO  [http-nio-11040-exec-10] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDEyNTA1NCwiZXhwIjoxNzQ0MTI1NjU0LCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.PqbPGvkfF80iZ23XX-UvTsME700-SQ8FBh2gARAGbFk
2025-04-09 00:10:54.650 INFO  [http-nio-11040-exec-6] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/todo
2025-04-09 00:10:54.650 INFO  [http-nio-11040-exec-10] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/todo/detail
2025-04-09 00:10:54.652 INFO  [http-nio-11040-exec-6] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-09 00:10:54.652 INFO  [http-nio-11040-exec-10] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-09 00:10:54.653 DEBUG [http-nio-11040-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
5. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 3 msec}
2025-04-09 00:10:54.653 INFO  [http-nio-11040-exec-5] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-09 00:10:54.654 DEBUG [http-nio-11040-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 1 msec}
2025-04-09 00:10:54.654 INFO  [http-nio-11040-exec-10] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-09 00:10:54.654 DEBUG [http-nio-11040-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
3. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 1 msec}
2025-04-09 00:10:54.654 INFO  [http-nio-11040-exec-6] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-09 00:10:54.668 DEBUG [http-nio-11040-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT /* TodoMapper.xml : getTodoDetail */
                todo_id,
                color,
                checked,
               content
        FROM tb_todo td
        WHERE td.shop_id=2 and
            todo_dt='2025-04-09'
 {executed in 12 msec}
2025-04-09 00:10:54.674 DEBUG [http-nio-11040-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
3. SELECT SUBSTR(todo_dt, 9, 2)
        FROM tb_todo
        WHERE shop_id= 2  and
            todo_dt like '%2025-04%'
 {executed in 18 msec}
2025-04-09 00:10:54.683 INFO  [http-nio-11040-exec-2] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/todo/detail
2025-04-09 00:10:54.683 INFO  [http-nio-11040-exec-2] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDEyNTA1NCwiZXhwIjoxNzQ0MTI1NjU0LCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.PqbPGvkfF80iZ23XX-UvTsME700-SQ8FBh2gARAGbFk
2025-04-09 00:10:54.683 INFO  [http-nio-11040-exec-2] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/todo/detail
2025-04-09 00:10:54.687 INFO  [http-nio-11040-exec-2] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-09 00:10:54.690 DEBUG [http-nio-11040-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
2. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 2 msec}
2025-04-09 00:10:54.691 INFO  [http-nio-11040-exec-2] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-09 00:10:54.695 DEBUG [http-nio-11040-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
2. SELECT /* TodoMapper.xml : getTodoDetail */
                todo_id,
                color,
                checked,
               content
        FROM tb_todo td
        WHERE td.shop_id=2 and
            todo_dt='2025-04-09'
 {executed in 3 msec}
2025-04-09 00:10:54.703 INFO  [http-nio-11040-exec-9] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/todo/detail
2025-04-09 00:10:54.703 INFO  [http-nio-11040-exec-9] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDEyNTA1NCwiZXhwIjoxNzQ0MTI1NjU0LCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.PqbPGvkfF80iZ23XX-UvTsME700-SQ8FBh2gARAGbFk
2025-04-09 00:10:54.703 INFO  [http-nio-11040-exec-9] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/todo/detail
2025-04-09 00:10:54.705 INFO  [http-nio-11040-exec-9] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-09 00:10:54.707 DEBUG [http-nio-11040-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
2. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 2 msec}
2025-04-09 00:10:54.707 INFO  [http-nio-11040-exec-9] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-09 00:10:54.709 DEBUG [http-nio-11040-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
2. SELECT /* TodoMapper.xml : getTodoDetail */
                todo_id,
                color,
                checked,
               content
        FROM tb_todo td
        WHERE td.shop_id=2 and
            todo_dt='2025-04-09'
 {executed in 1 msec}
2025-04-09 00:10:54.715 INFO  [http-nio-11040-exec-8] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/todo/detail
2025-04-09 00:10:54.715 INFO  [http-nio-11040-exec-8] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDEyNTA1NCwiZXhwIjoxNzQ0MTI1NjU0LCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.PqbPGvkfF80iZ23XX-UvTsME700-SQ8FBh2gARAGbFk
2025-04-09 00:10:54.715 INFO  [http-nio-11040-exec-8] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/todo/detail
2025-04-09 00:10:54.717 INFO  [http-nio-11040-exec-8] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-09 00:10:54.719 DEBUG [http-nio-11040-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 1 msec}
2025-04-09 00:10:54.720 INFO  [http-nio-11040-exec-8] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-09 00:10:54.722 DEBUG [http-nio-11040-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT /* TodoMapper.xml : getTodoDetail */
                todo_id,
                color,
                checked,
               content
        FROM tb_todo td
        WHERE td.shop_id=2 and
            todo_dt='2025-04-09'
 {executed in 0 msec}
2025-04-09 00:10:54.727 INFO  [http-nio-11040-exec-7] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/todo/detail
2025-04-09 00:10:54.727 INFO  [http-nio-11040-exec-7] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDEyNTA1NCwiZXhwIjoxNzQ0MTI1NjU0LCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.PqbPGvkfF80iZ23XX-UvTsME700-SQ8FBh2gARAGbFk
2025-04-09 00:10:54.727 INFO  [http-nio-11040-exec-7] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/todo/detail
2025-04-09 00:10:54.729 INFO  [http-nio-11040-exec-7] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-09 00:10:54.730 DEBUG [http-nio-11040-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
2. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 1 msec}
2025-04-09 00:10:54.730 INFO  [http-nio-11040-exec-7] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-09 00:10:54.732 DEBUG [http-nio-11040-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
2. SELECT /* TodoMapper.xml : getTodoDetail */
                todo_id,
                color,
                checked,
               content
        FROM tb_todo td
        WHERE td.shop_id=2 and
            todo_dt='2025-04-09'
 {executed in 1 msec}
2025-04-09 00:10:54.737 INFO  [http-nio-11040-exec-1] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/todo/detail
2025-04-09 00:10:54.737 INFO  [http-nio-11040-exec-1] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDEyNTA1NCwiZXhwIjoxNzQ0MTI1NjU0LCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.PqbPGvkfF80iZ23XX-UvTsME700-SQ8FBh2gARAGbFk
2025-04-09 00:10:54.737 INFO  [http-nio-11040-exec-1] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/todo/detail
2025-04-09 00:10:54.738 INFO  [http-nio-11040-exec-1] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-09 00:10:54.740 DEBUG [http-nio-11040-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
6. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 1 msec}
2025-04-09 00:10:54.740 INFO  [http-nio-11040-exec-1] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-09 00:10:54.742 DEBUG [http-nio-11040-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
6. SELECT /* TodoMapper.xml : getTodoDetail */
                todo_id,
                color,
                checked,
               content
        FROM tb_todo td
        WHERE td.shop_id=2 and
            todo_dt='2025-04-09'
 {executed in 1 msec}
2025-04-09 00:10:54.747 INFO  [http-nio-11040-exec-3] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/todo/detail
2025-04-09 00:10:54.747 INFO  [http-nio-11040-exec-3] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDEyNTA1NCwiZXhwIjoxNzQ0MTI1NjU0LCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.PqbPGvkfF80iZ23XX-UvTsME700-SQ8FBh2gARAGbFk
2025-04-09 00:10:54.747 INFO  [http-nio-11040-exec-3] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/todo/detail
2025-04-09 00:10:54.749 INFO  [http-nio-11040-exec-3] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-09 00:10:54.751 DEBUG [http-nio-11040-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
3. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 1 msec}
2025-04-09 00:10:54.751 INFO  [http-nio-11040-exec-3] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-09 00:10:54.754 DEBUG [http-nio-11040-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
3. SELECT /* TodoMapper.xml : getTodoDetail */
                todo_id,
                color,
                checked,
               content
        FROM tb_todo td
        WHERE td.shop_id=2 and
            todo_dt='2025-04-09'
 {executed in 1 msec}
2025-04-09 00:10:55.583 INFO  [http-nio-11040-exec-4] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/sale/graph/ct/d
2025-04-09 00:10:55.583 INFO  [http-nio-11040-exec-4] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDEyNTA1NCwiZXhwIjoxNzQ0MTI1NjU0LCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.PqbPGvkfF80iZ23XX-UvTsME700-SQ8FBh2gARAGbFk
2025-04-09 00:10:55.583 INFO  [http-nio-11040-exec-4] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/sale/graph/ct/d
2025-04-09 00:10:55.584 INFO  [http-nio-11040-exec-10] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/notif/count/unread
2025-04-09 00:10:55.584 INFO  [http-nio-11040-exec-10] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDEyNTA1NCwiZXhwIjoxNzQ0MTI1NjU0LCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.PqbPGvkfF80iZ23XX-UvTsME700-SQ8FBh2gARAGbFk
2025-04-09 00:10:55.584 INFO  [http-nio-11040-exec-10] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/notif/count/unread
2025-04-09 00:10:55.586 INFO  [http-nio-11040-exec-5] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/sale/graph/ct/d
2025-04-09 00:10:55.586 INFO  [http-nio-11040-exec-5] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDEyNTA1NCwiZXhwIjoxNzQ0MTI1NjU0LCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.PqbPGvkfF80iZ23XX-UvTsME700-SQ8FBh2gARAGbFk
2025-04-09 00:10:55.586 INFO  [http-nio-11040-exec-5] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/sale/graph/ct/d
2025-04-09 00:10:55.586 INFO  [http-nio-11040-exec-10] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-09 00:10:55.587 INFO  [http-nio-11040-exec-4] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-09 00:10:55.588 INFO  [http-nio-11040-exec-6] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/sale/graph/ct/select/0
2025-04-09 00:10:55.588 INFO  [http-nio-11040-exec-6] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDEyNTA1NCwiZXhwIjoxNzQ0MTI1NjU0LCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.PqbPGvkfF80iZ23XX-UvTsME700-SQ8FBh2gARAGbFk
2025-04-09 00:10:55.588 INFO  [http-nio-11040-exec-6] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/sale/graph/ct/select/0
2025-04-09 00:10:55.588 INFO  [http-nio-11040-exec-5] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-09 00:10:55.588 INFO  [http-nio-11040-exec-9] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/sale/graph/ratio/select/0
2025-04-09 00:10:55.588 INFO  [http-nio-11040-exec-9] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDEyNTA1NCwiZXhwIjoxNzQ0MTI1NjU0LCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.PqbPGvkfF80iZ23XX-UvTsME700-SQ8FBh2gARAGbFk
2025-04-09 00:10:55.588 INFO  [http-nio-11040-exec-9] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/sale/graph/ratio/select/0
2025-04-09 00:10:55.588 INFO  [http-nio-11040-exec-2] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/sale/graph/stat/select/0
2025-04-09 00:10:55.588 INFO  [http-nio-11040-exec-2] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDEyNTA1NCwiZXhwIjoxNzQ0MTI1NjU0LCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.PqbPGvkfF80iZ23XX-UvTsME700-SQ8FBh2gARAGbFk
2025-04-09 00:10:55.588 INFO  [http-nio-11040-exec-2] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/sale/graph/stat/select/0
2025-04-09 00:10:55.589 DEBUG [http-nio-11040-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 2 msec}
2025-04-09 00:10:55.589 INFO  [http-nio-11040-exec-10] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-09 00:10:55.589 DEBUG [http-nio-11040-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
4. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 1 msec}
2025-04-09 00:10:55.589 DEBUG [http-nio-11040-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
5. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 1 msec}
2025-04-09 00:10:55.589 INFO  [http-nio-11040-exec-6] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-09 00:10:55.589 INFO  [http-nio-11040-exec-5] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-09 00:10:55.589 INFO  [http-nio-11040-exec-4] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-09 00:10:55.590 INFO  [http-nio-11040-exec-10] [c.momo.common.util.SecurityContextUtil] - principal: UserDetailsImpl(username=km1104rs, password=$2a$10$uXShhwl6ULOkbJe477uDWOfdiUUcu6lOSF/Dhj9xP3U1nUn/gXkc6, authorities=[ROLE_NONE])
2025-04-09 00:10:55.590 INFO  [http-nio-11040-exec-9] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-09 00:10:55.590 INFO  [http-nio-11040-exec-2] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-09 00:10:55.591 DEBUG [http-nio-11040-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
4. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 1 msec}
2025-04-09 00:10:55.591 DEBUG [http-nio-11040-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
2. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 1 msec}
2025-04-09 00:10:55.591 DEBUG [http-nio-11040-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
3. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 1 msec}
2025-04-09 00:10:55.591 INFO  [http-nio-11040-exec-2] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-09 00:10:55.591 INFO  [http-nio-11040-exec-9] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-09 00:10:55.592 INFO  [http-nio-11040-exec-6] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-09 00:10:55.594 DEBUG [http-nio-11040-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT count(*)
        FROM tb_notification
        WHERE receiver_id = 'km1104rs'
          AND read_st = FALSE
 {executed in 2 msec}
2025-04-09 00:10:55.598 DEBUG [http-nio-11040-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
2. with recursive istm_range as (
            select 0 as i
            union all
            select i+1
            from istm_range
            where i<5
        ), base as (
            select ct_istm
            from tb_sale
            where shop_id=2 and

                actv_dt between '2025-04-01' and '2025-04-30'
        ), final as (
            select i as istm,
                   IFNULL(count(base.ct_istm),0) as cnt
            from istm_range
                     left outer join base on base.ct_istm=istm_range.i
            group by i
            order by istm desc
        )

        select json_arrayagg(istm) as type,
               json_arrayagg(cnt) as cnt,
               json_arrayagg(IF((
                      select IFNULL(count(ct_istm), 0)
                      from base
                  ) = 0 or cnt = 0, 0, TRUNCATE((cnt/(
                   select IFNULL(count(ct_istm), 0)
                   from base
               )) * 100, 1))) as per
        from final
 {executed in 2 msec}
2025-04-09 00:10:55.598 DEBUG [http-nio-11040-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
5. set @limit_cond := (
               case 'd'
                   when 'h' then '2000-01-24'
                   when 'd' then '2025-04-08'
                   when 'w' then '2025-04-08'
                   when 'm' then date_sub('2025-04-08', interval 1 month)
               end
        );

        with recursive org_date_table as (
            select (
                       case
                           when 'd' = 'h' then '2000-01-01'
                           when 'd' != 'h' then '2025-04-02'
                           end
                       ) as it
            union all
            select (
                       case 'd'
                           when 'h' then date_add(it, interval 1 day)
                           when 'd' then date_add(it, interval 1 day)
                           when 'w' then date_add(it, interval 1 week)
                           when 'm' then date_add(it, interval 1 month)
                           end
                       ) as it
            from org_date_table
            where it < @limit_cond
        ), date_table as (
            select
                year(it) as _year,
                (
                    case 'd'
                        when 'h' then day(it)
                        when 'd' then it
                        when 'w' then week(it)
                        when 'm' then month(it)
                        end
                    ) as dt
            from org_date_table
        ),  date_sale as (
            select year(actv_dt) _year,
                   month(actv_dt) as m,
                   week(actv_dt) as w,
                   actv_dt as d,
                   hour(regi_dt) as h,
                   tb_sale.*
            from tb_sale
            where shop_id=2 and

                actv_dt between '2025-04-02' and (
                    case
                        when 'd' = 'h' then '2025-04-02'
                        when 'd' != 'h' then '2025-04-08'
                        end
                    )
        ), final as (
            select count(device_id) as cnt
            from date_table dd
                     left outer join date_sale ds on dd._year=ds._year and
                                                     d = dt
            group by dd._year, dd.dt
        )

        select
            (
                select json_arrayagg(cnt)
                from final
            ) as value,
            (
                select json_arrayagg(date_format(it, '%Y-%m-%d'))
                from org_date_table
            ) as date
 {executed in 2 msec}
2025-04-09 00:10:55.600 DEBUG [http-nio-11040-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
4. set @limit_cond := (
               case 'd'
                   when 'h' then '2000-01-24'
                   when 'd' then '2025-04-09'
                   when 'w' then '2025-04-09'
                   when 'm' then date_sub('2025-04-09', interval 1 month)
               end
        );

        with recursive org_date_table as (
            select (
                       case
                           when 'd' = 'h' then '2000-01-01'
                           when 'd' != 'h' then '2025-01-09'
                           end
                       ) as it
            union all
            select (
                       case 'd'
                           when 'h' then date_add(it, interval 1 day)
                           when 'd' then date_add(it, interval 1 day)
                           when 'w' then date_add(it, interval 1 week)
                           when 'm' then date_add(it, interval 1 month)
                           end
                       ) as it
            from org_date_table
            where it < @limit_cond
        ), date_table as (
            select
                year(it) as _year,
                (
                    case 'd'
                        when 'h' then day(it)
                        when 'd' then it
                        when 'w' then week(it)
                        when 'm' then month(it)
                        end
                    ) as dt
            from org_date_table
        ),  date_sale as (
            select year(actv_dt) _year,
                   month(actv_dt) as m,
                   week(actv_dt) as w,
                   actv_dt as d,
                   hour(regi_dt) as h,
                   tb_sale.*
            from tb_sale
            where shop_id=2 and

                actv_dt between '2025-01-09' and (
                    case
                        when 'd' = 'h' then '2025-01-09'
                        when 'd' != 'h' then '2025-04-09'
                        end
                    )
        ), final as (
            select count(device_id) as cnt
            from date_table dd
                     left outer join date_sale ds on dd._year=ds._year and
                                                     d = dt
            group by dd._year, dd.dt
        )

        select
            (
                select json_arrayagg(cnt)
                from final
            ) as value,
            (
                select json_arrayagg(date_format(it, '%Y-%m-%d'))
                from org_date_table
            ) as date
 {executed in 2 msec}
2025-04-09 00:10:55.603 DEBUG [http-nio-11040-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
6. with recursive group_generation as (
            select 0 as g
            union all
            select g+1
            from group_generation
            where g < 8
        ), group_weekday as (
            select 0 as g
            union all
            select g+1
            from group_weekday
            where g < 6
        ),  sale as (
            select weekday(actv_dt) as days,
                   device_id,
                   cust_cd,
                   sale_id
            from tb_sale
            where shop_id=2 and

                device_id is not null and
                actv_dt between '2025-04-01' and '2025-04-30'
        ), sale_gene as (
            select sale_id,
                   (
                       case
                           when length(cust_cd) = 6 then floor((year(curdate()) - concat((
                                 case
                                     when substring(cust_cd, 1,2) > '44' then '19'
                                     when substring(cust_cd, 1,2) <= '44' then '20'
                                     end
                                 ),substring(cust_cd,1,2))) / 10)
                           when length(cust_cd) != 6 then null
                           end
                       ) as generation
            from sale
        ), generation as (
            select g,
                   device_id
            from group_generation g
                     left outer join sale_gene sg on g.g=sg.generation
                     left outer join sale s on s.sale_id=sg.sale_id
        ), weekdays as (
            select g,
                   device_id
            from group_weekday w
                     left outer join sale s on s.days=w.g
        )

        select IFNULL(count(device_id),0) as avg
        from generation
        group by g
 {executed in 4 msec}
2025-04-09 00:10:55.603 DEBUG [http-nio-11040-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
3. with base as (select device_id,
                             (SELECT device_nm
                              FROM tb_device
                              WHERE tb_device.device_id = sl.device_id)      as device,
                             sd_id,
                             (SELECT sd_nm
                              FROM tb_second_device
                              WHERE tb_second_device.sd_id = sl.sd_id)       as sec_device,
                             ct_actv_plan,
                             (SELECT ct_plan_nm
                              FROM tb_ct_plan
                              WHERE tb_ct_plan.ct_plan_id = sl.ct_actv_plan) as actv_plan
                      from tb_sale sl
                      where shop_id = 2 and

                        actv_dt between '2025-04-01' and '2025-04-30'),
             device as (SELECT device                   as name,
                               count(device_id) as count
                        from base
                        where device_id is not null
                        group by device),
             sec_device as (SELECT sec_device                   as name,
                                   count(sec_device) as count
                            from base
                            where sd_id is not null
                            group by sec_device),
             actv_plan as (SELECT actv_plan                   as name,
                                  count(actv_plan) as count
                           from base
                           where ct_actv_plan is not null
                           group by actv_plan),
             total as (select count('device') as cnt
                       from base
                       where 'device' is not null
             )

        select name,
               count,
               (
                   IF((select cnt
                       from total) = 0 or count = 0, 0, TRUNCATE(
                              (count / (
                                  select cnt
                                  from total
                              )
                                  ) * 100, 1))
                   ) as per
        from device
        order by per desc
        limit 5
 {executed in 6 msec}
2025-04-09 00:10:55.608 INFO  [http-nio-11040-exec-8] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/sale/graph/summary
2025-04-09 00:10:55.609 INFO  [http-nio-11040-exec-8] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDEyNTA1NCwiZXhwIjoxNzQ0MTI1NjU0LCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.PqbPGvkfF80iZ23XX-UvTsME700-SQ8FBh2gARAGbFk
2025-04-09 00:10:55.609 INFO  [http-nio-11040-exec-8] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/sale/graph/summary
2025-04-09 00:10:55.614 INFO  [http-nio-11040-exec-8] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-09 00:10:55.614 INFO  [http-nio-11040-exec-7] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/sale/graph/ct/d
2025-04-09 00:10:55.614 INFO  [http-nio-11040-exec-7] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDEyNTA1NCwiZXhwIjoxNzQ0MTI1NjU0LCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.PqbPGvkfF80iZ23XX-UvTsME700-SQ8FBh2gARAGbFk
2025-04-09 00:10:55.614 INFO  [http-nio-11040-exec-7] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/sale/graph/ct/d
2025-04-09 00:10:55.615 INFO  [http-nio-11040-exec-1] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/sale/graph/ct/d
2025-04-09 00:10:55.615 INFO  [http-nio-11040-exec-1] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDEyNTA1NCwiZXhwIjoxNzQ0MTI1NjU0LCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.PqbPGvkfF80iZ23XX-UvTsME700-SQ8FBh2gARAGbFk
2025-04-09 00:10:55.615 INFO  [http-nio-11040-exec-1] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/sale/graph/ct/d
2025-04-09 00:10:55.616 INFO  [http-nio-11040-exec-3] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/sale/graph/ct/select/0
2025-04-09 00:10:55.616 INFO  [http-nio-11040-exec-3] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDEyNTA1NCwiZXhwIjoxNzQ0MTI1NjU0LCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.PqbPGvkfF80iZ23XX-UvTsME700-SQ8FBh2gARAGbFk
2025-04-09 00:10:55.616 INFO  [http-nio-11040-exec-3] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/sale/graph/ct/select/0
2025-04-09 00:10:55.617 INFO  [http-nio-11040-exec-7] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-09 00:10:55.618 INFO  [http-nio-11040-exec-1] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-09 00:10:55.618 INFO  [http-nio-11040-exec-10] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/sale/graph/stat/select/0
2025-04-09 00:10:55.618 INFO  [http-nio-11040-exec-10] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDEyNTA1NCwiZXhwIjoxNzQ0MTI1NjU0LCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.PqbPGvkfF80iZ23XX-UvTsME700-SQ8FBh2gARAGbFk
2025-04-09 00:10:55.618 INFO  [http-nio-11040-exec-10] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/sale/graph/stat/select/0
2025-04-09 00:10:55.619 DEBUG [http-nio-11040-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 5 msec}
2025-04-09 00:10:55.619 INFO  [http-nio-11040-exec-3] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-09 00:10:55.620 INFO  [http-nio-11040-exec-8] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-09 00:10:55.620 INFO  [http-nio-11040-exec-10] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-09 00:10:55.621 INFO  [http-nio-11040-exec-9] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/sale/graph/ratio/select/0
2025-04-09 00:10:55.621 INFO  [http-nio-11040-exec-9] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDEyNTA1NCwiZXhwIjoxNzQ0MTI1NjU0LCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.PqbPGvkfF80iZ23XX-UvTsME700-SQ8FBh2gARAGbFk
2025-04-09 00:10:55.621 INFO  [http-nio-11040-exec-9] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/sale/graph/ratio/select/0
2025-04-09 00:10:55.623 DEBUG [http-nio-11040-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
3. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 4 msec}
2025-04-09 00:10:55.623 DEBUG [http-nio-11040-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
2. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 5 msec}
2025-04-09 00:10:55.623 INFO  [http-nio-11040-exec-7] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-09 00:10:55.623 DEBUG [http-nio-11040-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
6. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 5 msec}
2025-04-09 00:10:55.624 INFO  [http-nio-11040-exec-9] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-09 00:10:55.623 INFO  [http-nio-11040-exec-3] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-09 00:10:55.624 INFO  [http-nio-11040-exec-1] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-09 00:10:55.624 DEBUG [http-nio-11040-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 3 msec}
2025-04-09 00:10:55.625 INFO  [http-nio-11040-exec-10] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-09 00:10:55.633 DEBUG [http-nio-11040-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
2. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 8 msec}
2025-04-09 00:10:55.633 INFO  [http-nio-11040-exec-9] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-09 00:10:55.621 INFO  [http-nio-11040-exec-8] [com.momo.api.SaleController] - summary: CommonVO(provider=null, date=null, year=null, month=null, day=null, selectType=null, range=null, dateType=null, prevFromYmd=null, prevToYmd=null, currFromYmd=null, currToYmd=null, fromYmd=2024-10-01, toYmd=2025-04-01, fromYm=null, toYm=null, prevDate=null, currDate=null)
2025-04-09 00:10:55.638 DEBUG [http-nio-11040-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
6. set @limit_cond := (
               case 'd'
                   when 'h' then '2000-01-24'
                   when 'd' then '2025-04-08'
                   when 'w' then '2025-04-08'
                   when 'm' then date_sub('2025-04-08', interval 1 month)
               end
        );

        with recursive org_date_table as (
            select (
                       case
                           when 'd' = 'h' then '2000-01-01'
                           when 'd' != 'h' then '2025-04-02'
                           end
                       ) as it
            union all
            select (
                       case 'd'
                           when 'h' then date_add(it, interval 1 day)
                           when 'd' then date_add(it, interval 1 day)
                           when 'w' then date_add(it, interval 1 week)
                           when 'm' then date_add(it, interval 1 month)
                           end
                       ) as it
            from org_date_table
            where it < @limit_cond
        ), date_table as (
            select
                year(it) as _year,
                (
                    case 'd'
                        when 'h' then day(it)
                        when 'd' then it
                        when 'w' then week(it)
                        when 'm' then month(it)
                        end
                    ) as dt
            from org_date_table
        ),  date_sale as (
            select year(actv_dt) _year,
                   month(actv_dt) as m,
                   week(actv_dt) as w,
                   actv_dt as d,
                   hour(regi_dt) as h,
                   tb_sale.*
            from tb_sale
            where shop_id=2 and

                    seller_id='km1104rs' and

                actv_dt between '2025-04-02' and (
                    case
                        when 'd' = 'h' then '2025-04-02'
                        when 'd' != 'h' then '2025-04-08'
                        end
                    )
        ), final as (
            select count(device_id) as cnt
            from date_table dd
                     left outer join date_sale ds on dd._year=ds._year and
                                                     d = dt
            group by dd._year, dd.dt
        )

        select
            (
                select json_arrayagg(cnt)
                from final
            ) as value,
            (
                select json_arrayagg(date_format(it, '%Y-%m-%d'))
                from org_date_table
            ) as date
 {executed in 1 msec}
2025-04-09 00:10:55.638 DEBUG [http-nio-11040-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
2. set @limit_cond := (
               case 'd'
                   when 'h' then '2000-01-24'
                   when 'd' then '2025-04-09'
                   when 'w' then '2025-04-09'
                   when 'm' then date_sub('2025-04-09', interval 1 month)
               end
        );

        with recursive org_date_table as (
            select (
                       case
                           when 'd' = 'h' then '2000-01-01'
                           when 'd' != 'h' then '2025-01-09'
                           end
                       ) as it
            union all
            select (
                       case 'd'
                           when 'h' then date_add(it, interval 1 day)
                           when 'd' then date_add(it, interval 1 day)
                           when 'w' then date_add(it, interval 1 week)
                           when 'm' then date_add(it, interval 1 month)
                           end
                       ) as it
            from org_date_table
            where it < @limit_cond
        ), date_table as (
            select
                year(it) as _year,
                (
                    case 'd'
                        when 'h' then day(it)
                        when 'd' then it
                        when 'w' then week(it)
                        when 'm' then month(it)
                        end
                    ) as dt
            from org_date_table
        ),  date_sale as (
            select year(actv_dt) _year,
                   month(actv_dt) as m,
                   week(actv_dt) as w,
                   actv_dt as d,
                   hour(regi_dt) as h,
                   tb_sale.*
            from tb_sale
            where shop_id=2 and

                    seller_id='km1104rs' and

                actv_dt between '2025-01-09' and (
                    case
                        when 'd' = 'h' then '2025-01-09'
                        when 'd' != 'h' then '2025-04-09'
                        end
                    )
        ), final as (
            select count(device_id) as cnt
            from date_table dd
                     left outer join date_sale ds on dd._year=ds._year and
                                                     d = dt
            group by dd._year, dd.dt
        )

        select
            (
                select json_arrayagg(cnt)
                from final
            ) as value,
            (
                select json_arrayagg(date_format(it, '%Y-%m-%d'))
                from org_date_table
            ) as date
 {executed in 2 msec}
2025-04-09 00:10:55.638 DEBUG [http-nio-11040-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
4. with recursive istm_range as (
            select 0 as i
            union all
            select i+1
            from istm_range
            where i<5
        ), base as (
            select ct_istm
            from tb_sale
            where shop_id=2 and

                        seller_id='km1104rs' and

                actv_dt between '2025-04-01' and '2025-04-30'
        ), final as (
            select i as istm,
                   IFNULL(count(base.ct_istm),0) as cnt
            from istm_range
                     left outer join base on base.ct_istm=istm_range.i
            group by i
            order by istm desc
        )

        select json_arrayagg(istm) as type,
               json_arrayagg(cnt) as cnt,
               json_arrayagg(IF((
                      select IFNULL(count(ct_istm), 0)
                      from base
                  ) = 0 or cnt = 0, 0, TRUNCATE((cnt/(
                   select IFNULL(count(ct_istm), 0)
                   from base
               )) * 100, 1))) as per
        from final
 {executed in 2 msec}
2025-04-09 00:10:55.638 DEBUG [http-nio-11040-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
3. with recursive group_generation as (
            select 0 as g
            union all
            select g+1
            from group_generation
            where g < 8
        ), group_weekday as (
            select 0 as g
            union all
            select g+1
            from group_weekday
            where g < 6
        ),  sale as (
            select weekday(actv_dt) as days,
                   device_id,
                   cust_cd,
                   sale_id
            from tb_sale
            where shop_id=2 and

                      seller_id='km1104rs' and

                device_id is not null and
                actv_dt between '2025-04-01' and '2025-04-30'
        ), sale_gene as (
            select sale_id,
                   (
                       case
                           when length(cust_cd) = 6 then floor((year(curdate()) - concat((
                                 case
                                     when substring(cust_cd, 1,2) > '44' then '19'
                                     when substring(cust_cd, 1,2) <= '44' then '20'
                                     end
                                 ),substring(cust_cd,1,2))) / 10)
                           when length(cust_cd) != 6 then null
                           end
                       ) as generation
            from sale
        ), generation as (
            select g,
                   device_id
            from group_generation g
                     left outer join sale_gene sg on g.g=sg.generation
                     left outer join sale s on s.sale_id=sg.sale_id
        ), weekdays as (
            select g,
                   device_id
            from group_weekday w
                     left outer join sale s on s.days=w.g
        )

        select IFNULL(count(device_id),0) as avg
        from generation
        group by g
 {executed in 2 msec}
2025-04-09 00:10:55.639 DEBUG [http-nio-11040-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. with base as (select device_id,
                             (SELECT device_nm
                              FROM tb_device
                              WHERE tb_device.device_id = sl.device_id)      as device,
                             sd_id,
                             (SELECT sd_nm
                              FROM tb_second_device
                              WHERE tb_second_device.sd_id = sl.sd_id)       as sec_device,
                             ct_actv_plan,
                             (SELECT ct_plan_nm
                              FROM tb_ct_plan
                              WHERE tb_ct_plan.ct_plan_id = sl.ct_actv_plan) as actv_plan
                      from tb_sale sl
                      where shop_id = 2 and

                                seller_id='km1104rs' and

                        actv_dt between '2025-04-01' and '2025-04-30'),
             device as (SELECT device                   as name,
                               count(device_id) as count
                        from base
                        where device_id is not null
                        group by device),
             sec_device as (SELECT sec_device                   as name,
                                   count(sec_device) as count
                            from base
                            where sd_id is not null
                            group by sec_device),
             actv_plan as (SELECT actv_plan                   as name,
                                  count(actv_plan) as count
                           from base
                           where ct_actv_plan is not null
                           group by actv_plan),
             total as (select count('device') as cnt
                       from base
                       where 'device' is not null
             )

        select name,
               count,
               (
                   IF((select cnt
                       from total) = 0 or count = 0, 0, TRUNCATE(
                              (count / (
                                  select cnt
                                  from total
                              )
                                  ) * 100, 1))
                   ) as per
        from device
        order by per desc
        limit 5
 {executed in 3 msec}
2025-04-09 00:10:55.654 INFO  [http-nio-11040-exec-5] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/sale/graph/summary
2025-04-09 00:10:55.654 INFO  [http-nio-11040-exec-5] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDEyNTA1NCwiZXhwIjoxNzQ0MTI1NjU0LCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.PqbPGvkfF80iZ23XX-UvTsME700-SQ8FBh2gARAGbFk
2025-04-09 00:10:55.654 INFO  [http-nio-11040-exec-5] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/sale/graph/summary
2025-04-09 00:10:55.656 INFO  [http-nio-11040-exec-5] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-09 00:10:55.658 DEBUG [http-nio-11040-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 2 msec}
2025-04-09 00:10:55.658 INFO  [http-nio-11040-exec-5] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-09 00:10:55.662 INFO  [http-nio-11040-exec-5] [com.momo.api.SaleController] - summary: CommonVO(provider=null, date=null, year=null, month=null, day=null, selectType=null, range=null, dateType=null, prevFromYmd=null, prevToYmd=null, currFromYmd=null, currToYmd=null, fromYmd=2024-10-01, toYmd=2025-04-01, fromYm=null, toYm=null, prevDate=null, currDate=null)
2025-04-09 00:10:55.670 DEBUG [http-nio-11040-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
5. #         월별 날짜 구하기
        with recursive month_range as (
            select '2024-10-01' as d
            union all
            select date_add(d, interval 1 month) as d
            from month_range
            where date_add(d, interval 1 month) < '2025-04-01'
        ), months as(
            select month(d) as m
            from month_range
        ), filtered_sale as ( # 판매일보 초벌
            select month(actv_dt) as actv_month,
                   device_id,
                   internet_plan,
                   tv_plan,
                    exsvc_id,
                   total_cms,
                   wt_cms,
                   sale_id,
                   sd_id,
                    shop_id
            from tb_sale
            where shop_id=2 and

                actv_dt between '2024-10-01' and date_add('2025-04-01', interval 1 month)
        ), ct_graph as ( # 무선 그래프 데이터
            SELECT m,
                   count(device_id) as cnt
            FROM months
                     LEFT OUTER JOIN filtered_sale on actv_month = m and
                                                      device_id is not null
            group by m
        ), internet_graph as ( # 인터넷 그래프 데이터
            SELECT m,
                   count(internet_plan) as cnt
            FROM months
                     LEFT OUTER JOIN filtered_sale on actv_month = m  and
                                                      internet_plan is not null
            group by m
        ), tv_graph as ( # TV 그래프 데이터
            SELECT m,
                   count(tv_plan) as cnt
            FROM months
                     LEFT OUTER JOIN filtered_sale on actv_month = m  and
                                                      tv_plan is not null
            group by m
        ), card as ( # 카드 데이터
            SELECT m,
                   (
                    select count(*)
                    from tb_sale_card sc
                    left outer join filtered_sale fs on fs.shop_id = sc.shop_id and
                                                        fs.sale_id = sc.sale_id
                   )  as cnt
            FROM months
                     LEFT OUTER JOIN filtered_sale on actv_month = m
            group by m
        ), exsvc as ( # 부가서비스 데이터
            SELECT m,
                   count(exsvc_id) as cnt
            FROM months
                     LEFT OUTER JOIN filtered_sale on actv_month = m  and
                                                      exsvc_id is not null
            group by m
        ), tc_graph as ( # 총 이익 그래프 데이터
            SELECT m,
                   IFNULL(sum(total_cms), 0) as cnt
            FROM months
                     LEFT OUTER JOIN filtered_sale on actv_month = m
            group by m
        ), avg_margin_graph as ( # 개인 평균 마진 그래프 데이터
            SELECT m,
                   IFNULL(avg(total_cms), 0) as cnt
            FROM months
                     LEFT OUTER JOIN filtered_sale on actv_month = m and
                                                      device_id is not null
            group by m
        ), ud_graph as ( # 중고 개통 그래프 데이터
            SELECT m,
                   count(ud_id) as cnt
            FROM months
                     LEFT OUTER JOIN filtered_sale on actv_month = m
                     LEFT OUTER JOIN tb_sale_used_device sud on sud.sale_id=filtered_sale.sale_id
            group by m
        ), sec_graph as ( # 세컨 그래프 데이터
            SELECT m,
                   count(sd_id) as cnt
            FROM months
                     LEFT OUTER JOIN filtered_sale on actv_month = m and
                                                      sd_id != 0
            group by m
        ), diff_ct as (
            select
                (
                    select cnt
                    from ct_graph
                    limit 4, 1
                ) as prv,
                (
                    select cnt
                    from ct_graph
                    limit 5,1
                ) as curr
            from dual
        ), diff_internet as (
            select
                (
                    select cnt
                    from internet_graph
                    limit 4,1
                ) as prv,
                (
                    select cnt
                    from internet_graph
                    limit 5,1
                ) as curr
            from dual
        ), diff_tv as (
            select
                (
                    select cnt
                    from tv_graph
                    limit 4,1
                ) as prv,
                (
                    select cnt
                    from tv_graph
                    limit 5,1
                ) as curr
            from dual
        ), diff_card as (
            select
                (
                    select cnt
                    from card
                    limit 4,1
                ) as prv,
                (
                    select cnt
                    from card
                    limit 5,1
                ) as curr
            from dual
        ), diff_exsvc as (
            select
                (
                    select cnt
                    from exsvc
                    limit 4,1
                ) as prv,
                (
                    select cnt
                    from exsvc
                    limit 5,1
                ) as curr
            from dual
        ), diff_tc as (
            select
                (
                    select cnt
                    from tc_graph
                    limit 4,1
                ) as prv,
                (
                    select cnt
                    from tc_graph
                    limit 5,1
                ) as curr
            from dual
        ) , diff_margin as (
            select
                (
                    select cnt
                    from avg_margin_graph
                    limit 4,1
                ) as prv,
                (
                    select cnt
                    from avg_margin_graph
                    limit 5,1
                ) as curr
            from dual
        ), diff_ud as (
            select
                (
                    select cnt
                    from ud_graph
                    limit 4,1
                ) as prv,
                (
                    select cnt
                    from ud_graph
                    limit 5,1
                ) as curr
            from dual
        ) , diff_sec as (
            select
                (
                    select cnt
                    from sec_graph
                    limit 4,1
                ) as prv,
                (
                    select cnt
                    from sec_graph
                    limit 5,1
                ) as curr
            from dual
        ), final as (
            select
                curr,
                prv,
                (
                    select json_arrayagg(cnt)
                    from ct_graph
                ) as list
            from diff_ct
            union all
            select
                curr,
                prv,
                (
                    select json_arrayagg(cnt)
                    from internet_graph
                ) as list
            from diff_internet
            union all
            select
                curr,
                prv,
                (
                    select json_arrayagg(cnt)
                    from tv_graph
                ) as list
            from diff_tv
             union all
            select
                curr,
                prv,
                (
                    select json_arrayagg(cnt)
                    from card
                ) as list
            from diff_card
             union all
            select
                curr,
                prv,
                (
                    select json_arrayagg(cnt)
                    from exsvc
                ) as list
            from diff_exsvc
            union all
            select
                curr,
                prv,
                (
                    select json_arrayagg(cnt)
                    from tc_graph
                ) as list
            from diff_tc
            union all
            select
                curr,
                prv,
                (
                    select json_arrayagg(cnt)
                    from avg_margin_graph
                ) as list
            from diff_margin
            union all
            select
                curr,
                prv,
                (
                    select json_arrayagg(cnt)
                    from ud_graph
                ) as list
            from diff_ud
            union all
            select
                curr,
                prv,
                (
                    select json_arrayagg(cnt)
                    from sec_graph
                ) as list
            from diff_sec
        )

        select FLOOR(curr) as value,
               (
                   CASE
                       WHEN curr = 0 and prv = 0 THEN 0
                       WHEN prv != 0 and curr = 0 THEN -100
                       WHEN prv = 0 and curr != 0 THEN 100
                       WHEN curr != 0 and prv != 0 THEN TRUNCATE(((curr/prv)-1)*100, 1)
                       END
                   ) as per,
               list
        from final
 {executed in 28 msec}
2025-04-09 00:10:55.686 INFO  [http-nio-11040-exec-4] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/sale/graph/ct/select/0
2025-04-09 00:10:55.687 INFO  [http-nio-11040-exec-4] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDEyNTA1NCwiZXhwIjoxNzQ0MTI1NjU0LCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.PqbPGvkfF80iZ23XX-UvTsME700-SQ8FBh2gARAGbFk
2025-04-09 00:10:55.687 INFO  [http-nio-11040-exec-4] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/sale/graph/ct/select/0
2025-04-09 00:10:55.687 INFO  [http-nio-11040-exec-6] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/sale/graph/stat/select/0
2025-04-09 00:10:55.687 INFO  [http-nio-11040-exec-6] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDEyNTA1NCwiZXhwIjoxNzQ0MTI1NjU0LCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.PqbPGvkfF80iZ23XX-UvTsME700-SQ8FBh2gARAGbFk
2025-04-09 00:10:55.687 INFO  [http-nio-11040-exec-6] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/sale/graph/stat/select/0
2025-04-09 00:10:55.688 INFO  [http-nio-11040-exec-2] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/sale/graph/ratio/select/0
2025-04-09 00:10:55.688 INFO  [http-nio-11040-exec-2] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDEyNTA1NCwiZXhwIjoxNzQ0MTI1NjU0LCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.PqbPGvkfF80iZ23XX-UvTsME700-SQ8FBh2gARAGbFk
2025-04-09 00:10:55.688 INFO  [http-nio-11040-exec-2] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/sale/graph/ratio/select/0
2025-04-09 00:10:55.690 INFO  [http-nio-11040-exec-6] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-09 00:10:55.690 INFO  [http-nio-11040-exec-4] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-09 00:10:55.690 DEBUG [http-nio-11040-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. #         월별 날짜 구하기
        with recursive month_range as (
            select '2024-10-01' as d
            union all
            select date_add(d, interval 1 month) as d
            from month_range
            where date_add(d, interval 1 month) < '2025-04-01'
        ), months as(
            select month(d) as m
            from month_range
        ), filtered_sale as ( # 판매일보 초벌
            select month(actv_dt) as actv_month,
                   device_id,
                   internet_plan,
                   tv_plan,
                    exsvc_id,
                   total_cms,
                   wt_cms,
                   sale_id,
                   sd_id,
                    shop_id
            from tb_sale
            where shop_id=2 and

                    seller_id='km1104rs' and

                actv_dt between '2024-10-01' and date_add('2025-04-01', interval 1 month)
        ), ct_graph as ( # 무선 그래프 데이터
            SELECT m,
                   count(device_id) as cnt
            FROM months
                     LEFT OUTER JOIN filtered_sale on actv_month = m and
                                                      device_id is not null
            group by m
        ), internet_graph as ( # 인터넷 그래프 데이터
            SELECT m,
                   count(internet_plan) as cnt
            FROM months
                     LEFT OUTER JOIN filtered_sale on actv_month = m  and
                                                      internet_plan is not null
            group by m
        ), tv_graph as ( # TV 그래프 데이터
            SELECT m,
                   count(tv_plan) as cnt
            FROM months
                     LEFT OUTER JOIN filtered_sale on actv_month = m  and
                                                      tv_plan is not null
            group by m
        ), card as ( # 카드 데이터
            SELECT m,
                   (
                    select count(*)
                    from tb_sale_card sc
                    left outer join filtered_sale fs on fs.shop_id = sc.shop_id and
                                                        fs.sale_id = sc.sale_id
                   )  as cnt
            FROM months
                     LEFT OUTER JOIN filtered_sale on actv_month = m
            group by m
        ), exsvc as ( # 부가서비스 데이터
            SELECT m,
                   count(exsvc_id) as cnt
            FROM months
                     LEFT OUTER JOIN filtered_sale on actv_month = m  and
                                                      exsvc_id is not null
            group by m
        ), tc_graph as ( # 총 이익 그래프 데이터
            SELECT m,
                   IFNULL(sum(total_cms), 0) as cnt
            FROM months
                     LEFT OUTER JOIN filtered_sale on actv_month = m
            group by m
        ), avg_margin_graph as ( # 개인 평균 마진 그래프 데이터
            SELECT m,
                   IFNULL(avg(total_cms), 0) as cnt
            FROM months
                     LEFT OUTER JOIN filtered_sale on actv_month = m and
                                                      device_id is not null
            group by m
        ), ud_graph as ( # 중고 개통 그래프 데이터
            SELECT m,
                   count(ud_id) as cnt
            FROM months
                     LEFT OUTER JOIN filtered_sale on actv_month = m
                     LEFT OUTER JOIN tb_sale_used_device sud on sud.sale_id=filtered_sale.sale_id
            group by m
        ), sec_graph as ( # 세컨 그래프 데이터
            SELECT m,
                   count(sd_id) as cnt
            FROM months
                     LEFT OUTER JOIN filtered_sale on actv_month = m and
                                                      sd_id != 0
            group by m
        ), diff_ct as (
            select
                (
                    select cnt
                    from ct_graph
                    limit 4, 1
                ) as prv,
                (
                    select cnt
                    from ct_graph
                    limit 5,1
                ) as curr
            from dual
        ), diff_internet as (
            select
                (
                    select cnt
                    from internet_graph
                    limit 4,1
                ) as prv,
                (
                    select cnt
                    from internet_graph
                    limit 5,1
                ) as curr
            from dual
        ), diff_tv as (
            select
                (
                    select cnt
                    from tv_graph
                    limit 4,1
                ) as prv,
                (
                    select cnt
                    from tv_graph
                    limit 5,1
                ) as curr
            from dual
        ), diff_card as (
            select
                (
                    select cnt
                    from card
                    limit 4,1
                ) as prv,
                (
                    select cnt
                    from card
                    limit 5,1
                ) as curr
            from dual
        ), diff_exsvc as (
            select
                (
                    select cnt
                    from exsvc
                    limit 4,1
                ) as prv,
                (
                    select cnt
                    from exsvc
                    limit 5,1
                ) as curr
            from dual
        ), diff_tc as (
            select
                (
                    select cnt
                    from tc_graph
                    limit 4,1
                ) as prv,
                (
                    select cnt
                    from tc_graph
                    limit 5,1
                ) as curr
            from dual
        ) , diff_margin as (
            select
                (
                    select cnt
                    from avg_margin_graph
                    limit 4,1
                ) as prv,
                (
                    select cnt
                    from avg_margin_graph
                    limit 5,1
                ) as curr
            from dual
        ), diff_ud as (
            select
                (
                    select cnt
                    from ud_graph
                    limit 4,1
                ) as prv,
                (
                    select cnt
                    from ud_graph
                    limit 5,1
                ) as curr
            from dual
        ) , diff_sec as (
            select
                (
                    select cnt
                    from sec_graph
                    limit 4,1
                ) as prv,
                (
                    select cnt
                    from sec_graph
                    limit 5,1
                ) as curr
            from dual
        ), final as (
            select
                curr,
                prv,
                (
                    select json_arrayagg(cnt)
                    from ct_graph
                ) as list
            from diff_ct
            union all
            select
                curr,
                prv,
                (
                    select json_arrayagg(cnt)
                    from internet_graph
                ) as list
            from diff_internet
            union all
            select
                curr,
                prv,
                (
                    select json_arrayagg(cnt)
                    from tv_graph
                ) as list
            from diff_tv
             union all
            select
                curr,
                prv,
                (
                    select json_arrayagg(cnt)
                    from card
                ) as list
            from diff_card
             union all
            select
                curr,
                prv,
                (
                    select json_arrayagg(cnt)
                    from exsvc
                ) as list
            from diff_exsvc
            union all
            select
                curr,
                prv,
                (
                    select json_arrayagg(cnt)
                    from tc_graph
                ) as list
            from diff_tc
            union all
            select
                curr,
                prv,
                (
                    select json_arrayagg(cnt)
                    from avg_margin_graph
                ) as list
            from diff_margin
            union all
            select
                curr,
                prv,
                (
                    select json_arrayagg(cnt)
                    from ud_graph
                ) as list
            from diff_ud
            union all
            select
                curr,
                prv,
                (
                    select json_arrayagg(cnt)
                    from sec_graph
                ) as list
            from diff_sec
        )

        select FLOOR(curr) as value,
               (
                   CASE
                       WHEN curr = 0 and prv = 0 THEN 0
                       WHEN prv != 0 and curr = 0 THEN -100
                       WHEN prv = 0 and curr != 0 THEN 100
                       WHEN curr != 0 and prv != 0 THEN TRUNCATE(((curr/prv)-1)*100, 1)
                       END
                   ) as per,
               list
        from final
 {executed in 22 msec}
2025-04-09 00:10:55.691 INFO  [http-nio-11040-exec-2] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-09 00:10:55.698 DEBUG [http-nio-11040-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
6. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 8 msec}
2025-04-09 00:10:55.698 DEBUG [http-nio-11040-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
4. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 8 msec}
2025-04-09 00:10:55.699 INFO  [http-nio-11040-exec-6] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-09 00:10:55.699 INFO  [http-nio-11040-exec-4] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-09 00:10:55.700 DEBUG [http-nio-11040-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
3. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 8 msec}
2025-04-09 00:10:55.702 INFO  [http-nio-11040-exec-2] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-09 00:10:55.706 DEBUG [http-nio-11040-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
3. with recursive istm_range as (
            select 0 as i
            union all
            select i+1
            from istm_range
            where i<5
        ), base as (
            select ct_istm
            from tb_sale
            where shop_id=2 and

                        seller_id='km1104rs' and

                actv_dt between '2025-04-01' and '2025-04-30'
        ), final as (
            select i as istm,
                   IFNULL(count(base.ct_istm),0) as cnt
            from istm_range
                     left outer join base on base.ct_istm=istm_range.i
            group by i
            order by istm desc
        )

        select json_arrayagg(istm) as type,
               json_arrayagg(cnt) as cnt,
               json_arrayagg(IF((
                      select IFNULL(count(ct_istm), 0)
                      from base
                  ) = 0 or cnt = 0, 0, TRUNCATE((cnt/(
                   select IFNULL(count(ct_istm), 0)
                   from base
               )) * 100, 1))) as per
        from final
 {executed in 1 msec}
2025-04-09 00:10:55.706 DEBUG [http-nio-11040-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
4. with recursive group_generation as (
            select 0 as g
            union all
            select g+1
            from group_generation
            where g < 8
        ), group_weekday as (
            select 0 as g
            union all
            select g+1
            from group_weekday
            where g < 6
        ),  sale as (
            select weekday(actv_dt) as days,
                   device_id,
                   cust_cd,
                   sale_id
            from tb_sale
            where shop_id=2 and

                      seller_id='km1104rs' and

                device_id is not null and
                actv_dt between '2025-04-01' and '2025-04-30'
        ), sale_gene as (
            select sale_id,
                   (
                       case
                           when length(cust_cd) = 6 then floor((year(curdate()) - concat((
                                 case
                                     when substring(cust_cd, 1,2) > '44' then '19'
                                     when substring(cust_cd, 1,2) <= '44' then '20'
                                     end
                                 ),substring(cust_cd,1,2))) / 10)
                           when length(cust_cd) != 6 then null
                           end
                       ) as generation
            from sale
        ), generation as (
            select g,
                   device_id
            from group_generation g
                     left outer join sale_gene sg on g.g=sg.generation
                     left outer join sale s on s.sale_id=sg.sale_id
        ), weekdays as (
            select g,
                   device_id
            from group_weekday w
                     left outer join sale s on s.days=w.g
        )

        select IFNULL(count(device_id),0) as avg
        from generation
        group by g
 {executed in 1 msec}
2025-04-09 00:10:55.708 DEBUG [http-nio-11040-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
6. with base as (select device_id,
                             (SELECT device_nm
                              FROM tb_device
                              WHERE tb_device.device_id = sl.device_id)      as device,
                             sd_id,
                             (SELECT sd_nm
                              FROM tb_second_device
                              WHERE tb_second_device.sd_id = sl.sd_id)       as sec_device,
                             ct_actv_plan,
                             (SELECT ct_plan_nm
                              FROM tb_ct_plan
                              WHERE tb_ct_plan.ct_plan_id = sl.ct_actv_plan) as actv_plan
                      from tb_sale sl
                      where shop_id = 2 and

                                seller_id='km1104rs' and

                        actv_dt between '2025-04-01' and '2025-04-30'),
             device as (SELECT device                   as name,
                               count(device_id) as count
                        from base
                        where device_id is not null
                        group by device),
             sec_device as (SELECT sec_device                   as name,
                                   count(sec_device) as count
                            from base
                            where sd_id is not null
                            group by sec_device),
             actv_plan as (SELECT actv_plan                   as name,
                                  count(actv_plan) as count
                           from base
                           where ct_actv_plan is not null
                           group by actv_plan),
             total as (select count('device') as cnt
                       from base
                       where 'device' is not null
             )

        select name,
               count,
               (
                   IF((select cnt
                       from total) = 0 or count = 0, 0, TRUNCATE(
                              (count / (
                                  select cnt
                                  from total
                              )
                                  ) * 100, 1))
                   ) as per
        from device
        order by per desc
        limit 5
 {executed in 2 msec}
2025-04-09 00:10:55.718 INFO  [http-nio-11040-exec-1] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/sale/graph/ratio/select/0
2025-04-09 00:10:55.719 INFO  [http-nio-11040-exec-1] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDEyNTA1NCwiZXhwIjoxNzQ0MTI1NjU0LCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.PqbPGvkfF80iZ23XX-UvTsME700-SQ8FBh2gARAGbFk
2025-04-09 00:10:55.719 INFO  [http-nio-11040-exec-1] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/sale/graph/ratio/select/0
2025-04-09 00:10:55.718 INFO  [http-nio-11040-exec-7] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/sale/graph/stat/select/0
2025-04-09 00:10:55.719 INFO  [http-nio-11040-exec-7] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDEyNTA1NCwiZXhwIjoxNzQ0MTI1NjU0LCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.PqbPGvkfF80iZ23XX-UvTsME700-SQ8FBh2gARAGbFk
2025-04-09 00:10:55.719 INFO  [http-nio-11040-exec-7] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/sale/graph/stat/select/0
2025-04-09 00:10:55.719 INFO  [http-nio-11040-exec-3] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/sale/graph/ct/select/0
2025-04-09 00:10:55.719 INFO  [http-nio-11040-exec-3] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDEyNTA1NCwiZXhwIjoxNzQ0MTI1NjU0LCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.PqbPGvkfF80iZ23XX-UvTsME700-SQ8FBh2gARAGbFk
2025-04-09 00:10:55.719 INFO  [http-nio-11040-exec-3] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/sale/graph/ct/select/0
2025-04-09 00:10:55.721 INFO  [http-nio-11040-exec-7] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-09 00:10:55.721 INFO  [http-nio-11040-exec-1] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-09 00:10:55.721 INFO  [http-nio-11040-exec-3] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-09 00:10:55.722 DEBUG [http-nio-11040-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
3. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 1 msec}
2025-04-09 00:10:55.722 DEBUG [http-nio-11040-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
6. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 1 msec}
2025-04-09 00:10:55.722 DEBUG [http-nio-11040-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
2. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 1 msec}
2025-04-09 00:10:55.722 INFO  [http-nio-11040-exec-3] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-09 00:10:55.722 INFO  [http-nio-11040-exec-7] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-09 00:10:55.722 INFO  [http-nio-11040-exec-1] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-09 00:10:55.726 DEBUG [http-nio-11040-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
3. with recursive group_generation as (
            select 0 as g
            union all
            select g+1
            from group_generation
            where g < 8
        ), group_weekday as (
            select 0 as g
            union all
            select g+1
            from group_weekday
            where g < 6
        ),  sale as (
            select weekday(actv_dt) as days,
                   device_id,
                   cust_cd,
                   sale_id
            from tb_sale
            where shop_id=2 and

                      seller_id='km1104rs' and

                device_id is not null and
                actv_dt between '2025-04-01' and '2025-04-30'
        ), sale_gene as (
            select sale_id,
                   (
                       case
                           when length(cust_cd) = 6 then floor((year(curdate()) - concat((
                                 case
                                     when substring(cust_cd, 1,2) > '44' then '19'
                                     when substring(cust_cd, 1,2) <= '44' then '20'
                                     end
                                 ),substring(cust_cd,1,2))) / 10)
                           when length(cust_cd) != 6 then null
                           end
                       ) as generation
            from sale
        ), generation as (
            select g,
                   device_id
            from group_generation g
                     left outer join sale_gene sg on g.g=sg.generation
                     left outer join sale s on s.sale_id=sg.sale_id
        ), weekdays as (
            select g,
                   device_id
            from group_weekday w
                     left outer join sale s on s.days=w.g
        )

        select IFNULL(count(device_id),0) as avg
        from generation
        group by g
 {executed in 1 msec}
2025-04-09 00:10:55.726 DEBUG [http-nio-11040-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
6. with recursive istm_range as (
            select 0 as i
            union all
            select i+1
            from istm_range
            where i<5
        ), base as (
            select ct_istm
            from tb_sale
            where shop_id=2 and

                        seller_id='km1104rs' and

                actv_dt between '2025-04-01' and '2025-04-30'
        ), final as (
            select i as istm,
                   IFNULL(count(base.ct_istm),0) as cnt
            from istm_range
                     left outer join base on base.ct_istm=istm_range.i
            group by i
            order by istm desc
        )

        select json_arrayagg(istm) as type,
               json_arrayagg(cnt) as cnt,
               json_arrayagg(IF((
                      select IFNULL(count(ct_istm), 0)
                      from base
                  ) = 0 or cnt = 0, 0, TRUNCATE((cnt/(
                   select IFNULL(count(ct_istm), 0)
                   from base
               )) * 100, 1))) as per
        from final
 {executed in 1 msec}
2025-04-09 00:10:55.731 DEBUG [http-nio-11040-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
2. with base as (select device_id,
                             (SELECT device_nm
                              FROM tb_device
                              WHERE tb_device.device_id = sl.device_id)      as device,
                             sd_id,
                             (SELECT sd_nm
                              FROM tb_second_device
                              WHERE tb_second_device.sd_id = sl.sd_id)       as sec_device,
                             ct_actv_plan,
                             (SELECT ct_plan_nm
                              FROM tb_ct_plan
                              WHERE tb_ct_plan.ct_plan_id = sl.ct_actv_plan) as actv_plan
                      from tb_sale sl
                      where shop_id = 2 and

                                seller_id='km1104rs' and

                        actv_dt between '2025-04-01' and '2025-04-30'),
             device as (SELECT device                   as name,
                               count(device_id) as count
                        from base
                        where device_id is not null
                        group by device),
             sec_device as (SELECT sec_device                   as name,
                                   count(sec_device) as count
                            from base
                            where sd_id is not null
                            group by sec_device),
             actv_plan as (SELECT actv_plan                   as name,
                                  count(actv_plan) as count
                           from base
                           where ct_actv_plan is not null
                           group by actv_plan),
             total as (select count('device') as cnt
                       from base
                       where 'device' is not null
             )

        select name,
               count,
               (
                   IF((select cnt
                       from total) = 0 or count = 0, 0, TRUNCATE(
                              (count / (
                                  select cnt
                                  from total
                              )
                                  ) * 100, 1))
                   ) as per
        from device
        order by per desc
        limit 5
 {executed in 7 msec}
2025-04-09 00:10:57.860 INFO  [http-nio-11040-exec-9] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/sale/graph/stat/select/1
2025-04-09 00:10:57.860 INFO  [http-nio-11040-exec-9] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDEyNTA1NCwiZXhwIjoxNzQ0MTI1NjU0LCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.PqbPGvkfF80iZ23XX-UvTsME700-SQ8FBh2gARAGbFk
2025-04-09 00:10:57.860 INFO  [http-nio-11040-exec-9] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/sale/graph/stat/select/1
2025-04-09 00:10:57.862 INFO  [http-nio-11040-exec-9] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-09 00:10:57.864 DEBUG [http-nio-11040-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
4. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 2 msec}
2025-04-09 00:10:57.864 INFO  [http-nio-11040-exec-9] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-09 00:10:57.868 DEBUG [http-nio-11040-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
4. with base as (select device_id,
                             (SELECT device_nm
                              FROM tb_device
                              WHERE tb_device.device_id = sl.device_id)      as device,
                             sd_id,
                             (SELECT sd_nm
                              FROM tb_second_device
                              WHERE tb_second_device.sd_id = sl.sd_id)       as sec_device,
                             ct_actv_plan,
                             (SELECT ct_plan_nm
                              FROM tb_ct_plan
                              WHERE tb_ct_plan.ct_plan_id = sl.ct_actv_plan) as actv_plan
                      from tb_sale sl
                      where shop_id = 2 and

                                seller_id='km1104rs' and

                        actv_dt between '2025-04-01' and '2025-04-30'),
             device as (SELECT device                   as name,
                               count(device_id) as count
                        from base
                        where device_id is not null
                        group by device),
             sec_device as (SELECT sec_device                   as name,
                                   count(sec_device) as count
                            from base
                            where sd_id is not null
                            group by sec_device),
             actv_plan as (SELECT actv_plan                   as name,
                                  count(actv_plan) as count
                           from base
                           where ct_actv_plan is not null
                           group by actv_plan),
             total as (select count('actv_plan') as cnt
                       from base
                       where 'actv_plan' is not null
             )

        select name,
               count,
               (
                   IF((select cnt
                       from total) = 0 or count = 0, 0, TRUNCATE(
                              (count / (
                                  select cnt
                                  from total
                              )
                                  ) * 100, 1))
                   ) as per
        from actv_plan
        order by per desc
        limit 5
 {executed in 2 msec}
2025-04-09 00:10:58.348 INFO  [http-nio-11040-exec-10] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/sale/graph/stat/select/2
2025-04-09 00:10:58.349 INFO  [http-nio-11040-exec-10] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDEyNTA1NCwiZXhwIjoxNzQ0MTI1NjU0LCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.PqbPGvkfF80iZ23XX-UvTsME700-SQ8FBh2gARAGbFk
2025-04-09 00:10:58.349 INFO  [http-nio-11040-exec-10] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/sale/graph/stat/select/2
2025-04-09 00:10:58.350 INFO  [http-nio-11040-exec-10] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-09 00:10:58.352 DEBUG [http-nio-11040-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 2 msec}
2025-04-09 00:10:58.352 INFO  [http-nio-11040-exec-10] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-09 00:10:58.355 DEBUG [http-nio-11040-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. with base as (select device_id,
                             (SELECT device_nm
                              FROM tb_device
                              WHERE tb_device.device_id = sl.device_id)      as device,
                             sd_id,
                             (SELECT sd_nm
                              FROM tb_second_device
                              WHERE tb_second_device.sd_id = sl.sd_id)       as sec_device,
                             ct_actv_plan,
                             (SELECT ct_plan_nm
                              FROM tb_ct_plan
                              WHERE tb_ct_plan.ct_plan_id = sl.ct_actv_plan) as actv_plan
                      from tb_sale sl
                      where shop_id = 2 and

                                seller_id='km1104rs' and

                        actv_dt between '2025-04-01' and '2025-04-30'),
             device as (SELECT device                   as name,
                               count(device_id) as count
                        from base
                        where device_id is not null
                        group by device),
             sec_device as (SELECT sec_device                   as name,
                                   count(sec_device) as count
                            from base
                            where sd_id is not null
                            group by sec_device),
             actv_plan as (SELECT actv_plan                   as name,
                                  count(actv_plan) as count
                           from base
                           where ct_actv_plan is not null
                           group by actv_plan),
             total as (select count('sec_device') as cnt
                       from base
                       where 'sec_device' is not null
             )

        select name,
               count,
               (
                   IF((select cnt
                       from total) = 0 or count = 0, 0, TRUNCATE(
                              (count / (
                                  select cnt
                                  from total
                              )
                                  ) * 100, 1))
                   ) as per
        from sec_device
        order by per desc
        limit 5
 {executed in 1 msec}
2025-04-09 00:10:58.842 INFO  [http-nio-11040-exec-8] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/sale/graph/stat/select/0
2025-04-09 00:10:58.842 INFO  [http-nio-11040-exec-8] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDEyNTA1NCwiZXhwIjoxNzQ0MTI1NjU0LCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.PqbPGvkfF80iZ23XX-UvTsME700-SQ8FBh2gARAGbFk
2025-04-09 00:10:58.842 INFO  [http-nio-11040-exec-8] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/sale/graph/stat/select/0
2025-04-09 00:10:58.844 INFO  [http-nio-11040-exec-8] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-09 00:10:58.847 DEBUG [http-nio-11040-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
5. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 1 msec}
2025-04-09 00:10:58.847 INFO  [http-nio-11040-exec-8] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-09 00:10:58.851 DEBUG [http-nio-11040-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
5. with base as (select device_id,
                             (SELECT device_nm
                              FROM tb_device
                              WHERE tb_device.device_id = sl.device_id)      as device,
                             sd_id,
                             (SELECT sd_nm
                              FROM tb_second_device
                              WHERE tb_second_device.sd_id = sl.sd_id)       as sec_device,
                             ct_actv_plan,
                             (SELECT ct_plan_nm
                              FROM tb_ct_plan
                              WHERE tb_ct_plan.ct_plan_id = sl.ct_actv_plan) as actv_plan
                      from tb_sale sl
                      where shop_id = 2 and

                                seller_id='km1104rs' and

                        actv_dt between '2025-04-01' and '2025-04-30'),
             device as (SELECT device                   as name,
                               count(device_id) as count
                        from base
                        where device_id is not null
                        group by device),
             sec_device as (SELECT sec_device                   as name,
                                   count(sec_device) as count
                            from base
                            where sd_id is not null
                            group by sec_device),
             actv_plan as (SELECT actv_plan                   as name,
                                  count(actv_plan) as count
                           from base
                           where ct_actv_plan is not null
                           group by actv_plan),
             total as (select count('device') as cnt
                       from base
                       where 'device' is not null
             )

        select name,
               count,
               (
                   IF((select cnt
                       from total) = 0 or count = 0, 0, TRUNCATE(
                              (count / (
                                  select cnt
                                  from total
                              )
                                  ) * 100, 1))
                   ) as per
        from device
        order by per desc
        limit 5
 {executed in 2 msec}
2025-04-09 00:11:47.792 INFO  [MessageBroker-1] [o.s.w.s.c.WebSocketMessageBrokerStats] - WebSocketSession[0 current WS(0)-HttpStream(0)-HttpPoll(0), 0 total, 0 closed abnormally (0 connect failure, 0 send limit, 0 transport error)], stompSubProtocol[processed CONNECT(0)-CONNECTED(0)-DISCONNECT(0)], stompBrokerRelay[null], inboundChannel[pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 0], outboundChannel[pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 0], sockJsScheduler[pool size = 1, active threads = 1, queued tasks = 0, completed tasks = 0]
2025-04-09 00:17:53.349 INFO  [http-nio-11040-exec-5] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/auth/refresh
2025-04-09 00:17:53.350 INFO  [http-nio-11040-exec-5] [com.momo.filter.JwtAuthorizationFilter] - access token: null
2025-04-09 00:17:53.350 INFO  [http-nio-11040-exec-5] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/auth/refresh
2025-04-09 00:17:53.350 INFO  [http-nio-11040-exec-5] [com.momo.filter.JwtAuthorizationFilter] - 유효한 JWT 토큰이 없습니다
2025-04-09 00:17:53.352 INFO  [http-nio-11040-exec-5] [com.momo.api.AuthController] - refresh
2025-04-09 00:17:53.357 DEBUG [http-nio-11040-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT  *
        FROM    tb_refresh_token
        WHERE   refresh_token='eyJhbGciOiJIUzI1NiJ9.eyJleHAiOjE3NDQxMjg2NTR9.Hu5v28fYDYskftTZCCla1rTP2SYYoiuUfGr3MjFwGxk'
 {executed in 2 msec}
2025-04-09 00:17:53.359 DEBUG [http-nio-11040-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 1 msec}
2025-04-09 00:17:53.360 INFO  [http-nio-11040-exec-5] [com.momo.api.AuthController] - jwt: JwtVO(grantType=Bearer , username=km1104rs, accessToken=eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDEyNTQ3MywiZXhwIjoxNzQ0MTI2MDczLCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.HZDSowJRg2molQpL9XFQtZeyIIfwOwWKc68hxImvip0, refreshToken=null, expireTime=null, revoked=false, expired=false)
2025-04-09 00:17:53.390 INFO  [http-nio-11040-exec-4] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/notif/all
2025-04-09 00:17:53.390 INFO  [http-nio-11040-exec-4] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDEyNTQ3MywiZXhwIjoxNzQ0MTI2MDczLCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.HZDSowJRg2molQpL9XFQtZeyIIfwOwWKc68hxImvip0
2025-04-09 00:17:53.390 INFO  [http-nio-11040-exec-4] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/notif/all
2025-04-09 00:17:53.391 INFO  [http-nio-11040-exec-2] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/notif/count/unread
2025-04-09 00:17:53.391 INFO  [http-nio-11040-exec-2] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDEyNTQ3MywiZXhwIjoxNzQ0MTI2MDczLCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.HZDSowJRg2molQpL9XFQtZeyIIfwOwWKc68hxImvip0
2025-04-09 00:17:53.391 INFO  [http-nio-11040-exec-2] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/notif/count/unread
2025-04-09 00:17:53.391 INFO  [http-nio-11040-exec-6] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/notif/read/all
2025-04-09 00:17:53.391 INFO  [http-nio-11040-exec-6] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDEyNTQ3MywiZXhwIjoxNzQ0MTI2MDczLCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.HZDSowJRg2molQpL9XFQtZeyIIfwOwWKc68hxImvip0
2025-04-09 00:17:53.391 INFO  [http-nio-11040-exec-6] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/notif/read/all
2025-04-09 00:17:53.391 INFO  [http-nio-11040-exec-1] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/user/info
2025-04-09 00:17:53.391 INFO  [http-nio-11040-exec-1] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDEyNTQ3MywiZXhwIjoxNzQ0MTI2MDczLCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.HZDSowJRg2molQpL9XFQtZeyIIfwOwWKc68hxImvip0
2025-04-09 00:17:53.392 INFO  [http-nio-11040-exec-1] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/user/info
2025-04-09 00:17:53.392 INFO  [http-nio-11040-exec-6] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-09 00:17:53.392 INFO  [http-nio-11040-exec-4] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-09 00:17:53.392 INFO  [http-nio-11040-exec-1] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-09 00:17:53.392 INFO  [http-nio-11040-exec-2] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-09 00:17:53.395 DEBUG [http-nio-11040-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
3. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 1 msec}
2025-04-09 00:17:53.395 INFO  [http-nio-11040-exec-2] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-09 00:17:53.396 DEBUG [http-nio-11040-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 1 msec}
2025-04-09 00:17:53.396 DEBUG [http-nio-11040-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
6. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 3 msec}
2025-04-09 00:17:53.396 INFO  [http-nio-11040-exec-1] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-09 00:17:53.397 INFO  [http-nio-11040-exec-6] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-09 00:17:53.397 INFO  [http-nio-11040-exec-1] [c.momo.common.util.SecurityContextUtil] - principal: UserDetailsImpl(username=km1104rs, password=$2a$10$uXShhwl6ULOkbJe477uDWOfdiUUcu6lOSF/Dhj9xP3U1nUn/gXkc6, authorities=[ROLE_NONE])
2025-04-09 00:17:53.397 DEBUG [http-nio-11040-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
4. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 4 msec}
2025-04-09 00:17:53.397 INFO  [http-nio-11040-exec-6] [c.momo.common.util.SecurityContextUtil] - principal: UserDetailsImpl(username=km1104rs, password=$2a$10$uXShhwl6ULOkbJe477uDWOfdiUUcu6lOSF/Dhj9xP3U1nUn/gXkc6, authorities=[ROLE_NONE])
2025-04-09 00:17:53.397 INFO  [http-nio-11040-exec-2] [c.momo.common.util.SecurityContextUtil] - principal: UserDetailsImpl(username=km1104rs, password=$2a$10$uXShhwl6ULOkbJe477uDWOfdiUUcu6lOSF/Dhj9xP3U1nUn/gXkc6, authorities=[ROLE_NONE])
2025-04-09 00:17:53.397 INFO  [http-nio-11040-exec-4] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-09 00:17:53.397 INFO  [http-nio-11040-exec-4] [c.momo.common.util.SecurityContextUtil] - principal: UserDetailsImpl(username=km1104rs, password=$2a$10$uXShhwl6ULOkbJe477uDWOfdiUUcu6lOSF/Dhj9xP3U1nUn/gXkc6, authorities=[ROLE_NONE])
2025-04-09 00:17:53.399 DEBUG [http-nio-11040-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
6. UPDATE tb_notification
        SET read_st = TRUE
        WHERE receiver_id = 'km1104rs'
          AND read_st = FALSE
 {executed in 1 msec}
2025-04-09 00:17:53.399 DEBUG [http-nio-11040-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
3. SELECT count(*)
        FROM tb_notification
        WHERE receiver_id = 'km1104rs'
          AND read_st = FALSE
 {executed in 1 msec}
2025-04-09 00:17:53.400 DEBUG [http-nio-11040-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
4. SELECT content,
               notif_id,
               read_st,
               notif_tp as type,
               IF(date(send_dt) = current_date,true,false) as today,
            (
               TIMESTAMPDIFF(MINUTE, send_dt, current_timestamp)
            ) as ago
        FROM tb_notification
        WHERE receiver_id='km1104rs'
        ORDER BY send_dt DESC
 {executed in 1 msec}
2025-04-09 00:17:53.400 DEBUG [http-nio-11040-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT ac.id,
               ac.name,
               ac.tel,
               ac.nickname,
               ac.pfp,
               ac.curr_shop_id,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where sf.shop_id = ac.curr_shop_id and
                         sf.staff_id = ac.id
                   ) as role,
               sh.shop_nm,
               sh.shop_addr,
               sh.provider,
               (
                   IFNULL((
                       select sf2.approval_st
                       from tb_staff sf2
                       where sf2.shop_id=ac.curr_shop_id and
                           sf2.staff_id=ac.id
                       ), -1)
                ) as approval_st,
                ac.corp_nm,
                ac.br_no
        FROM tb_account ac
        LEFT OUTER JOIN tb_shop sh on sh.shop_id=ac.curr_shop_id
        WHERE id = 'km1104rs'
 {executed in 3 msec}
2025-04-09 00:17:53.400 INFO  [http-nio-11040-exec-1] [com.momo.api.UserController] - User: {role=0, approval_st=1, shop_addr=충청남도 천안시 병천면 충절로 1600 한국기술교육대학교 다산정보관 102, br_no=5218702490, provider=2, name=박희찬, nickname=대표, corp_nm=123, tel=010-4524-0636, id=km1104rs, pfp=1921fc01-e573-4243-9365-6b905389f4fc.png, curr_shop_id=2, shop_nm=한기대점 }
2025-04-09 00:17:53.407 INFO  [http-nio-11040-exec-3] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/notif/count/unread
2025-04-09 00:17:53.407 INFO  [http-nio-11040-exec-3] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDEyNTQ3MywiZXhwIjoxNzQ0MTI2MDczLCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.HZDSowJRg2molQpL9XFQtZeyIIfwOwWKc68hxImvip0
2025-04-09 00:17:53.407 INFO  [http-nio-11040-exec-3] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/notif/count/unread
2025-04-09 00:17:53.409 INFO  [http-nio-11040-exec-3] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-09 00:17:53.411 DEBUG [http-nio-11040-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
3. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 1 msec}
2025-04-09 00:17:53.412 INFO  [http-nio-11040-exec-3] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-09 00:17:53.412 INFO  [http-nio-11040-exec-3] [c.momo.common.util.SecurityContextUtil] - principal: UserDetailsImpl(username=km1104rs, password=$2a$10$uXShhwl6ULOkbJe477uDWOfdiUUcu6lOSF/Dhj9xP3U1nUn/gXkc6, authorities=[ROLE_NONE])
2025-04-09 00:17:53.415 DEBUG [http-nio-11040-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
3. SELECT count(*)
        FROM tb_notification
        WHERE receiver_id = 'km1104rs'
          AND read_st = FALSE
 {executed in 1 msec}
2025-04-09 00:17:53.424 INFO  [http-nio-11040-exec-7] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/sale/graph/ct/d
2025-04-09 00:17:53.424 INFO  [http-nio-11040-exec-7] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDEyNTQ3MywiZXhwIjoxNzQ0MTI2MDczLCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.HZDSowJRg2molQpL9XFQtZeyIIfwOwWKc68hxImvip0
2025-04-09 00:17:53.424 INFO  [http-nio-11040-exec-7] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/sale/graph/ct/d
2025-04-09 00:17:53.424 INFO  [http-nio-11040-exec-9] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/sale/graph/ct/d
2025-04-09 00:17:53.424 INFO  [http-nio-11040-exec-9] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDEyNTQ3MywiZXhwIjoxNzQ0MTI2MDczLCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.HZDSowJRg2molQpL9XFQtZeyIIfwOwWKc68hxImvip0
2025-04-09 00:17:53.424 INFO  [http-nio-11040-exec-10] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/sale/graph/ct/select/0
2025-04-09 00:17:53.424 INFO  [http-nio-11040-exec-10] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDEyNTQ3MywiZXhwIjoxNzQ0MTI2MDczLCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.HZDSowJRg2molQpL9XFQtZeyIIfwOwWKc68hxImvip0
2025-04-09 00:17:53.424 INFO  [http-nio-11040-exec-10] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/sale/graph/ct/select/0
2025-04-09 00:17:53.424 INFO  [http-nio-11040-exec-9] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/sale/graph/ct/d
2025-04-09 00:17:53.424 INFO  [http-nio-11040-exec-5] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/sale/graph/ratio/select/0
2025-04-09 00:17:53.424 INFO  [http-nio-11040-exec-5] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDEyNTQ3MywiZXhwIjoxNzQ0MTI2MDczLCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.HZDSowJRg2molQpL9XFQtZeyIIfwOwWKc68hxImvip0
2025-04-09 00:17:53.424 INFO  [http-nio-11040-exec-5] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/sale/graph/ratio/select/0
2025-04-09 00:17:53.424 INFO  [http-nio-11040-exec-8] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/sale/graph/stat/select/0
2025-04-09 00:17:53.425 INFO  [http-nio-11040-exec-8] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDEyNTQ3MywiZXhwIjoxNzQ0MTI2MDczLCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.HZDSowJRg2molQpL9XFQtZeyIIfwOwWKc68hxImvip0
2025-04-09 00:17:53.425 INFO  [http-nio-11040-exec-8] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/sale/graph/stat/select/0
2025-04-09 00:17:53.425 INFO  [http-nio-11040-exec-1] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/sale/graph/summary
2025-04-09 00:17:53.425 INFO  [http-nio-11040-exec-1] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDEyNTQ3MywiZXhwIjoxNzQ0MTI2MDczLCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.HZDSowJRg2molQpL9XFQtZeyIIfwOwWKc68hxImvip0
2025-04-09 00:17:53.425 INFO  [http-nio-11040-exec-1] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/sale/graph/summary
2025-04-09 00:17:53.427 INFO  [http-nio-11040-exec-10] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-09 00:17:53.427 INFO  [http-nio-11040-exec-7] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-09 00:17:53.427 INFO  [http-nio-11040-exec-5] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-09 00:17:53.427 INFO  [http-nio-11040-exec-8] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-09 00:17:53.427 INFO  [http-nio-11040-exec-9] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-09 00:17:53.427 INFO  [http-nio-11040-exec-1] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-09 00:17:53.428 DEBUG [http-nio-11040-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 1 msec}
2025-04-09 00:17:53.428 DEBUG [http-nio-11040-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
6. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 1 msec}
2025-04-09 00:17:53.428 DEBUG [http-nio-11040-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
4. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 1 msec}
2025-04-09 00:17:53.429 INFO  [http-nio-11040-exec-1] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-09 00:17:53.429 DEBUG [http-nio-11040-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
5. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 1 msec}
2025-04-09 00:17:53.429 INFO  [http-nio-11040-exec-10] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-09 00:17:53.429 INFO  [http-nio-11040-exec-9] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-09 00:17:53.429 DEBUG [http-nio-11040-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
3. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 2 msec}
2025-04-09 00:17:53.429 INFO  [http-nio-11040-exec-8] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-09 00:17:53.429 INFO  [http-nio-11040-exec-5] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-09 00:17:53.429 INFO  [http-nio-11040-exec-1] [com.momo.api.SaleController] - summary: CommonVO(provider=null, date=null, year=null, month=null, day=null, selectType=null, range=null, dateType=null, prevFromYmd=null, prevToYmd=null, currFromYmd=null, currToYmd=null, fromYmd=2024-10-01, toYmd=2025-04-01, fromYm=null, toYm=null, prevDate=null, currDate=null)
2025-04-09 00:17:53.430 DEBUG [http-nio-11040-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
2. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 3 msec}
2025-04-09 00:17:53.430 INFO  [http-nio-11040-exec-7] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-09 00:17:53.432 DEBUG [http-nio-11040-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
3. with recursive istm_range as (
            select 0 as i
            union all
            select i+1
            from istm_range
            where i<5
        ), base as (
            select ct_istm
            from tb_sale
            where shop_id=2 and

                actv_dt between '2025-04-01' and '2025-04-30'
        ), final as (
            select i as istm,
                   IFNULL(count(base.ct_istm),0) as cnt
            from istm_range
                     left outer join base on base.ct_istm=istm_range.i
            group by i
            order by istm desc
        )

        select json_arrayagg(istm) as type,
               json_arrayagg(cnt) as cnt,
               json_arrayagg(IF((
                      select IFNULL(count(ct_istm), 0)
                      from base
                  ) = 0 or cnt = 0, 0, TRUNCATE((cnt/(
                   select IFNULL(count(ct_istm), 0)
                   from base
               )) * 100, 1))) as per
        from final
 {executed in 1 msec}
2025-04-09 00:17:53.432 DEBUG [http-nio-11040-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. with recursive group_generation as (
            select 0 as g
            union all
            select g+1
            from group_generation
            where g < 8
        ), group_weekday as (
            select 0 as g
            union all
            select g+1
            from group_weekday
            where g < 6
        ),  sale as (
            select weekday(actv_dt) as days,
                   device_id,
                   cust_cd,
                   sale_id
            from tb_sale
            where shop_id=2 and

                device_id is not null and
                actv_dt between '2025-04-01' and '2025-04-30'
        ), sale_gene as (
            select sale_id,
                   (
                       case
                           when length(cust_cd) = 6 then floor((year(curdate()) - concat((
                                 case
                                     when substring(cust_cd, 1,2) > '44' then '19'
                                     when substring(cust_cd, 1,2) <= '44' then '20'
                                     end
                                 ),substring(cust_cd,1,2))) / 10)
                           when length(cust_cd) != 6 then null
                           end
                       ) as generation
            from sale
        ), generation as (
            select g,
                   device_id
            from group_generation g
                     left outer join sale_gene sg on g.g=sg.generation
                     left outer join sale s on s.sale_id=sg.sale_id
        ), weekdays as (
            select g,
                   device_id
            from group_weekday w
                     left outer join sale s on s.days=w.g
        )

        select IFNULL(count(device_id),0) as avg
        from generation
        group by g
 {executed in 1 msec}
2025-04-09 00:17:53.432 DEBUG [http-nio-11040-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
5. with base as (select device_id,
                             (SELECT device_nm
                              FROM tb_device
                              WHERE tb_device.device_id = sl.device_id)      as device,
                             sd_id,
                             (SELECT sd_nm
                              FROM tb_second_device
                              WHERE tb_second_device.sd_id = sl.sd_id)       as sec_device,
                             ct_actv_plan,
                             (SELECT ct_plan_nm
                              FROM tb_ct_plan
                              WHERE tb_ct_plan.ct_plan_id = sl.ct_actv_plan) as actv_plan
                      from tb_sale sl
                      where shop_id = 2 and

                        actv_dt between '2025-04-01' and '2025-04-30'),
             device as (SELECT device                   as name,
                               count(device_id) as count
                        from base
                        where device_id is not null
                        group by device),
             sec_device as (SELECT sec_device                   as name,
                                   count(sec_device) as count
                            from base
                            where sd_id is not null
                            group by sec_device),
             actv_plan as (SELECT actv_plan                   as name,
                                  count(actv_plan) as count
                           from base
                           where ct_actv_plan is not null
                           group by actv_plan),
             total as (select count('device') as cnt
                       from base
                       where 'device' is not null
             )

        select name,
               count,
               (
                   IF((select cnt
                       from total) = 0 or count = 0, 0, TRUNCATE(
                              (count / (
                                  select cnt
                                  from total
                              )
                                  ) * 100, 1))
                   ) as per
        from device
        order by per desc
        limit 5
 {executed in 2 msec}
2025-04-09 00:17:53.432 DEBUG [http-nio-11040-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
4. set @limit_cond := (
               case 'd'
                   when 'h' then '2000-01-24'
                   when 'd' then '2025-04-08'
                   when 'w' then '2025-04-08'
                   when 'm' then date_sub('2025-04-08', interval 1 month)
               end
        );

        with recursive org_date_table as (
            select (
                       case
                           when 'd' = 'h' then '2000-01-01'
                           when 'd' != 'h' then '2025-04-02'
                           end
                       ) as it
            union all
            select (
                       case 'd'
                           when 'h' then date_add(it, interval 1 day)
                           when 'd' then date_add(it, interval 1 day)
                           when 'w' then date_add(it, interval 1 week)
                           when 'm' then date_add(it, interval 1 month)
                           end
                       ) as it
            from org_date_table
            where it < @limit_cond
        ), date_table as (
            select
                year(it) as _year,
                (
                    case 'd'
                        when 'h' then day(it)
                        when 'd' then it
                        when 'w' then week(it)
                        when 'm' then month(it)
                        end
                    ) as dt
            from org_date_table
        ),  date_sale as (
            select year(actv_dt) _year,
                   month(actv_dt) as m,
                   week(actv_dt) as w,
                   actv_dt as d,
                   hour(regi_dt) as h,
                   tb_sale.*
            from tb_sale
            where shop_id=2 and

                actv_dt between '2025-04-02' and (
                    case
                        when 'd' = 'h' then '2025-04-02'
                        when 'd' != 'h' then '2025-04-08'
                        end
                    )
        ), final as (
            select count(device_id) as cnt
            from date_table dd
                     left outer join date_sale ds on dd._year=ds._year and
                                                     d = dt
            group by dd._year, dd.dt
        )

        select
            (
                select json_arrayagg(cnt)
                from final
            ) as value,
            (
                select json_arrayagg(date_format(it, '%Y-%m-%d'))
                from org_date_table
            ) as date
 {executed in 1 msec}
2025-04-09 00:17:53.437 DEBUG [http-nio-11040-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
2. set @limit_cond := (
               case 'd'
                   when 'h' then '2000-01-24'
                   when 'd' then '2025-04-09'
                   when 'w' then '2025-04-09'
                   when 'm' then date_sub('2025-04-09', interval 1 month)
               end
        );

        with recursive org_date_table as (
            select (
                       case
                           when 'd' = 'h' then '2000-01-01'
                           when 'd' != 'h' then '2025-01-09'
                           end
                       ) as it
            union all
            select (
                       case 'd'
                           when 'h' then date_add(it, interval 1 day)
                           when 'd' then date_add(it, interval 1 day)
                           when 'w' then date_add(it, interval 1 week)
                           when 'm' then date_add(it, interval 1 month)
                           end
                       ) as it
            from org_date_table
            where it < @limit_cond
        ), date_table as (
            select
                year(it) as _year,
                (
                    case 'd'
                        when 'h' then day(it)
                        when 'd' then it
                        when 'w' then week(it)
                        when 'm' then month(it)
                        end
                    ) as dt
            from org_date_table
        ),  date_sale as (
            select year(actv_dt) _year,
                   month(actv_dt) as m,
                   week(actv_dt) as w,
                   actv_dt as d,
                   hour(regi_dt) as h,
                   tb_sale.*
            from tb_sale
            where shop_id=2 and

                actv_dt between '2025-01-09' and (
                    case
                        when 'd' = 'h' then '2025-01-09'
                        when 'd' != 'h' then '2025-04-09'
                        end
                    )
        ), final as (
            select count(device_id) as cnt
            from date_table dd
                     left outer join date_sale ds on dd._year=ds._year and
                                                     d = dt
            group by dd._year, dd.dt
        )

        select
            (
                select json_arrayagg(cnt)
                from final
            ) as value,
            (
                select json_arrayagg(date_format(it, '%Y-%m-%d'))
                from org_date_table
            ) as date
 {executed in 5 msec}
2025-04-09 00:17:53.444 INFO  [http-nio-11040-exec-2] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/notif/count/unread
2025-04-09 00:17:53.444 INFO  [http-nio-11040-exec-2] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDEyNTQ3MywiZXhwIjoxNzQ0MTI2MDczLCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.HZDSowJRg2molQpL9XFQtZeyIIfwOwWKc68hxImvip0
2025-04-09 00:17:53.444 INFO  [http-nio-11040-exec-2] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/notif/count/unread
2025-04-09 00:17:53.444 INFO  [http-nio-11040-exec-4] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/sale/graph/ct/d
2025-04-09 00:17:53.444 INFO  [http-nio-11040-exec-4] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDEyNTQ3MywiZXhwIjoxNzQ0MTI2MDczLCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.HZDSowJRg2molQpL9XFQtZeyIIfwOwWKc68hxImvip0
2025-04-09 00:17:53.444 INFO  [http-nio-11040-exec-3] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/sale/graph/ct/select/0
2025-04-09 00:17:53.444 INFO  [http-nio-11040-exec-6] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/sale/graph/ct/d
2025-04-09 00:17:53.444 INFO  [http-nio-11040-exec-4] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/sale/graph/ct/d
2025-04-09 00:17:53.444 INFO  [http-nio-11040-exec-6] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDEyNTQ3MywiZXhwIjoxNzQ0MTI2MDczLCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.HZDSowJRg2molQpL9XFQtZeyIIfwOwWKc68hxImvip0
2025-04-09 00:17:53.444 INFO  [http-nio-11040-exec-6] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/sale/graph/ct/d
2025-04-09 00:17:53.444 INFO  [http-nio-11040-exec-3] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDEyNTQ3MywiZXhwIjoxNzQ0MTI2MDczLCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.HZDSowJRg2molQpL9XFQtZeyIIfwOwWKc68hxImvip0
2025-04-09 00:17:53.444 INFO  [http-nio-11040-exec-3] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/sale/graph/ct/select/0
2025-04-09 00:17:53.445 INFO  [http-nio-11040-exec-5] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/sale/graph/stat/select/0
2025-04-09 00:17:53.445 INFO  [http-nio-11040-exec-5] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDEyNTQ3MywiZXhwIjoxNzQ0MTI2MDczLCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.HZDSowJRg2molQpL9XFQtZeyIIfwOwWKc68hxImvip0
2025-04-09 00:17:53.445 INFO  [http-nio-11040-exec-5] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/sale/graph/stat/select/0
2025-04-09 00:17:53.446 INFO  [http-nio-11040-exec-3] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-09 00:17:53.446 INFO  [http-nio-11040-exec-2] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-09 00:17:53.446 INFO  [http-nio-11040-exec-4] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-09 00:17:53.446 INFO  [http-nio-11040-exec-6] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-09 00:17:53.446 INFO  [http-nio-11040-exec-5] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-09 00:17:53.448 DEBUG [http-nio-11040-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 2 msec}
2025-04-09 00:17:53.448 DEBUG [http-nio-11040-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
2. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 1 msec}
2025-04-09 00:17:53.448 DEBUG [http-nio-11040-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
3. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 2 msec}
2025-04-09 00:17:53.448 INFO  [http-nio-11040-exec-2] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-09 00:17:53.448 INFO  [http-nio-11040-exec-6] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-09 00:17:53.448 DEBUG [http-nio-11040-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
5. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 2 msec}
2025-04-09 00:17:53.448 INFO  [http-nio-11040-exec-3] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-09 00:17:53.448 DEBUG [http-nio-11040-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
4. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 2 msec}
2025-04-09 00:17:53.448 INFO  [http-nio-11040-exec-5] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-09 00:17:53.448 INFO  [http-nio-11040-exec-4] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-09 00:17:53.449 INFO  [http-nio-11040-exec-2] [c.momo.common.util.SecurityContextUtil] - principal: UserDetailsImpl(username=km1104rs, password=$2a$10$uXShhwl6ULOkbJe477uDWOfdiUUcu6lOSF/Dhj9xP3U1nUn/gXkc6, authorities=[ROLE_NONE])
2025-04-09 00:17:53.450 DEBUG [http-nio-11040-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
6. #         월별 날짜 구하기
        with recursive month_range as (
            select '2024-10-01' as d
            union all
            select date_add(d, interval 1 month) as d
            from month_range
            where date_add(d, interval 1 month) < '2025-04-01'
        ), months as(
            select month(d) as m
            from month_range
        ), filtered_sale as ( # 판매일보 초벌
            select month(actv_dt) as actv_month,
                   device_id,
                   internet_plan,
                   tv_plan,
                    exsvc_id,
                   total_cms,
                   wt_cms,
                   sale_id,
                   sd_id,
                    shop_id
            from tb_sale
            where shop_id=2 and

                actv_dt between '2024-10-01' and date_add('2025-04-01', interval 1 month)
        ), ct_graph as ( # 무선 그래프 데이터
            SELECT m,
                   count(device_id) as cnt
            FROM months
                     LEFT OUTER JOIN filtered_sale on actv_month = m and
                                                      device_id is not null
            group by m
        ), internet_graph as ( # 인터넷 그래프 데이터
            SELECT m,
                   count(internet_plan) as cnt
            FROM months
                     LEFT OUTER JOIN filtered_sale on actv_month = m  and
                                                      internet_plan is not null
            group by m
        ), tv_graph as ( # TV 그래프 데이터
            SELECT m,
                   count(tv_plan) as cnt
            FROM months
                     LEFT OUTER JOIN filtered_sale on actv_month = m  and
                                                      tv_plan is not null
            group by m
        ), card as ( # 카드 데이터
            SELECT m,
                   (
                    select count(*)
                    from tb_sale_card sc
                    left outer join filtered_sale fs on fs.shop_id = sc.shop_id and
                                                        fs.sale_id = sc.sale_id
                   )  as cnt
            FROM months
                     LEFT OUTER JOIN filtered_sale on actv_month = m
            group by m
        ), exsvc as ( # 부가서비스 데이터
            SELECT m,
                   count(exsvc_id) as cnt
            FROM months
                     LEFT OUTER JOIN filtered_sale on actv_month = m  and
                                                      exsvc_id is not null
            group by m
        ), tc_graph as ( # 총 이익 그래프 데이터
            SELECT m,
                   IFNULL(sum(total_cms), 0) as cnt
            FROM months
                     LEFT OUTER JOIN filtered_sale on actv_month = m
            group by m
        ), avg_margin_graph as ( # 개인 평균 마진 그래프 데이터
            SELECT m,
                   IFNULL(avg(total_cms), 0) as cnt
            FROM months
                     LEFT OUTER JOIN filtered_sale on actv_month = m and
                                                      device_id is not null
            group by m
        ), ud_graph as ( # 중고 개통 그래프 데이터
            SELECT m,
                   count(ud_id) as cnt
            FROM months
                     LEFT OUTER JOIN filtered_sale on actv_month = m
                     LEFT OUTER JOIN tb_sale_used_device sud on sud.sale_id=filtered_sale.sale_id
            group by m
        ), sec_graph as ( # 세컨 그래프 데이터
            SELECT m,
                   count(sd_id) as cnt
            FROM months
                     LEFT OUTER JOIN filtered_sale on actv_month = m and
                                                      sd_id != 0
            group by m
        ), diff_ct as (
            select
                (
                    select cnt
                    from ct_graph
                    limit 4, 1
                ) as prv,
                (
                    select cnt
                    from ct_graph
                    limit 5,1
                ) as curr
            from dual
        ), diff_internet as (
            select
                (
                    select cnt
                    from internet_graph
                    limit 4,1
                ) as prv,
                (
                    select cnt
                    from internet_graph
                    limit 5,1
                ) as curr
            from dual
        ), diff_tv as (
            select
                (
                    select cnt
                    from tv_graph
                    limit 4,1
                ) as prv,
                (
                    select cnt
                    from tv_graph
                    limit 5,1
                ) as curr
            from dual
        ), diff_card as (
            select
                (
                    select cnt
                    from card
                    limit 4,1
                ) as prv,
                (
                    select cnt
                    from card
                    limit 5,1
                ) as curr
            from dual
        ), diff_exsvc as (
            select
                (
                    select cnt
                    from exsvc
                    limit 4,1
                ) as prv,
                (
                    select cnt
                    from exsvc
                    limit 5,1
                ) as curr
            from dual
        ), diff_tc as (
            select
                (
                    select cnt
                    from tc_graph
                    limit 4,1
                ) as prv,
                (
                    select cnt
                    from tc_graph
                    limit 5,1
                ) as curr
            from dual
        ) , diff_margin as (
            select
                (
                    select cnt
                    from avg_margin_graph
                    limit 4,1
                ) as prv,
                (
                    select cnt
                    from avg_margin_graph
                    limit 5,1
                ) as curr
            from dual
        ), diff_ud as (
            select
                (
                    select cnt
                    from ud_graph
                    limit 4,1
                ) as prv,
                (
                    select cnt
                    from ud_graph
                    limit 5,1
                ) as curr
            from dual
        ) , diff_sec as (
            select
                (
                    select cnt
                    from sec_graph
                    limit 4,1
                ) as prv,
                (
                    select cnt
                    from sec_graph
                    limit 5,1
                ) as curr
            from dual
        ), final as (
            select
                curr,
                prv,
                (
                    select json_arrayagg(cnt)
                    from ct_graph
                ) as list
            from diff_ct
            union all
            select
                curr,
                prv,
                (
                    select json_arrayagg(cnt)
                    from internet_graph
                ) as list
            from diff_internet
            union all
            select
                curr,
                prv,
                (
                    select json_arrayagg(cnt)
                    from tv_graph
                ) as list
            from diff_tv
             union all
            select
                curr,
                prv,
                (
                    select json_arrayagg(cnt)
                    from card
                ) as list
            from diff_card
             union all
            select
                curr,
                prv,
                (
                    select json_arrayagg(cnt)
                    from exsvc
                ) as list
            from diff_exsvc
            union all
            select
                curr,
                prv,
                (
                    select json_arrayagg(cnt)
                    from tc_graph
                ) as list
            from diff_tc
            union all
            select
                curr,
                prv,
                (
                    select json_arrayagg(cnt)
                    from avg_margin_graph
                ) as list
            from diff_margin
            union all
            select
                curr,
                prv,
                (
                    select json_arrayagg(cnt)
                    from ud_graph
                ) as list
            from diff_ud
            union all
            select
                curr,
                prv,
                (
                    select json_arrayagg(cnt)
                    from sec_graph
                ) as list
            from diff_sec
        )

        select FLOOR(curr) as value,
               (
                   CASE
                       WHEN curr = 0 and prv = 0 THEN 0
                       WHEN prv != 0 and curr = 0 THEN -100
                       WHEN prv = 0 and curr != 0 THEN 100
                       WHEN curr != 0 and prv != 0 THEN TRUNCATE(((curr/prv)-1)*100, 1)
                       END
                   ) as per,
               list
        from final
 {executed in 17 msec}
2025-04-09 00:17:53.452 DEBUG [http-nio-11040-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
5. with base as (select device_id,
                             (SELECT device_nm
                              FROM tb_device
                              WHERE tb_device.device_id = sl.device_id)      as device,
                             sd_id,
                             (SELECT sd_nm
                              FROM tb_second_device
                              WHERE tb_second_device.sd_id = sl.sd_id)       as sec_device,
                             ct_actv_plan,
                             (SELECT ct_plan_nm
                              FROM tb_ct_plan
                              WHERE tb_ct_plan.ct_plan_id = sl.ct_actv_plan) as actv_plan
                      from tb_sale sl
                      where shop_id = 2 and

                                seller_id='km1104rs' and

                        actv_dt between '2025-04-01' and '2025-04-30'),
             device as (SELECT device                   as name,
                               count(device_id) as count
                        from base
                        where device_id is not null
                        group by device),
             sec_device as (SELECT sec_device                   as name,
                                   count(sec_device) as count
                            from base
                            where sd_id is not null
                            group by sec_device),
             actv_plan as (SELECT actv_plan                   as name,
                                  count(actv_plan) as count
                           from base
                           where ct_actv_plan is not null
                           group by actv_plan),
             total as (select count('device') as cnt
                       from base
                       where 'device' is not null
             )

        select name,
               count,
               (
                   IF((select cnt
                       from total) = 0 or count = 0, 0, TRUNCATE(
                              (count / (
                                  select cnt
                                  from total
                              )
                                  ) * 100, 1))
                   ) as per
        from device
        order by per desc
        limit 5
 {executed in 1 msec}
2025-04-09 00:17:53.452 DEBUG [http-nio-11040-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
2. set @limit_cond := (
               case 'd'
                   when 'h' then '2000-01-24'
                   when 'd' then '2025-04-09'
                   when 'w' then '2025-04-09'
                   when 'm' then date_sub('2025-04-09', interval 1 month)
               end
        );

        with recursive org_date_table as (
            select (
                       case
                           when 'd' = 'h' then '2000-01-01'
                           when 'd' != 'h' then '2025-01-09'
                           end
                       ) as it
            union all
            select (
                       case 'd'
                           when 'h' then date_add(it, interval 1 day)
                           when 'd' then date_add(it, interval 1 day)
                           when 'w' then date_add(it, interval 1 week)
                           when 'm' then date_add(it, interval 1 month)
                           end
                       ) as it
            from org_date_table
            where it < @limit_cond
        ), date_table as (
            select
                year(it) as _year,
                (
                    case 'd'
                        when 'h' then day(it)
                        when 'd' then it
                        when 'w' then week(it)
                        when 'm' then month(it)
                        end
                    ) as dt
            from org_date_table
        ),  date_sale as (
            select year(actv_dt) _year,
                   month(actv_dt) as m,
                   week(actv_dt) as w,
                   actv_dt as d,
                   hour(regi_dt) as h,
                   tb_sale.*
            from tb_sale
            where shop_id=2 and

                    seller_id='km1104rs' and

                actv_dt between '2025-01-09' and (
                    case
                        when 'd' = 'h' then '2025-01-09'
                        when 'd' != 'h' then '2025-04-09'
                        end
                    )
        ), final as (
            select count(device_id) as cnt
            from date_table dd
                     left outer join date_sale ds on dd._year=ds._year and
                                                     d = dt
            group by dd._year, dd.dt
        )

        select
            (
                select json_arrayagg(cnt)
                from final
            ) as value,
            (
                select json_arrayagg(date_format(it, '%Y-%m-%d'))
                from org_date_table
            ) as date
 {executed in 2 msec}
2025-04-09 00:17:53.452 DEBUG [http-nio-11040-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
3. with recursive group_generation as (
            select 0 as g
            union all
            select g+1
            from group_generation
            where g < 8
        ), group_weekday as (
            select 0 as g
            union all
            select g+1
            from group_weekday
            where g < 6
        ),  sale as (
            select weekday(actv_dt) as days,
                   device_id,
                   cust_cd,
                   sale_id
            from tb_sale
            where shop_id=2 and

                      seller_id='km1104rs' and

                device_id is not null and
                actv_dt between '2025-04-01' and '2025-04-30'
        ), sale_gene as (
            select sale_id,
                   (
                       case
                           when length(cust_cd) = 6 then floor((year(curdate()) - concat((
                                 case
                                     when substring(cust_cd, 1,2) > '44' then '19'
                                     when substring(cust_cd, 1,2) <= '44' then '20'
                                     end
                                 ),substring(cust_cd,1,2))) / 10)
                           when length(cust_cd) != 6 then null
                           end
                       ) as generation
            from sale
        ), generation as (
            select g,
                   device_id
            from group_generation g
                     left outer join sale_gene sg on g.g=sg.generation
                     left outer join sale s on s.sale_id=sg.sale_id
        ), weekdays as (
            select g,
                   device_id
            from group_weekday w
                     left outer join sale s on s.days=w.g
        )

        select IFNULL(count(device_id),0) as avg
        from generation
        group by g
 {executed in 2 msec}
2025-04-09 00:17:53.452 DEBUG [http-nio-11040-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
4. set @limit_cond := (
               case 'd'
                   when 'h' then '2000-01-24'
                   when 'd' then '2025-04-08'
                   when 'w' then '2025-04-08'
                   when 'm' then date_sub('2025-04-08', interval 1 month)
               end
        );

        with recursive org_date_table as (
            select (
                       case
                           when 'd' = 'h' then '2000-01-01'
                           when 'd' != 'h' then '2025-04-02'
                           end
                       ) as it
            union all
            select (
                       case 'd'
                           when 'h' then date_add(it, interval 1 day)
                           when 'd' then date_add(it, interval 1 day)
                           when 'w' then date_add(it, interval 1 week)
                           when 'm' then date_add(it, interval 1 month)
                           end
                       ) as it
            from org_date_table
            where it < @limit_cond
        ), date_table as (
            select
                year(it) as _year,
                (
                    case 'd'
                        when 'h' then day(it)
                        when 'd' then it
                        when 'w' then week(it)
                        when 'm' then month(it)
                        end
                    ) as dt
            from org_date_table
        ),  date_sale as (
            select year(actv_dt) _year,
                   month(actv_dt) as m,
                   week(actv_dt) as w,
                   actv_dt as d,
                   hour(regi_dt) as h,
                   tb_sale.*
            from tb_sale
            where shop_id=2 and

                    seller_id='km1104rs' and

                actv_dt between '2025-04-02' and (
                    case
                        when 'd' = 'h' then '2025-04-02'
                        when 'd' != 'h' then '2025-04-08'
                        end
                    )
        ), final as (
            select count(device_id) as cnt
            from date_table dd
                     left outer join date_sale ds on dd._year=ds._year and
                                                     d = dt
            group by dd._year, dd.dt
        )

        select
            (
                select json_arrayagg(cnt)
                from final
            ) as value,
            (
                select json_arrayagg(date_format(it, '%Y-%m-%d'))
                from org_date_table
            ) as date
 {executed in 2 msec}
2025-04-09 00:17:53.454 DEBUG [http-nio-11040-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT count(*)
        FROM tb_notification
        WHERE receiver_id = 'km1104rs'
          AND read_st = FALSE
 {executed in 4 msec}
2025-04-09 00:17:53.459 INFO  [http-nio-11040-exec-9] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/sale/graph/ratio/select/0
2025-04-09 00:17:53.459 INFO  [http-nio-11040-exec-9] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDEyNTQ3MywiZXhwIjoxNzQ0MTI2MDczLCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.HZDSowJRg2molQpL9XFQtZeyIIfwOwWKc68hxImvip0
2025-04-09 00:17:53.459 INFO  [http-nio-11040-exec-9] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/sale/graph/ratio/select/0
2025-04-09 00:17:53.460 INFO  [http-nio-11040-exec-9] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-09 00:17:53.461 INFO  [http-nio-11040-exec-10] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/sale/graph/summary
2025-04-09 00:17:53.461 INFO  [http-nio-11040-exec-10] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDEyNTQ3MywiZXhwIjoxNzQ0MTI2MDczLCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.HZDSowJRg2molQpL9XFQtZeyIIfwOwWKc68hxImvip0
2025-04-09 00:17:53.461 INFO  [http-nio-11040-exec-10] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/sale/graph/summary
2025-04-09 00:17:53.461 INFO  [http-nio-11040-exec-10] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-09 00:17:53.462 DEBUG [http-nio-11040-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
4. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 1 msec}
2025-04-09 00:17:53.462 INFO  [http-nio-11040-exec-9] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-09 00:17:53.462 DEBUG [http-nio-11040-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 1 msec}
2025-04-09 00:17:53.462 INFO  [http-nio-11040-exec-10] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-09 00:17:53.463 INFO  [http-nio-11040-exec-10] [com.momo.api.SaleController] - summary: CommonVO(provider=null, date=null, year=null, month=null, day=null, selectType=null, range=null, dateType=null, prevFromYmd=null, prevToYmd=null, currFromYmd=null, currToYmd=null, fromYmd=2024-10-01, toYmd=2025-04-01, fromYm=null, toYm=null, prevDate=null, currDate=null)
2025-04-09 00:17:53.464 DEBUG [http-nio-11040-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
4. with recursive istm_range as (
            select 0 as i
            union all
            select i+1
            from istm_range
            where i<5
        ), base as (
            select ct_istm
            from tb_sale
            where shop_id=2 and

                        seller_id='km1104rs' and

                actv_dt between '2025-04-01' and '2025-04-30'
        ), final as (
            select i as istm,
                   IFNULL(count(base.ct_istm),0) as cnt
            from istm_range
                     left outer join base on base.ct_istm=istm_range.i
            group by i
            order by istm desc
        )

        select json_arrayagg(istm) as type,
               json_arrayagg(cnt) as cnt,
               json_arrayagg(IF((
                      select IFNULL(count(ct_istm), 0)
                      from base
                  ) = 0 or cnt = 0, 0, TRUNCATE((cnt/(
                   select IFNULL(count(ct_istm), 0)
                   from base
               )) * 100, 1))) as per
        from final
 {executed in 1 msec}
2025-04-09 00:17:53.479 DEBUG [http-nio-11040-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. #         월별 날짜 구하기
        with recursive month_range as (
            select '2024-10-01' as d
            union all
            select date_add(d, interval 1 month) as d
            from month_range
            where date_add(d, interval 1 month) < '2025-04-01'
        ), months as(
            select month(d) as m
            from month_range
        ), filtered_sale as ( # 판매일보 초벌
            select month(actv_dt) as actv_month,
                   device_id,
                   internet_plan,
                   tv_plan,
                    exsvc_id,
                   total_cms,
                   wt_cms,
                   sale_id,
                   sd_id,
                    shop_id
            from tb_sale
            where shop_id=2 and

                    seller_id='km1104rs' and

                actv_dt between '2024-10-01' and date_add('2025-04-01', interval 1 month)
        ), ct_graph as ( # 무선 그래프 데이터
            SELECT m,
                   count(device_id) as cnt
            FROM months
                     LEFT OUTER JOIN filtered_sale on actv_month = m and
                                                      device_id is not null
            group by m
        ), internet_graph as ( # 인터넷 그래프 데이터
            SELECT m,
                   count(internet_plan) as cnt
            FROM months
                     LEFT OUTER JOIN filtered_sale on actv_month = m  and
                                                      internet_plan is not null
            group by m
        ), tv_graph as ( # TV 그래프 데이터
            SELECT m,
                   count(tv_plan) as cnt
            FROM months
                     LEFT OUTER JOIN filtered_sale on actv_month = m  and
                                                      tv_plan is not null
            group by m
        ), card as ( # 카드 데이터
            SELECT m,
                   (
                    select count(*)
                    from tb_sale_card sc
                    left outer join filtered_sale fs on fs.shop_id = sc.shop_id and
                                                        fs.sale_id = sc.sale_id
                   )  as cnt
            FROM months
                     LEFT OUTER JOIN filtered_sale on actv_month = m
            group by m
        ), exsvc as ( # 부가서비스 데이터
            SELECT m,
                   count(exsvc_id) as cnt
            FROM months
                     LEFT OUTER JOIN filtered_sale on actv_month = m  and
                                                      exsvc_id is not null
            group by m
        ), tc_graph as ( # 총 이익 그래프 데이터
            SELECT m,
                   IFNULL(sum(total_cms), 0) as cnt
            FROM months
                     LEFT OUTER JOIN filtered_sale on actv_month = m
            group by m
        ), avg_margin_graph as ( # 개인 평균 마진 그래프 데이터
            SELECT m,
                   IFNULL(avg(total_cms), 0) as cnt
            FROM months
                     LEFT OUTER JOIN filtered_sale on actv_month = m and
                                                      device_id is not null
            group by m
        ), ud_graph as ( # 중고 개통 그래프 데이터
            SELECT m,
                   count(ud_id) as cnt
            FROM months
                     LEFT OUTER JOIN filtered_sale on actv_month = m
                     LEFT OUTER JOIN tb_sale_used_device sud on sud.sale_id=filtered_sale.sale_id
            group by m
        ), sec_graph as ( # 세컨 그래프 데이터
            SELECT m,
                   count(sd_id) as cnt
            FROM months
                     LEFT OUTER JOIN filtered_sale on actv_month = m and
                                                      sd_id != 0
            group by m
        ), diff_ct as (
            select
                (
                    select cnt
                    from ct_graph
                    limit 4, 1
                ) as prv,
                (
                    select cnt
                    from ct_graph
                    limit 5,1
                ) as curr
            from dual
        ), diff_internet as (
            select
                (
                    select cnt
                    from internet_graph
                    limit 4,1
                ) as prv,
                (
                    select cnt
                    from internet_graph
                    limit 5,1
                ) as curr
            from dual
        ), diff_tv as (
            select
                (
                    select cnt
                    from tv_graph
                    limit 4,1
                ) as prv,
                (
                    select cnt
                    from tv_graph
                    limit 5,1
                ) as curr
            from dual
        ), diff_card as (
            select
                (
                    select cnt
                    from card
                    limit 4,1
                ) as prv,
                (
                    select cnt
                    from card
                    limit 5,1
                ) as curr
            from dual
        ), diff_exsvc as (
            select
                (
                    select cnt
                    from exsvc
                    limit 4,1
                ) as prv,
                (
                    select cnt
                    from exsvc
                    limit 5,1
                ) as curr
            from dual
        ), diff_tc as (
            select
                (
                    select cnt
                    from tc_graph
                    limit 4,1
                ) as prv,
                (
                    select cnt
                    from tc_graph
                    limit 5,1
                ) as curr
            from dual
        ) , diff_margin as (
            select
                (
                    select cnt
                    from avg_margin_graph
                    limit 4,1
                ) as prv,
                (
                    select cnt
                    from avg_margin_graph
                    limit 5,1
                ) as curr
            from dual
        ), diff_ud as (
            select
                (
                    select cnt
                    from ud_graph
                    limit 4,1
                ) as prv,
                (
                    select cnt
                    from ud_graph
                    limit 5,1
                ) as curr
            from dual
        ) , diff_sec as (
            select
                (
                    select cnt
                    from sec_graph
                    limit 4,1
                ) as prv,
                (
                    select cnt
                    from sec_graph
                    limit 5,1
                ) as curr
            from dual
        ), final as (
            select
                curr,
                prv,
                (
                    select json_arrayagg(cnt)
                    from ct_graph
                ) as list
            from diff_ct
            union all
            select
                curr,
                prv,
                (
                    select json_arrayagg(cnt)
                    from internet_graph
                ) as list
            from diff_internet
            union all
            select
                curr,
                prv,
                (
                    select json_arrayagg(cnt)
                    from tv_graph
                ) as list
            from diff_tv
             union all
            select
                curr,
                prv,
                (
                    select json_arrayagg(cnt)
                    from card
                ) as list
            from diff_card
             union all
            select
                curr,
                prv,
                (
                    select json_arrayagg(cnt)
                    from exsvc
                ) as list
            from diff_exsvc
            union all
            select
                curr,
                prv,
                (
                    select json_arrayagg(cnt)
                    from tc_graph
                ) as list
            from diff_tc
            union all
            select
                curr,
                prv,
                (
                    select json_arrayagg(cnt)
                    from avg_margin_graph
                ) as list
            from diff_margin
            union all
            select
                curr,
                prv,
                (
                    select json_arrayagg(cnt)
                    from ud_graph
                ) as list
            from diff_ud
            union all
            select
                curr,
                prv,
                (
                    select json_arrayagg(cnt)
                    from sec_graph
                ) as list
            from diff_sec
        )

        select FLOOR(curr) as value,
               (
                   CASE
                       WHEN curr = 0 and prv = 0 THEN 0
                       WHEN prv != 0 and curr = 0 THEN -100
                       WHEN prv = 0 and curr != 0 THEN 100
                       WHEN curr != 0 and prv != 0 THEN TRUNCATE(((curr/prv)-1)*100, 1)
                       END
                   ) as per,
               list
        from final
 {executed in 12 msec}
2025-04-09 00:17:53.490 INFO  [http-nio-11040-exec-8] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/sale/graph/ct/select/0
2025-04-09 00:17:53.490 INFO  [http-nio-11040-exec-8] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDEyNTQ3MywiZXhwIjoxNzQ0MTI2MDczLCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.HZDSowJRg2molQpL9XFQtZeyIIfwOwWKc68hxImvip0
2025-04-09 00:17:53.490 INFO  [http-nio-11040-exec-8] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/sale/graph/ct/select/0
2025-04-09 00:17:53.490 INFO  [http-nio-11040-exec-7] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/sale/graph/stat/select/0
2025-04-09 00:17:53.490 INFO  [http-nio-11040-exec-7] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDEyNTQ3MywiZXhwIjoxNzQ0MTI2MDczLCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.HZDSowJRg2molQpL9XFQtZeyIIfwOwWKc68hxImvip0
2025-04-09 00:17:53.490 INFO  [http-nio-11040-exec-7] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/sale/graph/stat/select/0
2025-04-09 00:17:53.490 INFO  [http-nio-11040-exec-1] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/sale/graph/ratio/select/0
2025-04-09 00:17:53.490 INFO  [http-nio-11040-exec-1] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDEyNTQ3MywiZXhwIjoxNzQ0MTI2MDczLCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.HZDSowJRg2molQpL9XFQtZeyIIfwOwWKc68hxImvip0
2025-04-09 00:17:53.491 INFO  [http-nio-11040-exec-1] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/sale/graph/ratio/select/0
2025-04-09 00:17:53.492 INFO  [http-nio-11040-exec-8] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-09 00:17:53.492 INFO  [http-nio-11040-exec-7] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-09 00:17:53.492 INFO  [http-nio-11040-exec-1] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-09 00:17:53.495 DEBUG [http-nio-11040-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
2. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 2 msec}
2025-04-09 00:17:53.495 DEBUG [http-nio-11040-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
6. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 2 msec}
2025-04-09 00:17:53.495 DEBUG [http-nio-11040-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
5. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 2 msec}
2025-04-09 00:17:53.496 INFO  [http-nio-11040-exec-7] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-09 00:17:53.496 INFO  [http-nio-11040-exec-1] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-09 00:17:53.496 INFO  [http-nio-11040-exec-8] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-09 00:17:53.499 DEBUG [http-nio-11040-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
6. with recursive istm_range as (
            select 0 as i
            union all
            select i+1
            from istm_range
            where i<5
        ), base as (
            select ct_istm
            from tb_sale
            where shop_id=2 and

                        seller_id='km1104rs' and

                actv_dt between '2025-04-01' and '2025-04-30'
        ), final as (
            select i as istm,
                   IFNULL(count(base.ct_istm),0) as cnt
            from istm_range
                     left outer join base on base.ct_istm=istm_range.i
            group by i
            order by istm desc
        )

        select json_arrayagg(istm) as type,
               json_arrayagg(cnt) as cnt,
               json_arrayagg(IF((
                      select IFNULL(count(ct_istm), 0)
                      from base
                  ) = 0 or cnt = 0, 0, TRUNCATE((cnt/(
                   select IFNULL(count(ct_istm), 0)
                   from base
               )) * 100, 1))) as per
        from final
 {executed in 1 msec}
2025-04-09 00:17:53.499 DEBUG [http-nio-11040-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
5. with recursive group_generation as (
            select 0 as g
            union all
            select g+1
            from group_generation
            where g < 8
        ), group_weekday as (
            select 0 as g
            union all
            select g+1
            from group_weekday
            where g < 6
        ),  sale as (
            select weekday(actv_dt) as days,
                   device_id,
                   cust_cd,
                   sale_id
            from tb_sale
            where shop_id=2 and

                      seller_id='km1104rs' and

                device_id is not null and
                actv_dt between '2025-04-01' and '2025-04-30'
        ), sale_gene as (
            select sale_id,
                   (
                       case
                           when length(cust_cd) = 6 then floor((year(curdate()) - concat((
                                 case
                                     when substring(cust_cd, 1,2) > '44' then '19'
                                     when substring(cust_cd, 1,2) <= '44' then '20'
                                     end
                                 ),substring(cust_cd,1,2))) / 10)
                           when length(cust_cd) != 6 then null
                           end
                       ) as generation
            from sale
        ), generation as (
            select g,
                   device_id
            from group_generation g
                     left outer join sale_gene sg on g.g=sg.generation
                     left outer join sale s on s.sale_id=sg.sale_id
        ), weekdays as (
            select g,
                   device_id
            from group_weekday w
                     left outer join sale s on s.days=w.g
        )

        select IFNULL(count(device_id),0) as avg
        from generation
        group by g
 {executed in 1 msec}
2025-04-09 00:17:53.499 DEBUG [http-nio-11040-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
2. with base as (select device_id,
                             (SELECT device_nm
                              FROM tb_device
                              WHERE tb_device.device_id = sl.device_id)      as device,
                             sd_id,
                             (SELECT sd_nm
                              FROM tb_second_device
                              WHERE tb_second_device.sd_id = sl.sd_id)       as sec_device,
                             ct_actv_plan,
                             (SELECT ct_plan_nm
                              FROM tb_ct_plan
                              WHERE tb_ct_plan.ct_plan_id = sl.ct_actv_plan) as actv_plan
                      from tb_sale sl
                      where shop_id = 2 and

                                seller_id='km1104rs' and

                        actv_dt between '2025-04-01' and '2025-04-30'),
             device as (SELECT device                   as name,
                               count(device_id) as count
                        from base
                        where device_id is not null
                        group by device),
             sec_device as (SELECT sec_device                   as name,
                                   count(sec_device) as count
                            from base
                            where sd_id is not null
                            group by sec_device),
             actv_plan as (SELECT actv_plan                   as name,
                                  count(actv_plan) as count
                           from base
                           where ct_actv_plan is not null
                           group by actv_plan),
             total as (select count('device') as cnt
                       from base
                       where 'device' is not null
             )

        select name,
               count,
               (
                   IF((select cnt
                       from total) = 0 or count = 0, 0, TRUNCATE(
                              (count / (
                                  select cnt
                                  from total
                              )
                                  ) * 100, 1))
                   ) as per
        from device
        order by per desc
        limit 5
 {executed in 1 msec}
2025-04-09 00:17:53.507 INFO  [http-nio-11040-exec-4] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/sale/graph/ratio/select/0
2025-04-09 00:17:53.508 INFO  [http-nio-11040-exec-4] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDEyNTQ3MywiZXhwIjoxNzQ0MTI2MDczLCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.HZDSowJRg2molQpL9XFQtZeyIIfwOwWKc68hxImvip0
2025-04-09 00:17:53.508 INFO  [http-nio-11040-exec-4] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/sale/graph/ratio/select/0
2025-04-09 00:17:53.507 INFO  [http-nio-11040-exec-5] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/sale/graph/ct/select/0
2025-04-09 00:17:53.508 INFO  [http-nio-11040-exec-5] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDEyNTQ3MywiZXhwIjoxNzQ0MTI2MDczLCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.HZDSowJRg2molQpL9XFQtZeyIIfwOwWKc68hxImvip0
2025-04-09 00:17:53.508 INFO  [http-nio-11040-exec-5] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/sale/graph/ct/select/0
2025-04-09 00:17:53.507 INFO  [http-nio-11040-exec-6] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/sale/graph/stat/select/0
2025-04-09 00:17:53.508 INFO  [http-nio-11040-exec-6] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDEyNTQ3MywiZXhwIjoxNzQ0MTI2MDczLCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.HZDSowJRg2molQpL9XFQtZeyIIfwOwWKc68hxImvip0
2025-04-09 00:17:53.508 INFO  [http-nio-11040-exec-6] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/sale/graph/stat/select/0
2025-04-09 00:17:53.510 INFO  [http-nio-11040-exec-4] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-09 00:17:53.510 INFO  [http-nio-11040-exec-5] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-09 00:17:53.510 INFO  [http-nio-11040-exec-6] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-09 00:17:53.511 DEBUG [http-nio-11040-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
5. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 1 msec}
2025-04-09 00:17:53.511 DEBUG [http-nio-11040-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
4. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 1 msec}
2025-04-09 00:17:53.511 DEBUG [http-nio-11040-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
2. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 1 msec}
2025-04-09 00:17:53.511 INFO  [http-nio-11040-exec-5] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-09 00:17:53.511 INFO  [http-nio-11040-exec-6] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-09 00:17:53.511 INFO  [http-nio-11040-exec-4] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-09 00:17:53.516 DEBUG [http-nio-11040-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
2. with base as (select device_id,
                             (SELECT device_nm
                              FROM tb_device
                              WHERE tb_device.device_id = sl.device_id)      as device,
                             sd_id,
                             (SELECT sd_nm
                              FROM tb_second_device
                              WHERE tb_second_device.sd_id = sl.sd_id)       as sec_device,
                             ct_actv_plan,
                             (SELECT ct_plan_nm
                              FROM tb_ct_plan
                              WHERE tb_ct_plan.ct_plan_id = sl.ct_actv_plan) as actv_plan
                      from tb_sale sl
                      where shop_id = 2 and

                                seller_id='km1104rs' and

                        actv_dt between '2025-04-01' and '2025-04-30'),
             device as (SELECT device                   as name,
                               count(device_id) as count
                        from base
                        where device_id is not null
                        group by device),
             sec_device as (SELECT sec_device                   as name,
                                   count(sec_device) as count
                            from base
                            where sd_id is not null
                            group by sec_device),
             actv_plan as (SELECT actv_plan                   as name,
                                  count(actv_plan) as count
                           from base
                           where ct_actv_plan is not null
                           group by actv_plan),
             total as (select count('device') as cnt
                       from base
                       where 'device' is not null
             )

        select name,
               count,
               (
                   IF((select cnt
                       from total) = 0 or count = 0, 0, TRUNCATE(
                              (count / (
                                  select cnt
                                  from total
                              )
                                  ) * 100, 1))
                   ) as per
        from device
        order by per desc
        limit 5
 {executed in 1 msec}
2025-04-09 00:17:53.516 DEBUG [http-nio-11040-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
5. with recursive group_generation as (
            select 0 as g
            union all
            select g+1
            from group_generation
            where g < 8
        ), group_weekday as (
            select 0 as g
            union all
            select g+1
            from group_weekday
            where g < 6
        ),  sale as (
            select weekday(actv_dt) as days,
                   device_id,
                   cust_cd,
                   sale_id
            from tb_sale
            where shop_id=2 and

                      seller_id='km1104rs' and

                device_id is not null and
                actv_dt between '2025-04-01' and '2025-04-30'
        ), sale_gene as (
            select sale_id,
                   (
                       case
                           when length(cust_cd) = 6 then floor((year(curdate()) - concat((
                                 case
                                     when substring(cust_cd, 1,2) > '44' then '19'
                                     when substring(cust_cd, 1,2) <= '44' then '20'
                                     end
                                 ),substring(cust_cd,1,2))) / 10)
                           when length(cust_cd) != 6 then null
                           end
                       ) as generation
            from sale
        ), generation as (
            select g,
                   device_id
            from group_generation g
                     left outer join sale_gene sg on g.g=sg.generation
                     left outer join sale s on s.sale_id=sg.sale_id
        ), weekdays as (
            select g,
                   device_id
            from group_weekday w
                     left outer join sale s on s.days=w.g
        )

        select IFNULL(count(device_id),0) as avg
        from generation
        group by g
 {executed in 1 msec}
2025-04-09 00:17:53.516 DEBUG [http-nio-11040-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
4. with recursive istm_range as (
            select 0 as i
            union all
            select i+1
            from istm_range
            where i<5
        ), base as (
            select ct_istm
            from tb_sale
            where shop_id=2 and

                        seller_id='km1104rs' and

                actv_dt between '2025-04-01' and '2025-04-30'
        ), final as (
            select i as istm,
                   IFNULL(count(base.ct_istm),0) as cnt
            from istm_range
                     left outer join base on base.ct_istm=istm_range.i
            group by i
            order by istm desc
        )

        select json_arrayagg(istm) as type,
               json_arrayagg(cnt) as cnt,
               json_arrayagg(IF((
                      select IFNULL(count(ct_istm), 0)
                      from base
                  ) = 0 or cnt = 0, 0, TRUNCATE((cnt/(
                   select IFNULL(count(ct_istm), 0)
                   from base
               )) * 100, 1))) as per
        from final
 {executed in 1 msec}
2025-04-09 00:17:56.701 INFO  [http-nio-11040-exec-3] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/sale/graph/stat/select/1
2025-04-09 00:17:56.701 INFO  [http-nio-11040-exec-3] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDEyNTQ3MywiZXhwIjoxNzQ0MTI2MDczLCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.HZDSowJRg2molQpL9XFQtZeyIIfwOwWKc68hxImvip0
2025-04-09 00:17:56.701 INFO  [http-nio-11040-exec-3] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/sale/graph/stat/select/1
2025-04-09 00:17:56.704 INFO  [http-nio-11040-exec-3] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-09 00:17:56.708 DEBUG [http-nio-11040-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
3. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 1 msec}
2025-04-09 00:17:56.708 INFO  [http-nio-11040-exec-3] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-09 00:17:56.715 DEBUG [http-nio-11040-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
3. with base as (select device_id,
                             (SELECT device_nm
                              FROM tb_device
                              WHERE tb_device.device_id = sl.device_id)      as device,
                             sd_id,
                             (SELECT sd_nm
                              FROM tb_second_device
                              WHERE tb_second_device.sd_id = sl.sd_id)       as sec_device,
                             ct_actv_plan,
                             (SELECT ct_plan_nm
                              FROM tb_ct_plan
                              WHERE tb_ct_plan.ct_plan_id = sl.ct_actv_plan) as actv_plan
                      from tb_sale sl
                      where shop_id = 2 and

                                seller_id='km1104rs' and

                        actv_dt between '2025-04-01' and '2025-04-30'),
             device as (SELECT device                   as name,
                               count(device_id) as count
                        from base
                        where device_id is not null
                        group by device),
             sec_device as (SELECT sec_device                   as name,
                                   count(sec_device) as count
                            from base
                            where sd_id is not null
                            group by sec_device),
             actv_plan as (SELECT actv_plan                   as name,
                                  count(actv_plan) as count
                           from base
                           where ct_actv_plan is not null
                           group by actv_plan),
             total as (select count('actv_plan') as cnt
                       from base
                       where 'actv_plan' is not null
             )

        select name,
               count,
               (
                   IF((select cnt
                       from total) = 0 or count = 0, 0, TRUNCATE(
                              (count / (
                                  select cnt
                                  from total
                              )
                                  ) * 100, 1))
                   ) as per
        from actv_plan
        order by per desc
        limit 5
 {executed in 3 msec}
2025-04-09 00:17:57.204 INFO  [http-nio-11040-exec-2] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/sale/graph/stat/select/0
2025-04-09 00:17:57.204 INFO  [http-nio-11040-exec-2] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDEyNTQ3MywiZXhwIjoxNzQ0MTI2MDczLCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.HZDSowJRg2molQpL9XFQtZeyIIfwOwWKc68hxImvip0
2025-04-09 00:17:57.204 INFO  [http-nio-11040-exec-2] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/sale/graph/stat/select/0
2025-04-09 00:17:57.207 INFO  [http-nio-11040-exec-2] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-09 00:17:57.211 DEBUG [http-nio-11040-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 2 msec}
2025-04-09 00:17:57.211 INFO  [http-nio-11040-exec-2] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-09 00:17:57.217 DEBUG [http-nio-11040-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. with base as (select device_id,
                             (SELECT device_nm
                              FROM tb_device
                              WHERE tb_device.device_id = sl.device_id)      as device,
                             sd_id,
                             (SELECT sd_nm
                              FROM tb_second_device
                              WHERE tb_second_device.sd_id = sl.sd_id)       as sec_device,
                             ct_actv_plan,
                             (SELECT ct_plan_nm
                              FROM tb_ct_plan
                              WHERE tb_ct_plan.ct_plan_id = sl.ct_actv_plan) as actv_plan
                      from tb_sale sl
                      where shop_id = 2 and

                                seller_id='km1104rs' and

                        actv_dt between '2025-04-01' and '2025-04-30'),
             device as (SELECT device                   as name,
                               count(device_id) as count
                        from base
                        where device_id is not null
                        group by device),
             sec_device as (SELECT sec_device                   as name,
                                   count(sec_device) as count
                            from base
                            where sd_id is not null
                            group by sec_device),
             actv_plan as (SELECT actv_plan                   as name,
                                  count(actv_plan) as count
                           from base
                           where ct_actv_plan is not null
                           group by actv_plan),
             total as (select count('device') as cnt
                       from base
                       where 'device' is not null
             )

        select name,
               count,
               (
                   IF((select cnt
                       from total) = 0 or count = 0, 0, TRUNCATE(
                              (count / (
                                  select cnt
                                  from total
                              )
                                  ) * 100, 1))
                   ) as per
        from device
        order by per desc
        limit 5
 {executed in 2 msec}
2025-04-09 00:20:19.755 INFO  [http-nio-11040-exec-9] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/sale/graph/ct/select/1
2025-04-09 00:20:19.756 INFO  [http-nio-11040-exec-9] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDEyNTQ3MywiZXhwIjoxNzQ0MTI2MDczLCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.HZDSowJRg2molQpL9XFQtZeyIIfwOwWKc68hxImvip0
2025-04-09 00:20:19.756 INFO  [http-nio-11040-exec-9] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/sale/graph/ct/select/1
2025-04-09 00:20:19.759 INFO  [http-nio-11040-exec-9] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-09 00:20:19.763 DEBUG [http-nio-11040-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
4. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 2 msec}
2025-04-09 00:20:19.764 INFO  [http-nio-11040-exec-9] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-09 00:20:19.771 DEBUG [http-nio-11040-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
4. with recursive group_generation as (
            select 0 as g
            union all
            select g+1
            from group_generation
            where g < 8
        ), group_weekday as (
            select 0 as g
            union all
            select g+1
            from group_weekday
            where g < 6
        ),  sale as (
            select weekday(actv_dt) as days,
                   device_id,
                   cust_cd,
                   sale_id
            from tb_sale
            where shop_id=2 and

                      seller_id='km1104rs' and

                device_id is not null and
                actv_dt between '2025-04-01' and '2025-04-30'
        ), sale_gene as (
            select sale_id,
                   (
                       case
                           when length(cust_cd) = 6 then floor((year(curdate()) - concat((
                                 case
                                     when substring(cust_cd, 1,2) > '44' then '19'
                                     when substring(cust_cd, 1,2) <= '44' then '20'
                                     end
                                 ),substring(cust_cd,1,2))) / 10)
                           when length(cust_cd) != 6 then null
                           end
                       ) as generation
            from sale
        ), generation as (
            select g,
                   device_id
            from group_generation g
                     left outer join sale_gene sg on g.g=sg.generation
                     left outer join sale s on s.sale_id=sg.sale_id
        ), weekdays as (
            select g,
                   device_id
            from group_weekday w
                     left outer join sale s on s.days=w.g
        )

        select IFNULL(count(device_id),0) as avg
        from weekdays
        group by g
 {executed in 2 msec}
2025-04-09 00:20:20.333 INFO  [http-nio-11040-exec-10] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/sale/graph/ct/select/0
2025-04-09 00:20:20.333 INFO  [http-nio-11040-exec-10] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDEyNTQ3MywiZXhwIjoxNzQ0MTI2MDczLCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.HZDSowJRg2molQpL9XFQtZeyIIfwOwWKc68hxImvip0
2025-04-09 00:20:20.333 INFO  [http-nio-11040-exec-10] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/sale/graph/ct/select/0
2025-04-09 00:20:20.335 INFO  [http-nio-11040-exec-10] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-09 00:20:20.338 DEBUG [http-nio-11040-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 2 msec}
2025-04-09 00:20:20.339 INFO  [http-nio-11040-exec-10] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-09 00:20:20.344 DEBUG [http-nio-11040-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. with recursive group_generation as (
            select 0 as g
            union all
            select g+1
            from group_generation
            where g < 8
        ), group_weekday as (
            select 0 as g
            union all
            select g+1
            from group_weekday
            where g < 6
        ),  sale as (
            select weekday(actv_dt) as days,
                   device_id,
                   cust_cd,
                   sale_id
            from tb_sale
            where shop_id=2 and

                      seller_id='km1104rs' and

                device_id is not null and
                actv_dt between '2025-04-01' and '2025-04-30'
        ), sale_gene as (
            select sale_id,
                   (
                       case
                           when length(cust_cd) = 6 then floor((year(curdate()) - concat((
                                 case
                                     when substring(cust_cd, 1,2) > '44' then '19'
                                     when substring(cust_cd, 1,2) <= '44' then '20'
                                     end
                                 ),substring(cust_cd,1,2))) / 10)
                           when length(cust_cd) != 6 then null
                           end
                       ) as generation
            from sale
        ), generation as (
            select g,
                   device_id
            from group_generation g
                     left outer join sale_gene sg on g.g=sg.generation
                     left outer join sale s on s.sale_id=sg.sale_id
        ), weekdays as (
            select g,
                   device_id
            from group_weekday w
                     left outer join sale s on s.days=w.g
        )

        select IFNULL(count(device_id),0) as avg
        from generation
        group by g
 {executed in 2 msec}
2025-04-09 00:21:33.121 INFO  [http-nio-11040-exec-7] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/sale/graph/ct/select/0
2025-04-09 00:21:33.122 INFO  [http-nio-11040-exec-7] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDEyNTQ3MywiZXhwIjoxNzQ0MTI2MDczLCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.HZDSowJRg2molQpL9XFQtZeyIIfwOwWKc68hxImvip0
2025-04-09 00:21:33.122 INFO  [http-nio-11040-exec-7] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/sale/graph/ct/select/0
2025-04-09 00:21:33.124 INFO  [http-nio-11040-exec-7] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-09 00:21:33.128 DEBUG [http-nio-11040-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
2. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 2 msec}
2025-04-09 00:21:33.128 INFO  [http-nio-11040-exec-7] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-09 00:21:33.132 DEBUG [http-nio-11040-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
2. with recursive group_generation as (
            select 0 as g
            union all
            select g+1
            from group_generation
            where g < 8
        ), group_weekday as (
            select 0 as g
            union all
            select g+1
            from group_weekday
            where g < 6
        ),  sale as (
            select weekday(actv_dt) as days,
                   device_id,
                   cust_cd,
                   sale_id
            from tb_sale
            where shop_id=2 and

                      seller_id='km1104rs' and

                device_id is not null and
                actv_dt between '2025-04-01' and '2025-04-30'
        ), sale_gene as (
            select sale_id,
                   (
                       case
                           when length(cust_cd) = 6 then floor((year(curdate()) - concat((
                                 case
                                     when substring(cust_cd, 1,2) > '44' then '19'
                                     when substring(cust_cd, 1,2) <= '44' then '20'
                                     end
                                 ),substring(cust_cd,1,2))) / 10)
                           when length(cust_cd) != 6 then null
                           end
                       ) as generation
            from sale
        ), generation as (
            select g,
                   device_id
            from group_generation g
                     left outer join sale_gene sg on g.g=sg.generation
                     left outer join sale s on s.sale_id=sg.sale_id
        ), weekdays as (
            select g,
                   device_id
            from group_weekday w
                     left outer join sale s on s.days=w.g
        )

        select IFNULL(count(device_id),0) as avg
        from generation
        group by g
 {executed in 1 msec}
2025-04-09 00:21:33.747 INFO  [http-nio-11040-exec-1] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/sale/graph/ct/select/1
2025-04-09 00:21:33.748 INFO  [http-nio-11040-exec-1] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDEyNTQ3MywiZXhwIjoxNzQ0MTI2MDczLCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.HZDSowJRg2molQpL9XFQtZeyIIfwOwWKc68hxImvip0
2025-04-09 00:21:33.748 INFO  [http-nio-11040-exec-1] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/sale/graph/ct/select/1
2025-04-09 00:21:33.750 INFO  [http-nio-11040-exec-1] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-09 00:21:33.752 DEBUG [http-nio-11040-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
6. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 1 msec}
2025-04-09 00:21:33.753 INFO  [http-nio-11040-exec-1] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-09 00:21:33.759 DEBUG [http-nio-11040-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
6. with recursive group_generation as (
            select 0 as g
            union all
            select g+1
            from group_generation
            where g < 8
        ), group_weekday as (
            select 0 as g
            union all
            select g+1
            from group_weekday
            where g < 6
        ),  sale as (
            select weekday(actv_dt) as days,
                   device_id,
                   cust_cd,
                   sale_id
            from tb_sale
            where shop_id=2 and

                      seller_id='km1104rs' and

                device_id is not null and
                actv_dt between '2025-04-01' and '2025-04-30'
        ), sale_gene as (
            select sale_id,
                   (
                       case
                           when length(cust_cd) = 6 then floor((year(curdate()) - concat((
                                 case
                                     when substring(cust_cd, 1,2) > '44' then '19'
                                     when substring(cust_cd, 1,2) <= '44' then '20'
                                     end
                                 ),substring(cust_cd,1,2))) / 10)
                           when length(cust_cd) != 6 then null
                           end
                       ) as generation
            from sale
        ), generation as (
            select g,
                   device_id
            from group_generation g
                     left outer join sale_gene sg on g.g=sg.generation
                     left outer join sale s on s.sale_id=sg.sale_id
        ), weekdays as (
            select g,
                   device_id
            from group_weekday w
                     left outer join sale s on s.days=w.g
        )

        select IFNULL(count(device_id),0) as avg
        from weekdays
        group by g
 {executed in 2 msec}
2025-04-09 00:21:34.243 INFO  [http-nio-11040-exec-8] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/sale/graph/ct/select/0
2025-04-09 00:21:34.243 INFO  [http-nio-11040-exec-8] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDEyNTQ3MywiZXhwIjoxNzQ0MTI2MDczLCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.HZDSowJRg2molQpL9XFQtZeyIIfwOwWKc68hxImvip0
2025-04-09 00:21:34.243 INFO  [http-nio-11040-exec-8] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/sale/graph/ct/select/0
2025-04-09 00:21:34.249 INFO  [http-nio-11040-exec-8] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-09 00:21:34.253 DEBUG [http-nio-11040-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
5. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 3 msec}
2025-04-09 00:21:34.254 INFO  [http-nio-11040-exec-8] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-09 00:21:34.260 DEBUG [http-nio-11040-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
5. with recursive group_generation as (
            select 0 as g
            union all
            select g+1
            from group_generation
            where g < 8
        ), group_weekday as (
            select 0 as g
            union all
            select g+1
            from group_weekday
            where g < 6
        ),  sale as (
            select weekday(actv_dt) as days,
                   device_id,
                   cust_cd,
                   sale_id
            from tb_sale
            where shop_id=2 and

                      seller_id='km1104rs' and

                device_id is not null and
                actv_dt between '2025-04-01' and '2025-04-30'
        ), sale_gene as (
            select sale_id,
                   (
                       case
                           when length(cust_cd) = 6 then floor((year(curdate()) - concat((
                                 case
                                     when substring(cust_cd, 1,2) > '44' then '19'
                                     when substring(cust_cd, 1,2) <= '44' then '20'
                                     end
                                 ),substring(cust_cd,1,2))) / 10)
                           when length(cust_cd) != 6 then null
                           end
                       ) as generation
            from sale
        ), generation as (
            select g,
                   device_id
            from group_generation g
                     left outer join sale_gene sg on g.g=sg.generation
                     left outer join sale s on s.sale_id=sg.sale_id
        ), weekdays as (
            select g,
                   device_id
            from group_weekday w
                     left outer join sale s on s.days=w.g
        )

        select IFNULL(count(device_id),0) as avg
        from generation
        group by g
 {executed in 2 msec}
2025-04-09 00:21:42.071 INFO  [http-nio-11040-exec-5] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/sale/graph/ct/select/0
2025-04-09 00:21:42.071 INFO  [http-nio-11040-exec-5] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDEyNTQ3MywiZXhwIjoxNzQ0MTI2MDczLCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.HZDSowJRg2molQpL9XFQtZeyIIfwOwWKc68hxImvip0
2025-04-09 00:21:42.071 INFO  [http-nio-11040-exec-5] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/sale/graph/ct/select/0
2025-04-09 00:21:42.073 INFO  [http-nio-11040-exec-5] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-09 00:21:42.076 DEBUG [http-nio-11040-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
5. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 1 msec}
2025-04-09 00:21:42.076 INFO  [http-nio-11040-exec-5] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-09 00:21:42.095 DEBUG [http-nio-11040-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
5. with recursive group_generation as (
            select 0 as g
            union all
            select g+1
            from group_generation
            where g < 8
        ), group_weekday as (
            select 0 as g
            union all
            select g+1
            from group_weekday
            where g < 6
        ),  sale as (
            select weekday(actv_dt) as days,
                   device_id,
                   cust_cd,
                   sale_id
            from tb_sale
            where shop_id=2 and

                      seller_id='km1104rs' and

                device_id is not null and
                actv_dt between '2025-04-01' and '2025-04-30'
        ), sale_gene as (
            select sale_id,
                   (
                       case
                           when length(cust_cd) = 6 then floor((year(curdate()) - concat((
                                 case
                                     when substring(cust_cd, 1,2) > '44' then '19'
                                     when substring(cust_cd, 1,2) <= '44' then '20'
                                     end
                                 ),substring(cust_cd,1,2))) / 10)
                           when length(cust_cd) != 6 then null
                           end
                       ) as generation
            from sale
        ), generation as (
            select g,
                   device_id
            from group_generation g
                     left outer join sale_gene sg on g.g=sg.generation
                     left outer join sale s on s.sale_id=sg.sale_id
        ), weekdays as (
            select g,
                   device_id
            from group_weekday w
                     left outer join sale s on s.days=w.g
        )

        select IFNULL(count(device_id),0) as avg
        from generation
        group by g
 {executed in 16 msec}
2025-04-09 00:21:44.669 INFO  [http-nio-11040-exec-6] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/auth/refresh
2025-04-09 00:21:44.669 INFO  [http-nio-11040-exec-6] [com.momo.filter.JwtAuthorizationFilter] - access token: null
2025-04-09 00:21:44.669 INFO  [http-nio-11040-exec-6] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/auth/refresh
2025-04-09 00:21:44.669 INFO  [http-nio-11040-exec-6] [com.momo.filter.JwtAuthorizationFilter] - 유효한 JWT 토큰이 없습니다
2025-04-09 00:21:44.670 INFO  [http-nio-11040-exec-6] [com.momo.api.AuthController] - refresh
2025-04-09 00:21:44.686 DEBUG [http-nio-11040-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
2. SELECT  *
        FROM    tb_refresh_token
        WHERE   refresh_token='eyJhbGciOiJIUzI1NiJ9.eyJleHAiOjE3NDQxMjg2NTR9.Hu5v28fYDYskftTZCCla1rTP2SYYoiuUfGr3MjFwGxk'
 {executed in 8 msec}
2025-04-09 00:21:44.688 DEBUG [http-nio-11040-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
2. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 0 msec}
2025-04-09 00:21:44.689 INFO  [http-nio-11040-exec-6] [com.momo.api.AuthController] - jwt: JwtVO(grantType=Bearer , username=km1104rs, accessToken=eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDEyNTcwNCwiZXhwIjoxNzQ0MTI2MzA0LCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.ZigepFptVPKpk__f3jIgZpJMvaR_GokivyFDGaR6qwk, refreshToken=null, expireTime=null, revoked=false, expired=false)
2025-04-09 00:21:44.719 INFO  [http-nio-11040-exec-4] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/notif/all
2025-04-09 00:21:44.719 INFO  [http-nio-11040-exec-3] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/notif/read/all
2025-04-09 00:21:44.719 INFO  [http-nio-11040-exec-4] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDEyNTcwNCwiZXhwIjoxNzQ0MTI2MzA0LCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.ZigepFptVPKpk__f3jIgZpJMvaR_GokivyFDGaR6qwk
2025-04-09 00:21:44.719 INFO  [http-nio-11040-exec-3] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDEyNTcwNCwiZXhwIjoxNzQ0MTI2MzA0LCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.ZigepFptVPKpk__f3jIgZpJMvaR_GokivyFDGaR6qwk
2025-04-09 00:21:44.719 INFO  [http-nio-11040-exec-3] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/notif/read/all
2025-04-09 00:21:44.719 INFO  [http-nio-11040-exec-4] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/notif/all
2025-04-09 00:21:44.720 INFO  [http-nio-11040-exec-4] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-09 00:21:44.720 INFO  [http-nio-11040-exec-3] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-09 00:21:44.722 DEBUG [http-nio-11040-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
3. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 1 msec}
2025-04-09 00:21:44.722 DEBUG [http-nio-11040-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
4. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 1 msec}
2025-04-09 00:21:44.722 INFO  [http-nio-11040-exec-4] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-09 00:21:44.723 INFO  [http-nio-11040-exec-3] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-09 00:21:44.723 INFO  [http-nio-11040-exec-4] [c.momo.common.util.SecurityContextUtil] - principal: UserDetailsImpl(username=km1104rs, password=$2a$10$uXShhwl6ULOkbJe477uDWOfdiUUcu6lOSF/Dhj9xP3U1nUn/gXkc6, authorities=[ROLE_NONE])
2025-04-09 00:21:44.723 INFO  [http-nio-11040-exec-3] [c.momo.common.util.SecurityContextUtil] - principal: UserDetailsImpl(username=km1104rs, password=$2a$10$uXShhwl6ULOkbJe477uDWOfdiUUcu6lOSF/Dhj9xP3U1nUn/gXkc6, authorities=[ROLE_NONE])
2025-04-09 00:21:44.727 DEBUG [http-nio-11040-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
3. UPDATE tb_notification
        SET read_st = TRUE
        WHERE receiver_id = 'km1104rs'
          AND read_st = FALSE
 {executed in 3 msec}
2025-04-09 00:21:44.728 INFO  [http-nio-11040-exec-2] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/notif/count/unread
2025-04-09 00:21:44.728 INFO  [http-nio-11040-exec-2] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDEyNTcwNCwiZXhwIjoxNzQ0MTI2MzA0LCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.ZigepFptVPKpk__f3jIgZpJMvaR_GokivyFDGaR6qwk
2025-04-09 00:21:44.728 INFO  [http-nio-11040-exec-2] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/notif/count/unread
2025-04-09 00:21:44.728 INFO  [http-nio-11040-exec-9] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/user/info
2025-04-09 00:21:44.728 INFO  [http-nio-11040-exec-9] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDEyNTcwNCwiZXhwIjoxNzQ0MTI2MzA0LCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.ZigepFptVPKpk__f3jIgZpJMvaR_GokivyFDGaR6qwk
2025-04-09 00:21:44.728 DEBUG [http-nio-11040-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
4. SELECT content,
               notif_id,
               read_st,
               notif_tp as type,
               IF(date(send_dt) = current_date,true,false) as today,
            (
               TIMESTAMPDIFF(MINUTE, send_dt, current_timestamp)
            ) as ago
        FROM tb_notification
        WHERE receiver_id='km1104rs'
        ORDER BY send_dt DESC
 {executed in 4 msec}
2025-04-09 00:21:44.728 INFO  [http-nio-11040-exec-9] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/user/info
2025-04-09 00:21:44.729 INFO  [http-nio-11040-exec-2] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-09 00:21:44.730 INFO  [http-nio-11040-exec-9] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-09 00:21:44.745 DEBUG [http-nio-11040-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
4. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 13 msec}
2025-04-09 00:21:44.745 INFO  [http-nio-11040-exec-9] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-09 00:21:44.757 INFO  [http-nio-11040-exec-9] [c.momo.common.util.SecurityContextUtil] - principal: UserDetailsImpl(username=km1104rs, password=$2a$10$uXShhwl6ULOkbJe477uDWOfdiUUcu6lOSF/Dhj9xP3U1nUn/gXkc6, authorities=[ROLE_NONE])
2025-04-09 00:21:44.761 DEBUG [http-nio-11040-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 31 msec}
2025-04-09 00:21:44.761 INFO  [http-nio-11040-exec-2] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-09 00:21:44.762 DEBUG [http-nio-11040-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
4. SELECT ac.id,
               ac.name,
               ac.tel,
               ac.nickname,
               ac.pfp,
               ac.curr_shop_id,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where sf.shop_id = ac.curr_shop_id and
                         sf.staff_id = ac.id
                   ) as role,
               sh.shop_nm,
               sh.shop_addr,
               sh.provider,
               (
                   IFNULL((
                       select sf2.approval_st
                       from tb_staff sf2
                       where sf2.shop_id=ac.curr_shop_id and
                           sf2.staff_id=ac.id
                       ), -1)
                ) as approval_st,
                ac.corp_nm,
                ac.br_no
        FROM tb_account ac
        LEFT OUTER JOIN tb_shop sh on sh.shop_id=ac.curr_shop_id
        WHERE id = 'km1104rs'
 {executed in 4 msec}
2025-04-09 00:21:44.762 INFO  [http-nio-11040-exec-2] [c.momo.common.util.SecurityContextUtil] - principal: UserDetailsImpl(username=km1104rs, password=$2a$10$uXShhwl6ULOkbJe477uDWOfdiUUcu6lOSF/Dhj9xP3U1nUn/gXkc6, authorities=[ROLE_NONE])
2025-04-09 00:21:44.763 INFO  [http-nio-11040-exec-9] [com.momo.api.UserController] - User: {role=0, approval_st=1, shop_addr=충청남도 천안시 병천면 충절로 1600 한국기술교육대학교 다산정보관 102, br_no=5218702490, provider=2, name=박희찬, nickname=대표, corp_nm=123, tel=010-4524-0636, id=km1104rs, pfp=1921fc01-e573-4243-9365-6b905389f4fc.png, curr_shop_id=2, shop_nm=한기대점 }
2025-04-09 00:21:44.765 DEBUG [http-nio-11040-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT count(*)
        FROM tb_notification
        WHERE receiver_id = 'km1104rs'
          AND read_st = FALSE
 {executed in 2 msec}
2025-04-09 00:21:44.771 INFO  [http-nio-11040-exec-10] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/notif/count/unread
2025-04-09 00:21:44.772 INFO  [http-nio-11040-exec-10] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDEyNTcwNCwiZXhwIjoxNzQ0MTI2MzA0LCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.ZigepFptVPKpk__f3jIgZpJMvaR_GokivyFDGaR6qwk
2025-04-09 00:21:44.772 INFO  [http-nio-11040-exec-10] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/notif/count/unread
2025-04-09 00:21:44.775 INFO  [http-nio-11040-exec-10] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-09 00:21:44.777 DEBUG [http-nio-11040-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 1 msec}
2025-04-09 00:21:44.778 INFO  [http-nio-11040-exec-10] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-09 00:21:44.779 INFO  [http-nio-11040-exec-10] [c.momo.common.util.SecurityContextUtil] - principal: UserDetailsImpl(username=km1104rs, password=$2a$10$uXShhwl6ULOkbJe477uDWOfdiUUcu6lOSF/Dhj9xP3U1nUn/gXkc6, authorities=[ROLE_NONE])
2025-04-09 00:21:44.781 DEBUG [http-nio-11040-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT count(*)
        FROM tb_notification
        WHERE receiver_id = 'km1104rs'
          AND read_st = FALSE
 {executed in 1 msec}
2025-04-09 00:21:44.785 INFO  [http-nio-11040-exec-7] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/notif/count/unread
2025-04-09 00:21:44.785 INFO  [http-nio-11040-exec-7] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDEyNTcwNCwiZXhwIjoxNzQ0MTI2MzA0LCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.ZigepFptVPKpk__f3jIgZpJMvaR_GokivyFDGaR6qwk
2025-04-09 00:21:44.785 INFO  [http-nio-11040-exec-7] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/notif/count/unread
2025-04-09 00:21:44.787 INFO  [http-nio-11040-exec-7] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-09 00:21:44.788 DEBUG [http-nio-11040-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
2. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 1 msec}
2025-04-09 00:21:44.789 INFO  [http-nio-11040-exec-7] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-09 00:21:44.789 INFO  [http-nio-11040-exec-7] [c.momo.common.util.SecurityContextUtil] - principal: UserDetailsImpl(username=km1104rs, password=$2a$10$uXShhwl6ULOkbJe477uDWOfdiUUcu6lOSF/Dhj9xP3U1nUn/gXkc6, authorities=[ROLE_NONE])
2025-04-09 00:21:44.791 DEBUG [http-nio-11040-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
2. SELECT count(*)
        FROM tb_notification
        WHERE receiver_id = 'km1104rs'
          AND read_st = FALSE
 {executed in 1 msec}
2025-04-09 00:21:44.793 INFO  [http-nio-11040-exec-1] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/sale/graph/ct/d
2025-04-09 00:21:44.793 INFO  [http-nio-11040-exec-1] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDEyNTcwNCwiZXhwIjoxNzQ0MTI2MzA0LCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.ZigepFptVPKpk__f3jIgZpJMvaR_GokivyFDGaR6qwk
2025-04-09 00:21:44.793 INFO  [http-nio-11040-exec-1] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/sale/graph/ct/d
2025-04-09 00:21:44.794 INFO  [http-nio-11040-exec-1] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-09 00:21:44.795 DEBUG [http-nio-11040-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
6. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 1 msec}
2025-04-09 00:21:44.795 INFO  [http-nio-11040-exec-1] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-09 00:21:44.799 DEBUG [http-nio-11040-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
6. set @limit_cond := (
               case 'd'
                   when 'h' then '2000-01-24'
                   when 'd' then '2025-04-09'
                   when 'w' then '2025-04-09'
                   when 'm' then date_sub('2025-04-09', interval 1 month)
               end
        );

        with recursive org_date_table as (
            select (
                       case
                           when 'd' = 'h' then '2000-01-01'
                           when 'd' != 'h' then '2025-01-09'
                           end
                       ) as it
            union all
            select (
                       case 'd'
                           when 'h' then date_add(it, interval 1 day)
                           when 'd' then date_add(it, interval 1 day)
                           when 'w' then date_add(it, interval 1 week)
                           when 'm' then date_add(it, interval 1 month)
                           end
                       ) as it
            from org_date_table
            where it < @limit_cond
        ), date_table as (
            select
                year(it) as _year,
                (
                    case 'd'
                        when 'h' then day(it)
                        when 'd' then it
                        when 'w' then week(it)
                        when 'm' then month(it)
                        end
                    ) as dt
            from org_date_table
        ),  date_sale as (
            select year(actv_dt) _year,
                   month(actv_dt) as m,
                   week(actv_dt) as w,
                   actv_dt as d,
                   hour(regi_dt) as h,
                   tb_sale.*
            from tb_sale
            where shop_id=2 and

                actv_dt between '2025-01-09' and (
                    case
                        when 'd' = 'h' then '2025-01-09'
                        when 'd' != 'h' then '2025-04-09'
                        end
                    )
        ), final as (
            select count(device_id) as cnt
            from date_table dd
                     left outer join date_sale ds on dd._year=ds._year and
                                                     d = dt
            group by dd._year, dd.dt
        )

        select
            (
                select json_arrayagg(cnt)
                from final
            ) as value,
            (
                select json_arrayagg(date_format(it, '%Y-%m-%d'))
                from org_date_table
            ) as date
 {executed in 2 msec}
2025-04-09 00:21:44.802 INFO  [http-nio-11040-exec-8] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/sale/graph/ct/d
2025-04-09 00:21:44.802 INFO  [http-nio-11040-exec-8] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDEyNTcwNCwiZXhwIjoxNzQ0MTI2MzA0LCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.ZigepFptVPKpk__f3jIgZpJMvaR_GokivyFDGaR6qwk
2025-04-09 00:21:44.802 INFO  [http-nio-11040-exec-8] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/sale/graph/ct/d
2025-04-09 00:21:44.803 INFO  [http-nio-11040-exec-8] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-09 00:21:44.805 DEBUG [http-nio-11040-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
5. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 1 msec}
2025-04-09 00:21:44.805 INFO  [http-nio-11040-exec-8] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-09 00:21:44.810 DEBUG [http-nio-11040-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
5. set @limit_cond := (
               case 'd'
                   when 'h' then '2000-01-24'
                   when 'd' then '2025-04-08'
                   when 'w' then '2025-04-08'
                   when 'm' then date_sub('2025-04-08', interval 1 month)
               end
        );

        with recursive org_date_table as (
            select (
                       case
                           when 'd' = 'h' then '2000-01-01'
                           when 'd' != 'h' then '2025-04-02'
                           end
                       ) as it
            union all
            select (
                       case 'd'
                           when 'h' then date_add(it, interval 1 day)
                           when 'd' then date_add(it, interval 1 day)
                           when 'w' then date_add(it, interval 1 week)
                           when 'm' then date_add(it, interval 1 month)
                           end
                       ) as it
            from org_date_table
            where it < @limit_cond
        ), date_table as (
            select
                year(it) as _year,
                (
                    case 'd'
                        when 'h' then day(it)
                        when 'd' then it
                        when 'w' then week(it)
                        when 'm' then month(it)
                        end
                    ) as dt
            from org_date_table
        ),  date_sale as (
            select year(actv_dt) _year,
                   month(actv_dt) as m,
                   week(actv_dt) as w,
                   actv_dt as d,
                   hour(regi_dt) as h,
                   tb_sale.*
            from tb_sale
            where shop_id=2 and

                actv_dt between '2025-04-02' and (
                    case
                        when 'd' = 'h' then '2025-04-02'
                        when 'd' != 'h' then '2025-04-08'
                        end
                    )
        ), final as (
            select count(device_id) as cnt
            from date_table dd
                     left outer join date_sale ds on dd._year=ds._year and
                                                     d = dt
            group by dd._year, dd.dt
        )

        select
            (
                select json_arrayagg(cnt)
                from final
            ) as value,
            (
                select json_arrayagg(date_format(it, '%Y-%m-%d'))
                from org_date_table
            ) as date
 {executed in 1 msec}
2025-04-09 00:21:44.811 INFO  [http-nio-11040-exec-5] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/sale/graph/ct/select/0
2025-04-09 00:21:44.811 INFO  [http-nio-11040-exec-5] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDEyNTcwNCwiZXhwIjoxNzQ0MTI2MzA0LCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.ZigepFptVPKpk__f3jIgZpJMvaR_GokivyFDGaR6qwk
2025-04-09 00:21:44.811 INFO  [http-nio-11040-exec-5] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/sale/graph/ct/select/0
2025-04-09 00:21:44.813 INFO  [http-nio-11040-exec-5] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-09 00:21:44.814 DEBUG [http-nio-11040-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
5. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 1 msec}
2025-04-09 00:21:44.814 INFO  [http-nio-11040-exec-5] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-09 00:21:44.819 DEBUG [http-nio-11040-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
5. with recursive group_generation as (
            select 0 as g
            union all
            select g+1
            from group_generation
            where g < 8
        ), group_weekday as (
            select 0 as g
            union all
            select g+1
            from group_weekday
            where g < 6
        ),  sale as (
            select weekday(actv_dt) as days,
                   device_id,
                   cust_cd,
                   sale_id
            from tb_sale
            where shop_id=2 and

                device_id is not null and
                actv_dt between '2025-04-01' and '2025-04-30'
        ), sale_gene as (
            select sale_id,
                   (
                       case
                           when length(cust_cd) = 6 then floor((year(curdate()) - concat((
                                 case
                                     when substring(cust_cd, 1,2) > '44' then '19'
                                     when substring(cust_cd, 1,2) <= '44' then '20'
                                     end
                                 ),substring(cust_cd,1,2))) / 10)
                           when length(cust_cd) != 6 then null
                           end
                       ) as generation
            from sale
        ), generation as (
            select g,
                   device_id
            from group_generation g
                     left outer join sale_gene sg on g.g=sg.generation
                     left outer join sale s on s.sale_id=sg.sale_id
        ), weekdays as (
            select g,
                   device_id
            from group_weekday w
                     left outer join sale s on s.days=w.g
        )

        select IFNULL(count(device_id),0) as avg
        from generation
        group by g
 {executed in 1 msec}
2025-04-09 00:21:44.821 INFO  [http-nio-11040-exec-6] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/sale/graph/stat/select/0
2025-04-09 00:21:44.821 INFO  [http-nio-11040-exec-6] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDEyNTcwNCwiZXhwIjoxNzQ0MTI2MzA0LCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.ZigepFptVPKpk__f3jIgZpJMvaR_GokivyFDGaR6qwk
2025-04-09 00:21:44.821 INFO  [http-nio-11040-exec-6] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/sale/graph/stat/select/0
2025-04-09 00:21:44.822 INFO  [http-nio-11040-exec-6] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-09 00:21:44.824 DEBUG [http-nio-11040-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
2. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 1 msec}
2025-04-09 00:21:44.824 INFO  [http-nio-11040-exec-6] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-09 00:21:44.829 DEBUG [http-nio-11040-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
2. with base as (select device_id,
                             (SELECT device_nm
                              FROM tb_device
                              WHERE tb_device.device_id = sl.device_id)      as device,
                             sd_id,
                             (SELECT sd_nm
                              FROM tb_second_device
                              WHERE tb_second_device.sd_id = sl.sd_id)       as sec_device,
                             ct_actv_plan,
                             (SELECT ct_plan_nm
                              FROM tb_ct_plan
                              WHERE tb_ct_plan.ct_plan_id = sl.ct_actv_plan) as actv_plan
                      from tb_sale sl
                      where shop_id = 2 and

                        actv_dt between '2025-04-01' and '2025-04-30'),
             device as (SELECT device                   as name,
                               count(device_id) as count
                        from base
                        where device_id is not null
                        group by device),
             sec_device as (SELECT sec_device                   as name,
                                   count(sec_device) as count
                            from base
                            where sd_id is not null
                            group by sec_device),
             actv_plan as (SELECT actv_plan                   as name,
                                  count(actv_plan) as count
                           from base
                           where ct_actv_plan is not null
                           group by actv_plan),
             total as (select count('device') as cnt
                       from base
                       where 'device' is not null
             )

        select name,
               count,
               (
                   IF((select cnt
                       from total) = 0 or count = 0, 0, TRUNCATE(
                              (count / (
                                  select cnt
                                  from total
                              )
                                  ) * 100, 1))
                   ) as per
        from device
        order by per desc
        limit 5
 {executed in 2 msec}
2025-04-09 00:21:44.830 INFO  [http-nio-11040-exec-3] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/sale/graph/ratio/select/0
2025-04-09 00:21:44.830 INFO  [http-nio-11040-exec-3] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDEyNTcwNCwiZXhwIjoxNzQ0MTI2MzA0LCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.ZigepFptVPKpk__f3jIgZpJMvaR_GokivyFDGaR6qwk
2025-04-09 00:21:44.830 INFO  [http-nio-11040-exec-3] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/sale/graph/ratio/select/0
2025-04-09 00:21:44.832 INFO  [http-nio-11040-exec-3] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-09 00:21:44.833 DEBUG [http-nio-11040-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
3. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 1 msec}
2025-04-09 00:21:44.833 INFO  [http-nio-11040-exec-3] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-09 00:21:44.836 DEBUG [http-nio-11040-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
3. with recursive istm_range as (
            select 0 as i
            union all
            select i+1
            from istm_range
            where i<5
        ), base as (
            select ct_istm
            from tb_sale
            where shop_id=2 and

                actv_dt between '2025-04-01' and '2025-04-30'
        ), final as (
            select i as istm,
                   IFNULL(count(base.ct_istm),0) as cnt
            from istm_range
                     left outer join base on base.ct_istm=istm_range.i
            group by i
            order by istm desc
        )

        select json_arrayagg(istm) as type,
               json_arrayagg(cnt) as cnt,
               json_arrayagg(IF((
                      select IFNULL(count(ct_istm), 0)
                      from base
                  ) = 0 or cnt = 0, 0, TRUNCATE((cnt/(
                   select IFNULL(count(ct_istm), 0)
                   from base
               )) * 100, 1))) as per
        from final
 {executed in 1 msec}
2025-04-09 00:21:44.839 INFO  [http-nio-11040-exec-4] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/sale/graph/summary
2025-04-09 00:21:44.839 INFO  [http-nio-11040-exec-4] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDEyNTcwNCwiZXhwIjoxNzQ0MTI2MzA0LCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.ZigepFptVPKpk__f3jIgZpJMvaR_GokivyFDGaR6qwk
2025-04-09 00:21:44.840 INFO  [http-nio-11040-exec-4] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/sale/graph/summary
2025-04-09 00:21:44.841 INFO  [http-nio-11040-exec-4] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-09 00:21:44.843 DEBUG [http-nio-11040-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
4. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 1 msec}
2025-04-09 00:21:44.843 INFO  [http-nio-11040-exec-4] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-09 00:21:44.843 INFO  [http-nio-11040-exec-4] [com.momo.api.SaleController] - summary: CommonVO(provider=null, date=null, year=null, month=null, day=null, selectType=null, range=null, dateType=null, prevFromYmd=null, prevToYmd=null, currFromYmd=null, currToYmd=null, fromYmd=2024-10-01, toYmd=2025-04-01, fromYm=null, toYm=null, prevDate=null, currDate=null)
2025-04-09 00:21:44.854 INFO  [http-nio-11040-exec-9] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/sale/graph/ct/d
2025-04-09 00:21:44.854 INFO  [http-nio-11040-exec-9] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDEyNTcwNCwiZXhwIjoxNzQ0MTI2MzA0LCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.ZigepFptVPKpk__f3jIgZpJMvaR_GokivyFDGaR6qwk
2025-04-09 00:21:44.854 INFO  [http-nio-11040-exec-9] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/sale/graph/ct/d
2025-04-09 00:21:44.855 INFO  [http-nio-11040-exec-9] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-09 00:21:44.857 DEBUG [http-nio-11040-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 1 msec}
2025-04-09 00:21:44.857 INFO  [http-nio-11040-exec-9] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-09 00:21:44.861 DEBUG [http-nio-11040-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. set @limit_cond := (
               case 'd'
                   when 'h' then '2000-01-24'
                   when 'd' then '2025-04-09'
                   when 'w' then '2025-04-09'
                   when 'm' then date_sub('2025-04-09', interval 1 month)
               end
        );

        with recursive org_date_table as (
            select (
                       case
                           when 'd' = 'h' then '2000-01-01'
                           when 'd' != 'h' then '2025-01-09'
                           end
                       ) as it
            union all
            select (
                       case 'd'
                           when 'h' then date_add(it, interval 1 day)
                           when 'd' then date_add(it, interval 1 day)
                           when 'w' then date_add(it, interval 1 week)
                           when 'm' then date_add(it, interval 1 month)
                           end
                       ) as it
            from org_date_table
            where it < @limit_cond
        ), date_table as (
            select
                year(it) as _year,
                (
                    case 'd'
                        when 'h' then day(it)
                        when 'd' then it
                        when 'w' then week(it)
                        when 'm' then month(it)
                        end
                    ) as dt
            from org_date_table
        ),  date_sale as (
            select year(actv_dt) _year,
                   month(actv_dt) as m,
                   week(actv_dt) as w,
                   actv_dt as d,
                   hour(regi_dt) as h,
                   tb_sale.*
            from tb_sale
            where shop_id=2 and

                    seller_id='km1104rs' and

                actv_dt between '2025-01-09' and (
                    case
                        when 'd' = 'h' then '2025-01-09'
                        when 'd' != 'h' then '2025-04-09'
                        end
                    )
        ), final as (
            select count(device_id) as cnt
            from date_table dd
                     left outer join date_sale ds on dd._year=ds._year and
                                                     d = dt
            group by dd._year, dd.dt
        )

        select
            (
                select json_arrayagg(cnt)
                from final
            ) as value,
            (
                select json_arrayagg(date_format(it, '%Y-%m-%d'))
                from org_date_table
            ) as date
 {executed in 2 msec}
2025-04-09 00:21:44.866 DEBUG [http-nio-11040-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
4. #         월별 날짜 구하기
        with recursive month_range as (
            select '2024-10-01' as d
            union all
            select date_add(d, interval 1 month) as d
            from month_range
            where date_add(d, interval 1 month) < '2025-04-01'
        ), months as(
            select month(d) as m
            from month_range
        ), filtered_sale as ( # 판매일보 초벌
            select month(actv_dt) as actv_month,
                   device_id,
                   internet_plan,
                   tv_plan,
                    exsvc_id,
                   total_cms,
                   wt_cms,
                   sale_id,
                   sd_id,
                    shop_id
            from tb_sale
            where shop_id=2 and

                actv_dt between '2024-10-01' and date_add('2025-04-01', interval 1 month)
        ), ct_graph as ( # 무선 그래프 데이터
            SELECT m,
                   count(device_id) as cnt
            FROM months
                     LEFT OUTER JOIN filtered_sale on actv_month = m and
                                                      device_id is not null
            group by m
        ), internet_graph as ( # 인터넷 그래프 데이터
            SELECT m,
                   count(internet_plan) as cnt
            FROM months
                     LEFT OUTER JOIN filtered_sale on actv_month = m  and
                                                      internet_plan is not null
            group by m
        ), tv_graph as ( # TV 그래프 데이터
            SELECT m,
                   count(tv_plan) as cnt
            FROM months
                     LEFT OUTER JOIN filtered_sale on actv_month = m  and
                                                      tv_plan is not null
            group by m
        ), card as ( # 카드 데이터
            SELECT m,
                   (
                    select count(*)
                    from tb_sale_card sc
                    left outer join filtered_sale fs on fs.shop_id = sc.shop_id and
                                                        fs.sale_id = sc.sale_id
                   )  as cnt
            FROM months
                     LEFT OUTER JOIN filtered_sale on actv_month = m
            group by m
        ), exsvc as ( # 부가서비스 데이터
            SELECT m,
                   count(exsvc_id) as cnt
            FROM months
                     LEFT OUTER JOIN filtered_sale on actv_month = m  and
                                                      exsvc_id is not null
            group by m
        ), tc_graph as ( # 총 이익 그래프 데이터
            SELECT m,
                   IFNULL(sum(total_cms), 0) as cnt
            FROM months
                     LEFT OUTER JOIN filtered_sale on actv_month = m
            group by m
        ), avg_margin_graph as ( # 개인 평균 마진 그래프 데이터
            SELECT m,
                   IFNULL(avg(total_cms), 0) as cnt
            FROM months
                     LEFT OUTER JOIN filtered_sale on actv_month = m and
                                                      device_id is not null
            group by m
        ), ud_graph as ( # 중고 개통 그래프 데이터
            SELECT m,
                   count(ud_id) as cnt
            FROM months
                     LEFT OUTER JOIN filtered_sale on actv_month = m
                     LEFT OUTER JOIN tb_sale_used_device sud on sud.sale_id=filtered_sale.sale_id
            group by m
        ), sec_graph as ( # 세컨 그래프 데이터
            SELECT m,
                   count(sd_id) as cnt
            FROM months
                     LEFT OUTER JOIN filtered_sale on actv_month = m and
                                                      sd_id != 0
            group by m
        ), diff_ct as (
            select
                (
                    select cnt
                    from ct_graph
                    limit 4, 1
                ) as prv,
                (
                    select cnt
                    from ct_graph
                    limit 5,1
                ) as curr
            from dual
        ), diff_internet as (
            select
                (
                    select cnt
                    from internet_graph
                    limit 4,1
                ) as prv,
                (
                    select cnt
                    from internet_graph
                    limit 5,1
                ) as curr
            from dual
        ), diff_tv as (
            select
                (
                    select cnt
                    from tv_graph
                    limit 4,1
                ) as prv,
                (
                    select cnt
                    from tv_graph
                    limit 5,1
                ) as curr
            from dual
        ), diff_card as (
            select
                (
                    select cnt
                    from card
                    limit 4,1
                ) as prv,
                (
                    select cnt
                    from card
                    limit 5,1
                ) as curr
            from dual
        ), diff_exsvc as (
            select
                (
                    select cnt
                    from exsvc
                    limit 4,1
                ) as prv,
                (
                    select cnt
                    from exsvc
                    limit 5,1
                ) as curr
            from dual
        ), diff_tc as (
            select
                (
                    select cnt
                    from tc_graph
                    limit 4,1
                ) as prv,
                (
                    select cnt
                    from tc_graph
                    limit 5,1
                ) as curr
            from dual
        ) , diff_margin as (
            select
                (
                    select cnt
                    from avg_margin_graph
                    limit 4,1
                ) as prv,
                (
                    select cnt
                    from avg_margin_graph
                    limit 5,1
                ) as curr
            from dual
        ), diff_ud as (
            select
                (
                    select cnt
                    from ud_graph
                    limit 4,1
                ) as prv,
                (
                    select cnt
                    from ud_graph
                    limit 5,1
                ) as curr
            from dual
        ) , diff_sec as (
            select
                (
                    select cnt
                    from sec_graph
                    limit 4,1
                ) as prv,
                (
                    select cnt
                    from sec_graph
                    limit 5,1
                ) as curr
            from dual
        ), final as (
            select
                curr,
                prv,
                (
                    select json_arrayagg(cnt)
                    from ct_graph
                ) as list
            from diff_ct
            union all
            select
                curr,
                prv,
                (
                    select json_arrayagg(cnt)
                    from internet_graph
                ) as list
            from diff_internet
            union all
            select
                curr,
                prv,
                (
                    select json_arrayagg(cnt)
                    from tv_graph
                ) as list
            from diff_tv
             union all
            select
                curr,
                prv,
                (
                    select json_arrayagg(cnt)
                    from card
                ) as list
            from diff_card
             union all
            select
                curr,
                prv,
                (
                    select json_arrayagg(cnt)
                    from exsvc
                ) as list
            from diff_exsvc
            union all
            select
                curr,
                prv,
                (
                    select json_arrayagg(cnt)
                    from tc_graph
                ) as list
            from diff_tc
            union all
            select
                curr,
                prv,
                (
                    select json_arrayagg(cnt)
                    from avg_margin_graph
                ) as list
            from diff_margin
            union all
            select
                curr,
                prv,
                (
                    select json_arrayagg(cnt)
                    from ud_graph
                ) as list
            from diff_ud
            union all
            select
                curr,
                prv,
                (
                    select json_arrayagg(cnt)
                    from sec_graph
                ) as list
            from diff_sec
        )

        select FLOOR(curr) as value,
               (
                   CASE
                       WHEN curr = 0 and prv = 0 THEN 0
                       WHEN prv != 0 and curr = 0 THEN -100
                       WHEN prv = 0 and curr != 0 THEN 100
                       WHEN curr != 0 and prv != 0 THEN TRUNCATE(((curr/prv)-1)*100, 1)
                       END
                   ) as per,
               list
        from final
 {executed in 17 msec}
2025-04-09 00:21:44.867 INFO  [http-nio-11040-exec-2] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/sale/graph/ct/d
2025-04-09 00:21:44.867 INFO  [http-nio-11040-exec-2] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDEyNTcwNCwiZXhwIjoxNzQ0MTI2MzA0LCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.ZigepFptVPKpk__f3jIgZpJMvaR_GokivyFDGaR6qwk
2025-04-09 00:21:44.868 INFO  [http-nio-11040-exec-2] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/sale/graph/ct/d
2025-04-09 00:21:44.869 INFO  [http-nio-11040-exec-2] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-09 00:21:44.871 DEBUG [http-nio-11040-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 1 msec}
2025-04-09 00:21:44.871 INFO  [http-nio-11040-exec-2] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-09 00:21:44.874 DEBUG [http-nio-11040-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. set @limit_cond := (
               case 'd'
                   when 'h' then '2000-01-24'
                   when 'd' then '2025-04-08'
                   when 'w' then '2025-04-08'
                   when 'm' then date_sub('2025-04-08', interval 1 month)
               end
        );

        with recursive org_date_table as (
            select (
                       case
                           when 'd' = 'h' then '2000-01-01'
                           when 'd' != 'h' then '2025-04-02'
                           end
                       ) as it
            union all
            select (
                       case 'd'
                           when 'h' then date_add(it, interval 1 day)
                           when 'd' then date_add(it, interval 1 day)
                           when 'w' then date_add(it, interval 1 week)
                           when 'm' then date_add(it, interval 1 month)
                           end
                       ) as it
            from org_date_table
            where it < @limit_cond
        ), date_table as (
            select
                year(it) as _year,
                (
                    case 'd'
                        when 'h' then day(it)
                        when 'd' then it
                        when 'w' then week(it)
                        when 'm' then month(it)
                        end
                    ) as dt
            from org_date_table
        ),  date_sale as (
            select year(actv_dt) _year,
                   month(actv_dt) as m,
                   week(actv_dt) as w,
                   actv_dt as d,
                   hour(regi_dt) as h,
                   tb_sale.*
            from tb_sale
            where shop_id=2 and

                    seller_id='km1104rs' and

                actv_dt between '2025-04-02' and (
                    case
                        when 'd' = 'h' then '2025-04-02'
                        when 'd' != 'h' then '2025-04-08'
                        end
                    )
        ), final as (
            select count(device_id) as cnt
            from date_table dd
                     left outer join date_sale ds on dd._year=ds._year and
                                                     d = dt
            group by dd._year, dd.dt
        )

        select
            (
                select json_arrayagg(cnt)
                from final
            ) as value,
            (
                select json_arrayagg(date_format(it, '%Y-%m-%d'))
                from org_date_table
            ) as date
 {executed in 1 msec}
2025-04-09 00:21:44.881 INFO  [http-nio-11040-exec-10] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/sale/graph/ct/select/0
2025-04-09 00:21:44.882 INFO  [http-nio-11040-exec-10] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDEyNTcwNCwiZXhwIjoxNzQ0MTI2MzA0LCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.ZigepFptVPKpk__f3jIgZpJMvaR_GokivyFDGaR6qwk
2025-04-09 00:21:44.882 INFO  [http-nio-11040-exec-10] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/sale/graph/ct/select/0
2025-04-09 00:21:44.883 INFO  [http-nio-11040-exec-10] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-09 00:21:44.885 DEBUG [http-nio-11040-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 1 msec}
2025-04-09 00:21:44.885 INFO  [http-nio-11040-exec-10] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-09 00:21:44.890 DEBUG [http-nio-11040-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. with recursive group_generation as (
            select 0 as g
            union all
            select g+1
            from group_generation
            where g < 8
        ), group_weekday as (
            select 0 as g
            union all
            select g+1
            from group_weekday
            where g < 6
        ),  sale as (
            select weekday(actv_dt) as days,
                   device_id,
                   cust_cd,
                   sale_id
            from tb_sale
            where shop_id=2 and

                      seller_id='km1104rs' and

                device_id is not null and
                actv_dt between '2025-04-01' and '2025-04-30'
        ), sale_gene as (
            select sale_id,
                   (
                       case
                           when length(cust_cd) = 6 then floor((year(curdate()) - concat((
                                 case
                                     when substring(cust_cd, 1,2) > '44' then '19'
                                     when substring(cust_cd, 1,2) <= '44' then '20'
                                     end
                                 ),substring(cust_cd,1,2))) / 10)
                           when length(cust_cd) != 6 then null
                           end
                       ) as generation
            from sale
        ), generation as (
            select g,
                   device_id
            from group_generation g
                     left outer join sale_gene sg on g.g=sg.generation
                     left outer join sale s on s.sale_id=sg.sale_id
        ), weekdays as (
            select g,
                   device_id
            from group_weekday w
                     left outer join sale s on s.days=w.g
        )

        select IFNULL(count(device_id),0) as avg
        from generation
        group by g
 {executed in 2 msec}
2025-04-09 00:21:44.897 INFO  [http-nio-11040-exec-7] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/sale/graph/stat/select/0
2025-04-09 00:21:44.897 INFO  [http-nio-11040-exec-7] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDEyNTcwNCwiZXhwIjoxNzQ0MTI2MzA0LCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.ZigepFptVPKpk__f3jIgZpJMvaR_GokivyFDGaR6qwk
2025-04-09 00:21:44.897 INFO  [http-nio-11040-exec-7] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/sale/graph/stat/select/0
2025-04-09 00:21:44.900 INFO  [http-nio-11040-exec-7] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-09 00:21:44.907 DEBUG [http-nio-11040-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
2. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 5 msec}
2025-04-09 00:21:44.909 INFO  [http-nio-11040-exec-7] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-09 00:21:44.915 INFO  [http-nio-11040-exec-1] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/sale/graph/ratio/select/0
2025-04-09 00:21:44.916 INFO  [http-nio-11040-exec-1] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDEyNTcwNCwiZXhwIjoxNzQ0MTI2MzA0LCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.ZigepFptVPKpk__f3jIgZpJMvaR_GokivyFDGaR6qwk
2025-04-09 00:21:44.916 INFO  [http-nio-11040-exec-1] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/sale/graph/ratio/select/0
2025-04-09 00:21:44.916 DEBUG [http-nio-11040-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
2. with base as (select device_id,
                             (SELECT device_nm
                              FROM tb_device
                              WHERE tb_device.device_id = sl.device_id)      as device,
                             sd_id,
                             (SELECT sd_nm
                              FROM tb_second_device
                              WHERE tb_second_device.sd_id = sl.sd_id)       as sec_device,
                             ct_actv_plan,
                             (SELECT ct_plan_nm
                              FROM tb_ct_plan
                              WHERE tb_ct_plan.ct_plan_id = sl.ct_actv_plan) as actv_plan
                      from tb_sale sl
                      where shop_id = 2 and

                                seller_id='km1104rs' and

                        actv_dt between '2025-04-01' and '2025-04-30'),
             device as (SELECT device                   as name,
                               count(device_id) as count
                        from base
                        where device_id is not null
                        group by device),
             sec_device as (SELECT sec_device                   as name,
                                   count(sec_device) as count
                            from base
                            where sd_id is not null
                            group by sec_device),
             actv_plan as (SELECT actv_plan                   as name,
                                  count(actv_plan) as count
                           from base
                           where ct_actv_plan is not null
                           group by actv_plan),
             total as (select count('device') as cnt
                       from base
                       where 'device' is not null
             )

        select name,
               count,
               (
                   IF((select cnt
                       from total) = 0 or count = 0, 0, TRUNCATE(
                              (count / (
                                  select cnt
                                  from total
                              )
                                  ) * 100, 1))
                   ) as per
        from device
        order by per desc
        limit 5
 {executed in 3 msec}
2025-04-09 00:21:44.917 INFO  [http-nio-11040-exec-1] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-09 00:21:44.920 DEBUG [http-nio-11040-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
6. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 2 msec}
2025-04-09 00:21:44.921 INFO  [http-nio-11040-exec-1] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-09 00:21:44.926 DEBUG [http-nio-11040-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
6. with recursive istm_range as (
            select 0 as i
            union all
            select i+1
            from istm_range
            where i<5
        ), base as (
            select ct_istm
            from tb_sale
            where shop_id=2 and

                        seller_id='km1104rs' and

                actv_dt between '2025-04-01' and '2025-04-30'
        ), final as (
            select i as istm,
                   IFNULL(count(base.ct_istm),0) as cnt
            from istm_range
                     left outer join base on base.ct_istm=istm_range.i
            group by i
            order by istm desc
        )

        select json_arrayagg(istm) as type,
               json_arrayagg(cnt) as cnt,
               json_arrayagg(IF((
                      select IFNULL(count(ct_istm), 0)
                      from base
                  ) = 0 or cnt = 0, 0, TRUNCATE((cnt/(
                   select IFNULL(count(ct_istm), 0)
                   from base
               )) * 100, 1))) as per
        from final
 {executed in 2 msec}
2025-04-09 00:21:44.930 INFO  [http-nio-11040-exec-8] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/sale/graph/summary
2025-04-09 00:21:44.931 INFO  [http-nio-11040-exec-8] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDEyNTcwNCwiZXhwIjoxNzQ0MTI2MzA0LCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.ZigepFptVPKpk__f3jIgZpJMvaR_GokivyFDGaR6qwk
2025-04-09 00:21:44.931 INFO  [http-nio-11040-exec-8] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/sale/graph/summary
2025-04-09 00:21:44.932 INFO  [http-nio-11040-exec-8] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-09 00:21:44.934 DEBUG [http-nio-11040-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
5. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 2 msec}
2025-04-09 00:21:44.934 INFO  [http-nio-11040-exec-8] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-09 00:21:44.935 INFO  [http-nio-11040-exec-8] [com.momo.api.SaleController] - summary: CommonVO(provider=null, date=null, year=null, month=null, day=null, selectType=null, range=null, dateType=null, prevFromYmd=null, prevToYmd=null, currFromYmd=null, currToYmd=null, fromYmd=2024-10-01, toYmd=2025-04-01, fromYm=null, toYm=null, prevDate=null, currDate=null)
2025-04-09 00:21:44.970 DEBUG [http-nio-11040-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
5. #         월별 날짜 구하기
        with recursive month_range as (
            select '2024-10-01' as d
            union all
            select date_add(d, interval 1 month) as d
            from month_range
            where date_add(d, interval 1 month) < '2025-04-01'
        ), months as(
            select month(d) as m
            from month_range
        ), filtered_sale as ( # 판매일보 초벌
            select month(actv_dt) as actv_month,
                   device_id,
                   internet_plan,
                   tv_plan,
                    exsvc_id,
                   total_cms,
                   wt_cms,
                   sale_id,
                   sd_id,
                    shop_id
            from tb_sale
            where shop_id=2 and

                    seller_id='km1104rs' and

                actv_dt between '2024-10-01' and date_add('2025-04-01', interval 1 month)
        ), ct_graph as ( # 무선 그래프 데이터
            SELECT m,
                   count(device_id) as cnt
            FROM months
                     LEFT OUTER JOIN filtered_sale on actv_month = m and
                                                      device_id is not null
            group by m
        ), internet_graph as ( # 인터넷 그래프 데이터
            SELECT m,
                   count(internet_plan) as cnt
            FROM months
                     LEFT OUTER JOIN filtered_sale on actv_month = m  and
                                                      internet_plan is not null
            group by m
        ), tv_graph as ( # TV 그래프 데이터
            SELECT m,
                   count(tv_plan) as cnt
            FROM months
                     LEFT OUTER JOIN filtered_sale on actv_month = m  and
                                                      tv_plan is not null
            group by m
        ), card as ( # 카드 데이터
            SELECT m,
                   (
                    select count(*)
                    from tb_sale_card sc
                    left outer join filtered_sale fs on fs.shop_id = sc.shop_id and
                                                        fs.sale_id = sc.sale_id
                   )  as cnt
            FROM months
                     LEFT OUTER JOIN filtered_sale on actv_month = m
            group by m
        ), exsvc as ( # 부가서비스 데이터
            SELECT m,
                   count(exsvc_id) as cnt
            FROM months
                     LEFT OUTER JOIN filtered_sale on actv_month = m  and
                                                      exsvc_id is not null
            group by m
        ), tc_graph as ( # 총 이익 그래프 데이터
            SELECT m,
                   IFNULL(sum(total_cms), 0) as cnt
            FROM months
                     LEFT OUTER JOIN filtered_sale on actv_month = m
            group by m
        ), avg_margin_graph as ( # 개인 평균 마진 그래프 데이터
            SELECT m,
                   IFNULL(avg(total_cms), 0) as cnt
            FROM months
                     LEFT OUTER JOIN filtered_sale on actv_month = m and
                                                      device_id is not null
            group by m
        ), ud_graph as ( # 중고 개통 그래프 데이터
            SELECT m,
                   count(ud_id) as cnt
            FROM months
                     LEFT OUTER JOIN filtered_sale on actv_month = m
                     LEFT OUTER JOIN tb_sale_used_device sud on sud.sale_id=filtered_sale.sale_id
            group by m
        ), sec_graph as ( # 세컨 그래프 데이터
            SELECT m,
                   count(sd_id) as cnt
            FROM months
                     LEFT OUTER JOIN filtered_sale on actv_month = m and
                                                      sd_id != 0
            group by m
        ), diff_ct as (
            select
                (
                    select cnt
                    from ct_graph
                    limit 4, 1
                ) as prv,
                (
                    select cnt
                    from ct_graph
                    limit 5,1
                ) as curr
            from dual
        ), diff_internet as (
            select
                (
                    select cnt
                    from internet_graph
                    limit 4,1
                ) as prv,
                (
                    select cnt
                    from internet_graph
                    limit 5,1
                ) as curr
            from dual
        ), diff_tv as (
            select
                (
                    select cnt
                    from tv_graph
                    limit 4,1
                ) as prv,
                (
                    select cnt
                    from tv_graph
                    limit 5,1
                ) as curr
            from dual
        ), diff_card as (
            select
                (
                    select cnt
                    from card
                    limit 4,1
                ) as prv,
                (
                    select cnt
                    from card
                    limit 5,1
                ) as curr
            from dual
        ), diff_exsvc as (
            select
                (
                    select cnt
                    from exsvc
                    limit 4,1
                ) as prv,
                (
                    select cnt
                    from exsvc
                    limit 5,1
                ) as curr
            from dual
        ), diff_tc as (
            select
                (
                    select cnt
                    from tc_graph
                    limit 4,1
                ) as prv,
                (
                    select cnt
                    from tc_graph
                    limit 5,1
                ) as curr
            from dual
        ) , diff_margin as (
            select
                (
                    select cnt
                    from avg_margin_graph
                    limit 4,1
                ) as prv,
                (
                    select cnt
                    from avg_margin_graph
                    limit 5,1
                ) as curr
            from dual
        ), diff_ud as (
            select
                (
                    select cnt
                    from ud_graph
                    limit 4,1
                ) as prv,
                (
                    select cnt
                    from ud_graph
                    limit 5,1
                ) as curr
            from dual
        ) , diff_sec as (
            select
                (
                    select cnt
                    from sec_graph
                    limit 4,1
                ) as prv,
                (
                    select cnt
                    from sec_graph
                    limit 5,1
                ) as curr
            from dual
        ), final as (
            select
                curr,
                prv,
                (
                    select json_arrayagg(cnt)
                    from ct_graph
                ) as list
            from diff_ct
            union all
            select
                curr,
                prv,
                (
                    select json_arrayagg(cnt)
                    from internet_graph
                ) as list
            from diff_internet
            union all
            select
                curr,
                prv,
                (
                    select json_arrayagg(cnt)
                    from tv_graph
                ) as list
            from diff_tv
             union all
            select
                curr,
                prv,
                (
                    select json_arrayagg(cnt)
                    from card
                ) as list
            from diff_card
             union all
            select
                curr,
                prv,
                (
                    select json_arrayagg(cnt)
                    from exsvc
                ) as list
            from diff_exsvc
            union all
            select
                curr,
                prv,
                (
                    select json_arrayagg(cnt)
                    from tc_graph
                ) as list
            from diff_tc
            union all
            select
                curr,
                prv,
                (
                    select json_arrayagg(cnt)
                    from avg_margin_graph
                ) as list
            from diff_margin
            union all
            select
                curr,
                prv,
                (
                    select json_arrayagg(cnt)
                    from ud_graph
                ) as list
            from diff_ud
            union all
            select
                curr,
                prv,
                (
                    select json_arrayagg(cnt)
                    from sec_graph
                ) as list
            from diff_sec
        )

        select FLOOR(curr) as value,
               (
                   CASE
                       WHEN curr = 0 and prv = 0 THEN 0
                       WHEN prv != 0 and curr = 0 THEN -100
                       WHEN prv = 0 and curr != 0 THEN 100
                       WHEN curr != 0 and prv != 0 THEN TRUNCATE(((curr/prv)-1)*100, 1)
                       END
                   ) as per,
               list
        from final
 {executed in 31 msec}
2025-04-09 00:21:45.028 INFO  [http-nio-11040-exec-5] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/sale/graph/ct/select/0
2025-04-09 00:21:45.028 INFO  [http-nio-11040-exec-5] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDEyNTcwNCwiZXhwIjoxNzQ0MTI2MzA0LCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.ZigepFptVPKpk__f3jIgZpJMvaR_GokivyFDGaR6qwk
2025-04-09 00:21:45.028 INFO  [http-nio-11040-exec-5] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/sale/graph/ct/select/0
2025-04-09 00:21:45.029 INFO  [http-nio-11040-exec-5] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-09 00:21:45.031 DEBUG [http-nio-11040-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
5. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 1 msec}
2025-04-09 00:21:45.031 INFO  [http-nio-11040-exec-5] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-09 00:21:45.035 DEBUG [http-nio-11040-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
5. with recursive group_generation as (
            select 0 as g
            union all
            select g+1
            from group_generation
            where g < 8
        ), group_weekday as (
            select 0 as g
            union all
            select g+1
            from group_weekday
            where g < 6
        ),  sale as (
            select weekday(actv_dt) as days,
                   device_id,
                   cust_cd,
                   sale_id
            from tb_sale
            where shop_id=2 and

                      seller_id='km1104rs' and

                device_id is not null and
                actv_dt between '2025-04-01' and '2025-04-30'
        ), sale_gene as (
            select sale_id,
                   (
                       case
                           when length(cust_cd) = 6 then floor((year(curdate()) - concat((
                                 case
                                     when substring(cust_cd, 1,2) > '44' then '19'
                                     when substring(cust_cd, 1,2) <= '44' then '20'
                                     end
                                 ),substring(cust_cd,1,2))) / 10)
                           when length(cust_cd) != 6 then null
                           end
                       ) as generation
            from sale
        ), generation as (
            select g,
                   device_id
            from group_generation g
                     left outer join sale_gene sg on g.g=sg.generation
                     left outer join sale s on s.sale_id=sg.sale_id
        ), weekdays as (
            select g,
                   device_id
            from group_weekday w
                     left outer join sale s on s.days=w.g
        )

        select IFNULL(count(device_id),0) as avg
        from generation
        group by g
 {executed in 2 msec}
2025-04-09 00:21:45.048 INFO  [http-nio-11040-exec-6] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/sale/graph/stat/select/0
2025-04-09 00:21:45.048 INFO  [http-nio-11040-exec-6] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDEyNTcwNCwiZXhwIjoxNzQ0MTI2MzA0LCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.ZigepFptVPKpk__f3jIgZpJMvaR_GokivyFDGaR6qwk
2025-04-09 00:21:45.048 INFO  [http-nio-11040-exec-6] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/sale/graph/stat/select/0
2025-04-09 00:21:45.050 INFO  [http-nio-11040-exec-6] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-09 00:21:45.052 DEBUG [http-nio-11040-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
2. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 2 msec}
2025-04-09 00:21:45.052 INFO  [http-nio-11040-exec-6] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-09 00:21:45.058 DEBUG [http-nio-11040-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
2. with base as (select device_id,
                             (SELECT device_nm
                              FROM tb_device
                              WHERE tb_device.device_id = sl.device_id)      as device,
                             sd_id,
                             (SELECT sd_nm
                              FROM tb_second_device
                              WHERE tb_second_device.sd_id = sl.sd_id)       as sec_device,
                             ct_actv_plan,
                             (SELECT ct_plan_nm
                              FROM tb_ct_plan
                              WHERE tb_ct_plan.ct_plan_id = sl.ct_actv_plan) as actv_plan
                      from tb_sale sl
                      where shop_id = 2 and

                                seller_id='km1104rs' and

                        actv_dt between '2025-04-01' and '2025-04-30'),
             device as (SELECT device                   as name,
                               count(device_id) as count
                        from base
                        where device_id is not null
                        group by device),
             sec_device as (SELECT sec_device                   as name,
                                   count(sec_device) as count
                            from base
                            where sd_id is not null
                            group by sec_device),
             actv_plan as (SELECT actv_plan                   as name,
                                  count(actv_plan) as count
                           from base
                           where ct_actv_plan is not null
                           group by actv_plan),
             total as (select count('device') as cnt
                       from base
                       where 'device' is not null
             )

        select name,
               count,
               (
                   IF((select cnt
                       from total) = 0 or count = 0, 0, TRUNCATE(
                              (count / (
                                  select cnt
                                  from total
                              )
                                  ) * 100, 1))
                   ) as per
        from device
        order by per desc
        limit 5
 {executed in 2 msec}
2025-04-09 00:21:45.092 INFO  [http-nio-11040-exec-3] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/sale/graph/ratio/select/0
2025-04-09 00:21:45.092 INFO  [http-nio-11040-exec-3] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDEyNTcwNCwiZXhwIjoxNzQ0MTI2MzA0LCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.ZigepFptVPKpk__f3jIgZpJMvaR_GokivyFDGaR6qwk
2025-04-09 00:21:45.092 INFO  [http-nio-11040-exec-3] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/sale/graph/ratio/select/0
2025-04-09 00:21:45.093 INFO  [http-nio-11040-exec-3] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-09 00:21:45.095 DEBUG [http-nio-11040-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
3. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 1 msec}
2025-04-09 00:21:45.095 INFO  [http-nio-11040-exec-3] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-09 00:21:45.099 DEBUG [http-nio-11040-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
3. with recursive istm_range as (
            select 0 as i
            union all
            select i+1
            from istm_range
            where i<5
        ), base as (
            select ct_istm
            from tb_sale
            where shop_id=2 and

                        seller_id='km1104rs' and

                actv_dt between '2025-04-01' and '2025-04-30'
        ), final as (
            select i as istm,
                   IFNULL(count(base.ct_istm),0) as cnt
            from istm_range
                     left outer join base on base.ct_istm=istm_range.i
            group by i
            order by istm desc
        )

        select json_arrayagg(istm) as type,
               json_arrayagg(cnt) as cnt,
               json_arrayagg(IF((
                      select IFNULL(count(ct_istm), 0)
                      from base
                  ) = 0 or cnt = 0, 0, TRUNCATE((cnt/(
                   select IFNULL(count(ct_istm), 0)
                   from base
               )) * 100, 1))) as per
        from final
 {executed in 2 msec}
2025-04-09 00:22:51.670 INFO  [http-nio-11040-exec-9] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/sale/graph/ct/select/0
2025-04-09 00:22:51.670 INFO  [http-nio-11040-exec-9] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDEyNTcwNCwiZXhwIjoxNzQ0MTI2MzA0LCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.ZigepFptVPKpk__f3jIgZpJMvaR_GokivyFDGaR6qwk
2025-04-09 00:22:51.670 INFO  [http-nio-11040-exec-9] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/sale/graph/ct/select/0
2025-04-09 00:22:51.672 INFO  [http-nio-11040-exec-9] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-09 00:22:51.673 DEBUG [http-nio-11040-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 1 msec}
2025-04-09 00:22:51.674 INFO  [http-nio-11040-exec-9] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-09 00:22:51.677 DEBUG [http-nio-11040-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. with recursive group_generation as (
            select 0 as g
            union all
            select g+1
            from group_generation
            where g < 8
        ), group_weekday as (
            select 0 as g
            union all
            select g+1
            from group_weekday
            where g < 6
        ),  sale as (
            select weekday(actv_dt) as days,
                   device_id,
                   cust_cd,
                   sale_id
            from tb_sale
            where shop_id=2 and

                      seller_id='km1104rs' and

                device_id is not null and
                actv_dt between '2025-04-01' and '2025-04-30'
        ), sale_gene as (
            select sale_id,
                   (
                       case
                           when length(cust_cd) = 6 then floor((year(curdate()) - concat((
                                 case
                                     when substring(cust_cd, 1,2) > '44' then '19'
                                     when substring(cust_cd, 1,2) <= '44' then '20'
                                     end
                                 ),substring(cust_cd,1,2))) / 10)
                           when length(cust_cd) != 6 then null
                           end
                       ) as generation
            from sale
        ), generation as (
            select g,
                   device_id
            from group_generation g
                     left outer join sale_gene sg on g.g=sg.generation
                     left outer join sale s on s.sale_id=sg.sale_id
        ), weekdays as (
            select g,
                   device_id
            from group_weekday w
                     left outer join sale s on s.days=w.g
        )

        select IFNULL(count(device_id),0) as avg
        from generation
        group by g
 {executed in 1 msec}
2025-04-09 00:23:28.813 INFO  [http-nio-11040-exec-4] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/sale/graph/ct/select/0
2025-04-09 00:23:28.813 INFO  [http-nio-11040-exec-4] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDEyNTcwNCwiZXhwIjoxNzQ0MTI2MzA0LCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.ZigepFptVPKpk__f3jIgZpJMvaR_GokivyFDGaR6qwk
2025-04-09 00:23:28.814 INFO  [http-nio-11040-exec-4] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/sale/graph/ct/select/0
2025-04-09 00:23:28.814 INFO  [http-nio-11040-exec-4] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-09 00:23:28.816 DEBUG [http-nio-11040-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
4. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 1 msec}
2025-04-09 00:23:28.816 INFO  [http-nio-11040-exec-4] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-09 00:23:28.819 DEBUG [http-nio-11040-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
4. with recursive group_generation as (
            select 0 as g
            union all
            select g+1
            from group_generation
            where g < 8
        ), group_weekday as (
            select 0 as g
            union all
            select g+1
            from group_weekday
            where g < 6
        ),  sale as (
            select weekday(actv_dt) as days,
                   device_id,
                   cust_cd,
                   sale_id
            from tb_sale
            where shop_id=2 and

                      seller_id='km1104rs' and

                device_id is not null and
                actv_dt between '2025-04-01' and '2025-04-30'
        ), sale_gene as (
            select sale_id,
                   (
                       case
                           when length(cust_cd) = 6 then floor((year(curdate()) - concat((
                                 case
                                     when substring(cust_cd, 1,2) > '44' then '19'
                                     when substring(cust_cd, 1,2) <= '44' then '20'
                                     end
                                 ),substring(cust_cd,1,2))) / 10)
                           when length(cust_cd) != 6 then null
                           end
                       ) as generation
            from sale
        ), generation as (
            select g,
                   device_id
            from group_generation g
                     left outer join sale_gene sg on g.g=sg.generation
                     left outer join sale s on s.sale_id=sg.sale_id
        ), weekdays as (
            select g,
                   device_id
            from group_weekday w
                     left outer join sale s on s.days=w.g
        )

        select IFNULL(count(device_id),0) as avg
        from generation
        group by g
 {executed in 2 msec}
2025-04-09 00:23:30.128 INFO  [http-nio-11040-exec-2] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/sale/graph/ct/select/1
2025-04-09 00:23:30.128 INFO  [http-nio-11040-exec-2] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDEyNTcwNCwiZXhwIjoxNzQ0MTI2MzA0LCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.ZigepFptVPKpk__f3jIgZpJMvaR_GokivyFDGaR6qwk
2025-04-09 00:23:30.128 INFO  [http-nio-11040-exec-2] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/sale/graph/ct/select/1
2025-04-09 00:23:30.131 INFO  [http-nio-11040-exec-2] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-09 00:23:30.133 DEBUG [http-nio-11040-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 1 msec}
2025-04-09 00:23:30.134 INFO  [http-nio-11040-exec-2] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-09 00:23:30.139 DEBUG [http-nio-11040-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. with recursive group_generation as (
            select 0 as g
            union all
            select g+1
            from group_generation
            where g < 8
        ), group_weekday as (
            select 0 as g
            union all
            select g+1
            from group_weekday
            where g < 6
        ),  sale as (
            select weekday(actv_dt) as days,
                   device_id,
                   cust_cd,
                   sale_id
            from tb_sale
            where shop_id=2 and

                      seller_id='km1104rs' and

                device_id is not null and
                actv_dt between '2025-04-01' and '2025-04-30'
        ), sale_gene as (
            select sale_id,
                   (
                       case
                           when length(cust_cd) = 6 then floor((year(curdate()) - concat((
                                 case
                                     when substring(cust_cd, 1,2) > '44' then '19'
                                     when substring(cust_cd, 1,2) <= '44' then '20'
                                     end
                                 ),substring(cust_cd,1,2))) / 10)
                           when length(cust_cd) != 6 then null
                           end
                       ) as generation
            from sale
        ), generation as (
            select g,
                   device_id
            from group_generation g
                     left outer join sale_gene sg on g.g=sg.generation
                     left outer join sale s on s.sale_id=sg.sale_id
        ), weekdays as (
            select g,
                   device_id
            from group_weekday w
                     left outer join sale s on s.days=w.g
        )

        select IFNULL(count(device_id),0) as avg
        from weekdays
        group by g
 {executed in 2 msec}
2025-04-09 00:23:30.822 INFO  [http-nio-11040-exec-10] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/sale/graph/ct/select/0
2025-04-09 00:23:30.822 INFO  [http-nio-11040-exec-10] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDEyNTcwNCwiZXhwIjoxNzQ0MTI2MzA0LCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.ZigepFptVPKpk__f3jIgZpJMvaR_GokivyFDGaR6qwk
2025-04-09 00:23:30.822 INFO  [http-nio-11040-exec-10] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/sale/graph/ct/select/0
2025-04-09 00:23:30.825 INFO  [http-nio-11040-exec-10] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-09 00:23:30.829 DEBUG [http-nio-11040-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 2 msec}
2025-04-09 00:23:30.830 INFO  [http-nio-11040-exec-10] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-09 00:23:30.836 DEBUG [http-nio-11040-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. with recursive group_generation as (
            select 0 as g
            union all
            select g+1
            from group_generation
            where g < 8
        ), group_weekday as (
            select 0 as g
            union all
            select g+1
            from group_weekday
            where g < 6
        ),  sale as (
            select weekday(actv_dt) as days,
                   device_id,
                   cust_cd,
                   sale_id
            from tb_sale
            where shop_id=2 and

                      seller_id='km1104rs' and

                device_id is not null and
                actv_dt between '2025-04-01' and '2025-04-30'
        ), sale_gene as (
            select sale_id,
                   (
                       case
                           when length(cust_cd) = 6 then floor((year(curdate()) - concat((
                                 case
                                     when substring(cust_cd, 1,2) > '44' then '19'
                                     when substring(cust_cd, 1,2) <= '44' then '20'
                                     end
                                 ),substring(cust_cd,1,2))) / 10)
                           when length(cust_cd) != 6 then null
                           end
                       ) as generation
            from sale
        ), generation as (
            select g,
                   device_id
            from group_generation g
                     left outer join sale_gene sg on g.g=sg.generation
                     left outer join sale s on s.sale_id=sg.sale_id
        ), weekdays as (
            select g,
                   device_id
            from group_weekday w
                     left outer join sale s on s.days=w.g
        )

        select IFNULL(count(device_id),0) as avg
        from generation
        group by g
 {executed in 2 msec}
2025-04-09 00:23:35.441 INFO  [http-nio-11040-exec-7] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/auth/refresh
2025-04-09 00:23:35.442 INFO  [http-nio-11040-exec-7] [com.momo.filter.JwtAuthorizationFilter] - access token: null
2025-04-09 00:23:35.442 INFO  [http-nio-11040-exec-7] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/auth/refresh
2025-04-09 00:23:35.442 INFO  [http-nio-11040-exec-7] [com.momo.filter.JwtAuthorizationFilter] - 유효한 JWT 토큰이 없습니다
2025-04-09 00:23:35.443 INFO  [http-nio-11040-exec-7] [com.momo.api.AuthController] - refresh
2025-04-09 00:23:35.453 DEBUG [http-nio-11040-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
2. SELECT  *
        FROM    tb_refresh_token
        WHERE   refresh_token='eyJhbGciOiJIUzI1NiJ9.eyJleHAiOjE3NDQxMjg2NTR9.Hu5v28fYDYskftTZCCla1rTP2SYYoiuUfGr3MjFwGxk'
 {executed in 3 msec}
2025-04-09 00:23:35.456 DEBUG [http-nio-11040-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
2. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 2 msec}
2025-04-09 00:23:35.458 INFO  [http-nio-11040-exec-7] [com.momo.api.AuthController] - jwt: JwtVO(grantType=Bearer , username=km1104rs, accessToken=eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDEyNTgxNSwiZXhwIjoxNzQ0MTI2NDE1LCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.LGTFmcckc4d4WDD7TA6jPBBdxFVSZu05vxrDpZkxasA, refreshToken=null, expireTime=null, revoked=false, expired=false)
2025-04-09 00:23:35.493 INFO  [http-nio-11040-exec-1] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/notif/all
2025-04-09 00:23:35.493 INFO  [http-nio-11040-exec-1] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDEyNTgxNSwiZXhwIjoxNzQ0MTI2NDE1LCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.LGTFmcckc4d4WDD7TA6jPBBdxFVSZu05vxrDpZkxasA
2025-04-09 00:23:35.493 INFO  [http-nio-11040-exec-1] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/notif/all
2025-04-09 00:23:35.496 INFO  [http-nio-11040-exec-1] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-09 00:23:35.499 DEBUG [http-nio-11040-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
6. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 2 msec}
2025-04-09 00:23:35.499 INFO  [http-nio-11040-exec-1] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-09 00:23:35.500 INFO  [http-nio-11040-exec-1] [c.momo.common.util.SecurityContextUtil] - principal: UserDetailsImpl(username=km1104rs, password=$2a$10$uXShhwl6ULOkbJe477uDWOfdiUUcu6lOSF/Dhj9xP3U1nUn/gXkc6, authorities=[ROLE_NONE])
2025-04-09 00:23:35.509 DEBUG [http-nio-11040-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
6. SELECT content,
               notif_id,
               read_st,
               notif_tp as type,
               IF(date(send_dt) = current_date,true,false) as today,
            (
               TIMESTAMPDIFF(MINUTE, send_dt, current_timestamp)
            ) as ago
        FROM tb_notification
        WHERE receiver_id='km1104rs'
        ORDER BY send_dt DESC
 {executed in 4 msec}
2025-04-09 00:23:35.511 INFO  [http-nio-11040-exec-8] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/notif/read/all
2025-04-09 00:23:35.511 INFO  [http-nio-11040-exec-8] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDEyNTgxNSwiZXhwIjoxNzQ0MTI2NDE1LCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.LGTFmcckc4d4WDD7TA6jPBBdxFVSZu05vxrDpZkxasA
2025-04-09 00:23:35.511 INFO  [http-nio-11040-exec-8] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/notif/read/all
2025-04-09 00:23:35.513 INFO  [http-nio-11040-exec-6] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/user/info
2025-04-09 00:23:35.513 INFO  [http-nio-11040-exec-6] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDEyNTgxNSwiZXhwIjoxNzQ0MTI2NDE1LCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.LGTFmcckc4d4WDD7TA6jPBBdxFVSZu05vxrDpZkxasA
2025-04-09 00:23:35.513 INFO  [http-nio-11040-exec-6] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/user/info
2025-04-09 00:23:35.513 INFO  [http-nio-11040-exec-5] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/notif/count/unread
2025-04-09 00:23:35.513 INFO  [http-nio-11040-exec-5] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDEyNTgxNSwiZXhwIjoxNzQ0MTI2NDE1LCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.LGTFmcckc4d4WDD7TA6jPBBdxFVSZu05vxrDpZkxasA
2025-04-09 00:23:35.513 INFO  [http-nio-11040-exec-5] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/notif/count/unread
2025-04-09 00:23:35.514 INFO  [http-nio-11040-exec-6] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-09 00:23:35.514 INFO  [http-nio-11040-exec-5] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-09 00:23:35.513 INFO  [http-nio-11040-exec-8] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-09 00:23:35.523 DEBUG [http-nio-11040-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
5. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 5 msec}
2025-04-09 00:23:35.524 DEBUG [http-nio-11040-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
2. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 10 msec}
2025-04-09 00:23:35.524 INFO  [http-nio-11040-exec-5] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-09 00:23:35.524 INFO  [http-nio-11040-exec-6] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-09 00:23:35.524 INFO  [http-nio-11040-exec-5] [c.momo.common.util.SecurityContextUtil] - principal: UserDetailsImpl(username=km1104rs, password=$2a$10$uXShhwl6ULOkbJe477uDWOfdiUUcu6lOSF/Dhj9xP3U1nUn/gXkc6, authorities=[ROLE_NONE])
2025-04-09 00:23:35.525 INFO  [http-nio-11040-exec-6] [c.momo.common.util.SecurityContextUtil] - principal: UserDetailsImpl(username=km1104rs, password=$2a$10$uXShhwl6ULOkbJe477uDWOfdiUUcu6lOSF/Dhj9xP3U1nUn/gXkc6, authorities=[ROLE_NONE])
2025-04-09 00:23:35.535 DEBUG [http-nio-11040-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 14 msec}
2025-04-09 00:23:35.540 DEBUG [http-nio-11040-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
2. SELECT ac.id,
               ac.name,
               ac.tel,
               ac.nickname,
               ac.pfp,
               ac.curr_shop_id,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where sf.shop_id = ac.curr_shop_id and
                         sf.staff_id = ac.id
                   ) as role,
               sh.shop_nm,
               sh.shop_addr,
               sh.provider,
               (
                   IFNULL((
                       select sf2.approval_st
                       from tb_staff sf2
                       where sf2.shop_id=ac.curr_shop_id and
                           sf2.staff_id=ac.id
                       ), -1)
                ) as approval_st,
                ac.corp_nm,
                ac.br_no
        FROM tb_account ac
        LEFT OUTER JOIN tb_shop sh on sh.shop_id=ac.curr_shop_id
        WHERE id = 'km1104rs'
 {executed in 11 msec}
2025-04-09 00:23:35.540 DEBUG [http-nio-11040-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
5. SELECT count(*)
        FROM tb_notification
        WHERE receiver_id = 'km1104rs'
          AND read_st = FALSE
 {executed in 3 msec}
2025-04-09 00:23:35.576 INFO  [http-nio-11040-exec-6] [com.momo.api.UserController] - User: {role=0, approval_st=1, shop_addr=충청남도 천안시 병천면 충절로 1600 한국기술교육대학교 다산정보관 102, br_no=5218702490, provider=2, name=박희찬, nickname=대표, corp_nm=123, tel=010-4524-0636, id=km1104rs, pfp=1921fc01-e573-4243-9365-6b905389f4fc.png, curr_shop_id=2, shop_nm=한기대점 }
2025-04-09 00:23:35.575 INFO  [http-nio-11040-exec-8] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-09 00:23:35.580 INFO  [http-nio-11040-exec-8] [c.momo.common.util.SecurityContextUtil] - principal: UserDetailsImpl(username=km1104rs, password=$2a$10$uXShhwl6ULOkbJe477uDWOfdiUUcu6lOSF/Dhj9xP3U1nUn/gXkc6, authorities=[ROLE_NONE])
2025-04-09 00:23:35.594 DEBUG [http-nio-11040-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. UPDATE tb_notification
        SET read_st = TRUE
        WHERE receiver_id = 'km1104rs'
          AND read_st = FALSE
 {executed in 3 msec}
2025-04-09 00:23:35.623 INFO  [http-nio-11040-exec-3] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/notif/count/unread
2025-04-09 00:23:35.625 INFO  [http-nio-11040-exec-3] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDEyNTgxNSwiZXhwIjoxNzQ0MTI2NDE1LCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.LGTFmcckc4d4WDD7TA6jPBBdxFVSZu05vxrDpZkxasA
2025-04-09 00:23:35.625 INFO  [http-nio-11040-exec-3] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/notif/count/unread
2025-04-09 00:23:35.632 INFO  [http-nio-11040-exec-3] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-09 00:23:35.668 DEBUG [http-nio-11040-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
3. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 7 msec}
2025-04-09 00:23:35.674 INFO  [http-nio-11040-exec-3] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-09 00:23:35.675 INFO  [http-nio-11040-exec-3] [c.momo.common.util.SecurityContextUtil] - principal: UserDetailsImpl(username=km1104rs, password=$2a$10$uXShhwl6ULOkbJe477uDWOfdiUUcu6lOSF/Dhj9xP3U1nUn/gXkc6, authorities=[ROLE_NONE])
2025-04-09 00:23:35.683 DEBUG [http-nio-11040-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
3. SELECT count(*)
        FROM tb_notification
        WHERE receiver_id = 'km1104rs'
          AND read_st = FALSE
 {executed in 5 msec}
2025-04-09 00:23:51.332 INFO  [http-nio-11040-exec-9] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/notif/all
2025-04-09 00:23:51.333 INFO  [http-nio-11040-exec-9] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDEyNTgxNSwiZXhwIjoxNzQ0MTI2NDE1LCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.LGTFmcckc4d4WDD7TA6jPBBdxFVSZu05vxrDpZkxasA
2025-04-09 00:23:51.333 INFO  [http-nio-11040-exec-9] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/notif/all
2025-04-09 00:23:51.334 INFO  [http-nio-11040-exec-9] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-09 00:23:51.336 DEBUG [http-nio-11040-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 1 msec}
2025-04-09 00:23:51.336 INFO  [http-nio-11040-exec-9] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-09 00:23:51.337 INFO  [http-nio-11040-exec-9] [c.momo.common.util.SecurityContextUtil] - principal: UserDetailsImpl(username=km1104rs, password=$2a$10$uXShhwl6ULOkbJe477uDWOfdiUUcu6lOSF/Dhj9xP3U1nUn/gXkc6, authorities=[ROLE_NONE])
2025-04-09 00:23:51.340 DEBUG [http-nio-11040-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT content,
               notif_id,
               read_st,
               notif_tp as type,
               IF(date(send_dt) = current_date,true,false) as today,
            (
               TIMESTAMPDIFF(MINUTE, send_dt, current_timestamp)
            ) as ago
        FROM tb_notification
        WHERE receiver_id='km1104rs'
        ORDER BY send_dt DESC
 {executed in 2 msec}
2025-04-09 00:23:51.346 INFO  [http-nio-11040-exec-4] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/notif/read/all
2025-04-09 00:23:51.346 INFO  [http-nio-11040-exec-4] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDEyNTgxNSwiZXhwIjoxNzQ0MTI2NDE1LCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.LGTFmcckc4d4WDD7TA6jPBBdxFVSZu05vxrDpZkxasA
2025-04-09 00:23:51.346 INFO  [http-nio-11040-exec-4] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/notif/read/all
2025-04-09 00:23:51.347 INFO  [http-nio-11040-exec-4] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-09 00:23:51.349 DEBUG [http-nio-11040-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
4. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 1 msec}
2025-04-09 00:23:51.349 INFO  [http-nio-11040-exec-4] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-09 00:23:51.350 INFO  [http-nio-11040-exec-4] [c.momo.common.util.SecurityContextUtil] - principal: UserDetailsImpl(username=km1104rs, password=$2a$10$uXShhwl6ULOkbJe477uDWOfdiUUcu6lOSF/Dhj9xP3U1nUn/gXkc6, authorities=[ROLE_NONE])
2025-04-09 00:23:51.351 DEBUG [http-nio-11040-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
4. UPDATE tb_notification
        SET read_st = TRUE
        WHERE receiver_id = 'km1104rs'
          AND read_st = FALSE
 {executed in 1 msec}
2025-04-09 00:23:51.364 INFO  [http-nio-11040-exec-2] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/notif/count/unread
2025-04-09 00:23:51.364 INFO  [http-nio-11040-exec-2] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDEyNTgxNSwiZXhwIjoxNzQ0MTI2NDE1LCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.LGTFmcckc4d4WDD7TA6jPBBdxFVSZu05vxrDpZkxasA
2025-04-09 00:23:51.364 INFO  [http-nio-11040-exec-2] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/notif/count/unread
2025-04-09 00:23:51.365 INFO  [http-nio-11040-exec-2] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-09 00:23:51.367 DEBUG [http-nio-11040-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 1 msec}
2025-04-09 00:23:51.367 INFO  [http-nio-11040-exec-2] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-09 00:23:51.368 INFO  [http-nio-11040-exec-2] [c.momo.common.util.SecurityContextUtil] - principal: UserDetailsImpl(username=km1104rs, password=$2a$10$uXShhwl6ULOkbJe477uDWOfdiUUcu6lOSF/Dhj9xP3U1nUn/gXkc6, authorities=[ROLE_NONE])
2025-04-09 00:23:51.369 DEBUG [http-nio-11040-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT count(*)
        FROM tb_notification
        WHERE receiver_id = 'km1104rs'
          AND read_st = FALSE
 {executed in 1 msec}
2025-04-09 00:23:51.382 INFO  [http-nio-11040-exec-10] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/sale/graph/ct/d
2025-04-09 00:23:51.382 INFO  [http-nio-11040-exec-10] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDEyNTgxNSwiZXhwIjoxNzQ0MTI2NDE1LCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.LGTFmcckc4d4WDD7TA6jPBBdxFVSZu05vxrDpZkxasA
2025-04-09 00:23:51.382 INFO  [http-nio-11040-exec-10] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/sale/graph/ct/d
2025-04-09 00:23:51.383 INFO  [http-nio-11040-exec-10] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-09 00:23:51.384 DEBUG [http-nio-11040-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 1 msec}
2025-04-09 00:23:51.385 INFO  [http-nio-11040-exec-10] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-09 00:23:51.388 DEBUG [http-nio-11040-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. set @limit_cond := (
               case 'd'
                   when 'h' then '2000-01-24'
                   when 'd' then '2025-04-09'
                   when 'w' then '2025-04-09'
                   when 'm' then date_sub('2025-04-09', interval 1 month)
               end
        );

        with recursive org_date_table as (
            select (
                       case
                           when 'd' = 'h' then '2000-01-01'
                           when 'd' != 'h' then '2025-01-09'
                           end
                       ) as it
            union all
            select (
                       case 'd'
                           when 'h' then date_add(it, interval 1 day)
                           when 'd' then date_add(it, interval 1 day)
                           when 'w' then date_add(it, interval 1 week)
                           when 'm' then date_add(it, interval 1 month)
                           end
                       ) as it
            from org_date_table
            where it < @limit_cond
        ), date_table as (
            select
                year(it) as _year,
                (
                    case 'd'
                        when 'h' then day(it)
                        when 'd' then it
                        when 'w' then week(it)
                        when 'm' then month(it)
                        end
                    ) as dt
            from org_date_table
        ),  date_sale as (
            select year(actv_dt) _year,
                   month(actv_dt) as m,
                   week(actv_dt) as w,
                   actv_dt as d,
                   hour(regi_dt) as h,
                   tb_sale.*
            from tb_sale
            where shop_id=2 and

                actv_dt between '2025-01-09' and (
                    case
                        when 'd' = 'h' then '2025-01-09'
                        when 'd' != 'h' then '2025-04-09'
                        end
                    )
        ), final as (
            select count(device_id) as cnt
            from date_table dd
                     left outer join date_sale ds on dd._year=ds._year and
                                                     d = dt
            group by dd._year, dd.dt
        )

        select
            (
                select json_arrayagg(cnt)
                from final
            ) as value,
            (
                select json_arrayagg(date_format(it, '%Y-%m-%d'))
                from org_date_table
            ) as date
 {executed in 1 msec}
2025-04-09 00:23:51.401 INFO  [http-nio-11040-exec-7] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/sale/graph/ct/d
2025-04-09 00:23:51.402 INFO  [http-nio-11040-exec-7] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDEyNTgxNSwiZXhwIjoxNzQ0MTI2NDE1LCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.LGTFmcckc4d4WDD7TA6jPBBdxFVSZu05vxrDpZkxasA
2025-04-09 00:23:51.402 INFO  [http-nio-11040-exec-7] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/sale/graph/ct/d
2025-04-09 00:23:51.403 INFO  [http-nio-11040-exec-7] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-09 00:23:51.405 DEBUG [http-nio-11040-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
2. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 1 msec}
2025-04-09 00:23:51.405 INFO  [http-nio-11040-exec-7] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-09 00:23:51.408 DEBUG [http-nio-11040-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
2. set @limit_cond := (
               case 'd'
                   when 'h' then '2000-01-24'
                   when 'd' then '2025-04-08'
                   when 'w' then '2025-04-08'
                   when 'm' then date_sub('2025-04-08', interval 1 month)
               end
        );

        with recursive org_date_table as (
            select (
                       case
                           when 'd' = 'h' then '2000-01-01'
                           when 'd' != 'h' then '2025-04-02'
                           end
                       ) as it
            union all
            select (
                       case 'd'
                           when 'h' then date_add(it, interval 1 day)
                           when 'd' then date_add(it, interval 1 day)
                           when 'w' then date_add(it, interval 1 week)
                           when 'm' then date_add(it, interval 1 month)
                           end
                       ) as it
            from org_date_table
            where it < @limit_cond
        ), date_table as (
            select
                year(it) as _year,
                (
                    case 'd'
                        when 'h' then day(it)
                        when 'd' then it
                        when 'w' then week(it)
                        when 'm' then month(it)
                        end
                    ) as dt
            from org_date_table
        ),  date_sale as (
            select year(actv_dt) _year,
                   month(actv_dt) as m,
                   week(actv_dt) as w,
                   actv_dt as d,
                   hour(regi_dt) as h,
                   tb_sale.*
            from tb_sale
            where shop_id=2 and

                actv_dt between '2025-04-02' and (
                    case
                        when 'd' = 'h' then '2025-04-02'
                        when 'd' != 'h' then '2025-04-08'
                        end
                    )
        ), final as (
            select count(device_id) as cnt
            from date_table dd
                     left outer join date_sale ds on dd._year=ds._year and
                                                     d = dt
            group by dd._year, dd.dt
        )

        select
            (
                select json_arrayagg(cnt)
                from final
            ) as value,
            (
                select json_arrayagg(date_format(it, '%Y-%m-%d'))
                from org_date_table
            ) as date
 {executed in 1 msec}
2025-04-09 00:23:51.423 INFO  [http-nio-11040-exec-1] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/sale/graph/ct/select/0
2025-04-09 00:23:51.423 INFO  [http-nio-11040-exec-1] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDEyNTgxNSwiZXhwIjoxNzQ0MTI2NDE1LCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.LGTFmcckc4d4WDD7TA6jPBBdxFVSZu05vxrDpZkxasA
2025-04-09 00:23:51.423 INFO  [http-nio-11040-exec-1] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/sale/graph/ct/select/0
2025-04-09 00:23:51.424 INFO  [http-nio-11040-exec-1] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-09 00:23:51.426 DEBUG [http-nio-11040-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
6. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 2 msec}
2025-04-09 00:23:51.426 INFO  [http-nio-11040-exec-1] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-09 00:23:51.429 DEBUG [http-nio-11040-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
6. with recursive group_generation as (
            select 0 as g
            union all
            select g+1
            from group_generation
            where g < 8
        ), group_weekday as (
            select 0 as g
            union all
            select g+1
            from group_weekday
            where g < 6
        ),  sale as (
            select weekday(actv_dt) as days,
                   device_id,
                   cust_cd,
                   sale_id
            from tb_sale
            where shop_id=2 and

                device_id is not null and
                actv_dt between '2025-04-01' and '2025-04-30'
        ), sale_gene as (
            select sale_id,
                   (
                       case
                           when length(cust_cd) = 6 then floor((year(curdate()) - concat((
                                 case
                                     when substring(cust_cd, 1,2) > '44' then '19'
                                     when substring(cust_cd, 1,2) <= '44' then '20'
                                     end
                                 ),substring(cust_cd,1,2))) / 10)
                           when length(cust_cd) != 6 then null
                           end
                       ) as generation
            from sale
        ), generation as (
            select g,
                   device_id
            from group_generation g
                     left outer join sale_gene sg on g.g=sg.generation
                     left outer join sale s on s.sale_id=sg.sale_id
        ), weekdays as (
            select g,
                   device_id
            from group_weekday w
                     left outer join sale s on s.days=w.g
        )

        select IFNULL(count(device_id),0) as avg
        from generation
        group by g
 {executed in 1 msec}
2025-04-09 00:23:51.445 INFO  [http-nio-11040-exec-6] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/sale/graph/stat/select/0
2025-04-09 00:23:51.445 INFO  [http-nio-11040-exec-6] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDEyNTgxNSwiZXhwIjoxNzQ0MTI2NDE1LCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.LGTFmcckc4d4WDD7TA6jPBBdxFVSZu05vxrDpZkxasA
2025-04-09 00:23:51.445 INFO  [http-nio-11040-exec-6] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/sale/graph/stat/select/0
2025-04-09 00:23:51.446 INFO  [http-nio-11040-exec-6] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-09 00:23:51.447 DEBUG [http-nio-11040-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
2. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 1 msec}
2025-04-09 00:23:51.448 INFO  [http-nio-11040-exec-6] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-09 00:23:51.451 DEBUG [http-nio-11040-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
2. with base as (select device_id,
                             (SELECT device_nm
                              FROM tb_device
                              WHERE tb_device.device_id = sl.device_id)      as device,
                             sd_id,
                             (SELECT sd_nm
                              FROM tb_second_device
                              WHERE tb_second_device.sd_id = sl.sd_id)       as sec_device,
                             ct_actv_plan,
                             (SELECT ct_plan_nm
                              FROM tb_ct_plan
                              WHERE tb_ct_plan.ct_plan_id = sl.ct_actv_plan) as actv_plan
                      from tb_sale sl
                      where shop_id = 2 and

                        actv_dt between '2025-04-01' and '2025-04-30'),
             device as (SELECT device                   as name,
                               count(device_id) as count
                        from base
                        where device_id is not null
                        group by device),
             sec_device as (SELECT sec_device                   as name,
                                   count(sec_device) as count
                            from base
                            where sd_id is not null
                            group by sec_device),
             actv_plan as (SELECT actv_plan                   as name,
                                  count(actv_plan) as count
                           from base
                           where ct_actv_plan is not null
                           group by actv_plan),
             total as (select count('device') as cnt
                       from base
                       where 'device' is not null
             )

        select name,
               count,
               (
                   IF((select cnt
                       from total) = 0 or count = 0, 0, TRUNCATE(
                              (count / (
                                  select cnt
                                  from total
                              )
                                  ) * 100, 1))
                   ) as per
        from device
        order by per desc
        limit 5
 {executed in 1 msec}
2025-04-09 00:23:51.470 INFO  [http-nio-11040-exec-5] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/sale/graph/ratio/select/0
2025-04-09 00:23:51.470 INFO  [http-nio-11040-exec-5] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDEyNTgxNSwiZXhwIjoxNzQ0MTI2NDE1LCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.LGTFmcckc4d4WDD7TA6jPBBdxFVSZu05vxrDpZkxasA
2025-04-09 00:23:51.470 INFO  [http-nio-11040-exec-5] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/sale/graph/ratio/select/0
2025-04-09 00:23:51.471 INFO  [http-nio-11040-exec-5] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-09 00:23:51.472 DEBUG [http-nio-11040-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
5. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 1 msec}
2025-04-09 00:23:51.472 INFO  [http-nio-11040-exec-5] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-09 00:23:51.475 DEBUG [http-nio-11040-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
5. with recursive istm_range as (
            select 0 as i
            union all
            select i+1
            from istm_range
            where i<5
        ), base as (
            select ct_istm
            from tb_sale
            where shop_id=2 and

                actv_dt between '2025-04-01' and '2025-04-30'
        ), final as (
            select i as istm,
                   IFNULL(count(base.ct_istm),0) as cnt
            from istm_range
                     left outer join base on base.ct_istm=istm_range.i
            group by i
            order by istm desc
        )

        select json_arrayagg(istm) as type,
               json_arrayagg(cnt) as cnt,
               json_arrayagg(IF((
                      select IFNULL(count(ct_istm), 0)
                      from base
                  ) = 0 or cnt = 0, 0, TRUNCATE((cnt/(
                   select IFNULL(count(ct_istm), 0)
                   from base
               )) * 100, 1))) as per
        from final
 {executed in 1 msec}
2025-04-09 00:23:51.489 INFO  [http-nio-11040-exec-8] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/sale/graph/summary
2025-04-09 00:23:51.489 INFO  [http-nio-11040-exec-8] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDEyNTgxNSwiZXhwIjoxNzQ0MTI2NDE1LCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.LGTFmcckc4d4WDD7TA6jPBBdxFVSZu05vxrDpZkxasA
2025-04-09 00:23:51.489 INFO  [http-nio-11040-exec-8] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/sale/graph/summary
2025-04-09 00:23:51.490 INFO  [http-nio-11040-exec-8] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-09 00:23:51.492 DEBUG [http-nio-11040-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 1 msec}
2025-04-09 00:23:51.492 INFO  [http-nio-11040-exec-8] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-09 00:23:51.493 INFO  [http-nio-11040-exec-8] [com.momo.api.SaleController] - summary: CommonVO(provider=null, date=null, year=null, month=null, day=null, selectType=null, range=null, dateType=null, prevFromYmd=null, prevToYmd=null, currFromYmd=null, currToYmd=null, fromYmd=2024-10-01, toYmd=2025-04-01, fromYm=null, toYm=null, prevDate=null, currDate=null)
2025-04-09 00:23:51.508 DEBUG [http-nio-11040-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. #         월별 날짜 구하기
        with recursive month_range as (
            select '2024-10-01' as d
            union all
            select date_add(d, interval 1 month) as d
            from month_range
            where date_add(d, interval 1 month) < '2025-04-01'
        ), months as(
            select month(d) as m
            from month_range
        ), filtered_sale as ( # 판매일보 초벌
            select month(actv_dt) as actv_month,
                   device_id,
                   internet_plan,
                   tv_plan,
                    exsvc_id,
                   total_cms,
                   wt_cms,
                   sale_id,
                   sd_id,
                    shop_id
            from tb_sale
            where shop_id=2 and

                actv_dt between '2024-10-01' and date_add('2025-04-01', interval 1 month)
        ), ct_graph as ( # 무선 그래프 데이터
            SELECT m,
                   count(device_id) as cnt
            FROM months
                     LEFT OUTER JOIN filtered_sale on actv_month = m and
                                                      device_id is not null
            group by m
        ), internet_graph as ( # 인터넷 그래프 데이터
            SELECT m,
                   count(internet_plan) as cnt
            FROM months
                     LEFT OUTER JOIN filtered_sale on actv_month = m  and
                                                      internet_plan is not null
            group by m
        ), tv_graph as ( # TV 그래프 데이터
            SELECT m,
                   count(tv_plan) as cnt
            FROM months
                     LEFT OUTER JOIN filtered_sale on actv_month = m  and
                                                      tv_plan is not null
            group by m
        ), card as ( # 카드 데이터
            SELECT m,
                   (
                    select count(*)
                    from tb_sale_card sc
                    left outer join filtered_sale fs on fs.shop_id = sc.shop_id and
                                                        fs.sale_id = sc.sale_id
                   )  as cnt
            FROM months
                     LEFT OUTER JOIN filtered_sale on actv_month = m
            group by m
        ), exsvc as ( # 부가서비스 데이터
            SELECT m,
                   count(exsvc_id) as cnt
            FROM months
                     LEFT OUTER JOIN filtered_sale on actv_month = m  and
                                                      exsvc_id is not null
            group by m
        ), tc_graph as ( # 총 이익 그래프 데이터
            SELECT m,
                   IFNULL(sum(total_cms), 0) as cnt
            FROM months
                     LEFT OUTER JOIN filtered_sale on actv_month = m
            group by m
        ), avg_margin_graph as ( # 개인 평균 마진 그래프 데이터
            SELECT m,
                   IFNULL(avg(total_cms), 0) as cnt
            FROM months
                     LEFT OUTER JOIN filtered_sale on actv_month = m and
                                                      device_id is not null
            group by m
        ), ud_graph as ( # 중고 개통 그래프 데이터
            SELECT m,
                   count(ud_id) as cnt
            FROM months
                     LEFT OUTER JOIN filtered_sale on actv_month = m
                     LEFT OUTER JOIN tb_sale_used_device sud on sud.sale_id=filtered_sale.sale_id
            group by m
        ), sec_graph as ( # 세컨 그래프 데이터
            SELECT m,
                   count(sd_id) as cnt
            FROM months
                     LEFT OUTER JOIN filtered_sale on actv_month = m and
                                                      sd_id != 0
            group by m
        ), diff_ct as (
            select
                (
                    select cnt
                    from ct_graph
                    limit 4, 1
                ) as prv,
                (
                    select cnt
                    from ct_graph
                    limit 5,1
                ) as curr
            from dual
        ), diff_internet as (
            select
                (
                    select cnt
                    from internet_graph
                    limit 4,1
                ) as prv,
                (
                    select cnt
                    from internet_graph
                    limit 5,1
                ) as curr
            from dual
        ), diff_tv as (
            select
                (
                    select cnt
                    from tv_graph
                    limit 4,1
                ) as prv,
                (
                    select cnt
                    from tv_graph
                    limit 5,1
                ) as curr
            from dual
        ), diff_card as (
            select
                (
                    select cnt
                    from card
                    limit 4,1
                ) as prv,
                (
                    select cnt
                    from card
                    limit 5,1
                ) as curr
            from dual
        ), diff_exsvc as (
            select
                (
                    select cnt
                    from exsvc
                    limit 4,1
                ) as prv,
                (
                    select cnt
                    from exsvc
                    limit 5,1
                ) as curr
            from dual
        ), diff_tc as (
            select
                (
                    select cnt
                    from tc_graph
                    limit 4,1
                ) as prv,
                (
                    select cnt
                    from tc_graph
                    limit 5,1
                ) as curr
            from dual
        ) , diff_margin as (
            select
                (
                    select cnt
                    from avg_margin_graph
                    limit 4,1
                ) as prv,
                (
                    select cnt
                    from avg_margin_graph
                    limit 5,1
                ) as curr
            from dual
        ), diff_ud as (
            select
                (
                    select cnt
                    from ud_graph
                    limit 4,1
                ) as prv,
                (
                    select cnt
                    from ud_graph
                    limit 5,1
                ) as curr
            from dual
        ) , diff_sec as (
            select
                (
                    select cnt
                    from sec_graph
                    limit 4,1
                ) as prv,
                (
                    select cnt
                    from sec_graph
                    limit 5,1
                ) as curr
            from dual
        ), final as (
            select
                curr,
                prv,
                (
                    select json_arrayagg(cnt)
                    from ct_graph
                ) as list
            from diff_ct
            union all
            select
                curr,
                prv,
                (
                    select json_arrayagg(cnt)
                    from internet_graph
                ) as list
            from diff_internet
            union all
            select
                curr,
                prv,
                (
                    select json_arrayagg(cnt)
                    from tv_graph
                ) as list
            from diff_tv
             union all
            select
                curr,
                prv,
                (
                    select json_arrayagg(cnt)
                    from card
                ) as list
            from diff_card
             union all
            select
                curr,
                prv,
                (
                    select json_arrayagg(cnt)
                    from exsvc
                ) as list
            from diff_exsvc
            union all
            select
                curr,
                prv,
                (
                    select json_arrayagg(cnt)
                    from tc_graph
                ) as list
            from diff_tc
            union all
            select
                curr,
                prv,
                (
                    select json_arrayagg(cnt)
                    from avg_margin_graph
                ) as list
            from diff_margin
            union all
            select
                curr,
                prv,
                (
                    select json_arrayagg(cnt)
                    from ud_graph
                ) as list
            from diff_ud
            union all
            select
                curr,
                prv,
                (
                    select json_arrayagg(cnt)
                    from sec_graph
                ) as list
            from diff_sec
        )

        select FLOOR(curr) as value,
               (
                   CASE
                       WHEN curr = 0 and prv = 0 THEN 0
                       WHEN prv != 0 and curr = 0 THEN -100
                       WHEN prv = 0 and curr != 0 THEN 100
                       WHEN curr != 0 and prv != 0 THEN TRUNCATE(((curr/prv)-1)*100, 1)
                       END
                   ) as per,
               list
        from final
 {executed in 12 msec}
2025-04-09 00:23:51.512 INFO  [http-nio-11040-exec-3] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/user/info
2025-04-09 00:23:51.512 INFO  [http-nio-11040-exec-3] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDEyNTgxNSwiZXhwIjoxNzQ0MTI2NDE1LCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.LGTFmcckc4d4WDD7TA6jPBBdxFVSZu05vxrDpZkxasA
2025-04-09 00:23:51.512 INFO  [http-nio-11040-exec-3] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/user/info
2025-04-09 00:23:51.513 INFO  [http-nio-11040-exec-3] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-09 00:23:51.514 DEBUG [http-nio-11040-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
3. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 1 msec}
2025-04-09 00:23:51.514 INFO  [http-nio-11040-exec-3] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-09 00:23:51.514 INFO  [http-nio-11040-exec-3] [c.momo.common.util.SecurityContextUtil] - principal: UserDetailsImpl(username=km1104rs, password=$2a$10$uXShhwl6ULOkbJe477uDWOfdiUUcu6lOSF/Dhj9xP3U1nUn/gXkc6, authorities=[ROLE_NONE])
2025-04-09 00:23:51.516 DEBUG [http-nio-11040-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
3. SELECT ac.id,
               ac.name,
               ac.tel,
               ac.nickname,
               ac.pfp,
               ac.curr_shop_id,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where sf.shop_id = ac.curr_shop_id and
                         sf.staff_id = ac.id
                   ) as role,
               sh.shop_nm,
               sh.shop_addr,
               sh.provider,
               (
                   IFNULL((
                       select sf2.approval_st
                       from tb_staff sf2
                       where sf2.shop_id=ac.curr_shop_id and
                           sf2.staff_id=ac.id
                       ), -1)
                ) as approval_st,
                ac.corp_nm,
                ac.br_no
        FROM tb_account ac
        LEFT OUTER JOIN tb_shop sh on sh.shop_id=ac.curr_shop_id
        WHERE id = 'km1104rs'
 {executed in 0 msec}
2025-04-09 00:23:51.516 INFO  [http-nio-11040-exec-3] [com.momo.api.UserController] - User: {role=0, approval_st=1, shop_addr=충청남도 천안시 병천면 충절로 1600 한국기술교육대학교 다산정보관 102, br_no=5218702490, provider=2, name=박희찬, nickname=대표, corp_nm=123, tel=010-4524-0636, id=km1104rs, pfp=1921fc01-e573-4243-9365-6b905389f4fc.png, curr_shop_id=2, shop_nm=한기대점 }
2025-04-09 00:23:51.535 INFO  [http-nio-11040-exec-9] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/notif/count/unread
2025-04-09 00:23:51.536 INFO  [http-nio-11040-exec-9] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDEyNTgxNSwiZXhwIjoxNzQ0MTI2NDE1LCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.LGTFmcckc4d4WDD7TA6jPBBdxFVSZu05vxrDpZkxasA
2025-04-09 00:23:51.536 INFO  [http-nio-11040-exec-9] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/notif/count/unread
2025-04-09 00:23:51.537 INFO  [http-nio-11040-exec-9] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-09 00:23:51.538 DEBUG [http-nio-11040-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 1 msec}
2025-04-09 00:23:51.538 INFO  [http-nio-11040-exec-9] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-09 00:23:51.538 INFO  [http-nio-11040-exec-9] [c.momo.common.util.SecurityContextUtil] - principal: UserDetailsImpl(username=km1104rs, password=$2a$10$uXShhwl6ULOkbJe477uDWOfdiUUcu6lOSF/Dhj9xP3U1nUn/gXkc6, authorities=[ROLE_NONE])
2025-04-09 00:23:51.540 DEBUG [http-nio-11040-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT count(*)
        FROM tb_notification
        WHERE receiver_id = 'km1104rs'
          AND read_st = FALSE
 {executed in 1 msec}
2025-04-09 00:23:51.581 INFO  [http-nio-11040-exec-4] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/notif/count/unread
2025-04-09 00:23:51.582 INFO  [http-nio-11040-exec-4] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDEyNTgxNSwiZXhwIjoxNzQ0MTI2NDE1LCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.LGTFmcckc4d4WDD7TA6jPBBdxFVSZu05vxrDpZkxasA
2025-04-09 00:23:51.582 INFO  [http-nio-11040-exec-4] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/notif/count/unread
2025-04-09 00:23:51.582 INFO  [http-nio-11040-exec-4] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-09 00:23:51.589 DEBUG [http-nio-11040-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
4. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 6 msec}
2025-04-09 00:23:51.589 INFO  [http-nio-11040-exec-4] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-09 00:23:51.590 INFO  [http-nio-11040-exec-4] [c.momo.common.util.SecurityContextUtil] - principal: UserDetailsImpl(username=km1104rs, password=$2a$10$uXShhwl6ULOkbJe477uDWOfdiUUcu6lOSF/Dhj9xP3U1nUn/gXkc6, authorities=[ROLE_NONE])
2025-04-09 00:23:51.592 DEBUG [http-nio-11040-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
4. SELECT count(*)
        FROM tb_notification
        WHERE receiver_id = 'km1104rs'
          AND read_st = FALSE
 {executed in 1 msec}
2025-04-09 00:23:51.602 INFO  [http-nio-11040-exec-2] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/sale/graph/ct/select/0
2025-04-09 00:23:51.602 INFO  [http-nio-11040-exec-2] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDEyNTgxNSwiZXhwIjoxNzQ0MTI2NDE1LCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.LGTFmcckc4d4WDD7TA6jPBBdxFVSZu05vxrDpZkxasA
2025-04-09 00:23:51.602 INFO  [http-nio-11040-exec-2] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/sale/graph/ct/select/0
2025-04-09 00:23:51.603 INFO  [http-nio-11040-exec-2] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-09 00:23:51.605 DEBUG [http-nio-11040-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 2 msec}
2025-04-09 00:23:51.605 INFO  [http-nio-11040-exec-2] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-09 00:23:51.609 DEBUG [http-nio-11040-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. with recursive group_generation as (
            select 0 as g
            union all
            select g+1
            from group_generation
            where g < 8
        ), group_weekday as (
            select 0 as g
            union all
            select g+1
            from group_weekday
            where g < 6
        ),  sale as (
            select weekday(actv_dt) as days,
                   device_id,
                   cust_cd,
                   sale_id
            from tb_sale
            where shop_id=2 and

                device_id is not null and
                actv_dt between '2025-04-01' and '2025-04-30'
        ), sale_gene as (
            select sale_id,
                   (
                       case
                           when length(cust_cd) = 6 then floor((year(curdate()) - concat((
                                 case
                                     when substring(cust_cd, 1,2) > '44' then '19'
                                     when substring(cust_cd, 1,2) <= '44' then '20'
                                     end
                                 ),substring(cust_cd,1,2))) / 10)
                           when length(cust_cd) != 6 then null
                           end
                       ) as generation
            from sale
        ), generation as (
            select g,
                   device_id
            from group_generation g
                     left outer join sale_gene sg on g.g=sg.generation
                     left outer join sale s on s.sale_id=sg.sale_id
        ), weekdays as (
            select g,
                   device_id
            from group_weekday w
                     left outer join sale s on s.days=w.g
        )

        select IFNULL(count(device_id),0) as avg
        from generation
        group by g
 {executed in 2 msec}
2025-04-09 00:23:51.623 INFO  [http-nio-11040-exec-10] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/sale/graph/stat/select/0
2025-04-09 00:23:51.624 INFO  [http-nio-11040-exec-10] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDEyNTgxNSwiZXhwIjoxNzQ0MTI2NDE1LCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.LGTFmcckc4d4WDD7TA6jPBBdxFVSZu05vxrDpZkxasA
2025-04-09 00:23:51.624 INFO  [http-nio-11040-exec-10] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/sale/graph/stat/select/0
2025-04-09 00:23:51.624 INFO  [http-nio-11040-exec-10] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-09 00:23:51.626 DEBUG [http-nio-11040-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 1 msec}
2025-04-09 00:23:51.626 INFO  [http-nio-11040-exec-10] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-09 00:23:51.630 DEBUG [http-nio-11040-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. with base as (select device_id,
                             (SELECT device_nm
                              FROM tb_device
                              WHERE tb_device.device_id = sl.device_id)      as device,
                             sd_id,
                             (SELECT sd_nm
                              FROM tb_second_device
                              WHERE tb_second_device.sd_id = sl.sd_id)       as sec_device,
                             ct_actv_plan,
                             (SELECT ct_plan_nm
                              FROM tb_ct_plan
                              WHERE tb_ct_plan.ct_plan_id = sl.ct_actv_plan) as actv_plan
                      from tb_sale sl
                      where shop_id = 2 and

                        actv_dt between '2025-04-01' and '2025-04-30'),
             device as (SELECT device                   as name,
                               count(device_id) as count
                        from base
                        where device_id is not null
                        group by device),
             sec_device as (SELECT sec_device                   as name,
                                   count(sec_device) as count
                            from base
                            where sd_id is not null
                            group by sec_device),
             actv_plan as (SELECT actv_plan                   as name,
                                  count(actv_plan) as count
                           from base
                           where ct_actv_plan is not null
                           group by actv_plan),
             total as (select count('device') as cnt
                       from base
                       where 'device' is not null
             )

        select name,
               count,
               (
                   IF((select cnt
                       from total) = 0 or count = 0, 0, TRUNCATE(
                              (count / (
                                  select cnt
                                  from total
                              )
                                  ) * 100, 1))
                   ) as per
        from device
        order by per desc
        limit 5
 {executed in 2 msec}
2025-04-09 00:23:51.645 INFO  [http-nio-11040-exec-7] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/sale/graph/ratio/select/0
2025-04-09 00:23:51.645 INFO  [http-nio-11040-exec-7] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDEyNTgxNSwiZXhwIjoxNzQ0MTI2NDE1LCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.LGTFmcckc4d4WDD7TA6jPBBdxFVSZu05vxrDpZkxasA
2025-04-09 00:23:51.645 INFO  [http-nio-11040-exec-7] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/sale/graph/ratio/select/0
2025-04-09 00:23:51.646 INFO  [http-nio-11040-exec-7] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-09 00:23:51.647 DEBUG [http-nio-11040-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
2. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 1 msec}
2025-04-09 00:23:51.647 INFO  [http-nio-11040-exec-7] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-09 00:23:51.651 DEBUG [http-nio-11040-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
2. with recursive istm_range as (
            select 0 as i
            union all
            select i+1
            from istm_range
            where i<5
        ), base as (
            select ct_istm
            from tb_sale
            where shop_id=2 and

                actv_dt between '2025-04-01' and '2025-04-30'
        ), final as (
            select i as istm,
                   IFNULL(count(base.ct_istm),0) as cnt
            from istm_range
                     left outer join base on base.ct_istm=istm_range.i
            group by i
            order by istm desc
        )

        select json_arrayagg(istm) as type,
               json_arrayagg(cnt) as cnt,
               json_arrayagg(IF((
                      select IFNULL(count(ct_istm), 0)
                      from base
                  ) = 0 or cnt = 0, 0, TRUNCATE((cnt/(
                   select IFNULL(count(ct_istm), 0)
                   from base
               )) * 100, 1))) as per
        from final
 {executed in 1 msec}
2025-04-09 00:23:51.712 INFO  [http-nio-11040-exec-1] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/sale/graph/ct/d
2025-04-09 00:23:51.712 INFO  [http-nio-11040-exec-1] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDEyNTgxNSwiZXhwIjoxNzQ0MTI2NDE1LCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.LGTFmcckc4d4WDD7TA6jPBBdxFVSZu05vxrDpZkxasA
2025-04-09 00:23:51.712 INFO  [http-nio-11040-exec-1] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/sale/graph/ct/d
2025-04-09 00:23:51.713 INFO  [http-nio-11040-exec-1] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-09 00:23:51.714 DEBUG [http-nio-11040-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
6. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 1 msec}
2025-04-09 00:23:51.714 INFO  [http-nio-11040-exec-1] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-09 00:23:51.717 DEBUG [http-nio-11040-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
6. set @limit_cond := (
               case 'd'
                   when 'h' then '2000-01-24'
                   when 'd' then '2025-04-09'
                   when 'w' then '2025-04-09'
                   when 'm' then date_sub('2025-04-09', interval 1 month)
               end
        );

        with recursive org_date_table as (
            select (
                       case
                           when 'd' = 'h' then '2000-01-01'
                           when 'd' != 'h' then '2025-01-09'
                           end
                       ) as it
            union all
            select (
                       case 'd'
                           when 'h' then date_add(it, interval 1 day)
                           when 'd' then date_add(it, interval 1 day)
                           when 'w' then date_add(it, interval 1 week)
                           when 'm' then date_add(it, interval 1 month)
                           end
                       ) as it
            from org_date_table
            where it < @limit_cond
        ), date_table as (
            select
                year(it) as _year,
                (
                    case 'd'
                        when 'h' then day(it)
                        when 'd' then it
                        when 'w' then week(it)
                        when 'm' then month(it)
                        end
                    ) as dt
            from org_date_table
        ),  date_sale as (
            select year(actv_dt) _year,
                   month(actv_dt) as m,
                   week(actv_dt) as w,
                   actv_dt as d,
                   hour(regi_dt) as h,
                   tb_sale.*
            from tb_sale
            where shop_id=2 and

                    seller_id='km1104rs' and

                actv_dt between '2025-01-09' and (
                    case
                        when 'd' = 'h' then '2025-01-09'
                        when 'd' != 'h' then '2025-04-09'
                        end
                    )
        ), final as (
            select count(device_id) as cnt
            from date_table dd
                     left outer join date_sale ds on dd._year=ds._year and
                                                     d = dt
            group by dd._year, dd.dt
        )

        select
            (
                select json_arrayagg(cnt)
                from final
            ) as value,
            (
                select json_arrayagg(date_format(it, '%Y-%m-%d'))
                from org_date_table
            ) as date
 {executed in 1 msec}
2025-04-09 00:23:51.738 INFO  [http-nio-11040-exec-6] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/sale/graph/ct/d
2025-04-09 00:23:51.738 INFO  [http-nio-11040-exec-6] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDEyNTgxNSwiZXhwIjoxNzQ0MTI2NDE1LCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.LGTFmcckc4d4WDD7TA6jPBBdxFVSZu05vxrDpZkxasA
2025-04-09 00:23:51.738 INFO  [http-nio-11040-exec-6] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/sale/graph/ct/d
2025-04-09 00:23:51.739 INFO  [http-nio-11040-exec-6] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-09 00:23:51.740 DEBUG [http-nio-11040-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
2. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 1 msec}
2025-04-09 00:23:51.740 INFO  [http-nio-11040-exec-6] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-09 00:23:51.743 DEBUG [http-nio-11040-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
2. set @limit_cond := (
               case 'd'
                   when 'h' then '2000-01-24'
                   when 'd' then '2025-04-08'
                   when 'w' then '2025-04-08'
                   when 'm' then date_sub('2025-04-08', interval 1 month)
               end
        );

        with recursive org_date_table as (
            select (
                       case
                           when 'd' = 'h' then '2000-01-01'
                           when 'd' != 'h' then '2025-04-02'
                           end
                       ) as it
            union all
            select (
                       case 'd'
                           when 'h' then date_add(it, interval 1 day)
                           when 'd' then date_add(it, interval 1 day)
                           when 'w' then date_add(it, interval 1 week)
                           when 'm' then date_add(it, interval 1 month)
                           end
                       ) as it
            from org_date_table
            where it < @limit_cond
        ), date_table as (
            select
                year(it) as _year,
                (
                    case 'd'
                        when 'h' then day(it)
                        when 'd' then it
                        when 'w' then week(it)
                        when 'm' then month(it)
                        end
                    ) as dt
            from org_date_table
        ),  date_sale as (
            select year(actv_dt) _year,
                   month(actv_dt) as m,
                   week(actv_dt) as w,
                   actv_dt as d,
                   hour(regi_dt) as h,
                   tb_sale.*
            from tb_sale
            where shop_id=2 and

                    seller_id='km1104rs' and

                actv_dt between '2025-04-02' and (
                    case
                        when 'd' = 'h' then '2025-04-02'
                        when 'd' != 'h' then '2025-04-08'
                        end
                    )
        ), final as (
            select count(device_id) as cnt
            from date_table dd
                     left outer join date_sale ds on dd._year=ds._year and
                                                     d = dt
            group by dd._year, dd.dt
        )

        select
            (
                select json_arrayagg(cnt)
                from final
            ) as value,
            (
                select json_arrayagg(date_format(it, '%Y-%m-%d'))
                from org_date_table
            ) as date
 {executed in 1 msec}
2025-04-09 00:23:51.766 INFO  [http-nio-11040-exec-5] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/sale/graph/ct/select/0
2025-04-09 00:23:51.766 INFO  [http-nio-11040-exec-5] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDEyNTgxNSwiZXhwIjoxNzQ0MTI2NDE1LCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.LGTFmcckc4d4WDD7TA6jPBBdxFVSZu05vxrDpZkxasA
2025-04-09 00:23:51.766 INFO  [http-nio-11040-exec-5] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/sale/graph/ct/select/0
2025-04-09 00:23:51.766 INFO  [http-nio-11040-exec-5] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-09 00:23:51.768 DEBUG [http-nio-11040-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
5. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 1 msec}
2025-04-09 00:23:51.768 INFO  [http-nio-11040-exec-5] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-09 00:23:51.772 DEBUG [http-nio-11040-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
5. with recursive group_generation as (
            select 0 as g
            union all
            select g+1
            from group_generation
            where g < 8
        ), group_weekday as (
            select 0 as g
            union all
            select g+1
            from group_weekday
            where g < 6
        ),  sale as (
            select weekday(actv_dt) as days,
                   device_id,
                   cust_cd,
                   sale_id
            from tb_sale
            where shop_id=2 and

                      seller_id='km1104rs' and

                device_id is not null and
                actv_dt between '2025-04-01' and '2025-04-30'
        ), sale_gene as (
            select sale_id,
                   (
                       case
                           when length(cust_cd) = 6 then floor((year(curdate()) - concat((
                                 case
                                     when substring(cust_cd, 1,2) > '44' then '19'
                                     when substring(cust_cd, 1,2) <= '44' then '20'
                                     end
                                 ),substring(cust_cd,1,2))) / 10)
                           when length(cust_cd) != 6 then null
                           end
                       ) as generation
            from sale
        ), generation as (
            select g,
                   device_id
            from group_generation g
                     left outer join sale_gene sg on g.g=sg.generation
                     left outer join sale s on s.sale_id=sg.sale_id
        ), weekdays as (
            select g,
                   device_id
            from group_weekday w
                     left outer join sale s on s.days=w.g
        )

        select IFNULL(count(device_id),0) as avg
        from generation
        group by g
 {executed in 1 msec}
2025-04-09 00:23:51.792 INFO  [http-nio-11040-exec-8] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/sale/graph/stat/select/0
2025-04-09 00:23:51.792 INFO  [http-nio-11040-exec-8] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDEyNTgxNSwiZXhwIjoxNzQ0MTI2NDE1LCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.LGTFmcckc4d4WDD7TA6jPBBdxFVSZu05vxrDpZkxasA
2025-04-09 00:23:51.792 INFO  [http-nio-11040-exec-8] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/sale/graph/stat/select/0
2025-04-09 00:23:51.794 INFO  [http-nio-11040-exec-8] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-09 00:23:51.796 DEBUG [http-nio-11040-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 1 msec}
2025-04-09 00:23:51.796 INFO  [http-nio-11040-exec-8] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-09 00:23:51.800 DEBUG [http-nio-11040-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. with base as (select device_id,
                             (SELECT device_nm
                              FROM tb_device
                              WHERE tb_device.device_id = sl.device_id)      as device,
                             sd_id,
                             (SELECT sd_nm
                              FROM tb_second_device
                              WHERE tb_second_device.sd_id = sl.sd_id)       as sec_device,
                             ct_actv_plan,
                             (SELECT ct_plan_nm
                              FROM tb_ct_plan
                              WHERE tb_ct_plan.ct_plan_id = sl.ct_actv_plan) as actv_plan
                      from tb_sale sl
                      where shop_id = 2 and

                                seller_id='km1104rs' and

                        actv_dt between '2025-04-01' and '2025-04-30'),
             device as (SELECT device                   as name,
                               count(device_id) as count
                        from base
                        where device_id is not null
                        group by device),
             sec_device as (SELECT sec_device                   as name,
                                   count(sec_device) as count
                            from base
                            where sd_id is not null
                            group by sec_device),
             actv_plan as (SELECT actv_plan                   as name,
                                  count(actv_plan) as count
                           from base
                           where ct_actv_plan is not null
                           group by actv_plan),
             total as (select count('device') as cnt
                       from base
                       where 'device' is not null
             )

        select name,
               count,
               (
                   IF((select cnt
                       from total) = 0 or count = 0, 0, TRUNCATE(
                              (count / (
                                  select cnt
                                  from total
                              )
                                  ) * 100, 1))
                   ) as per
        from device
        order by per desc
        limit 5
 {executed in 2 msec}
2025-04-09 00:23:51.822 INFO  [http-nio-11040-exec-3] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/sale/graph/ratio/select/0
2025-04-09 00:23:51.822 INFO  [http-nio-11040-exec-3] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDEyNTgxNSwiZXhwIjoxNzQ0MTI2NDE1LCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.LGTFmcckc4d4WDD7TA6jPBBdxFVSZu05vxrDpZkxasA
2025-04-09 00:23:51.822 INFO  [http-nio-11040-exec-3] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/sale/graph/ratio/select/0
2025-04-09 00:23:51.823 INFO  [http-nio-11040-exec-3] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-09 00:23:51.824 DEBUG [http-nio-11040-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
3. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 1 msec}
2025-04-09 00:23:51.824 INFO  [http-nio-11040-exec-3] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-09 00:23:51.828 DEBUG [http-nio-11040-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
3. with recursive istm_range as (
            select 0 as i
            union all
            select i+1
            from istm_range
            where i<5
        ), base as (
            select ct_istm
            from tb_sale
            where shop_id=2 and

                        seller_id='km1104rs' and

                actv_dt between '2025-04-01' and '2025-04-30'
        ), final as (
            select i as istm,
                   IFNULL(count(base.ct_istm),0) as cnt
            from istm_range
                     left outer join base on base.ct_istm=istm_range.i
            group by i
            order by istm desc
        )

        select json_arrayagg(istm) as type,
               json_arrayagg(cnt) as cnt,
               json_arrayagg(IF((
                      select IFNULL(count(ct_istm), 0)
                      from base
                  ) = 0 or cnt = 0, 0, TRUNCATE((cnt/(
                   select IFNULL(count(ct_istm), 0)
                   from base
               )) * 100, 1))) as per
        from final
 {executed in 2 msec}
2025-04-09 00:23:51.852 INFO  [http-nio-11040-exec-9] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/sale/graph/summary
2025-04-09 00:23:51.852 INFO  [http-nio-11040-exec-9] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDEyNTgxNSwiZXhwIjoxNzQ0MTI2NDE1LCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.LGTFmcckc4d4WDD7TA6jPBBdxFVSZu05vxrDpZkxasA
2025-04-09 00:23:51.852 INFO  [http-nio-11040-exec-9] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/sale/graph/summary
2025-04-09 00:23:51.853 INFO  [http-nio-11040-exec-9] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-09 00:23:51.854 DEBUG [http-nio-11040-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 1 msec}
2025-04-09 00:23:51.854 INFO  [http-nio-11040-exec-9] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-09 00:23:51.856 INFO  [http-nio-11040-exec-9] [com.momo.api.SaleController] - summary: CommonVO(provider=null, date=null, year=null, month=null, day=null, selectType=null, range=null, dateType=null, prevFromYmd=null, prevToYmd=null, currFromYmd=null, currToYmd=null, fromYmd=2024-10-01, toYmd=2025-04-01, fromYm=null, toYm=null, prevDate=null, currDate=null)
2025-04-09 00:23:51.869 DEBUG [http-nio-11040-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. #         월별 날짜 구하기
        with recursive month_range as (
            select '2024-10-01' as d
            union all
            select date_add(d, interval 1 month) as d
            from month_range
            where date_add(d, interval 1 month) < '2025-04-01'
        ), months as(
            select month(d) as m
            from month_range
        ), filtered_sale as ( # 판매일보 초벌
            select month(actv_dt) as actv_month,
                   device_id,
                   internet_plan,
                   tv_plan,
                    exsvc_id,
                   total_cms,
                   wt_cms,
                   sale_id,
                   sd_id,
                    shop_id
            from tb_sale
            where shop_id=2 and

                    seller_id='km1104rs' and

                actv_dt between '2024-10-01' and date_add('2025-04-01', interval 1 month)
        ), ct_graph as ( # 무선 그래프 데이터
            SELECT m,
                   count(device_id) as cnt
            FROM months
                     LEFT OUTER JOIN filtered_sale on actv_month = m and
                                                      device_id is not null
            group by m
        ), internet_graph as ( # 인터넷 그래프 데이터
            SELECT m,
                   count(internet_plan) as cnt
            FROM months
                     LEFT OUTER JOIN filtered_sale on actv_month = m  and
                                                      internet_plan is not null
            group by m
        ), tv_graph as ( # TV 그래프 데이터
            SELECT m,
                   count(tv_plan) as cnt
            FROM months
                     LEFT OUTER JOIN filtered_sale on actv_month = m  and
                                                      tv_plan is not null
            group by m
        ), card as ( # 카드 데이터
            SELECT m,
                   (
                    select count(*)
                    from tb_sale_card sc
                    left outer join filtered_sale fs on fs.shop_id = sc.shop_id and
                                                        fs.sale_id = sc.sale_id
                   )  as cnt
            FROM months
                     LEFT OUTER JOIN filtered_sale on actv_month = m
            group by m
        ), exsvc as ( # 부가서비스 데이터
            SELECT m,
                   count(exsvc_id) as cnt
            FROM months
                     LEFT OUTER JOIN filtered_sale on actv_month = m  and
                                                      exsvc_id is not null
            group by m
        ), tc_graph as ( # 총 이익 그래프 데이터
            SELECT m,
                   IFNULL(sum(total_cms), 0) as cnt
            FROM months
                     LEFT OUTER JOIN filtered_sale on actv_month = m
            group by m
        ), avg_margin_graph as ( # 개인 평균 마진 그래프 데이터
            SELECT m,
                   IFNULL(avg(total_cms), 0) as cnt
            FROM months
                     LEFT OUTER JOIN filtered_sale on actv_month = m and
                                                      device_id is not null
            group by m
        ), ud_graph as ( # 중고 개통 그래프 데이터
            SELECT m,
                   count(ud_id) as cnt
            FROM months
                     LEFT OUTER JOIN filtered_sale on actv_month = m
                     LEFT OUTER JOIN tb_sale_used_device sud on sud.sale_id=filtered_sale.sale_id
            group by m
        ), sec_graph as ( # 세컨 그래프 데이터
            SELECT m,
                   count(sd_id) as cnt
            FROM months
                     LEFT OUTER JOIN filtered_sale on actv_month = m and
                                                      sd_id != 0
            group by m
        ), diff_ct as (
            select
                (
                    select cnt
                    from ct_graph
                    limit 4, 1
                ) as prv,
                (
                    select cnt
                    from ct_graph
                    limit 5,1
                ) as curr
            from dual
        ), diff_internet as (
            select
                (
                    select cnt
                    from internet_graph
                    limit 4,1
                ) as prv,
                (
                    select cnt
                    from internet_graph
                    limit 5,1
                ) as curr
            from dual
        ), diff_tv as (
            select
                (
                    select cnt
                    from tv_graph
                    limit 4,1
                ) as prv,
                (
                    select cnt
                    from tv_graph
                    limit 5,1
                ) as curr
            from dual
        ), diff_card as (
            select
                (
                    select cnt
                    from card
                    limit 4,1
                ) as prv,
                (
                    select cnt
                    from card
                    limit 5,1
                ) as curr
            from dual
        ), diff_exsvc as (
            select
                (
                    select cnt
                    from exsvc
                    limit 4,1
                ) as prv,
                (
                    select cnt
                    from exsvc
                    limit 5,1
                ) as curr
            from dual
        ), diff_tc as (
            select
                (
                    select cnt
                    from tc_graph
                    limit 4,1
                ) as prv,
                (
                    select cnt
                    from tc_graph
                    limit 5,1
                ) as curr
            from dual
        ) , diff_margin as (
            select
                (
                    select cnt
                    from avg_margin_graph
                    limit 4,1
                ) as prv,
                (
                    select cnt
                    from avg_margin_graph
                    limit 5,1
                ) as curr
            from dual
        ), diff_ud as (
            select
                (
                    select cnt
                    from ud_graph
                    limit 4,1
                ) as prv,
                (
                    select cnt
                    from ud_graph
                    limit 5,1
                ) as curr
            from dual
        ) , diff_sec as (
            select
                (
                    select cnt
                    from sec_graph
                    limit 4,1
                ) as prv,
                (
                    select cnt
                    from sec_graph
                    limit 5,1
                ) as curr
            from dual
        ), final as (
            select
                curr,
                prv,
                (
                    select json_arrayagg(cnt)
                    from ct_graph
                ) as list
            from diff_ct
            union all
            select
                curr,
                prv,
                (
                    select json_arrayagg(cnt)
                    from internet_graph
                ) as list
            from diff_internet
            union all
            select
                curr,
                prv,
                (
                    select json_arrayagg(cnt)
                    from tv_graph
                ) as list
            from diff_tv
             union all
            select
                curr,
                prv,
                (
                    select json_arrayagg(cnt)
                    from card
                ) as list
            from diff_card
             union all
            select
                curr,
                prv,
                (
                    select json_arrayagg(cnt)
                    from exsvc
                ) as list
            from diff_exsvc
            union all
            select
                curr,
                prv,
                (
                    select json_arrayagg(cnt)
                    from tc_graph
                ) as list
            from diff_tc
            union all
            select
                curr,
                prv,
                (
                    select json_arrayagg(cnt)
                    from avg_margin_graph
                ) as list
            from diff_margin
            union all
            select
                curr,
                prv,
                (
                    select json_arrayagg(cnt)
                    from ud_graph
                ) as list
            from diff_ud
            union all
            select
                curr,
                prv,
                (
                    select json_arrayagg(cnt)
                    from sec_graph
                ) as list
            from diff_sec
        )

        select FLOOR(curr) as value,
               (
                   CASE
                       WHEN curr = 0 and prv = 0 THEN 0
                       WHEN prv != 0 and curr = 0 THEN -100
                       WHEN prv = 0 and curr != 0 THEN 100
                       WHEN curr != 0 and prv != 0 THEN TRUNCATE(((curr/prv)-1)*100, 1)
                       END
                   ) as per,
               list
        from final
 {executed in 10 msec}
2025-04-09 00:23:51.902 INFO  [http-nio-11040-exec-4] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/sale/graph/ct/select/0
2025-04-09 00:23:51.902 INFO  [http-nio-11040-exec-4] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDEyNTgxNSwiZXhwIjoxNzQ0MTI2NDE1LCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.LGTFmcckc4d4WDD7TA6jPBBdxFVSZu05vxrDpZkxasA
2025-04-09 00:23:51.902 INFO  [http-nio-11040-exec-4] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/sale/graph/ct/select/0
2025-04-09 00:23:51.903 INFO  [http-nio-11040-exec-4] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-09 00:23:51.905 DEBUG [http-nio-11040-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
4. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 1 msec}
2025-04-09 00:23:51.905 INFO  [http-nio-11040-exec-4] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-09 00:23:51.908 DEBUG [http-nio-11040-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
4. with recursive group_generation as (
            select 0 as g
            union all
            select g+1
            from group_generation
            where g < 8
        ), group_weekday as (
            select 0 as g
            union all
            select g+1
            from group_weekday
            where g < 6
        ),  sale as (
            select weekday(actv_dt) as days,
                   device_id,
                   cust_cd,
                   sale_id
            from tb_sale
            where shop_id=2 and

                      seller_id='km1104rs' and

                device_id is not null and
                actv_dt between '2025-04-01' and '2025-04-30'
        ), sale_gene as (
            select sale_id,
                   (
                       case
                           when length(cust_cd) = 6 then floor((year(curdate()) - concat((
                                 case
                                     when substring(cust_cd, 1,2) > '44' then '19'
                                     when substring(cust_cd, 1,2) <= '44' then '20'
                                     end
                                 ),substring(cust_cd,1,2))) / 10)
                           when length(cust_cd) != 6 then null
                           end
                       ) as generation
            from sale
        ), generation as (
            select g,
                   device_id
            from group_generation g
                     left outer join sale_gene sg on g.g=sg.generation
                     left outer join sale s on s.sale_id=sg.sale_id
        ), weekdays as (
            select g,
                   device_id
            from group_weekday w
                     left outer join sale s on s.days=w.g
        )

        select IFNULL(count(device_id),0) as avg
        from generation
        group by g
 {executed in 2 msec}
2025-04-09 00:23:51.939 INFO  [http-nio-11040-exec-2] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/sale/graph/stat/select/0
2025-04-09 00:23:51.939 INFO  [http-nio-11040-exec-2] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDEyNTgxNSwiZXhwIjoxNzQ0MTI2NDE1LCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.LGTFmcckc4d4WDD7TA6jPBBdxFVSZu05vxrDpZkxasA
2025-04-09 00:23:51.939 INFO  [http-nio-11040-exec-2] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/sale/graph/stat/select/0
2025-04-09 00:23:51.940 INFO  [http-nio-11040-exec-2] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-09 00:23:51.953 DEBUG [http-nio-11040-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 13 msec}
2025-04-09 00:23:51.953 INFO  [http-nio-11040-exec-2] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-09 00:23:51.957 DEBUG [http-nio-11040-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. with base as (select device_id,
                             (SELECT device_nm
                              FROM tb_device
                              WHERE tb_device.device_id = sl.device_id)      as device,
                             sd_id,
                             (SELECT sd_nm
                              FROM tb_second_device
                              WHERE tb_second_device.sd_id = sl.sd_id)       as sec_device,
                             ct_actv_plan,
                             (SELECT ct_plan_nm
                              FROM tb_ct_plan
                              WHERE tb_ct_plan.ct_plan_id = sl.ct_actv_plan) as actv_plan
                      from tb_sale sl
                      where shop_id = 2 and

                                seller_id='km1104rs' and

                        actv_dt between '2025-04-01' and '2025-04-30'),
             device as (SELECT device                   as name,
                               count(device_id) as count
                        from base
                        where device_id is not null
                        group by device),
             sec_device as (SELECT sec_device                   as name,
                                   count(sec_device) as count
                            from base
                            where sd_id is not null
                            group by sec_device),
             actv_plan as (SELECT actv_plan                   as name,
                                  count(actv_plan) as count
                           from base
                           where ct_actv_plan is not null
                           group by actv_plan),
             total as (select count('device') as cnt
                       from base
                       where 'device' is not null
             )

        select name,
               count,
               (
                   IF((select cnt
                       from total) = 0 or count = 0, 0, TRUNCATE(
                              (count / (
                                  select cnt
                                  from total
                              )
                                  ) * 100, 1))
                   ) as per
        from device
        order by per desc
        limit 5
 {executed in 1 msec}
2025-04-09 00:23:51.975 INFO  [http-nio-11040-exec-10] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/sale/graph/ratio/select/0
2025-04-09 00:23:51.975 INFO  [http-nio-11040-exec-10] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDEyNTgxNSwiZXhwIjoxNzQ0MTI2NDE1LCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.LGTFmcckc4d4WDD7TA6jPBBdxFVSZu05vxrDpZkxasA
2025-04-09 00:23:51.975 INFO  [http-nio-11040-exec-10] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/sale/graph/ratio/select/0
2025-04-09 00:23:51.976 INFO  [http-nio-11040-exec-10] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-09 00:23:51.978 DEBUG [http-nio-11040-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 2 msec}
2025-04-09 00:23:51.978 INFO  [http-nio-11040-exec-10] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-09 00:23:51.980 DEBUG [http-nio-11040-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. with recursive istm_range as (
            select 0 as i
            union all
            select i+1
            from istm_range
            where i<5
        ), base as (
            select ct_istm
            from tb_sale
            where shop_id=2 and

                        seller_id='km1104rs' and

                actv_dt between '2025-04-01' and '2025-04-30'
        ), final as (
            select i as istm,
                   IFNULL(count(base.ct_istm),0) as cnt
            from istm_range
                     left outer join base on base.ct_istm=istm_range.i
            group by i
            order by istm desc
        )

        select json_arrayagg(istm) as type,
               json_arrayagg(cnt) as cnt,
               json_arrayagg(IF((
                      select IFNULL(count(ct_istm), 0)
                      from base
                  ) = 0 or cnt = 0, 0, TRUNCATE((cnt/(
                   select IFNULL(count(ct_istm), 0)
                   from base
               )) * 100, 1))) as per
        from final
 {executed in 1 msec}
2025-04-09 00:23:52.030 INFO  [http-nio-11040-exec-7] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/sale/graph/ct/select/0
2025-04-09 00:23:52.030 INFO  [http-nio-11040-exec-7] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDEyNTgxNSwiZXhwIjoxNzQ0MTI2NDE1LCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.LGTFmcckc4d4WDD7TA6jPBBdxFVSZu05vxrDpZkxasA
2025-04-09 00:23:52.030 INFO  [http-nio-11040-exec-7] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/sale/graph/ct/select/0
2025-04-09 00:23:52.031 INFO  [http-nio-11040-exec-7] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-09 00:23:52.033 DEBUG [http-nio-11040-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
2. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 1 msec}
2025-04-09 00:23:52.033 INFO  [http-nio-11040-exec-7] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-09 00:23:52.036 DEBUG [http-nio-11040-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
2. with recursive group_generation as (
            select 0 as g
            union all
            select g+1
            from group_generation
            where g < 8
        ), group_weekday as (
            select 0 as g
            union all
            select g+1
            from group_weekday
            where g < 6
        ),  sale as (
            select weekday(actv_dt) as days,
                   device_id,
                   cust_cd,
                   sale_id
            from tb_sale
            where shop_id=2 and

                      seller_id='km1104rs' and

                device_id is not null and
                actv_dt between '2025-04-01' and '2025-04-30'
        ), sale_gene as (
            select sale_id,
                   (
                       case
                           when length(cust_cd) = 6 then floor((year(curdate()) - concat((
                                 case
                                     when substring(cust_cd, 1,2) > '44' then '19'
                                     when substring(cust_cd, 1,2) <= '44' then '20'
                                     end
                                 ),substring(cust_cd,1,2))) / 10)
                           when length(cust_cd) != 6 then null
                           end
                       ) as generation
            from sale
        ), generation as (
            select g,
                   device_id
            from group_generation g
                     left outer join sale_gene sg on g.g=sg.generation
                     left outer join sale s on s.sale_id=sg.sale_id
        ), weekdays as (
            select g,
                   device_id
            from group_weekday w
                     left outer join sale s on s.days=w.g
        )

        select IFNULL(count(device_id),0) as avg
        from generation
        group by g
 {executed in 2 msec}
2025-04-09 00:23:52.064 INFO  [http-nio-11040-exec-1] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/sale/graph/stat/select/0
2025-04-09 00:23:52.064 INFO  [http-nio-11040-exec-1] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDEyNTgxNSwiZXhwIjoxNzQ0MTI2NDE1LCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.LGTFmcckc4d4WDD7TA6jPBBdxFVSZu05vxrDpZkxasA
2025-04-09 00:23:52.064 INFO  [http-nio-11040-exec-1] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/sale/graph/stat/select/0
2025-04-09 00:23:52.065 INFO  [http-nio-11040-exec-1] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-09 00:23:52.066 DEBUG [http-nio-11040-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
6. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 1 msec}
2025-04-09 00:23:52.067 INFO  [http-nio-11040-exec-1] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-09 00:23:52.070 DEBUG [http-nio-11040-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
6. with base as (select device_id,
                             (SELECT device_nm
                              FROM tb_device
                              WHERE tb_device.device_id = sl.device_id)      as device,
                             sd_id,
                             (SELECT sd_nm
                              FROM tb_second_device
                              WHERE tb_second_device.sd_id = sl.sd_id)       as sec_device,
                             ct_actv_plan,
                             (SELECT ct_plan_nm
                              FROM tb_ct_plan
                              WHERE tb_ct_plan.ct_plan_id = sl.ct_actv_plan) as actv_plan
                      from tb_sale sl
                      where shop_id = 2 and

                                seller_id='km1104rs' and

                        actv_dt between '2025-04-01' and '2025-04-30'),
             device as (SELECT device                   as name,
                               count(device_id) as count
                        from base
                        where device_id is not null
                        group by device),
             sec_device as (SELECT sec_device                   as name,
                                   count(sec_device) as count
                            from base
                            where sd_id is not null
                            group by sec_device),
             actv_plan as (SELECT actv_plan                   as name,
                                  count(actv_plan) as count
                           from base
                           where ct_actv_plan is not null
                           group by actv_plan),
             total as (select count('device') as cnt
                       from base
                       where 'device' is not null
             )

        select name,
               count,
               (
                   IF((select cnt
                       from total) = 0 or count = 0, 0, TRUNCATE(
                              (count / (
                                  select cnt
                                  from total
                              )
                                  ) * 100, 1))
                   ) as per
        from device
        order by per desc
        limit 5
 {executed in 1 msec}
2025-04-09 00:23:52.099 INFO  [http-nio-11040-exec-6] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/sale/graph/ratio/select/0
2025-04-09 00:23:52.099 INFO  [http-nio-11040-exec-6] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDEyNTgxNSwiZXhwIjoxNzQ0MTI2NDE1LCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.LGTFmcckc4d4WDD7TA6jPBBdxFVSZu05vxrDpZkxasA
2025-04-09 00:23:52.099 INFO  [http-nio-11040-exec-6] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/sale/graph/ratio/select/0
2025-04-09 00:23:52.100 INFO  [http-nio-11040-exec-6] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-09 00:23:52.102 DEBUG [http-nio-11040-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
2. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 1 msec}
2025-04-09 00:23:52.102 INFO  [http-nio-11040-exec-6] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-09 00:23:52.104 DEBUG [http-nio-11040-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
2. with recursive istm_range as (
            select 0 as i
            union all
            select i+1
            from istm_range
            where i<5
        ), base as (
            select ct_istm
            from tb_sale
            where shop_id=2 and

                        seller_id='km1104rs' and

                actv_dt between '2025-04-01' and '2025-04-30'
        ), final as (
            select i as istm,
                   IFNULL(count(base.ct_istm),0) as cnt
            from istm_range
                     left outer join base on base.ct_istm=istm_range.i
            group by i
            order by istm desc
        )

        select json_arrayagg(istm) as type,
               json_arrayagg(cnt) as cnt,
               json_arrayagg(IF((
                      select IFNULL(count(ct_istm), 0)
                      from base
                  ) = 0 or cnt = 0, 0, TRUNCATE((cnt/(
                   select IFNULL(count(ct_istm), 0)
                   from base
               )) * 100, 1))) as per
        from final
 {executed in 1 msec}
2025-04-09 00:23:53.706 INFO  [http-nio-11040-exec-5] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/sale/graph/ct/select/1
2025-04-09 00:23:53.706 INFO  [http-nio-11040-exec-5] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDEyNTgxNSwiZXhwIjoxNzQ0MTI2NDE1LCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.LGTFmcckc4d4WDD7TA6jPBBdxFVSZu05vxrDpZkxasA
2025-04-09 00:23:53.706 INFO  [http-nio-11040-exec-5] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/sale/graph/ct/select/1
2025-04-09 00:23:53.709 INFO  [http-nio-11040-exec-5] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-09 00:23:53.711 DEBUG [http-nio-11040-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
5. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 1 msec}
2025-04-09 00:23:53.712 INFO  [http-nio-11040-exec-5] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-09 00:23:53.717 DEBUG [http-nio-11040-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
5. with recursive group_generation as (
            select 0 as g
            union all
            select g+1
            from group_generation
            where g < 8
        ), group_weekday as (
            select 0 as g
            union all
            select g+1
            from group_weekday
            where g < 6
        ),  sale as (
            select weekday(actv_dt) as days,
                   device_id,
                   cust_cd,
                   sale_id
            from tb_sale
            where shop_id=2 and

                      seller_id='km1104rs' and

                device_id is not null and
                actv_dt between '2025-04-01' and '2025-04-30'
        ), sale_gene as (
            select sale_id,
                   (
                       case
                           when length(cust_cd) = 6 then floor((year(curdate()) - concat((
                                 case
                                     when substring(cust_cd, 1,2) > '44' then '19'
                                     when substring(cust_cd, 1,2) <= '44' then '20'
                                     end
                                 ),substring(cust_cd,1,2))) / 10)
                           when length(cust_cd) != 6 then null
                           end
                       ) as generation
            from sale
        ), generation as (
            select g,
                   device_id
            from group_generation g
                     left outer join sale_gene sg on g.g=sg.generation
                     left outer join sale s on s.sale_id=sg.sale_id
        ), weekdays as (
            select g,
                   device_id
            from group_weekday w
                     left outer join sale s on s.days=w.g
        )

        select IFNULL(count(device_id),0) as avg
        from weekdays
        group by g
 {executed in 2 msec}
2025-04-09 00:23:55.050 INFO  [http-nio-11040-exec-8] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/sale/graph/ct/select/0
2025-04-09 00:23:55.050 INFO  [http-nio-11040-exec-8] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDEyNTgxNSwiZXhwIjoxNzQ0MTI2NDE1LCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.LGTFmcckc4d4WDD7TA6jPBBdxFVSZu05vxrDpZkxasA
2025-04-09 00:23:55.050 INFO  [http-nio-11040-exec-8] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/sale/graph/ct/select/0
2025-04-09 00:23:55.052 INFO  [http-nio-11040-exec-8] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-09 00:23:55.055 DEBUG [http-nio-11040-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 2 msec}
2025-04-09 00:23:55.055 INFO  [http-nio-11040-exec-8] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-09 00:23:55.062 DEBUG [http-nio-11040-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. with recursive group_generation as (
            select 0 as g
            union all
            select g+1
            from group_generation
            where g < 8
        ), group_weekday as (
            select 0 as g
            union all
            select g+1
            from group_weekday
            where g < 6
        ),  sale as (
            select weekday(actv_dt) as days,
                   device_id,
                   cust_cd,
                   sale_id
            from tb_sale
            where shop_id=2 and

                      seller_id='km1104rs' and

                device_id is not null and
                actv_dt between '2025-04-01' and '2025-04-30'
        ), sale_gene as (
            select sale_id,
                   (
                       case
                           when length(cust_cd) = 6 then floor((year(curdate()) - concat((
                                 case
                                     when substring(cust_cd, 1,2) > '44' then '19'
                                     when substring(cust_cd, 1,2) <= '44' then '20'
                                     end
                                 ),substring(cust_cd,1,2))) / 10)
                           when length(cust_cd) != 6 then null
                           end
                       ) as generation
            from sale
        ), generation as (
            select g,
                   device_id
            from group_generation g
                     left outer join sale_gene sg on g.g=sg.generation
                     left outer join sale s on s.sale_id=sg.sale_id
        ), weekdays as (
            select g,
                   device_id
            from group_weekday w
                     left outer join sale s on s.days=w.g
        )

        select IFNULL(count(device_id),0) as avg
        from generation
        group by g
 {executed in 2 msec}
2025-04-09 00:24:16.820 INFO  [http-nio-11040-exec-3] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/sale/graph/ct/select/0
2025-04-09 00:24:16.820 INFO  [http-nio-11040-exec-3] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDEyNTgxNSwiZXhwIjoxNzQ0MTI2NDE1LCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.LGTFmcckc4d4WDD7TA6jPBBdxFVSZu05vxrDpZkxasA
2025-04-09 00:24:16.820 INFO  [http-nio-11040-exec-3] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/sale/graph/ct/select/0
2025-04-09 00:24:16.821 INFO  [http-nio-11040-exec-3] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-09 00:24:16.823 DEBUG [http-nio-11040-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
3. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 1 msec}
2025-04-09 00:24:16.823 INFO  [http-nio-11040-exec-3] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-09 00:24:16.825 DEBUG [http-nio-11040-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
3. with recursive group_generation as (
            select 0 as g
            union all
            select g+1
            from group_generation
            where g < 8
        ), group_weekday as (
            select 0 as g
            union all
            select g+1
            from group_weekday
            where g < 6
        ),  sale as (
            select weekday(actv_dt) as days,
                   device_id,
                   cust_cd,
                   sale_id
            from tb_sale
            where shop_id=2 and

                      seller_id='km1104rs' and

                device_id is not null and
                actv_dt between '2025-04-01' and '2025-04-30'
        ), sale_gene as (
            select sale_id,
                   (
                       case
                           when length(cust_cd) = 6 then floor((year(curdate()) - concat((
                                 case
                                     when substring(cust_cd, 1,2) > '44' then '19'
                                     when substring(cust_cd, 1,2) <= '44' then '20'
                                     end
                                 ),substring(cust_cd,1,2))) / 10)
                           when length(cust_cd) != 6 then null
                           end
                       ) as generation
            from sale
        ), generation as (
            select g,
                   device_id
            from group_generation g
                     left outer join sale_gene sg on g.g=sg.generation
                     left outer join sale s on s.sale_id=sg.sale_id
        ), weekdays as (
            select g,
                   device_id
            from group_weekday w
                     left outer join sale s on s.days=w.g
        )

        select IFNULL(count(device_id),0) as avg
        from generation
        group by g
 {executed in 1 msec}
2025-04-09 00:24:27.056 INFO  [http-nio-11040-exec-9] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/sale/graph/ct/select/0
2025-04-09 00:24:27.056 INFO  [http-nio-11040-exec-9] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDEyNTgxNSwiZXhwIjoxNzQ0MTI2NDE1LCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.LGTFmcckc4d4WDD7TA6jPBBdxFVSZu05vxrDpZkxasA
2025-04-09 00:24:27.056 INFO  [http-nio-11040-exec-9] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/sale/graph/ct/select/0
2025-04-09 00:24:27.057 INFO  [http-nio-11040-exec-9] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-09 00:24:27.059 DEBUG [http-nio-11040-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 1 msec}
2025-04-09 00:24:27.059 INFO  [http-nio-11040-exec-9] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-09 00:24:27.062 DEBUG [http-nio-11040-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. with recursive group_generation as (
            select 0 as g
            union all
            select g+1
            from group_generation
            where g < 8
        ), group_weekday as (
            select 0 as g
            union all
            select g+1
            from group_weekday
            where g < 6
        ),  sale as (
            select weekday(actv_dt) as days,
                   device_id,
                   cust_cd,
                   sale_id
            from tb_sale
            where shop_id=2 and

                      seller_id='km1104rs' and

                device_id is not null and
                actv_dt between '2025-04-01' and '2025-04-30'
        ), sale_gene as (
            select sale_id,
                   (
                       case
                           when length(cust_cd) = 6 then floor((year(curdate()) - concat((
                                 case
                                     when substring(cust_cd, 1,2) > '44' then '19'
                                     when substring(cust_cd, 1,2) <= '44' then '20'
                                     end
                                 ),substring(cust_cd,1,2))) / 10)
                           when length(cust_cd) != 6 then null
                           end
                       ) as generation
            from sale
        ), generation as (
            select g,
                   device_id
            from group_generation g
                     left outer join sale_gene sg on g.g=sg.generation
                     left outer join sale s on s.sale_id=sg.sale_id
        ), weekdays as (
            select g,
                   device_id
            from group_weekday w
                     left outer join sale s on s.days=w.g
        )

        select IFNULL(count(device_id),0) as avg
        from generation
        group by g
 {executed in 1 msec}
2025-04-09 00:24:37.387 INFO  [http-nio-11040-exec-4] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/sale/graph/ct/select/0
2025-04-09 00:24:37.387 INFO  [http-nio-11040-exec-4] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDEyNTgxNSwiZXhwIjoxNzQ0MTI2NDE1LCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.LGTFmcckc4d4WDD7TA6jPBBdxFVSZu05vxrDpZkxasA
2025-04-09 00:24:37.387 INFO  [http-nio-11040-exec-4] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/sale/graph/ct/select/0
2025-04-09 00:24:37.388 INFO  [http-nio-11040-exec-4] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-09 00:24:37.389 DEBUG [http-nio-11040-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
4. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 1 msec}
2025-04-09 00:24:37.390 INFO  [http-nio-11040-exec-4] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-09 00:24:37.393 DEBUG [http-nio-11040-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
4. with recursive group_generation as (
            select 0 as g
            union all
            select g+1
            from group_generation
            where g < 8
        ), group_weekday as (
            select 0 as g
            union all
            select g+1
            from group_weekday
            where g < 6
        ),  sale as (
            select weekday(actv_dt) as days,
                   device_id,
                   cust_cd,
                   sale_id
            from tb_sale
            where shop_id=2 and

                      seller_id='km1104rs' and

                device_id is not null and
                actv_dt between '2025-04-01' and '2025-04-30'
        ), sale_gene as (
            select sale_id,
                   (
                       case
                           when length(cust_cd) = 6 then floor((year(curdate()) - concat((
                                 case
                                     when substring(cust_cd, 1,2) > '44' then '19'
                                     when substring(cust_cd, 1,2) <= '44' then '20'
                                     end
                                 ),substring(cust_cd,1,2))) / 10)
                           when length(cust_cd) != 6 then null
                           end
                       ) as generation
            from sale
        ), generation as (
            select g,
                   device_id
            from group_generation g
                     left outer join sale_gene sg on g.g=sg.generation
                     left outer join sale s on s.sale_id=sg.sale_id
        ), weekdays as (
            select g,
                   device_id
            from group_weekday w
                     left outer join sale s on s.days=w.g
        )

        select IFNULL(count(device_id),0) as avg
        from generation
        group by g
 {executed in 2 msec}
2025-04-09 00:24:38.755 INFO  [http-nio-11040-exec-2] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/sale/graph/ct/select/1
2025-04-09 00:24:38.755 INFO  [http-nio-11040-exec-2] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDEyNTgxNSwiZXhwIjoxNzQ0MTI2NDE1LCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.LGTFmcckc4d4WDD7TA6jPBBdxFVSZu05vxrDpZkxasA
2025-04-09 00:24:38.755 INFO  [http-nio-11040-exec-2] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/sale/graph/ct/select/1
2025-04-09 00:24:38.757 INFO  [http-nio-11040-exec-2] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-09 00:24:38.758 DEBUG [http-nio-11040-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 1 msec}
2025-04-09 00:24:38.759 INFO  [http-nio-11040-exec-2] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-09 00:24:38.762 DEBUG [http-nio-11040-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. with recursive group_generation as (
            select 0 as g
            union all
            select g+1
            from group_generation
            where g < 8
        ), group_weekday as (
            select 0 as g
            union all
            select g+1
            from group_weekday
            where g < 6
        ),  sale as (
            select weekday(actv_dt) as days,
                   device_id,
                   cust_cd,
                   sale_id
            from tb_sale
            where shop_id=2 and

                      seller_id='km1104rs' and

                device_id is not null and
                actv_dt between '2025-04-01' and '2025-04-30'
        ), sale_gene as (
            select sale_id,
                   (
                       case
                           when length(cust_cd) = 6 then floor((year(curdate()) - concat((
                                 case
                                     when substring(cust_cd, 1,2) > '44' then '19'
                                     when substring(cust_cd, 1,2) <= '44' then '20'
                                     end
                                 ),substring(cust_cd,1,2))) / 10)
                           when length(cust_cd) != 6 then null
                           end
                       ) as generation
            from sale
        ), generation as (
            select g,
                   device_id
            from group_generation g
                     left outer join sale_gene sg on g.g=sg.generation
                     left outer join sale s on s.sale_id=sg.sale_id
        ), weekdays as (
            select g,
                   device_id
            from group_weekday w
                     left outer join sale s on s.days=w.g
        )

        select IFNULL(count(device_id),0) as avg
        from weekdays
        group by g
 {executed in 2 msec}
2025-04-09 00:24:39.410 INFO  [http-nio-11040-exec-10] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/sale/graph/ct/select/0
2025-04-09 00:24:39.411 INFO  [http-nio-11040-exec-10] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDEyNTgxNSwiZXhwIjoxNzQ0MTI2NDE1LCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.LGTFmcckc4d4WDD7TA6jPBBdxFVSZu05vxrDpZkxasA
2025-04-09 00:24:39.411 INFO  [http-nio-11040-exec-10] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/sale/graph/ct/select/0
2025-04-09 00:24:39.413 INFO  [http-nio-11040-exec-10] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-09 00:24:39.417 DEBUG [http-nio-11040-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 2 msec}
2025-04-09 00:24:39.417 INFO  [http-nio-11040-exec-10] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-09 00:24:39.423 DEBUG [http-nio-11040-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. with recursive group_generation as (
            select 0 as g
            union all
            select g+1
            from group_generation
            where g < 8
        ), group_weekday as (
            select 0 as g
            union all
            select g+1
            from group_weekday
            where g < 6
        ),  sale as (
            select weekday(actv_dt) as days,
                   device_id,
                   cust_cd,
                   sale_id
            from tb_sale
            where shop_id=2 and

                      seller_id='km1104rs' and

                device_id is not null and
                actv_dt between '2025-04-01' and '2025-04-30'
        ), sale_gene as (
            select sale_id,
                   (
                       case
                           when length(cust_cd) = 6 then floor((year(curdate()) - concat((
                                 case
                                     when substring(cust_cd, 1,2) > '44' then '19'
                                     when substring(cust_cd, 1,2) <= '44' then '20'
                                     end
                                 ),substring(cust_cd,1,2))) / 10)
                           when length(cust_cd) != 6 then null
                           end
                       ) as generation
            from sale
        ), generation as (
            select g,
                   device_id
            from group_generation g
                     left outer join sale_gene sg on g.g=sg.generation
                     left outer join sale s on s.sale_id=sg.sale_id
        ), weekdays as (
            select g,
                   device_id
            from group_weekday w
                     left outer join sale s on s.days=w.g
        )

        select IFNULL(count(device_id),0) as avg
        from generation
        group by g
 {executed in 2 msec}
2025-04-09 00:24:44.227 INFO  [http-nio-11040-exec-7] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/sale/graph/ct/select/1
2025-04-09 00:24:44.227 INFO  [http-nio-11040-exec-7] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDEyNTgxNSwiZXhwIjoxNzQ0MTI2NDE1LCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.LGTFmcckc4d4WDD7TA6jPBBdxFVSZu05vxrDpZkxasA
2025-04-09 00:24:44.228 INFO  [http-nio-11040-exec-7] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/sale/graph/ct/select/1
2025-04-09 00:24:44.230 INFO  [http-nio-11040-exec-7] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-09 00:24:44.232 DEBUG [http-nio-11040-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
2. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 1 msec}
2025-04-09 00:24:44.233 INFO  [http-nio-11040-exec-7] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-09 00:24:44.239 DEBUG [http-nio-11040-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
2. with recursive group_generation as (
            select 0 as g
            union all
            select g+1
            from group_generation
            where g < 8
        ), group_weekday as (
            select 0 as g
            union all
            select g+1
            from group_weekday
            where g < 6
        ),  sale as (
            select weekday(actv_dt) as days,
                   device_id,
                   cust_cd,
                   sale_id
            from tb_sale
            where shop_id=2 and

                      seller_id='km1104rs' and

                device_id is not null and
                actv_dt between '2025-04-01' and '2025-04-30'
        ), sale_gene as (
            select sale_id,
                   (
                       case
                           when length(cust_cd) = 6 then floor((year(curdate()) - concat((
                                 case
                                     when substring(cust_cd, 1,2) > '44' then '19'
                                     when substring(cust_cd, 1,2) <= '44' then '20'
                                     end
                                 ),substring(cust_cd,1,2))) / 10)
                           when length(cust_cd) != 6 then null
                           end
                       ) as generation
            from sale
        ), generation as (
            select g,
                   device_id
            from group_generation g
                     left outer join sale_gene sg on g.g=sg.generation
                     left outer join sale s on s.sale_id=sg.sale_id
        ), weekdays as (
            select g,
                   device_id
            from group_weekday w
                     left outer join sale s on s.days=w.g
        )

        select IFNULL(count(device_id),0) as avg
        from weekdays
        group by g
 {executed in 1 msec}
2025-04-09 00:24:44.800 INFO  [http-nio-11040-exec-1] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/sale/graph/ct/select/0
2025-04-09 00:24:44.801 INFO  [http-nio-11040-exec-1] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDEyNTgxNSwiZXhwIjoxNzQ0MTI2NDE1LCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.LGTFmcckc4d4WDD7TA6jPBBdxFVSZu05vxrDpZkxasA
2025-04-09 00:24:44.801 INFO  [http-nio-11040-exec-1] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/sale/graph/ct/select/0
2025-04-09 00:24:44.802 INFO  [http-nio-11040-exec-1] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-09 00:24:44.805 DEBUG [http-nio-11040-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
6. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 2 msec}
2025-04-09 00:24:44.805 INFO  [http-nio-11040-exec-1] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-09 00:24:44.811 DEBUG [http-nio-11040-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
6. with recursive group_generation as (
            select 0 as g
            union all
            select g+1
            from group_generation
            where g < 8
        ), group_weekday as (
            select 0 as g
            union all
            select g+1
            from group_weekday
            where g < 6
        ),  sale as (
            select weekday(actv_dt) as days,
                   device_id,
                   cust_cd,
                   sale_id
            from tb_sale
            where shop_id=2 and

                      seller_id='km1104rs' and

                device_id is not null and
                actv_dt between '2025-04-01' and '2025-04-30'
        ), sale_gene as (
            select sale_id,
                   (
                       case
                           when length(cust_cd) = 6 then floor((year(curdate()) - concat((
                                 case
                                     when substring(cust_cd, 1,2) > '44' then '19'
                                     when substring(cust_cd, 1,2) <= '44' then '20'
                                     end
                                 ),substring(cust_cd,1,2))) / 10)
                           when length(cust_cd) != 6 then null
                           end
                       ) as generation
            from sale
        ), generation as (
            select g,
                   device_id
            from group_generation g
                     left outer join sale_gene sg on g.g=sg.generation
                     left outer join sale s on s.sale_id=sg.sale_id
        ), weekdays as (
            select g,
                   device_id
            from group_weekday w
                     left outer join sale s on s.days=w.g
        )

        select IFNULL(count(device_id),0) as avg
        from generation
        group by g
 {executed in 2 msec}
2025-04-09 00:24:46.260 INFO  [http-nio-11040-exec-6] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/sale/graph/ct/select/1
2025-04-09 00:24:46.260 INFO  [http-nio-11040-exec-6] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDEyNTgxNSwiZXhwIjoxNzQ0MTI2NDE1LCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.LGTFmcckc4d4WDD7TA6jPBBdxFVSZu05vxrDpZkxasA
2025-04-09 00:24:46.260 INFO  [http-nio-11040-exec-6] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/sale/graph/ct/select/1
2025-04-09 00:24:46.262 INFO  [http-nio-11040-exec-6] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-09 00:24:46.265 DEBUG [http-nio-11040-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
2. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 2 msec}
2025-04-09 00:24:46.266 INFO  [http-nio-11040-exec-6] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-09 00:24:46.272 DEBUG [http-nio-11040-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
2. with recursive group_generation as (
            select 0 as g
            union all
            select g+1
            from group_generation
            where g < 8
        ), group_weekday as (
            select 0 as g
            union all
            select g+1
            from group_weekday
            where g < 6
        ),  sale as (
            select weekday(actv_dt) as days,
                   device_id,
                   cust_cd,
                   sale_id
            from tb_sale
            where shop_id=2 and

                      seller_id='km1104rs' and

                device_id is not null and
                actv_dt between '2025-04-01' and '2025-04-30'
        ), sale_gene as (
            select sale_id,
                   (
                       case
                           when length(cust_cd) = 6 then floor((year(curdate()) - concat((
                                 case
                                     when substring(cust_cd, 1,2) > '44' then '19'
                                     when substring(cust_cd, 1,2) <= '44' then '20'
                                     end
                                 ),substring(cust_cd,1,2))) / 10)
                           when length(cust_cd) != 6 then null
                           end
                       ) as generation
            from sale
        ), generation as (
            select g,
                   device_id
            from group_generation g
                     left outer join sale_gene sg on g.g=sg.generation
                     left outer join sale s on s.sale_id=sg.sale_id
        ), weekdays as (
            select g,
                   device_id
            from group_weekday w
                     left outer join sale s on s.days=w.g
        )

        select IFNULL(count(device_id),0) as avg
        from weekdays
        group by g
 {executed in 2 msec}
2025-04-09 00:24:47.198 INFO  [http-nio-11040-exec-5] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/sale/graph/ct/select/0
2025-04-09 00:24:47.199 INFO  [http-nio-11040-exec-5] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDEyNTgxNSwiZXhwIjoxNzQ0MTI2NDE1LCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.LGTFmcckc4d4WDD7TA6jPBBdxFVSZu05vxrDpZkxasA
2025-04-09 00:24:47.199 INFO  [http-nio-11040-exec-5] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/sale/graph/ct/select/0
2025-04-09 00:24:47.202 INFO  [http-nio-11040-exec-5] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-09 00:24:47.205 DEBUG [http-nio-11040-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
5. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 2 msec}
2025-04-09 00:24:47.205 INFO  [http-nio-11040-exec-5] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-09 00:24:47.211 DEBUG [http-nio-11040-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
5. with recursive group_generation as (
            select 0 as g
            union all
            select g+1
            from group_generation
            where g < 8
        ), group_weekday as (
            select 0 as g
            union all
            select g+1
            from group_weekday
            where g < 6
        ),  sale as (
            select weekday(actv_dt) as days,
                   device_id,
                   cust_cd,
                   sale_id
            from tb_sale
            where shop_id=2 and

                      seller_id='km1104rs' and

                device_id is not null and
                actv_dt between '2025-04-01' and '2025-04-30'
        ), sale_gene as (
            select sale_id,
                   (
                       case
                           when length(cust_cd) = 6 then floor((year(curdate()) - concat((
                                 case
                                     when substring(cust_cd, 1,2) > '44' then '19'
                                     when substring(cust_cd, 1,2) <= '44' then '20'
                                     end
                                 ),substring(cust_cd,1,2))) / 10)
                           when length(cust_cd) != 6 then null
                           end
                       ) as generation
            from sale
        ), generation as (
            select g,
                   device_id
            from group_generation g
                     left outer join sale_gene sg on g.g=sg.generation
                     left outer join sale s on s.sale_id=sg.sale_id
        ), weekdays as (
            select g,
                   device_id
            from group_weekday w
                     left outer join sale s on s.days=w.g
        )

        select IFNULL(count(device_id),0) as avg
        from generation
        group by g
 {executed in 2 msec}
2025-04-09 00:25:01.064 INFO  [http-nio-11040-exec-8] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/sale/graph/ct/select/0
2025-04-09 00:25:01.064 INFO  [http-nio-11040-exec-8] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDEyNTgxNSwiZXhwIjoxNzQ0MTI2NDE1LCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.LGTFmcckc4d4WDD7TA6jPBBdxFVSZu05vxrDpZkxasA
2025-04-09 00:25:01.064 INFO  [http-nio-11040-exec-8] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/sale/graph/ct/select/0
2025-04-09 00:25:01.065 INFO  [http-nio-11040-exec-8] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-09 00:25:01.067 DEBUG [http-nio-11040-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 1 msec}
2025-04-09 00:25:01.067 INFO  [http-nio-11040-exec-8] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-09 00:25:01.071 DEBUG [http-nio-11040-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. with recursive group_generation as (
            select 0 as g
            union all
            select g+1
            from group_generation
            where g < 8
        ), group_weekday as (
            select 0 as g
            union all
            select g+1
            from group_weekday
            where g < 6
        ),  sale as (
            select weekday(actv_dt) as days,
                   device_id,
                   cust_cd,
                   sale_id
            from tb_sale
            where shop_id=2 and

                      seller_id='km1104rs' and

                device_id is not null and
                actv_dt between '2025-04-01' and '2025-04-30'
        ), sale_gene as (
            select sale_id,
                   (
                       case
                           when length(cust_cd) = 6 then floor((year(curdate()) - concat((
                                 case
                                     when substring(cust_cd, 1,2) > '44' then '19'
                                     when substring(cust_cd, 1,2) <= '44' then '20'
                                     end
                                 ),substring(cust_cd,1,2))) / 10)
                           when length(cust_cd) != 6 then null
                           end
                       ) as generation
            from sale
        ), generation as (
            select g,
                   device_id
            from group_generation g
                     left outer join sale_gene sg on g.g=sg.generation
                     left outer join sale s on s.sale_id=sg.sale_id
        ), weekdays as (
            select g,
                   device_id
            from group_weekday w
                     left outer join sale s on s.days=w.g
        )

        select IFNULL(count(device_id),0) as avg
        from generation
        group by g
 {executed in 2 msec}
2025-04-09 00:25:02.811 INFO  [http-nio-11040-exec-3] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/sale/graph/ct/select/1
2025-04-09 00:25:02.811 INFO  [http-nio-11040-exec-3] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDEyNTgxNSwiZXhwIjoxNzQ0MTI2NDE1LCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.LGTFmcckc4d4WDD7TA6jPBBdxFVSZu05vxrDpZkxasA
2025-04-09 00:25:02.811 INFO  [http-nio-11040-exec-3] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/sale/graph/ct/select/1
2025-04-09 00:25:02.812 INFO  [http-nio-11040-exec-3] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-09 00:25:02.815 DEBUG [http-nio-11040-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
3. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 1 msec}
2025-04-09 00:25:02.815 INFO  [http-nio-11040-exec-3] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-09 00:25:02.821 DEBUG [http-nio-11040-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
3. with recursive group_generation as (
            select 0 as g
            union all
            select g+1
            from group_generation
            where g < 8
        ), group_weekday as (
            select 0 as g
            union all
            select g+1
            from group_weekday
            where g < 6
        ),  sale as (
            select weekday(actv_dt) as days,
                   device_id,
                   cust_cd,
                   sale_id
            from tb_sale
            where shop_id=2 and

                      seller_id='km1104rs' and

                device_id is not null and
                actv_dt between '2025-04-01' and '2025-04-30'
        ), sale_gene as (
            select sale_id,
                   (
                       case
                           when length(cust_cd) = 6 then floor((year(curdate()) - concat((
                                 case
                                     when substring(cust_cd, 1,2) > '44' then '19'
                                     when substring(cust_cd, 1,2) <= '44' then '20'
                                     end
                                 ),substring(cust_cd,1,2))) / 10)
                           when length(cust_cd) != 6 then null
                           end
                       ) as generation
            from sale
        ), generation as (
            select g,
                   device_id
            from group_generation g
                     left outer join sale_gene sg on g.g=sg.generation
                     left outer join sale s on s.sale_id=sg.sale_id
        ), weekdays as (
            select g,
                   device_id
            from group_weekday w
                     left outer join sale s on s.days=w.g
        )

        select IFNULL(count(device_id),0) as avg
        from weekdays
        group by g
 {executed in 2 msec}
2025-04-09 00:25:03.418 INFO  [http-nio-11040-exec-9] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/sale/graph/ct/select/0
2025-04-09 00:25:03.418 INFO  [http-nio-11040-exec-9] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDEyNTgxNSwiZXhwIjoxNzQ0MTI2NDE1LCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.LGTFmcckc4d4WDD7TA6jPBBdxFVSZu05vxrDpZkxasA
2025-04-09 00:25:03.418 INFO  [http-nio-11040-exec-9] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/sale/graph/ct/select/0
2025-04-09 00:25:03.420 INFO  [http-nio-11040-exec-9] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-09 00:25:03.422 DEBUG [http-nio-11040-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 1 msec}
2025-04-09 00:25:03.423 INFO  [http-nio-11040-exec-9] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-09 00:25:03.428 DEBUG [http-nio-11040-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. with recursive group_generation as (
            select 0 as g
            union all
            select g+1
            from group_generation
            where g < 8
        ), group_weekday as (
            select 0 as g
            union all
            select g+1
            from group_weekday
            where g < 6
        ),  sale as (
            select weekday(actv_dt) as days,
                   device_id,
                   cust_cd,
                   sale_id
            from tb_sale
            where shop_id=2 and

                      seller_id='km1104rs' and

                device_id is not null and
                actv_dt between '2025-04-01' and '2025-04-30'
        ), sale_gene as (
            select sale_id,
                   (
                       case
                           when length(cust_cd) = 6 then floor((year(curdate()) - concat((
                                 case
                                     when substring(cust_cd, 1,2) > '44' then '19'
                                     when substring(cust_cd, 1,2) <= '44' then '20'
                                     end
                                 ),substring(cust_cd,1,2))) / 10)
                           when length(cust_cd) != 6 then null
                           end
                       ) as generation
            from sale
        ), generation as (
            select g,
                   device_id
            from group_generation g
                     left outer join sale_gene sg on g.g=sg.generation
                     left outer join sale s on s.sale_id=sg.sale_id
        ), weekdays as (
            select g,
                   device_id
            from group_weekday w
                     left outer join sale s on s.days=w.g
        )

        select IFNULL(count(device_id),0) as avg
        from generation
        group by g
 {executed in 2 msec}
2025-04-09 00:25:25.194 INFO  [http-nio-11040-exec-4] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/sale/graph/ct/select/0
2025-04-09 00:25:25.195 INFO  [http-nio-11040-exec-4] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDEyNTgxNSwiZXhwIjoxNzQ0MTI2NDE1LCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.LGTFmcckc4d4WDD7TA6jPBBdxFVSZu05vxrDpZkxasA
2025-04-09 00:25:25.195 INFO  [http-nio-11040-exec-4] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/sale/graph/ct/select/0
2025-04-09 00:25:25.195 INFO  [http-nio-11040-exec-4] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-09 00:25:25.197 DEBUG [http-nio-11040-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
4. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 1 msec}
2025-04-09 00:25:25.197 INFO  [http-nio-11040-exec-4] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-09 00:25:25.200 DEBUG [http-nio-11040-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
4. with recursive group_generation as (
            select 0 as g
            union all
            select g+1
            from group_generation
            where g < 8
        ), group_weekday as (
            select 0 as g
            union all
            select g+1
            from group_weekday
            where g < 6
        ),  sale as (
            select weekday(actv_dt) as days,
                   device_id,
                   cust_cd,
                   sale_id
            from tb_sale
            where shop_id=2 and

                      seller_id='km1104rs' and

                device_id is not null and
                actv_dt between '2025-04-01' and '2025-04-30'
        ), sale_gene as (
            select sale_id,
                   (
                       case
                           when length(cust_cd) = 6 then floor((year(curdate()) - concat((
                                 case
                                     when substring(cust_cd, 1,2) > '44' then '19'
                                     when substring(cust_cd, 1,2) <= '44' then '20'
                                     end
                                 ),substring(cust_cd,1,2))) / 10)
                           when length(cust_cd) != 6 then null
                           end
                       ) as generation
            from sale
        ), generation as (
            select g,
                   device_id
            from group_generation g
                     left outer join sale_gene sg on g.g=sg.generation
                     left outer join sale s on s.sale_id=sg.sale_id
        ), weekdays as (
            select g,
                   device_id
            from group_weekday w
                     left outer join sale s on s.days=w.g
        )

        select IFNULL(count(device_id),0) as avg
        from generation
        group by g
 {executed in 1 msec}
2025-04-09 00:25:58.778 INFO  [http-nio-11040-exec-2] [com.momo.filter.JwtAuthorizationFilter] - security filter: http://localhost:11040/api/v1/sale/graph/ct/select/0
2025-04-09 00:25:58.778 INFO  [http-nio-11040-exec-2] [com.momo.filter.JwtAuthorizationFilter] - access token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJrbTExMDRycyIsImlhdCI6MTc0NDEyNTgxNSwiZXhwIjoxNzQ0MTI2NDE1LCJhdXRob3JpdGllcyI6IlJPTEVfTk9ORSJ9.LGTFmcckc4d4WDD7TA6jPBBdxFVSZu05vxrDpZkxasA
2025-04-09 00:25:58.778 INFO  [http-nio-11040-exec-2] [com.momo.filter.JwtAuthorizationFilter] - from url: http://localhost:11040/api/v1/sale/graph/ct/select/0
2025-04-09 00:25:58.779 INFO  [http-nio-11040-exec-2] [com.momo.provider.JwtProvider] - get authentication username : km1104rs
2025-04-09 00:25:58.781 DEBUG [http-nio-11040-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT ac.id,
               ac.pwd,
               (
                   select IFNULL(sf.role, -1)
                   from tb_staff sf
                   where ac.curr_shop_id = sf.shop_id and
                         ac.id = sf.staff_id
                   ) as role
        from tb_account ac
        where id='km1104rs'
 {executed in 1 msec}
2025-04-09 00:25:58.781 INFO  [http-nio-11040-exec-2] [com.momo.filter.JwtAuthorizationFilter] - Security Context에 'km1104rs' 인증 정보를 저장했습니다
2025-04-09 00:25:58.784 DEBUG [http-nio-11040-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. with recursive group_generation as (
            select 0 as g
            union all
            select g+1
            from group_generation
            where g < 8
        ), group_weekday as (
            select 0 as g
            union all
            select g+1
            from group_weekday
            where g < 6
        ),  sale as (
            select weekday(actv_dt) as days,
                   device_id,
                   cust_cd,
                   sale_id
            from tb_sale
            where shop_id=2 and

                      seller_id='km1104rs' and

                device_id is not null and
                actv_dt between '2025-04-01' and '2025-04-30'
        ), sale_gene as (
            select sale_id,
                   (
                       case
                           when length(cust_cd) = 6 then floor((year(curdate()) - concat((
                                 case
                                     when substring(cust_cd, 1,2) > '44' then '19'
                                     when substring(cust_cd, 1,2) <= '44' then '20'
                                     end
                                 ),substring(cust_cd,1,2))) / 10)
                           when length(cust_cd) != 6 then null
                           end
                       ) as generation
            from sale
        ), generation as (
            select g,
                   device_id
            from group_generation g
                     left outer join sale_gene sg on g.g=sg.generation
                     left outer join sale s on s.sale_id=sg.sale_id
        ), weekdays as (
            select g,
                   device_id
            from group_weekday w
                     left outer join sale s on s.days=w.g
        )

        select IFNULL(count(device_id),0) as avg
        from generation
        group by g
 {executed in 2 msec}
2025-04-09 00:26:45.749 INFO  [SpringApplicationShutdownHook] [o.s.m.s.b.SimpleBrokerMessageHandler] - Stopping...
2025-04-09 00:26:45.750 INFO  [SpringApplicationShutdownHook] [o.s.m.s.b.SimpleBrokerMessageHandler] - BrokerAvailabilityEvent[available=false, SimpleBrokerMessageHandler [org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry@479e66cc]]
2025-04-09 00:26:45.750 INFO  [SpringApplicationShutdownHook] [o.s.m.s.b.SimpleBrokerMessageHandler] - Stopped.
2025-04-09 00:26:45.750 INFO  [SpringApplicationShutdownHook] [org.quartz.core.QuartzScheduler] - Scheduler quartzScheduler_$_NON_CLUSTERED paused.
2025-04-09 00:26:45.755 INFO  [SpringApplicationShutdownHook] [o.s.s.quartz.SchedulerFactoryBean] - Shutting down Quartz Scheduler
2025-04-09 00:26:45.755 INFO  [SpringApplicationShutdownHook] [org.quartz.core.QuartzScheduler] - Scheduler quartzScheduler_$_NON_CLUSTERED shutting down.
2025-04-09 00:26:45.755 INFO  [SpringApplicationShutdownHook] [org.quartz.core.QuartzScheduler] - Scheduler quartzScheduler_$_NON_CLUSTERED paused.
2025-04-09 00:26:45.755 INFO  [SpringApplicationShutdownHook] [org.quartz.core.QuartzScheduler] - Scheduler quartzScheduler_$_NON_CLUSTERED shutdown complete.
